From digitalwarfare at gmail.com  Sat Aug  1 03:41:57 2009
From: digitalwarfare at gmail.com (Suhail Doshi)
Date: Fri, 31 Jul 2009 19:41:57 -0700
Subject: [rabbitmq-discuss] erlang-client issue, discarding content?
In-Reply-To: <376f3e6f0907311233n21d323ah9e09e77ea6fc3b38@mail.gmail.com>
References: <376f3e6f0907301222o2742e210idc0c68a89fa37fa1@mail.gmail.com> 
	<376f3e6f0907301239u4600175al32b2b5f3b5af5137@mail.gmail.com> 
	<4A71F8AF.2040406@lshift.net>
	<376f3e6f0907301252n773969abs220067999d1aed5f@mail.gmail.com> 
	<376f3e6f0907301254q7d87c1f2lb14db6123422dfb7@mail.gmail.com> 
	<376f3e6f0907301315s76a305eatd9b909cfc0e2e914@mail.gmail.com> 
	<4A721386.5070406@lshift.net>
	<376f3e6f0907301512k2fb1cc8j5bc3f3739f40302d@mail.gmail.com> 
	<4A722ECC.1070903@lshift.net>
	<376f3e6f0907311233n21d323ah9e09e77ea6fc3b38@mail.gmail.com>
Message-ID: <376f3e6f0907311941o6324dd83ufb9a226a2319a2d1@mail.gmail.com>

Hi,
So I stumbled across this:
http://www.lshift.net/blog/2008/11/14/tracing-python-memory-leaks

I basically keep the channel object and connection open the entire time so I
do not do the statup stuff over and over, is this a bad idea? Once the
channel has been retrieved, my consumer doesn't deal with it again, it just
keeps accept requests from it. I don't see any global objects of mine
increasing in size so I can only think I am doing something wrong from a
rabbitmq perspective.

def connect_consumer():
    consumer = EventQueueConsumer()
    channel = consumer.get_channel()

    logging.info("Consumer started")

    while True:
        channel.wait()

On Fri, Jul 31, 2009 at 12:33 PM, Suhail Doshi <digitalwarfare at gmail.com>wrote:

> The memory leak is in the consumers, thanks Matthias.
> Suhail
>
>
> On Thu, Jul 30, 2009 at 4:37 PM, Matthias Radestock <matthias at lshift.net>wrote:
>
>> Suhail,
>>
>> Suhail Doshi wrote:
>>
>>> Yeah definitely has to be, the moment I kill it the memory drops back
>>> down and it is gradually growing, you can even see it gradually growing in
>>> the images.
>>>
>>
>> Do you definitely see the rabbit process consuming the memory? How big
>> does it get? And what about CPU usage?
>>
>> The reason I am asking is that killing the server also affects the
>> clients, i.e. it is possible that a *client* is consuming all the memory,
>> and releases it as soon as the server connection is severed.
>>
>> So please check the *per-process* memory and CPU stats.
>>
>> Now, if it really is the server that is eating the memory, please run all
>> the various list_* commands in rabbitmqctl to see whether any of them are
>> showing growth.
>>
>> Finally, try publishing messages without marking them as persistent, and
>> see whether that changes the behaviour.
>>
>>
>> Regards,
>>
>> Matthias.
>>
>
>
>
> --
> http://mixpanel.com
> Blog: http://blog.mixpanel.com
>



-- 
http://mixpanel.com
Blog: http://blog.mixpanel.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090731/75b15c48/attachment.htm 

From 0x6e6562 at gmail.com  Mon Aug  3 00:18:05 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 3 Aug 2009 00:18:05 +0100
Subject: [rabbitmq-discuss] client and server versioning
In-Reply-To: <e55356640907310144m258a52eekf7af4795dcdcb951@mail.gmail.com>
References: <e55356640907310144m258a52eekf7af4795dcdcb951@mail.gmail.com>
Message-ID: <269388e30908021618j62a6b58bo25d94e8153bc0671@mail.gmail.com>

Juhani,

On Fri, Jul 31, 2009 at 9:44 AM, Juhani R?nkimies<juhani at juranki.com> wrote:
> Am I asking for trouble if I follow erlang-client default branch and
> keep the server at 1.6.0?
> I'd be using network connection.

Until the Erlang client is officially released, following the default
branch of the client is pretty much your only reasonably stable
option. Given that you can now build loadable bundles for the modules
specific to the client and for the shared modules and your client is
running in a different VM, you should fair well.

Ben



From cuonglb at facemain.com  Mon Aug  3 08:51:12 2009
From: cuonglb at facemain.com (Cuong Le)
Date: Mon, 3 Aug 2009 14:51:12 +0700
Subject: [rabbitmq-discuss] simple.publish over the JSON RPC interface
In-Reply-To: <65a6e3960907301628q2baac55ck59509244e8e8429f@mail.gmail.com>
References: <65a6e3960907301628q2baac55ck59509244e8e8429f@mail.gmail.com>
Message-ID: <aae1003d0908030051n736e2eb4o7d2817db8a6e0e48@mail.gmail.com>

Hi,

You must re-check exchange type of it (this is a topic exchange) and
consumer code (make exchange/queue, and bind exchange with queue).

* gen_server make proc cast for a long time and until timeout it will arise
error {error, timeout}.

Cuong

On Fri, Jul 31, 2009 at 6:28 AM, Nathan Gray <n8gray at n8gray.org> wrote:

> I'm trying to use the rabbitmq-http2 bridge to create exchanges and
> send messages to them via http/jsonrpc.  Creating an exchange works
> fine but sending a message doesn't.  I'm using a simple python client
> and I've generated the following request object:
>
> {"version":"1.1",
> "method": "cast",
> "params": [
>  "basic.publish",
>  [1, "amq.topic", "this.that", false, false],
>  "Hello world!",
>  [null, null, null, null, null, null, null, null, null, null, null,
> null, null, null]],
> "id": 0}
>
> AFAICT this is essentially the same as the example given in this posting:
> http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-April/003882.html
>
> But this is what I get as a response (sorry for the formatting):
>
> {"version":"1.1",
> "id":0,
> "error":
> { "name":"JSONRPCError",
>  "code":500,
>  "message":"Internal error",
>  "error":"{timeout,\n    {gen_server,call,\n        [<0.432.0>,\n
>    {jsonrpc,<<\"cast\">>,\n             {obj,\n
> [{\"http_method\",<<\"POST\">>},\n
> {\"http_query_parameters\",{obj,[]}},\n
> {\"http_headers\",\n                   {obj,\n
> [{\"user-agent\",<<\"python\">>},\n
> {\"accept\",<<\"application/json\">>},\n
> {\"content-type\",<<\"application/json\">>},\n
> {\"content-length\",<<\"220\">>},\n
> {\"accept-encoding\",<<\"identity\">>},\n
> {\"host\",<<\"localhost:55672\">>}]}},\n
> {\"remote_port\",61595},\n
> {\"remote_peername\",<<\"0:0:0:0:0:0:0:1\">>},\n
> {\"scheme\",<<\"http\">>}]},\n             [<<\"basic.publish\">>,\n
>           [1,<<\"amq.topic\">>,<<\"this.that\">>,false,false],\n
>        <<\"Hello world!\">>,\n
> [null,null,null,null,null,null,null,null,null,null,null,null,\n
>       null,null]]}]}}"
> }}
>
> Can anybody explain what I've done wrong?
>
> Thanks!
> -n8
>
> PS: Please CC me with replies.
>
> --
> http://n8gray.org
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090803/86819f28/attachment.htm 

From Alister.Morton at tradition.com  Mon Aug  3 09:28:33 2009
From: Alister.Morton at tradition.com (Alister Morton)
Date: Mon, 3 Aug 2009 09:28:33 +0100
Subject: [rabbitmq-discuss] FW:  rabbitmqctl with window services
In-Reply-To: <C3F648C3620DC6488A18F7F1BBC18F1A02380D@ex01kguk.Gazpromuk.intra>
References: <009701ca11f4$aa85ac60$ff910520$@grice@logosworld.com>
	<5A46D132C446C04B9EFE8AD14E7891066EE871993F@SVR-2K3-BH-EMC.tradition.int>
	<C3F648C3620DC6488A18F7F1BBC18F1A02380D@ex01kguk.Gazpromuk.intra>
Message-ID: <5A46D132C446C04B9EFE8AD14E7891066EE871998E@SVR-2K3-BH-EMC.tradition.int>

The solution is to synchronise the .erlang.cookie files between the service and the controller, which I think is sub optimal if you want to administer more than one service on multiple platforms, unless I'm missing something.

Administering the broker is really important.

________________________________
From: rabbitmq-discuss-bounces at lists.rabbitmq.com [mailto:rabbitmq-discuss-bounces at lists.rabbitmq.com] On Behalf Of Sam Owen
Sent: 31 July 2009 17:14
To: Alister Morton; rabbitmq
Subject: Re: [rabbitmq-discuss] FW: rabbitmqctl with window services

Indeed - we use service accounts to run our production services - using these I'm seeing the same problem.
Is there workaround - or should I raise a bug?
Sam
________________________________
From: rabbitmq-discuss-bounces at lists.rabbitmq.com [mailto:rabbitmq-discuss-bounces at lists.rabbitmq.com] On Behalf Of Alister Morton
Sent: 31 July 2009 16:48
To: 'rabbitmq'
Subject: Re: [rabbitmq-discuss] FW: rabbitmqctl with window services
I think I had the same issue before on windows....simply go to the RabbitMQ service...right click-> properties..... and change the LOGON user to be your username + password....then RabbitMQ should start up and all should be cool ;-)
That's a bit of a nasty kludge, though. Usually in a production environment you don't want services logging on with real user credentials.
________________________________
The information herein may have been obtained from various sources. Any opinion expressed may be that of the sender only, is subject to change without notice and should be independently evaluated. Nothing herein constitutes investment advice or an offer, or solicitation of an offer, to buy or sell any financial product. Any data consists of purely indicative prices and should not be relied upon to revalue any commercial positions held by any recipient. Tradition makes no warranty that the data represent or indicates prices at which transactions may be or have been made by any Tradition Group company. To the maximum extent of the law, Tradition accepts no responsibility for, and cannot and does not warrant the integrity, accuracy, quality, completeness, merchantability or suitability for a particular purpose or requirement of the information or data, even if arising out of the negligence of Tradition or otherwise. Tradition accepts no liability for any direct, indirect or other consequential loss arising out of any use of the information contained in this document or any omission from it. This communication is directed at Eligible Counterparties and Professional Clients as defined by the FSA. It is not for distribution to nor should it be relied upon by Private Clients. It is not intended for distribution to, or use by any person or entity in any jurisdiction or country where such distribution or use would be contrary to any applicable law or regulation. Please note that, for business or compliance reasons, we may monitor and read emails sent or received using our servers or equipment. Tradition (UK) Ltd (937647; FSA 139200), Tradition Financial Services Ltd (1046064; FSA 147543), TFS Derivatives Ltd (4051930; FSA 197244), Tradition London Clearing Ltd (3633863; FSA 190632) and TFS-ICAP Ltd (4025995; FSA 206018) registered in England at Beaufort House, 15 St Botolph Street, London EC3A 7QX; authorised and regulated by the Financial Services Authority. VAT No: GB 365 4639 27 except TFS-ICAP GB 766 0854 05.


<http://www.blackspider.com/>



The information transmitted is the property of Gazprom Marketing & Trading Ltd and is intended only for the person or entity to which it is addressed and may contain confidential and/or privileged material. Statements and opinions expressed in this e-mail may not represent those of the company. Any review, retransmission, dissemination and other use of, or taking of any action in reliance upon, this information by persons or entities other than the intended recipient is prohibited. If you received this in error, please contact the sender immediately and delete the material from any computer.

Registered office: Gazprom Marketing & Trading Ltd, Gazprom House, 60 Marina Place, Hampton Wick, Kingston upon Thames, KT1 4BH. Registered in England No. 3768267



Click here<https://www.mailcontrol.com/sr/wQw0zmjPoHdJTZGyOCrrhg==> to report this email as spam.

________________________________
The information herein may have been obtained from various sources. Any opinion expressed may be that of the sender only, is subject to change without notice and should be independently evaluated. Nothing herein constitutes investment advice or an offer, or solicitation of an offer, to buy or sell any financial product. Any data consists of purely indicative prices and should not be relied upon to revalue any commercial positions held by any recipient. Tradition makes no warranty that the data represent or indicates prices at which transactions may be or have been made by any Tradition Group company. To the maximum extent of the law, Tradition accepts no responsibility for, and cannot and does not warrant the integrity, accuracy, quality, completeness, merchantability or suitability for a particular purpose or requirement of the information or data, even if arising out of the negligence of Tradition or otherwise. Tradition accepts no liability for any direct, indirect or other consequential loss arising out of any use of the information contained in this document or any omission from it. This communication is directed at Eligible Counterparties and Professional Clients as defined by the FSA. It is not for distribution to nor should it be relied upon by Private Clients. It is not intended for distribution to, or use by any person or entity in any jurisdiction or country where such distribution or use would be contrary to any applicable law or regulation. Please note that, for business or compliance reasons, we may monitor and read emails sent or received using our servers or equipment. Tradition (UK) Ltd (937647; FSA 139200), Tradition Financial Services Ltd (1046064; FSA 147543), TFS Derivatives Ltd (4051930; FSA 197244), Tradition London Clearing Ltd (3633863; FSA 190632) and TFS-ICAP Ltd (4025995; FSA 206018) registered in England at Beaufort House, 15 St Botolph Street, London EC3A 7QX; authorised and regulated by the Financial Services Authority. VAT No: GB 365 4639 27 except TFS-ICAP GB 766 0854 05.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090803/5316dbe5/attachment.htm 

From sam.owen at gazprom-mt.com  Mon Aug  3 09:46:41 2009
From: sam.owen at gazprom-mt.com (Sam Owen)
Date: Mon, 3 Aug 2009 09:46:41 +0100
Subject: [rabbitmq-discuss] FW:  rabbitmqctl with window services
In-Reply-To: <5A46D132C446C04B9EFE8AD14E7891066EE871998E@SVR-2K3-BH-EMC.tradition.int>
References: <009701ca11f4$aa85ac60$ff910520$@grice@logosworld.com><5A46D132C446C04B9EFE8AD14E7891066EE871993F@SVR-2K3-BH-EMC.tradition.int>
	<C3F648C3620DC6488A18F7F1BBC18F1A02380D@ex01kguk.Gazpromuk.intra>
	<5A46D132C446C04B9EFE8AD14E7891066EE871998E@SVR-2K3-BH-EMC.tradition.int>
Message-ID: <C3F648C3620DC6488A18F7F1BBC18F1A023811@ex01kguk.Gazpromuk.intra>

Yes - I got that to work - by copy the .erlang cookie file over from
C:\Windows to C:\users\sowen

 

This survives a service restart so it's not so bad - it's just that
every user logging on to the box will need to do this. 

 

Perhaps we can add this to the log on scripts. Either way it's an
acceptable work around for us at the present.

 

-- Sam

 

________________________________

From: Alister Morton [mailto:Alister.Morton at tradition.com] 
Sent: 03 August 2009 09:29
To: Sam Owen; 'rabbitmq'
Subject: RE: [rabbitmq-discuss] FW: rabbitmqctl with window services

 

The solution is to synchronise the .erlang.cookie files between the
service and the controller, which I think is sub optimal if you want to
administer more than one service on multiple platforms, unless I'm
missing something.

 

Administering the broker is really important. 

 

________________________________

From: rabbitmq-discuss-bounces at lists.rabbitmq.com
[mailto:rabbitmq-discuss-bounces at lists.rabbitmq.com] On Behalf Of Sam
Owen
Sent: 31 July 2009 17:14
To: Alister Morton; rabbitmq
Subject: Re: [rabbitmq-discuss] FW: rabbitmqctl with window services

Indeed - we use service accounts to run our production services - using
these I'm seeing the same problem.

Is there workaround - or should I raise a bug?

Sam

________________________________

size=2 width="100%" align=center tabindex=-1> 

From: rabbitmq-discuss-bounces at lists.rabbitmq.com
[mailto:rabbitmq-discuss-bounces at lists.rabbitmq.com] On Behalf Of
Alister Morton
Sent: 31 July 2009 16:48
To: 'rabbitmq'
Subject: Re: [rabbitmq-discuss] FW: rabbitmqctl with window services

I think I had the same issue before on windows....simply go to the
RabbitMQ service...right click-> properties..... and change the LOGON
user to be your username + password....then RabbitMQ should start up and
all should be cool ;-) 

That's a bit of a nasty kludge, though. Usually in a production
environment you don't want services logging on with real user
credentials.

________________________________

The information herein may have been obtained from various sources. Any
opinion expressed may be that of the sender only, is subject to change
without notice and should be independently evaluated. Nothing herein
constitutes investment advice or an offer, or solicitation of an offer,
to buy or sell any financial product. Any data consists of purely
indicative prices and should not be relied upon to revalue any
commercial positions held by any recipient. Tradition makes no warranty
that the data represent or indicates prices at which transactions may be
or have been made by any Tradition Group company. To the maximum extent
of the law, Tradition accepts no responsibility for, and cannot and does
not warrant the integrity, accuracy, quality, completeness,
merchantability or suitability for a particular purpose or requirement
of the information or data, even if arising out of the negligence of
Tradition or otherwise. Tradition accepts no liability for any direct,
indirect or other consequential loss arising out of any use of the
information contained in this document or any omission from it. This
communication is directed at Eligible Counterparties and Professional
Clients as defined by the FSA. It is not for distribution to nor should
it be relied upon by Private Clients. It is not intended for
distribution to, or use by any person or entity in any jurisdiction or
country where such distribution or use would be contrary to any
applicable law or regulation. Please note that, for business or
compliance reasons, we may monitor and read emails sent or received
using our servers or equipment. Tradition (UK) Ltd (937647; FSA 139200),
Tradition Financial Services Ltd (1046064; FSA 147543), TFS Derivatives
Ltd (4051930; FSA 197244), Tradition London Clearing Ltd (3633863; FSA
190632) and TFS-ICAP Ltd (4025995; FSA 206018) registered in England at
Beaufort House, 15 St Botolph Street, London EC3A 7QX; authorised and
regulated by the Financial Services Authority. VAT No: GB 365 4639 27
except TFS-ICAP GB 766 0854 05.




<http://www.blackspider.com/> 

 

The information transmitted is the property of Gazprom Marketing &
Trading Ltd and is intended only for the person or entity to which it is
addressed and may contain confidential and/or privileged material.
Statements and opinions expressed in this e-mail may not represent those
of the company. Any review, retransmission, dissemination and other use
of, or taking of any action in reliance upon, this information by
persons or entities other than the intended recipient is prohibited. If
you received this in error, please contact the sender immediately and
delete the material from any computer. 

Registered office: Gazprom Marketing & Trading Ltd, Gazprom House, 60
Marina Place, Hampton Wick, Kingston upon Thames, KT1 4BH. Registered in
England No. 3768267

 

Click here <https://www.mailcontrol.com/sr/wQw0zmjPoHdJTZGyOCrrhg==>  to
report this email as spam.

 

________________________________

The information herein may have been obtained from various sources. Any
opinion expressed may be that of the sender only, is subject to change
without notice and should be independently evaluated. Nothing herein
constitutes investment advice or an offer, or solicitation of an offer,
to buy or sell any financial product. Any data consists of purely
indicative prices and should not be relied upon to revalue any
commercial positions held by any recipient. Tradition makes no warranty
that the data represent or indicates prices at which transactions may be
or have been made by any Tradition Group company. To the maximum extent
of the law, Tradition accepts no responsibility for, and cannot and does
not warrant the integrity, accuracy, quality, completeness,
merchantability or suitability for a particular purpose or requirement
of the information or data, even if arising out of the negligence of
Tradition or otherwise. Tradition accepts no liability for any direct,
indirect or other consequential loss arising out of any use of the
information contained in this document or any omission from it. This
communication is directed at Eligible Counterparties and Professional
Clients as defined by the FSA. It is not for distribution to nor should
it be relied upon by Private Clients. It is not intended for
distribution to, or use by any person or entity in any jurisdiction or
country where such distribution or use would be contrary to any
applicable law or regulation. Please note that, for business or
compliance reasons, we may monitor and read emails sent or received
using our servers or equipment. Tradition (UK) Ltd (937647; FSA 139200),
Tradition Financial Services Ltd (1046064; FSA 147543), TFS Derivatives
Ltd (4051930; FSA 197244), Tradition London Clearing Ltd (3633863; FSA
190632) and TFS-ICAP Ltd (4025995; FSA 206018) registered in England at
Beaufort House, 15 St Botolph Street, London EC3A 7QX; authorised and
regulated by the Financial Services Authority. VAT No: GB 365 4639 27
except TFS-ICAP GB 766 0854 05.



<http://www.blackspider.com/>  

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090803/2b9939b5/attachment.htm 

From wilson.ke at wealthcraft.com  Mon Aug  3 10:42:01 2009
From: wilson.ke at wealthcraft.com (Wilson Ke)
Date: Mon, 3 Aug 2009 17:42:01 +0800
Subject: [rabbitmq-discuss] binding exchange to client and server in wcf,
 but it auto generate new queue on rabbitmq server, why?
In-Reply-To: <3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
Message-ID: <8F16BDCC98E64841857E711110AF5EDD8FA14BFAE8@EXMBX01.wealthcraft.local>

Hi all,
In my RabbitMQ, I had declared a durable exchange "member2atmExchange" and a durable queue "member2atmQueue", and bind the queue and exchange.

Later I use Wcf to bind the exchange and send message. I found a new automatic queue appear in rabbitmq server.
I want to use Wcf to publish message to "member2atmQueue".How can I do?


[cid:image001.jpg at 01CA1461.8EB5C1E0]

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090803/625fdd08/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.jpg
Type: image/jpeg
Size: 60451 bytes
Desc: image001.jpg
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090803/625fdd08/attachment.jpg 

From juhani at juranki.com  Mon Aug  3 12:52:49 2009
From: juhani at juranki.com (=?ISO-8859-1?Q?Juhani_R=E4nkimies?=)
Date: Mon, 3 Aug 2009 14:52:49 +0300
Subject: [rabbitmq-discuss] client and server versioning
In-Reply-To: <269388e30908021618j62a6b58bo25d94e8153bc0671@mail.gmail.com>
References: <e55356640907310144m258a52eekf7af4795dcdcb951@mail.gmail.com>
	<269388e30908021618j62a6b58bo25d94e8153bc0671@mail.gmail.com>
Message-ID: <e55356640908030452q30ca0701n84537137e6c9a183@mail.gmail.com>

great. thx.
-juhani

On Mon, Aug 3, 2009 at 2:18 AM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Juhani,
>
> On Fri, Jul 31, 2009 at 9:44 AM, Juhani R?nkimies<juhani at juranki.com> wrote:
>> Am I asking for trouble if I follow erlang-client default branch and
>> keep the server at 1.6.0?
>> I'd be using network connection.
>
> Until the Erlang client is officially released, following the default
> branch of the client is pretty much your only reasonably stable
> option. Given that you can now build loadable bundles for the modules
> specific to the client and for the shared modules and your client is
> running in a different VM, you should fair well.
>
> Ben



From ben.browitt at gmail.com  Mon Aug  3 14:26:24 2009
From: ben.browitt at gmail.com (Ben Browitt)
Date: Mon, 3 Aug 2009 16:26:24 +0300
Subject: [rabbitmq-discuss] multiple direct Erlang clients
Message-ID: <b0200d7f0908030626v710de5a2q1d89b1ebf82e485a@mail.gmail.com>

Hi,

I'm following the Erlang client introduction:
http://hopper.squarespace.com/blog/2008/1/12/introducing-the-erlang-amqp-client.html

All the calls are made against the parent process.
For example:
amqp_channel:cast(Channel, BasicPublish, Content).

In amqp_channel the cast function is defined as:
cast(Channel, Method) ->
    gen_server:cast(Channel, {cast, Method}).

When using a large number of direct Erlang clients for a gateway
implementation
where every outer client using some protocol has an Erlang client acting as
a translator,
wouldn't this design create a block at amqp_channel:cast/2 and slow things
down?
Shouldn't the client call gen_server:cast/2 directly instead of calling
amqp_channel:cast/2
and use the fact that each Erlang client is a process?

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090803/7b36b0d1/attachment.htm 

From tsuraan at gmail.com  Mon Aug  3 18:08:41 2009
From: tsuraan at gmail.com (tsuraan)
Date: Mon, 3 Aug 2009 12:08:41 -0500
Subject: [rabbitmq-discuss] Recovering from power failure
Message-ID: <84fb38e30908031008y26688ddaw90a7cb77d53156eb@mail.gmail.com>

I have a machine where rabbit (1.6.0) died brutally due to a power
failure, and now it can't start anymore.  It gets to starting
persister, and then we get:

starting persister            ...Erlang has closed
{"init terminating in
do_boot",{{nocatch,{error,{cannot_start_application,rabbit,{bad_return,{{rabbit,start,[normal,[]]},{'EXIT',{{badmatch,{error,{{{badmatch,eof},[{rabbit_persister,internal_load_snapshot,2},{rabbit_persister,init,1},{gen_server,init_it,6},{proc_lib,init_p,5}]},{child,undefined,rabbit_persister,{rabbit_persister,start_link,[]},transient,100,worker,[rabbit_persister]}}}},[{rabbit,start_child,1},{rabbit,'-start/2-fun-4-',0},{rabbit,'-start/2-fun-0-',1},{lists,foreach,2},{rabbit,start,2},{application_master,start_it_old,4}]}}}}}}},[{init,start_it,1},{init,start_em,1}]}}

>From the eof, I'm guessing that some file wasn't completely written,
so the persister is pretty angry.  So, I have a few questions :)
Should rabbit be robust to power failures?  i.e, is the persister a
durable file structure, or is it fragile to being killed when writing?
 Also, is there a better way to recover than by wiping out the files
in the rabbit queue dir and re-initializing the queues?

I also have the erl_crash.dump if this is a bug that could be fixed
with a crash.dump.



From n8gray at n8gray.org  Mon Aug  3 20:12:00 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Mon, 3 Aug 2009 12:12:00 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish over
	the JSON RPC interface)
Message-ID: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>

Hi Cuong,

Thanks for the reply!  It turns out that I'm not only hitting this
problem with simple.publish, but also other methods.  For example,
when I try to declare an exchange, the same thing happens.  Am I
supposed to be acking responses to my method calls or something?

Sending:
{"version":"1.1", "method": "call", "params": ["exchange.declare", [0,
"gx.quincy.foo.g1", "fanout", false, true, false, false, true, []]],
"id": 0}
-----------------------
Response:
200 OK
[('date', 'Mon, 03 Aug 2009 18:55:47 GMT'), ('content-length',
'1074'), ('content-type', 'text/plain'), ('server', 'inets/5.1')]

{"version":"1.1","id":0,"error":{"name":"JSONRPCError","code":500,"message":"Internal
error","error":"{timeout,\n    {gen_server,call,\n
[<0.248.0>,\n         {jsonrpc,<<\"call\">>,\n             {obj,\n
            [{\"http_method\",<<\"POST\">>},\n
{\"http_query_parameters\",{obj,[]}},\n
{\"http_headers\",\n                   {obj,\n
[{\"user-agent\",<<\"python\">>},\n
{\"accept\",<<\"application/json\">>},\n
{\"content-type\",<<\"application/json\">>},\n
{\"content-length\",<<\"148\">>},\n
{\"accept-encoding\",<<\"identity\">>},\n
{\"host\",<<\"localhost:55672\">>}]}},\n
{\"remote_port\",59596},\n
{\"remote_peername\",<<\"0:0:0:0:0:0:0:1\">>},\n
{\"scheme\",<<\"http\">>}]},\n
[<<\"exchange.declare\">>,\n
[0,<<\"gx.quincy.foo.g1\">>,<<\"fanout\">>,false,true,false,false,\n
            true,[]]]}]}}"}}

On Mon, Aug 3, 2009 at 12:51 AM, Cuong Le<cuonglb at facemain.com> wrote:
> You must re-check exchange type of it (this is a topic exchange) and
> consumer code (make exchange/queue, and bind exchange with queue).
>
> * gen_server make proc cast for a long time and until timeout it will arise
> error {error, timeout}.
>
> Cuong
>
> On Fri, Jul 31, 2009 at 6:28 AM, Nathan Gray <n8gray at n8gray.org> wrote:
>>
>> I'm trying to use the rabbitmq-http2 bridge to create exchanges and
>> send messages to them via http/jsonrpc. ?Creating an exchange works
>> fine but sending a message doesn't. ?I'm using a simple python client
>> and I've generated the following request object:
>>
>> {"version":"1.1",
>> "method": "cast",
>> "params": [
>> ?"basic.publish",
>> ?[1, "amq.topic", "this.that", false, false],
>> ?"Hello world!",
>> ?[null, null, null, null, null, null, null, null, null, null, null,
>> null, null, null]],
>> "id": 0}
>>
>> AFAICT this is essentially the same as the example given in this posting:
>>
>> http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-April/003882.html
>>
>> But this is what I get as a response (sorry for the formatting):
>>
>> {"version":"1.1",
>> "id":0,
>> "error":
>> { "name":"JSONRPCError",
>> ?"code":500,
>> ?"message":"Internal error",
>> ?"error":"{timeout,\n ? ?{gen_server,call,\n ? ? ? ?[<0.432.0>,\n
>> ? ?{jsonrpc,<<\"cast\">>,\n ? ? ? ? ? ? {obj,\n
>> [{\"http_method\",<<\"POST\">>},\n
>> {\"http_query_parameters\",{obj,[]}},\n
>> {\"http_headers\",\n ? ? ? ? ? ? ? ? ? {obj,\n
>> [{\"user-agent\",<<\"python\">>},\n
>> {\"accept\",<<\"application/json\">>},\n
>> {\"content-type\",<<\"application/json\">>},\n
>> {\"content-length\",<<\"220\">>},\n
>> {\"accept-encoding\",<<\"identity\">>},\n
>> {\"host\",<<\"localhost:55672\">>}]}},\n
>> {\"remote_port\",61595},\n
>> {\"remote_peername\",<<\"0:0:0:0:0:0:0:1\">>},\n
>> {\"scheme\",<<\"http\">>}]},\n ? ? ? ? ? ? [<<\"basic.publish\">>,\n
>> ? ? ? ? ? [1,<<\"amq.topic\">>,<<\"this.that\">>,false,false],\n
>> ? ? ? ?<<\"Hello world!\">>,\n
>> [null,null,null,null,null,null,null,null,null,null,null,null,\n
>> ? ? ? null,null]]}]}}"
>> }}
>>
>> Can anybody explain what I've done wrong?
>>
>> Thanks!
>> -n8
>>
>> PS: Please CC me with replies.
>>
>> --
>> http://n8gray.org
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



-- 
http://n8gray.org



From n8gray at n8gray.org  Mon Aug  3 20:35:55 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Mon, 3 Aug 2009 12:35:55 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
Message-ID: <65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>

Oh, I should also mention that these rpc calls do "succeed" despite
the error messages.  After the call below, the exchange I declare is
successfully created.  Calling simple.publish does send a message to
the exchange.  But the caller gets stuck waiting for a couple of
seconds and then gets this exception.  I'm not sure what to make of
this, so any help would be appreciated.  I'm trying to dig deeper
myself but I don't know erlang so it's a bit tough.

Thanks,
-n8

On Mon, Aug 3, 2009 at 12:12 PM, Nathan Gray<n8gray at n8gray.org> wrote:
> Hi Cuong,
>
> Thanks for the reply! ?It turns out that I'm not only hitting this
> problem with simple.publish, but also other methods. ?For example,
> when I try to declare an exchange, the same thing happens. ?Am I
> supposed to be acking responses to my method calls or something?
>
> Sending:
> {"version":"1.1", "method": "call", "params": ["exchange.declare", [0,
> "gx.quincy.foo.g1", "fanout", false, true, false, false, true, []]],
> "id": 0}
> -----------------------
> Response:
> 200 OK
> [('date', 'Mon, 03 Aug 2009 18:55:47 GMT'), ('content-length',
> '1074'), ('content-type', 'text/plain'), ('server', 'inets/5.1')]
>
> {"version":"1.1","id":0,"error":{"name":"JSONRPCError","code":500,"message":"Internal
> error","error":"{timeout,\n ? ?{gen_server,call,\n
> [<0.248.0>,\n ? ? ? ? {jsonrpc,<<\"call\">>,\n ? ? ? ? ? ? {obj,\n
> ? ? ? ? ? ?[{\"http_method\",<<\"POST\">>},\n
> {\"http_query_parameters\",{obj,[]}},\n
> {\"http_headers\",\n ? ? ? ? ? ? ? ? ? {obj,\n
> [{\"user-agent\",<<\"python\">>},\n
> {\"accept\",<<\"application/json\">>},\n
> {\"content-type\",<<\"application/json\">>},\n
> {\"content-length\",<<\"148\">>},\n
> {\"accept-encoding\",<<\"identity\">>},\n
> {\"host\",<<\"localhost:55672\">>}]}},\n
> {\"remote_port\",59596},\n
> {\"remote_peername\",<<\"0:0:0:0:0:0:0:1\">>},\n
> {\"scheme\",<<\"http\">>}]},\n
> [<<\"exchange.declare\">>,\n
> [0,<<\"gx.quincy.foo.g1\">>,<<\"fanout\">>,false,true,false,false,\n
> ? ? ? ? ? ?true,[]]]}]}}"}}
>
> On Mon, Aug 3, 2009 at 12:51 AM, Cuong Le<cuonglb at facemain.com> wrote:
>> You must re-check exchange type of it (this is a topic exchange) and
>> consumer code (make exchange/queue, and bind exchange with queue).
>>
>> * gen_server make proc cast for a long time and until timeout it will arise
>> error {error, timeout}.
>>
>> Cuong
>>
>> On Fri, Jul 31, 2009 at 6:28 AM, Nathan Gray <n8gray at n8gray.org> wrote:
>>>
>>> I'm trying to use the rabbitmq-http2 bridge to create exchanges and
>>> send messages to them via http/jsonrpc. ?Creating an exchange works
>>> fine but sending a message doesn't. ?I'm using a simple python client
>>> and I've generated the following request object:
>>>
>>> {"version":"1.1",
>>> "method": "cast",
>>> "params": [
>>> ?"basic.publish",
>>> ?[1, "amq.topic", "this.that", false, false],
>>> ?"Hello world!",
>>> ?[null, null, null, null, null, null, null, null, null, null, null,
>>> null, null, null]],
>>> "id": 0}
>>>
>>> AFAICT this is essentially the same as the example given in this posting:
>>>
>>> http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-April/003882.html
>>>
>>> But this is what I get as a response (sorry for the formatting):
>>>
>>> {"version":"1.1",
>>> "id":0,
>>> "error":
>>> { "name":"JSONRPCError",
>>> ?"code":500,
>>> ?"message":"Internal error",
>>> ?"error":"{timeout,\n ? ?{gen_server,call,\n ? ? ? ?[<0.432.0>,\n
>>> ? ?{jsonrpc,<<\"cast\">>,\n ? ? ? ? ? ? {obj,\n
>>> [{\"http_method\",<<\"POST\">>},\n
>>> {\"http_query_parameters\",{obj,[]}},\n
>>> {\"http_headers\",\n ? ? ? ? ? ? ? ? ? {obj,\n
>>> [{\"user-agent\",<<\"python\">>},\n
>>> {\"accept\",<<\"application/json\">>},\n
>>> {\"content-type\",<<\"application/json\">>},\n
>>> {\"content-length\",<<\"220\">>},\n
>>> {\"accept-encoding\",<<\"identity\">>},\n
>>> {\"host\",<<\"localhost:55672\">>}]}},\n
>>> {\"remote_port\",61595},\n
>>> {\"remote_peername\",<<\"0:0:0:0:0:0:0:1\">>},\n
>>> {\"scheme\",<<\"http\">>}]},\n ? ? ? ? ? ? [<<\"basic.publish\">>,\n
>>> ? ? ? ? ? [1,<<\"amq.topic\">>,<<\"this.that\">>,false,false],\n
>>> ? ? ? ?<<\"Hello world!\">>,\n
>>> [null,null,null,null,null,null,null,null,null,null,null,null,\n
>>> ? ? ? null,null]]}]}}"
>>> }}
>>>
>>> Can anybody explain what I've done wrong?
>>>
>>> Thanks!
>>> -n8
>>>
>>> PS: Please CC me with replies.
>>>
>>> --
>>> http://n8gray.org
>>>
>>> _______________________________________________
>>> rabbitmq-discuss mailing list
>>> rabbitmq-discuss at lists.rabbitmq.com
>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
>>
>
>
>
> --
> http://n8gray.org
>



-- 
http://n8gray.org



From 0x6e6562 at gmail.com  Mon Aug  3 20:52:22 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 3 Aug 2009 20:52:22 +0100
Subject: [rabbitmq-discuss] Erlang client: review request
In-Reply-To: <e55356640907301203m65c1a46akb14e0fd87b23519b@mail.gmail.com>
References: <e55356640907301203m65c1a46akb14e0fd87b23519b@mail.gmail.com>
Message-ID: <269388e30908031252x3e9d3d8bwa05755923a23e417@mail.gmail.com>

Juhani,

On Thu, Jul 30, 2009 at 8:03 PM, Juhani R?nkimies<juhani at juranki.com> wrote:
> Hi,
>
> I'm trying to get up and running with erlang client, and wrote a bot
> for the rabbitmq-http2 chat demo as an excercise.
> It'd be great if someone could have a look to see if I'm on the right track.
>
> http://github.com/juranki/chatbot/blob/9734b5241591b8b1c75a0b57aa50a9a11412b413/src/chatbot_srv.erl

I've had a quick look, however, in general I'm a bit confused with the
message pattern you are using (might be that I'm missing something).
Is this supposed to unicast or multicast? It looks a little bit like
an RPC server, except that any consumer could receive the responses it
sends back. Maybe I'm missing the point, though.

Here are some more library orientated observations:

- Where does the exchange called rabbit come from?
- You don't need to supply an empty tag when you want the server to
generate you one for a subscription;
- What does it mean to bind a queue with an empty routing key? What
sort of exchange are you using?
- Message priorities are not yet implemented in Rabbit;

HTH,

Ben



From 0x6e6562 at gmail.com  Mon Aug  3 21:11:33 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 3 Aug 2009 21:11:33 +0100
Subject: [rabbitmq-discuss] Erlang client: Future of lib_amqp
Message-ID: <269388e30908031311g51e83796jc97f2cf83fd2b18c@mail.gmail.com>

Dear List,

Part of the work required to bring the Erlang client up to a
releasable state involves reviewing the API design of the lib_amqp
module.

lib_amqp started life as a convenience wrapper around the underlying
API in the amqp_connection and amqp_channel modules - the original
motivation was to reduce the verbosity of the AMQP commands by
supplying overrides for commonly used default values.

Also, it was also an exercise to see if the wrapper could evolve in
something useful both for and from the people actually using the API.

Subsequently, we augmented the codegen so that it generated sensible
defaults from the spec, thus obviating the need to have a wrapper to
do this.

Apart from questioning it's byzantine name, we've had a look at what
actual value lib_amqp delivers.

In our opinion, it doesn't actually save you that much typing.
Furthermore, the structuring of the overrides (especially the publish
methods) conveys little clarity.

So we've decided that lib_amqp's existence is no longer justified and
that it will be dropped from the pending release of the Erlang client.

Should it transpire that some convenience be provided, then we'll
consider adding this at some later stage, but only on an as needs
basis. Hence it would be up to you, the community, to bring forward
suggestions, if you would like to see some generalized convenience
functions.

HTH,

Ben



From 0x6e6562 at gmail.com  Mon Aug  3 21:26:06 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 3 Aug 2009 21:26:06 +0100
Subject: [rabbitmq-discuss] multiple direct Erlang clients
In-Reply-To: <b0200d7f0908030626v710de5a2q1d89b1ebf82e485a@mail.gmail.com>
References: <b0200d7f0908030626v710de5a2q1d89b1ebf82e485a@mail.gmail.com>
Message-ID: <269388e30908031326j3a263aadne55de2cf5b70d4a@mail.gmail.com>

Ben,

On Mon, Aug 3, 2009 at 2:26 PM, Ben Browitt<ben.browitt at gmail.com> wrote:
> In amqp_channel the?cast function is defined as:
> cast(Channel, Method) ->
> ??? gen_server:cast(Channel, {cast, Method}).
>
> When?using a large number of direct Erlang clients for a gateway
> implementation
> where every outer client using some protocol has an Erlang client acting as
> a translator,
> wouldn't this design create a block at amqp_channel:cast/2 and slow things
> down?
> Shouldn't the client call gen_server:cast/2 directly instead of calling
> amqp_channel:cast/2
> and?use the fact that each Erlang client is a process?

Sorry, I don't quite follow.

amqp_channel is a gen_server instance and as such, you generally use
gen_server:cast/2 to send messages to it (although you could construct
the message yourself). amqp_channel:cast/2 merely hides this fact from
the consumer of the API.

Or did you mean that the cost of invoking the gen_server function is a
cause for concern (in the sense that the runtime would need to perform
a double resolution in order to figure out where to dispatch the call
to)?

Or do mean that using the gen_server abstraction for each channel is
going to be a performance concern for you?

HTH,

Ben



From 0x6e6562 at gmail.com  Mon Aug  3 21:30:08 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 3 Aug 2009 21:30:08 +0100
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>
Message-ID: <269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>

Nathan

On Mon, Aug 3, 2009 at 8:35 PM, Nathan Gray<n8gray at n8gray.org> wrote:
> Oh, I should also mention that these rpc calls do "succeed" despite
> the error messages. ?After the call below, the exchange I declare is
> successfully created. ?Calling simple.publish does send a message to
> the exchange. ?But the caller gets stuck waiting for a couple of
> seconds and then gets this exception. ?I'm not sure what to make of
> this, so any help would be appreciated. ?I'm trying to dig deeper
> myself but I don't know erlang so it's a bit tough.

Is there anything in the server log that may shed some light?

Ben



From tsuraan at gmail.com  Mon Aug  3 21:32:24 2009
From: tsuraan at gmail.com (tsuraan)
Date: Mon, 3 Aug 2009 15:32:24 -0500
Subject: [rabbitmq-discuss] Recovering from power failure
In-Reply-To: <84fb38e30908031008y26688ddaw90a7cb77d53156eb@mail.gmail.com>
References: <84fb38e30908031008y26688ddaw90a7cb77d53156eb@mail.gmail.com>
Message-ID: <84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>

If the message at
<http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-August/004719.html>
is representative of what people saw from my last email, then the
email got pretty badly mangled.  The rest of my email read like this:

>From the eof, I'm guessing that some file wasn't completely written,
so the persister is pretty angry.  So, I have a few questions :)
Should rabbit be robust to power failures?  i.e, is the persister a
durable file structure, or is it fragile to being killed when writing?
 Also, is there a better way to recover than by wiping out the files
in the rabbit queue dir and re-initializing the queues?

I also have the erl_crash.dump if this is a bug that could be fixed
with a crash.dump, and I have the files from the rabbit dir that are
causing the crash, if those would be useful to the developers.



From tsuraan at gmail.com  Mon Aug  3 21:35:50 2009
From: tsuraan at gmail.com (tsuraan)
Date: Mon, 3 Aug 2009 15:35:50 -0500
Subject: [rabbitmq-discuss] Recovering from power failure
In-Reply-To: <84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>
References: <84fb38e30908031008y26688ddaw90a7cb77d53156eb@mail.gmail.com>
	<84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>
Message-ID: <84fb38e30908031335j5eba5dbakad8691027f7646ba@mail.gmail.com>

Wow, that one turned into
http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-August/004727.html.
 Are people getting my emails correctly, or does everybody see what
pipermail is showing?

On 03/08/2009, tsuraan <tsuraan at gmail.com> wrote:
> If the message at
> <http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-August/004719.html>
> is representative of what people saw from my last email, then the
> email got pretty badly mangled.  The rest of my email read like this:
>
> From the eof, I'm guessing that some file wasn't completely written,
> so the persister is pretty angry.  So, I have a few questions :)
> Should rabbit be robust to power failures?  i.e, is the persister a
> durable file structure, or is it fragile to being killed when writing?
>  Also, is there a better way to recover than by wiping out the files
> in the rabbit queue dir and re-initializing the queues?
>
> I also have the erl_crash.dump if this is a bug that could be fixed
> with a crash.dump, and I have the files from the rabbit dir that are
> causing the crash, if those would be useful to the developers.
>



From matthias at lshift.net  Mon Aug  3 21:37:14 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Mon, 03 Aug 2009 21:37:14 +0100
Subject: [rabbitmq-discuss] is there a good way to upgrade my broker
 without losing messages?
In-Reply-To: <4A7081CF.8020901@acceleration.net>
References: <4A7081CF.8020901@acceleration.net>
Message-ID: <4A774A7A.80203@lshift.net>

Ryan,

Ryan Davis wrote:
> I'm currently running an older version of RabbitMQ (1.5.1) on windows,
> using a single broker for my lightly-loaded system.  All
> publishers/consumers are pointed to that broker.  I want to upgrade to
> 1.6, but don't want to lose any messages.  I cannot turn off all
> publishers (messages come from external sources).   I've read that the
> db schema changes, and the old db essentially gets replaced.  This means
> even durable messages will get discarded, right?

Yes, persistent messages would indeed get discarded.

However, the format of the message store (as opposed to the routing 
tables, etc) didn't actually change between 1.5.x and 1.6.0, so in 
theory it should be possible to do the following:

1) stop old rabbit version
2) move the rabbit_persister.LOG to a safe place
3) start new rabbit version
4) use some client code to re-create all the durable queues and exchanges
5) stop the new rabbit version
6) replace the fresh rabbit_persister.LOG with the old one
7) restart the new rabbit version

At that point the persisted messages should be available in their 
respective durable queues again, so your clients can connect and consume 
them.

> I've come up with a few ideas involving putting up another RabbitMQ
> instance (point publishers at the new broker, let my consumers empty the
> old broker, point consumers at the new broker), but I was wondering: is
> there easier way to do it?

Arguably your suggestion is simpler than the above :) Plus it will work 
even when the message store format *has* changed. I know which one I'd 
choose ;)


Regards,

Matthias.



From alexis.richardson at gmail.com  Mon Aug  3 21:37:20 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Mon, 3 Aug 2009 21:37:20 +0100
Subject: [rabbitmq-discuss] Recovering from power failure
In-Reply-To: <84fb38e30908031335j5eba5dbakad8691027f7646ba@mail.gmail.com>
References: <84fb38e30908031008y26688ddaw90a7cb77d53156eb@mail.gmail.com>
	<84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>
	<84fb38e30908031335j5eba5dbakad8691027f7646ba@mail.gmail.com>
Message-ID: <167204d20908031337y40f3a0d3s67676459e4262c54@mail.gmail.com>

It's coming through on my email.


On Mon, Aug 3, 2009 at 9:35 PM, tsuraan<tsuraan at gmail.com> wrote:
> Wow, that one turned into
> http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-August/004727.html.
> ?Are people getting my emails correctly, or does everybody see what
> pipermail is showing?
>
> On 03/08/2009, tsuraan <tsuraan at gmail.com> wrote:
>> If the message at
>> <http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-August/004719.html>
>> is representative of what people saw from my last email, then the
>> email got pretty badly mangled. ?The rest of my email read like this:
>>
>> From the eof, I'm guessing that some file wasn't completely written,
>> so the persister is pretty angry. ?So, I have a few questions :)
>> Should rabbit be robust to power failures? ?i.e, is the persister a
>> durable file structure, or is it fragile to being killed when writing?
>> ?Also, is there a better way to recover than by wiping out the files
>> in the rabbit queue dir and re-initializing the queues?
>>
>> I also have the erl_crash.dump if this is a bug that could be fixed
>> with a crash.dump, and I have the files from the rabbit dir that are
>> causing the crash, if those would be useful to the developers.
>>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>



From cuonglb at facemain.com  Tue Aug  4 05:42:47 2009
From: cuonglb at facemain.com (Cuong Le)
Date: Tue, 4 Aug 2009 11:42:47 +0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
Message-ID: <aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>

Hi Nathan,

Can you log dump rabbitmq log dir and push it on?

It can find at : /var/log/rabbitmq (default)

Cuong

On Tue, Aug 4, 2009 at 3:30 AM, Ben Hood <0x6e6562 at gmail.com> wrote:

> Nathan
>
> On Mon, Aug 3, 2009 at 8:35 PM, Nathan Gray<n8gray at n8gray.org> wrote:
> > Oh, I should also mention that these rpc calls do "succeed" despite
> > the error messages.  After the call below, the exchange I declare is
> > successfully created.  Calling simple.publish does send a message to
> > the exchange.  But the caller gets stuck waiting for a couple of
> > seconds and then gets this exception.  I'm not sure what to make of
> > this, so any help would be appreciated.  I'm trying to dig deeper
> > myself but I don't know erlang so it's a bit tough.
>
> Is there anything in the server log that may shed some light?
>
> Ben
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090804/4beaee64/attachment.htm 

From rajesh_reddy at ml.com  Tue Aug  4 11:28:15 2009
From: rajesh_reddy at ml.com (Reddy, Rajesh (GPT EMEA))
Date: Tue, 04 Aug 2009 11:28:15 +0100
Subject: [rabbitmq-discuss] queue is locked exclusively
In-Reply-To: <4A71004A.8050008@lshift.net>
Message-ID: <03FC0D29D4E88943AB7420C524BE8489027C39D5@mllnc20mb056.emea.win.ml.com>

Hi Matthias,

We need the exclusive queue as the queue should auto delete if the
consumer dies/shuts down.
What is the best approach for resubscribing if some excpetion occurs and
the conenction dies.

Thanks
Rajesh


-----Original Message-----
From: Matthias Radestock [mailto:matthias at lshift.net] 
Sent: 30 July 2009 03:07
To: Reddy, Rajesh (GPT EMEA)
Cc: rabbitmq-discuss at lists.rabbitmq.com
Subject: Re: [rabbitmq-discuss] queue is locked exclusively


Rajesh,

Reddy, Rajesh (GPT EMEA) wrote:
> Iam using the RabbitMQ client for .NET . I need to re subscribe to the

> queue from my client if the connection drops or queue deletes.
> 
> Iam getting the following error when trying to resubscribe to the
queue.
> [...] "RESOURCE_LOCKED - cannot obtain exclusive access to 
> locked queue 'reddyraj_ELONW124027_4244_20090721-091729_PM' in vhost 
> '/'" [...]
> Is there a way to identify if the queue is locked exclusively?

Exclusive queues are owned by the connection that created them. The 
general idea is for that (and *only* that) connection to subscribe 
consumer(s) to the queue. Exclusive queues are deleted when the 
connection goes away.

May I ask why you declare the queue as exclusive? Wouldn't a 
non-exclusive queue fit your use case better?


Regards,

Matthias

--------------------------------------------------------------------------
This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. References to "Merrill Lynch" are references to any company in the Merrill Lynch & Co., Inc. group of companies, which are wholly-owned by Bank of America Corporation. Securities and Insurance Products: * Are Not FDIC Insured * Are Not Bank Guaranteed * May Lose Value * Are Not a Bank Deposit * Are Not a Condition to Any Banking Service or Activity * Are Not Insured by Any Federal Government Agency. Attachments that are part of this E-communication may have additional important disclosures and disclaimers, which you should read. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------------------------
 



From matthias at lshift.net  Tue Aug  4 11:37:29 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Tue, 04 Aug 2009 11:37:29 +0100
Subject: [rabbitmq-discuss] queue is locked exclusively
In-Reply-To: <03FC0D29D4E88943AB7420C524BE8489027C39D5@mllnc20mb056.emea.win.ml.com>
References: <03FC0D29D4E88943AB7420C524BE8489027C39D5@mllnc20mb056.emea.win.ml.com>
Message-ID: <4A780F69.9020005@lshift.net>

Rajesh,

Reddy, Rajesh (GPT EMEA) wrote:
> We need the exclusive queue as the queue should auto delete if the
> consumer dies/shuts down.
> What is the best approach for resubscribing if some excpetion occurs and
> the conenction dies.

In that case I do not understand the problem. With an exclusive queue
when "some exception occurs and the connection dies" the queue will get
deleted. So on reconnecting you should simply re-declare (and re-bind)
the exclusive queue and start consuming from it.

You must be doing something different though, since the RESOURCE_LOCKED
error indicates that an attempt was made to re-declare the queue when it
existed already, and from a different connection to the one that created it.



Regards,

Matthias.



From rajesh_reddy at ml.com  Tue Aug  4 12:09:05 2009
From: rajesh_reddy at ml.com (Reddy, Rajesh (GPT EMEA))
Date: Tue, 04 Aug 2009 12:09:05 +0100
Subject: [rabbitmq-discuss] queue is locked exclusively
In-Reply-To: <4A780F69.9020005@lshift.net>
Message-ID: <03FC0D29D4E88943AB7420C524BE8489027C39D6@mllnc20mb056.emea.win.ml.com>

Hi Matthias,

I think so, there is something going wrong and trying to resubscribe on
an existing queue.
I have added some debug info to the log files, so may be I will get more
information regarding why is this happening.

Thanks a lot for your help
Rajesh

-----Original Message-----
From: Matthias Radestock [mailto:matthias at lshift.net] 
Sent: 04 August 2009 11:37
To: Reddy, Rajesh (GPT EMEA)
Cc: rabbitmq-discuss at lists.rabbitmq.com
Subject: Re: [rabbitmq-discuss] queue is locked exclusively


Rajesh,

Reddy, Rajesh (GPT EMEA) wrote:
> We need the exclusive queue as the queue should auto delete if the
> consumer dies/shuts down.
> What is the best approach for resubscribing if some excpetion occurs
and
> the conenction dies.

In that case I do not understand the problem. With an exclusive queue
when "some exception occurs and the connection dies" the queue will get
deleted. So on reconnecting you should simply re-declare (and re-bind)
the exclusive queue and start consuming from it.

You must be doing something different though, since the RESOURCE_LOCKED
error indicates that an attempt was made to re-declare the queue when it
existed already, and from a different connection to the one that created
it.



Regards,

Matthias.

--------------------------------------------------------------------------
This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. References to "Merrill Lynch" are references to any company in the Merrill Lynch & Co., Inc. group of companies, which are wholly-owned by Bank of America Corporation. Securities and Insurance Products: * Are Not FDIC Insured * Are Not Bank Guaranteed * May Lose Value * Are Not a Bank Deposit * Are Not a Condition to Any Banking Service or Activity * Are Not Insured by Any Federal Government Agency. Attachments that are part of this E-communication may have additional important disclosures and disclaimers, which you should read. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------------------------
 



From matthias at lshift.net  Tue Aug  4 12:40:37 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Tue, 04 Aug 2009 12:40:37 +0100
Subject: [rabbitmq-discuss] queue is locked exclusively
In-Reply-To: <03FC0D29D4E88943AB7420C524BE8489027C39D6@mllnc20mb056.emea.win.ml.com>
References: <03FC0D29D4E88943AB7420C524BE8489027C39D6@mllnc20mb056.emea.win.ml.com>
Message-ID: <4A781E35.1030907@lshift.net>

Rajesh,

Reddy, Rajesh (GPT EMEA) wrote:
> there is something going wrong and trying to resubscribe on
> an existing queue.
> I have added some debug info to the log files, so may be I will get more
> information regarding why is this happening.

Is the client naming the queue or is it getting the server to generate a
name for it?

The reason I am asking is that if you re-use the same queue name then
there is an unavoidable race condition which might trigger the
RESOURCE_LOCKED error. Specifically, if the connection terminates
non-cleanly, e.g. it gets dropped due to a client or network failure,
and you then immediately reconnect, the auto-deletion of resources of
the old connection may not have happened yet.

I reckon it is unlikely you'd run into this, since the auto-deletion
happens quite quickly, but it is a possibility.


Regards,

Matthias.



From rajesh_reddy at ml.com  Tue Aug  4 15:02:00 2009
From: rajesh_reddy at ml.com (Reddy, Rajesh (GPT EMEA))
Date: Tue, 04 Aug 2009 15:02:00 +0100
Subject: [rabbitmq-discuss] queue is locked exclusively
In-Reply-To: <4A781E35.1030907@lshift.net>
Message-ID: <03FC0D29D4E88943AB7420C524BE8489027C39D7@mllnc20mb056.emea.win.ml.com>

Hi Matthias,

We do use the queuename supplied by client. It is unique as we use the
processid + userid + datetime in it.
I think the error we are getting might be because of the issue you have
mentioned where the connection terminates non-cleanly.

Thanks
Rajesh

-----Original Message-----
From: Matthias Radestock [mailto:matthias at lshift.net] 
Sent: 04 August 2009 12:41
To: Reddy, Rajesh (GPT EMEA)
Cc: rabbitmq-discuss at lists.rabbitmq.com
Subject: Re: [rabbitmq-discuss] queue is locked exclusively


Rajesh,

Reddy, Rajesh (GPT EMEA) wrote:
> there is something going wrong and trying to resubscribe on
> an existing queue.
> I have added some debug info to the log files, so may be I will get
more
> information regarding why is this happening.

Is the client naming the queue or is it getting the server to generate a
name for it?

The reason I am asking is that if you re-use the same queue name then
there is an unavoidable race condition which might trigger the
RESOURCE_LOCKED error. Specifically, if the connection terminates
non-cleanly, e.g. it gets dropped due to a client or network failure,
and you then immediately reconnect, the auto-deletion of resources of
the old connection may not have happened yet.

I reckon it is unlikely you'd run into this, since the auto-deletion
happens quite quickly, but it is a possibility.


Regards,

Matthias.

--------------------------------------------------------------------------
This message w/attachments (message) may be privileged, confidential or proprietary, and if you are not an intended recipient, please notify the sender, do not use or share it and delete it. Unless specifically indicated, this message is not an offer to sell or a solicitation of any investment products or other financial product or service, an official confirmation of any transaction, or an official statement of Merrill Lynch. Subject to applicable law, Merrill Lynch may monitor, review and retain e-communications (EC) traveling through its networks/systems. The laws of the country of each sender/recipient may impact the handling of EC, and EC may be archived, supervised and produced in countries other than the country in which you are located. This message cannot be guaranteed to be secure or error-free. References to "Merrill Lynch" are references to any company in the Merrill Lynch & Co., Inc. group of companies, which are wholly-owned by Bank of America Corporation. Securities and Insurance Products: * Are Not FDIC Insured * Are Not Bank Guaranteed * May Lose Value * Are Not a Bank Deposit * Are Not a Condition to Any Banking Service or Activity * Are Not Insured by Any Federal Government Agency. Attachments that are part of this E-communication may have additional important disclosures and disclaimers, which you should read. This message is subject to terms available at the following link: http://www.ml.com/e-communications_terms/. By messaging with Merrill Lynch you consent to the foregoing.
--------------------------------------------------------------------------
 



From tonyg at lshift.net  Tue Aug  4 16:36:34 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 04 Aug 2009 16:36:34 +0100
Subject: [rabbitmq-discuss] about the clustering of rabbitmq
In-Reply-To: <91170ee40907292227y35b3531wee18ff83f4cb3d22@mail.gmail.com>
References: <91170ee40907292227y35b3531wee18ff83f4cb3d22@mail.gmail.com>
Message-ID: <4A785582.7010701@lshift.net>

femto Zheng wrote:
> then there is not middle-man load balancer like http normally does,
> is that correct?

That's right. You can definitely add one in to the mix though!

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Tue Aug  4 16:51:40 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 04 Aug 2009 16:51:40 +0100
Subject: [rabbitmq-discuss] about the clustering of rabbitmq
In-Reply-To: <91170ee40907292227y35b3531wee18ff83f4cb3d22@mail.gmail.com>
References: <91170ee40907292227y35b3531wee18ff83f4cb3d22@mail.gmail.com>
Message-ID: <4A78590C.9040103@lshift.net>

femto Zheng wrote:
> 'Nodes in a cluster perform some basic load balancing by responding to
> client connection attempts with AMQP's connection.redirect method as
> appropriate',

It's also worth pointing out here that connection.redirect is a bit of a
crude, blunt weapon, and in fact has been *removed* for AMQP 0-9-1. When
we transition to 0-9-1, it will no longer be available: it will be up to
clients to know how to connect to the broker. This seems like a
limitation, but I personally view it as an improvement: it means that
AMQP concentrates on *messaging*, and leaves load balancing up to load
balancers -- as it should :-)

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Tue Aug  4 17:13:44 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 04 Aug 2009 17:13:44 +0100
Subject: [rabbitmq-discuss] erlang-client issue, discarding content?
In-Reply-To: <376f3e6f0907311941o6324dd83ufb9a226a2319a2d1@mail.gmail.com>
References: <376f3e6f0907301222o2742e210idc0c68a89fa37fa1@mail.gmail.com>
	<376f3e6f0907301239u4600175al32b2b5f3b5af5137@mail.gmail.com>
	<4A71F8AF.2040406@lshift.net>	<376f3e6f0907301252n773969abs220067999d1aed5f@mail.gmail.com>
	<376f3e6f0907301254q7d87c1f2lb14db6123422dfb7@mail.gmail.com>
	<376f3e6f0907301315s76a305eatd9b909cfc0e2e914@mail.gmail.com>
	<4A721386.5070406@lshift.net>	<376f3e6f0907301512k2fb1cc8j5bc3f3739f40302d@mail.gmail.com>
	<4A722ECC.1070903@lshift.net>	<376f3e6f0907311233n21d323ah9e09e77ea6fc3b38@mail.gmail.com>
	<376f3e6f0907311941o6324dd83ufb9a226a2319a2d1@mail.gmail.com>
Message-ID: <4A785E38.50303@lshift.net>

Hi Suhail,

Suhail Doshi wrote:
> I basically keep the channel object and connection open the entire time
> so I do not do the statup stuff over and over, is this a bad idea?

On the contrary, that's a *good* idea...

> I don't see any global objects of mine increasing in size so I can
> only think I am doing something wrong from a rabbitmq perspective.

Hmm. Are you using more than one channel per connection? If so, the
other channels may be being starved, which may lead to a backlog of work
accumulating in them. You may need to restructure the main loop of your
application, if you're using more than one channel.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Tue Aug  4 17:18:00 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 04 Aug 2009 17:18:00 +0100
Subject: [rabbitmq-discuss] binding exchange to client and server in wcf,
 but it auto generate new queue on rabbitmq server, why?
In-Reply-To: <8F16BDCC98E64841857E711110AF5EDD8FA14BFAE8@EXMBX01.wealthcraft.local>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
	<8F16BDCC98E64841857E711110AF5EDD8FA14BFAE8@EXMBX01.wealthcraft.local>
Message-ID: <4A785F38.3000804@lshift.net>

Hi,

Wilson Ke wrote:
> In my RabbitMQ, I had declared a durable exchange ?member2atmExchange?
> and a durable queue ?member2atmQueue?, and bind the queue and exchange.

OK.

> Later I use Wcf to bind the exchange and send message. I found a new
> automatic queue appear in rabbitmq server.

Unfortunately, it looks like the WCF adapter currently doesn't support
consuming from named queues -- it effectively only supports transient
pubsub cases.

I recommend, if you can, switching to using the RabbitMQ API directly
(using classes from namespace RabbitMQ.Client etc).

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Tue Aug  4 17:20:21 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 04 Aug 2009 17:20:21 +0100
Subject: [rabbitmq-discuss] Recovering from power failure
In-Reply-To: <84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>
References: <84fb38e30908031008y26688ddaw90a7cb77d53156eb@mail.gmail.com>
	<84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>
Message-ID: <4A785FC5.3020604@lshift.net>

Hi tsuraan,

tsuraan wrote:
> Should rabbit be robust to power failures?

Yes, it definitely should. Do you still have the (damaged) persister log
file? It would be useful to us to be able to examine it. If you can,
please email it to me off-list... (or put it on some HTTP server I can
reach.)

>  Also, is there a better way to recover than by wiping out the files
> in the rabbit queue dir and re-initializing the queues?

Not sure. The likely answer is: no. Examining the corrupted persister
log may provide some clues, though.

> I also have the erl_crash.dump if this is a bug that could be fixed
> with a crash.dump, and I have the files from the rabbit dir that are
> causing the crash, if those would be useful to the developers.

The crash dump is likely not useful, but the other files may be very useful.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From 0x6e6562 at gmail.com  Tue Aug  4 17:30:34 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Tue, 4 Aug 2009 17:30:34 +0100
Subject: [rabbitmq-discuss] Fwd:  Erlang client: Future of lib_amqp
In-Reply-To: <82B554A0-F607-41F1-AC8F-5AEAD32BBCC1@epicadvertising.com>
References: <269388e30908031311g51e83796jc97f2cf83fd2b18c@mail.gmail.com>
	<82B554A0-F607-41F1-AC8F-5AEAD32BBCC1@epicadvertising.com>
Message-ID: <269388e30908040930s175239c9wfd9b26610ab28e3d@mail.gmail.com>

---------- Forwarded message ----------
From: Scott Brooks <scott.brooks at epicadvertising.com>
Date: Tue, Aug 4, 2009 at 3:23 PM
Subject: Re: [rabbitmq-discuss] Erlang client: Future of lib_amqp
To: Ben Hood <0x6e6562 at gmail.com>


On 3-Aug-09, at 4:11 PM, Ben Hood wrote:

> Dear List,
>
> Part of the work required to bring the Erlang client up to a
> releasable state involves reviewing the API design of the lib_amqp
> module.
>
> lib_amqp started life as a convenience wrapper around the underlying
> API in the amqp_connection and amqp_channel modules - the original
> motivation was to reduce the verbosity of the AMQP commands by
> supplying overrides for commonly used default values.
>
> Also, it was also an exercise to see if the wrapper could evolve in
> something useful both for and from the people actually using the API.
>
> Subsequently, we augmented the codegen so that it generated sensible
> defaults from the spec, thus obviating the need to have a wrapper to
> do this.
>
> Apart from questioning it's byzantine name, we've had a look at what
> actual value lib_amqp delivers.
>
> In our opinion, it doesn't actually save you that much typing.
> Furthermore, the structuring of the overrides (especially the publish
> methods) conveys little clarity.
>
> So we've decided that lib_amqp's existence is no longer justified and
> that it will be dropped from the pending release of the Erlang client.
>
> Should it transpire that some convenience be provided, then we'll
> consider adding this at some later stage, but only on an as needs
> basis. Hence it would be up to you, the community, to bring forward
> suggestions, if you would like to see some generalized convenience
> functions.
>
> HTH,
>
> Ben
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss

The main feature I saw when using lib_amqp was a constant interface
that divorced the rest of the apps from the rabbitmq server. ?That way
I didn't need to include the rabbit hrl's into the rest of my app, I
just used the interface exposed by lib_amqp.

I've attached a rough patch that expands on it a bit to be able to
adjust the defaults when defining a queue, and exchange.







---------------------
Scott Brooks
Web Developer
Epic Advertising - New York, Toronto, San Francisco, London
www.EpicAdvertising.com
60 Columbia Way, Suite 310
Markham, ON L3R 0C9
(905) 946-0300 x2356 - phone
(888) 666-3120 - fax
scott.brooks at epicadvertising.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: lib_amqp_options.patch
Type: application/octet-stream
Size: 4772 bytes
Desc: not available
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090804/4390d8e0/attachment.obj 

From pekenney at gmail.com  Tue Aug  4 17:33:28 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Tue, 4 Aug 2009 09:33:28 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
Message-ID: <3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>

still looking for some help on this one...

thanks in advance.

re:
On Wed, Jul 29, 2009 at 12:00 PM, Patrick Kenney <pekenney at gmail.com> wrote:

> anybody see anything possible in the code snip below that could cause the
> message to long error displayed at the bottom? note, this error is occurring
> on subscribe, not publish...
>
> I can reproduce it on a xp pro workstation and a windows server 2003 box...
>
> <snip>
> //winform app
> using System;
> using System.Collections.Generic;
> using System.ComponentModel;
> using System.Collections;
> using System.Data;
> using System.Drawing;
> using System.Linq;
> using System.Text;
> using System.Windows.Forms;
> using System.ServiceModel.Web;
> using System.ServiceModel;
> using System.ServiceModel.Channels;
> using System.ServiceModel.Description;
>
> using Test.Base;
> using Test.Entity;
>
> using RabbitMQ.ServiceModel;
> using RabbitMQ.Client;
>
> namespace RabbitMqPubSub1
> {
>     public partial class frmMain : Form
>     {
>         ServiceHost dispatcherHost = null;
>         ServiceHost subscriberHost = null;
>
>         string m_strSubscriber = string.Empty;
>         string m_strDispatcher = string.Empty;
>         string m_strSubscriberHost = string.Empty;
>
>         public frmMain()
>         {
>             InitializeComponent();
>         }
>
>         /// <summary>
>         /// Publish Test Message
>         /// </summary>
>         /// <param name="sender"></param>
>         /// <param name="e"></param>
>         private void btnPub_Click(object sender, EventArgs e)
>         {
>             try
>             {
>                 using (ChannelFactory<IDispatcherService> scf =
> GetDispatcherCF())
>                 {
>                     IDispatcherService client = scf.CreateChannel();
>                     Test.Entity.Message msg = new Test.Entity.Message();
>                     msg.Source = txtPubContent.Text;
>                     msg.Contexts.Add("c1");
>
>                     for (int i = 0; i < 1000; i++) //change seed for
> generic testing...
>                     {
>                         client.Publish(msg);
>                     }
>                 }
>             }
>             catch (Exception ex)
>             {
>                 throw ex;
>             }
>         }
>
>         /// <summary>
>         /// Host The Dispatcher
>         /// </summary>
>         /// <param name="sender"></param>
>         /// <param name="e"></param>
>         private void btnHostDispatcher_Click(object sender, EventArgs e)
>         {
>             if (txtHostDispatcher.Text == string.Empty)
>             {
>                 m_strDispatcher = "amqp:///dispatcher";
>             }
>             else
>             {
>                 m_strDispatcher = txtHostDispatcher.Text;
>             }
>
>             dispatcherHost = new
> ServiceHost(typeof(Dispatcher.DispatcherService), new Uri("soap.amqp:///"));
>             dispatcherHost.AddServiceEndpoint(typeof(IDispatcherService),
> new RabbitMQBinding(new Uri("amqp://localhost:5672/"), Protocols.AMQP_0_8),
> m_strDispatcher);
>             dispatcherHost.CloseTimeout = TimeSpan.FromMinutes(10);
>
>             dispatcherHost.Open();
>         }
>
>         private ChannelFactory<IDispatcherService> GetDispatcherCF()
>         {
>             if (txtHostDispatcher.Text == string.Empty)
>             {
>                 m_strDispatcher = "amqp:///dispatcher";
>             }
>             else
>             {
>                 m_strDispatcher = txtHostDispatcher.Text;
>             }
>
>             ChannelFactory<IDispatcherService> scf;
>
>             //The RabbitMQBinding instantiation is where the error is being
> raised...
>             scf = new ChannelFactory<IDispatcherService>(
>                 new RabbitMQBinding(
>                     new Uri("amqp://localhost:5672/"),
>                         Protocols.AMQP_0_8),
>                             new EndpointAddress(m_strDispatcher));
>
>             return scf;
>         }
>
>         /// <summary>
>         /// Subscribe to queue
>         /// </summary>
>         /// <param name="sender"></param>
>         /// <param name="e"></param>
>         private void btnSubscribe_Click(object sender, EventArgs e)
>         {
>             if (txtHostSubscriberAddress.Text == string.Empty)
>             {
>                 m_strSubscriber = "amqp:///subscriber";
>             }
>             else
>             {
>                 m_strSubscriber = txtHostSubscriberAddress.Text;
>             }
>
>             try
>             {
>                 using (ChannelFactory<IDispatcherService> scf =
> GetDispatcherCF())
>                 {
>                     IDispatcherService client = scf.CreateChannel();
>                     client.Subscribe(new
> Test.Base.SubscriberInfo(m_strSubscriber, "c1", "c2"));
>                 }
>             }
>
>             catch (Exception ex)
>             {
>                 throw ex;
>             }
>         }
>
>         /// <summary>
>         /// Host Subscriber
>         /// </summary>
>         /// <param name="sender"></param>
>         /// <param name="e"></param>
>         private void btnHostSubscriber_Click(object sender, EventArgs e)
>         {
>             if (txtHostSubscriberAddress.Text == string.Empty)
>             {
>                 m_strSubscriberHost = "amqp:///subscriber";
>             }
>             else
>             {
>                 m_strSubscriberHost = txtHostSubscriberAddress.Text;
>             }
>
>             //The ServiceHost must specify a base or absolute endpoint
> address under the soap.amqp scheme.
>             //An endpoint should then be added to the service using the
> RabbitMQBinding.
>             subscriberHost = new
> ServiceHost(typeof(Subscriber.SubscriberService), new Uri("soap.amqp:///"));
>             subscriberHost.AddServiceEndpoint(typeof(ISubscriberService),
> new RabbitMQBinding(new Uri("amqp://localhost:5672/"), Protocols.AMQP_0_8),
> m_strSubscriberHost);
>             subscriberHost.CloseTimeout = TimeSpan.FromMinutes(10);
>
>             subscriberHost.Open();
>         }
>
>         /// <summary>
>         /// Create Queue
>         /// </summary>
>         /// <param name="sender"></param>
>         /// <param name="e"></param>
>         private void btnCreateQueue_Click(object sender, EventArgs e)
>         {
>             string address = "localhost:5672";//"amqp:///";
>             string strQueue = txtQueueName.Text;
>             bool durable = true;
>             string exchange = string.Empty;
>             string routingKey = string.Empty;
>
>             using (IConnection connection = new
> ConnectionFactory().CreateConnection(address))
>             {
>                 using (IModel model = connection.CreateModel())
>                 {
>                     strQueue = model.QueueDeclare(strQueue, durable);
>
>                     model.QueueBind(strQueue, exchange, routingKey, false,
> null);
>                 }
>             }
>         }
>     }
> }
>
> </snip>
>
> RE:
>
> On Thu, Jul 23, 2009 at 9:13 AM, .... wrote:
>
>> although there are no messages any longer then "test message" in the
>> applicable queue...
>>
>> the following is returned...
>>
>> The AMQP operation was interrupted: AMQP close-reason, initiated by
>> Library, code=311, text="The body of a message (18446744073709551575 bytes)
>> was too long.", classId=0, methodId=0,
>> cause=RabbitMQ.Client.Impl.BodyTooLongException: The body of a message
>> (18446744073709551575 bytes) was too long.
>>    at RabbitMQ.Client.Impl.ContentHeaderBase.ReadFrom(Int32 channelNumber,
>> NetworkBinaryReader reader) in
>> C:\RabbitMQ.Client\RabbitMQ\Client\Impl\ContentHeaderBase.cs:line 23
>>    at RabbitMQ.Client.Impl.CommandAssembler.HandleFrame(Frame f) in
>> C:\RabbitMQ.Client\RabbitMQ\Client\Impl\CommandAssembler.cs:line 53
>>    at RabbitMQ.Client.Impl.Session.HandleFrame(Frame frame) in
>> C:\RabbitMQ.Client\RabbitMQ\Client\Impl\Session.cs:line 16
>>    at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in
>> C:\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 434
>>    at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in
>> C:\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 388
>>
>> suggestions, comments, assistance?
>>
>> thanks in advance.
>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090804/946e87d9/attachment.htm 

From tonyg at lshift.net  Tue Aug  4 17:39:05 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 04 Aug 2009 17:39:05 +0100
Subject: [rabbitmq-discuss] Unique Messages in Queue
In-Reply-To: <4e1b00700907311141y53b7e044hfe757c5bfe116d0c@mail.gmail.com>
References: <4e1b00700907310839r69f389c9yaf8cecc951a52fa4@mail.gmail.com>	<4A7323E1.60605@lshift.net>	<4e1b00700907311024q78f976e1h9c37810864ce9384@mail.gmail.com>	<4A733303.5010703@lshift.net>
	<4e1b00700907311141y53b7e044hfe757c5bfe116d0c@mail.gmail.com>
Message-ID: <4A786429.4000700@lshift.net>

Hi Vidit,

You wrote, at the start of this thread, that you "have a message source
that may provide duplicate messages". What kinds of duplicates are we
talking here? One per minute for the next six years, or the occasional
duplicate within a minute of the original followed by no more duplicates
ever?

If it's the former, then a long-term memory is clearly required; if the
latter (i.e. you're coping with the normal possibility of
duplication-because-of-connection-failure-etc), then a simple memory of
say an hour's worth of processed message IDs ought to be enough.

Regards,
  Tony


Vidit Drolia wrote:
> Matthias,
> 
> Minimizing the probability of sending out a duplicate message is the
> practical objective. So you are right in saying that the best we can
> do is to make it very unlikely that a duplicate mail is sent out.
> 
> A filtering proxy would make most sense because I wanted to move away
> from expensive I/O for persistence in the first place, plus if needed,
> redundancy can be introduced later for fault-tolerance.
> 
> Thanks for all the help!
> 
> Best,
> 
> Vidit
> 
> On Fri, Jul 31, 2009 at 2:08 PM, Matthias Radestock<matthias at lshift.net> wrote:
>> Vidit,
>>
>> Vidit Drolia wrote:
>>> The primary problem is that since the action being triggered by the
>>> message is an email, I can't revert the action. So I am trying to
>>> ensure that the application sending emails gets a message only once.
>>> Is there another approach I can take to this problem?
>> If you replace "process(msg)" in my last email with "send_email(msg)", you
>> will see that what you are asking for is impossible. The best one can do (in
>> any system, involving rabbit or not) is to make it *very unlikely* that an
>> email is sent more than once. As long as we can agree on that, let's proceed
>> ...
>>
>> If your main concern is removing the duplicates the senders can produce,
>> then I suggest inserting a filtering proxy, i.e. a process that consumes
>> messages from one queue, de-dups them and publishes the non-dups to another
>> exchange.
>>
>> This process does need to keep some state, so, as you say, if it crashes and
>> the state is lost then you may get some dups. The process is very simple
>> though, so the likelihood of it crashing should be low. Given that we have
>> established that there can be no 100% no-dup guarantee, is it really worth
>> worrying about that? If the answer is yes, then persisting that state, or
>> replicating it between several redundant nodes are possible options.
>>
>>
>> Regards,
>>
>> Matthias.
>>
> 
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss


-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Tue Aug  4 17:40:14 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 04 Aug 2009 17:40:14 +0100
Subject: [rabbitmq-discuss] Recovering from power failure
In-Reply-To: <84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>
References: <84fb38e30908031008y26688ddaw90a7cb77d53156eb@mail.gmail.com>
	<84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>
Message-ID: <4A78646E.1010803@lshift.net>

tsuraan wrote:
> From the eof, I'm guessing that some file wasn't completely written,
> so the persister is pretty angry.

Actually, there may be a "*.previous" file in the same directory. When
the persister is switching files, it makes sure not to delete the
previous file until the new one is ready for use. You might find that
restarting with the .previous file lets you get back in operation again.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From viditdrolia at gmail.com  Tue Aug  4 17:56:00 2009
From: viditdrolia at gmail.com (Vidit Drolia)
Date: Tue, 4 Aug 2009 12:56:00 -0400
Subject: [rabbitmq-discuss] Unique Messages in Queue
In-Reply-To: <4A786429.4000700@lshift.net>
References: <4e1b00700907310839r69f389c9yaf8cecc951a52fa4@mail.gmail.com>
	<4A7323E1.60605@lshift.net>
	<4e1b00700907311024q78f976e1h9c37810864ce9384@mail.gmail.com>
	<4A733303.5010703@lshift.net>
	<4e1b00700907311141y53b7e044hfe757c5bfe116d0c@mail.gmail.com>
	<4A786429.4000700@lshift.net>
Message-ID: <4e1b00700908040956p17ae66cdoe294205f1bccc2b3@mail.gmail.com>

Hi Tony,

There *may* be a one or more duplicates per day. The message source is
Amazon SQS and it does not guarantee that a message is deleted even
after issuing a delete command. Nor do I get an acknowledgement
confirming that the message is deleted. Thus, I am trying to make my
system immune to the constraints imposed by SQS. I am assuming that I
will be able to delete the message within a day but till I did so, my
application needs to be sure that the duplicates are not introduced
into the system.

Best,

Vidit

On Tue, Aug 4, 2009 at 12:39 PM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Hi Vidit,
>
> You wrote, at the start of this thread, that you "have a message source
> that may provide duplicate messages". What kinds of duplicates are we
> talking here? One per minute for the next six years, or the occasional
> duplicate within a minute of the original followed by no more duplicates
> ever?
>
> If it's the former, then a long-term memory is clearly required; if the
> latter (i.e. you're coping with the normal possibility of
> duplication-because-of-connection-failure-etc), then a simple memory of
> say an hour's worth of processed message IDs ought to be enough.
>
> Regards,
> ?Tony
>
>
> Vidit Drolia wrote:
>> Matthias,
>>
>> Minimizing the probability of sending out a duplicate message is the
>> practical objective. So you are right in saying that the best we can
>> do is to make it very unlikely that a duplicate mail is sent out.
>>
>> A filtering proxy would make most sense because I wanted to move away
>> from expensive I/O for persistence in the first place, plus if needed,
>> redundancy can be introduced later for fault-tolerance.
>>
>> Thanks for all the help!
>>
>> Best,
>>
>> Vidit
>>
>> On Fri, Jul 31, 2009 at 2:08 PM, Matthias Radestock<matthias at lshift.net> wrote:
>>> Vidit,
>>>
>>> Vidit Drolia wrote:
>>>> The primary problem is that since the action being triggered by the
>>>> message is an email, I can't revert the action. So I am trying to
>>>> ensure that the application sending emails gets a message only once.
>>>> Is there another approach I can take to this problem?
>>> If you replace "process(msg)" in my last email with "send_email(msg)", you
>>> will see that what you are asking for is impossible. The best one can do (in
>>> any system, involving rabbit or not) is to make it *very unlikely* that an
>>> email is sent more than once. As long as we can agree on that, let's proceed
>>> ...
>>>
>>> If your main concern is removing the duplicates the senders can produce,
>>> then I suggest inserting a filtering proxy, i.e. a process that consumes
>>> messages from one queue, de-dups them and publishes the non-dups to another
>>> exchange.
>>>
>>> This process does need to keep some state, so, as you say, if it crashes and
>>> the state is lost then you may get some dups. The process is very simple
>>> though, so the likelihood of it crashing should be low. Given that we have
>>> established that there can be no 100% no-dup guarantee, is it really worth
>>> worrying about that? If the answer is yes, then persisting that state, or
>>> replicating it between several redundant nodes are possible options.
>>>
>>>
>>> Regards,
>>>
>>> Matthias.
>>>
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
> --
> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>



-- 
Vidit Drolia



From tonyg at lshift.net  Tue Aug  4 17:56:35 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 04 Aug 2009 17:56:35 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>
Message-ID: <4A786843.80908@lshift.net>

Patrick Kenney wrote:
> still looking for some help on this one...

Please send us a capture of all the network packets entering and leaving
the crashing application.

Thanks,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Tue Aug  4 18:14:25 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 04 Aug 2009 18:14:25 +0100
Subject: [rabbitmq-discuss] FW:  rabbitmqctl with window services
In-Reply-To: <4A731809.1020709@lshift.net>
References: <009701ca11f4$aa85ac60$ff910520$@grice@logosworld.com>	<5A46D132C446C04B9EFE8AD14E7891066EE871993F@SVR-2K3-BH-EMC.tradition.int>
	<4A731809.1020709@lshift.net>
Message-ID: <4A786C71.3070804@lshift.net>

Emile Joubert wrote:
> The root cause of the problem is probably that the erlang cookies of the 
>   service account and the account running rabbitmqctl.bat are different. 

That's almost certainly it. The evidence of this, if it is the case,
will be in the RabbitMQ log files: you'll see messages about attempts to
connect from disallowed nodes, or something like that.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From anand.ved at Xoriant.Com  Tue Aug  4 19:44:10 2009
From: anand.ved at Xoriant.Com (Anand Ved)
Date: Wed, 5 Aug 2009 00:14:10 +0530
Subject: [rabbitmq-discuss] Issue in Java client while fetching channel
Message-ID: <FA3D7C54DA3A1540B2C92C93ACD215600582EC41@XOREXCH.India.XoriantCorp.com>

Hi,

I am facing a typical issue while fetching a channel from the connection
while using Java client.

In my code, I was utilizing a connection that is alive and fetching
channels by calling connection.getChannel(); 
While my application server was running for over 3 days, I found that
getting channel obj via calling connection.getChannel() would return
null.

Investigation lead to my not closing the channel after publishing a
message. And I have now closed the channel as soon as I publish. 

Are there any other known scenarios where we would get the channel
object as null. 

My connection params has requestedChannels as 0, requestedHeartbeat as
360 secs. Please suggest.

Regards,
Anand Ved | Xoriant Solutions Pvt. Ltd. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/e4bcddab/attachment.htm 

From tsuraan at gmail.com  Tue Aug  4 20:05:52 2009
From: tsuraan at gmail.com (tsuraan)
Date: Tue, 4 Aug 2009 14:05:52 -0500
Subject: [rabbitmq-discuss] Recovering from power failure
In-Reply-To: <4A78646E.1010803@lshift.net>
References: <84fb38e30908031008y26688ddaw90a7cb77d53156eb@mail.gmail.com>
	<84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>
	<4A78646E.1010803@lshift.net>
Message-ID: <84fb38e30908041205y481f5180q9bdde5489db20991@mail.gmail.com>

> tsuraan wrote:
>> From the eof, I'm guessing that some file wasn't completely written,
>> so the persister is pretty angry.
>
> Actually, there may be a "*.previous" file in the same directory. When
> the persister is switching files, it makes sure not to delete the
> previous file until the new one is ready for use. You might find that
> restarting with the .previous file lets you get back in operation again.

Yeah, there is a .previous file.  it looks like the
rabbit_persister.LOG is 8 bytes, and the .previous file is ~140MB.
The contents of the .previous file look pretty good; at least the
message contents look reasonable from hexdump.  Should the persister
process know how to replace a corrupt log file with the .previous
file?  Also, if I'm using transactions everywhere, would that
.previous contain the queue states after the last successful commit?



From pekenney at gmail.com  Tue Aug  4 22:23:25 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Tue, 4 Aug 2009 14:23:25 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A786843.80908@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>
	<4A786843.80908@lshift.net>
Message-ID: <3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>

do you have a packet capture utility and filter settings that you recommend?

packets get big quick...

thanks in advance.

re:
On Tue, Aug 4, 2009 at 9:56 AM, Tony Garnock-Jones <tonyg at lshift.net> wrote:

> Patrick Kenney wrote:
> > still looking for some help on this one...
>
> Please send us a capture of all the network packets entering and leaving
> the crashing application.
>
> Thanks,
>  Tony
> --
>  [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
>   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
>  []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090804/bcf9835e/attachment.htm 

From n8gray at n8gray.org  Tue Aug  4 23:22:27 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Tue, 4 Aug 2009 15:22:27 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>
Message-ID: <65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>

On Mon, Aug 3, 2009 at 9:42 PM, Cuong Le<cuonglb at facemain.com> wrote:
> Hi Nathan,
>
> Can you log dump rabbitmq log dir and push it on?
>
> It can find at : /var/log/rabbitmq (default)

The server log is pretty uninteresting:

--------------------------------------------
[n8gray at golux]% tail -f /tmp/rabbit.log
Rolling persister log to
"/tmp/rabbitmq-rabbit-mnesia/rabbit_persister.LOG.previous"

=INFO REPORT==== 4-Aug-2009::14:58:39 ===
started TCP listener on 0.0.0.0:5672

=ERROR REPORT==== 4-Aug-2009::14:58:39 ===
Creating new mnesia table for rfc4627_jsonrpc_registry

=INFO REPORT==== 4-Aug-2009::14:58:49 ===
Rolling persister log to
"/tmp/rabbitmq-rabbit-mnesia/rabbit_persister.LOG.previous"

=INFO REPORT==== 4-Aug-2009::14:59:43 ===
debug:: HTTP Channel started, timeout 15

=INFO REPORT==== 4-Aug-2009::14:59:58 ===
debug:: HTTP Channel timed out, closing.

--------------------------------------------
That's it.  I've tried rebuilding erlang, rebuilding rabbitmq, and so
on.  There just don't seem to be a lot of places where things can go
wrong, so I'm not sure what to try next.

BTW, I think I've forgotten to mention what versions of things I'm using.

Erlang: R13B01
Mac OS X 10.5.7
rabbitmq-server 1.6.0
rabbitmq-http2 "default"  (whatever that is)

Cheers,
-n8

-- 
http://n8gray.org



From 0x6e6562 at gmail.com  Tue Aug  4 23:28:35 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Tue, 4 Aug 2009 23:28:35 +0100
Subject: [rabbitmq-discuss] Erlang client: Future of lib_amqp
In-Reply-To: <82B554A0-F607-41F1-AC8F-5AEAD32BBCC1@epicadvertising.com>
References: <269388e30908031311g51e83796jc97f2cf83fd2b18c@mail.gmail.com>
	<82B554A0-F607-41F1-AC8F-5AEAD32BBCC1@epicadvertising.com>
Message-ID: <269388e30908041528y79a55728m6b5bf79c126f62e2@mail.gmail.com>

Scott,

On Tue, Aug 4, 2009 at 3:23 PM, Scott
Brooks<scott.brooks at epicadvertising.com> wrote:
> The main feature I saw when using lib_amqp was a constant interface that
> divorced the rest of the apps from the rabbitmq server. ?That way I didn't
> need to include the rabbit hrl's into the rest of my app, I just used the
> interface exposed by lib_amqp.

On the subject on being able to include header files in a more
convenient way, I have to agree. Since R12B-5 you can load code from
archives, unfortunately the same doesn't apply for header files.

However, I don't think avoiding the need to set the include path in a
make file is sufficient justification to wrap records with functions.

lib_amqp has the tendency to cover over the expressiveness of Erlang's
record and pattern matching syntax. This is even more apparent with a
command structured protocol like AMQP.

> I've attached a rough patch that expands on it a bit to be able to adjust
> the defaults when defining a queue, and exchange.

Thanks for the patch, I've seen what you've tried to achieve, but it
would be inconsistent of me to accept it and still stand behind what I
said above :-) Because the codegen now generates sensible defaults, I
think the plain jane Erlang syntax is most concise way to override
defaults. For example, the default exchange type is the direct
exchange, so declaring a direct exchange looks like this in the lower
API:

amqp_channel:call(Pid, #'exchange.declare'{exchange = <<"foo">>})

If you need this exchange to be a topic exchange, it would look like:

amqp_channel:call(Pid, #'exchange.declare'{exchange = <<"foo">>, type
= <<"topic">>})

lib_amqp shortened this to:

lib_amqp:declare_exchange(Pid, <<"foo">>, <<"topic">>)

Which is not that much shorter. Furthermore, this is the shortest
variant - as soon as you want to set other flags on the
exchange.declare command, the arity of the necessary overloads grows
considerably which in turn reduces clarity. Basic.Publish is probably
the best example of this.

Also, when reading somebody else's code, it is immediately apparent
what each variable means.

A counterexample in lib_amqp is bind_queue. Who remenbers off by heart
what order the parameters (routing key, exchange and queue) are
supposed to be passed in?

Anyway, thanks again for the patch, please don't get discouraged by
the judgement of this particular matter, so keep them coming because
we are interested in popular usage patterns.

HTH,

Ben



From 0x6e6562 at gmail.com  Tue Aug  4 23:31:19 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Tue, 4 Aug 2009 23:31:19 +0100
Subject: [rabbitmq-discuss] Issue in Java client while fetching channel
In-Reply-To: <FA3D7C54DA3A1540B2C92C93ACD215600582EC41@XOREXCH.India.XoriantCorp.com>
References: <FA3D7C54DA3A1540B2C92C93ACD215600582EC41@XOREXCH.India.XoriantCorp.com>
Message-ID: <269388e30908041531ub231c8fg584b8bb1c26074d8@mail.gmail.com>

Anand,

On Tue, Aug 4, 2009 at 7:44 PM, Anand Ved<anand.ved at xoriant.com> wrote:
> Investigation lead to my not closing the channel after publishing a message.
> And I have now closed the channel as soon as I publish.

Why do have to close the channel after you publish each message?

Ben



From patrick.galvin at gmail.com  Wed Aug  5 01:24:19 2009
From: patrick.galvin at gmail.com (Patrick Galvin)
Date: Wed, 5 Aug 2009 01:24:19 +0100
Subject: [rabbitmq-discuss] rabbitmq-server halting with
	rabbit_sasl_report_file_h crash
Message-ID: <3157f260908041724i663dc0cfod49036d5d972d36d@mail.gmail.com>

Hi,

I have been testing rabbitmq for a potential use at work. I am firing about
500 messages/sec (estimate) from 60 or so processes.
All starts well (I can see all the messages being pumped out, all going
quickly) and after a few minutes rabbitmq halts with the error below - '**
gen_event handler rabbit_sasl_report_file_h crashed. '
(same error keeps occuring).

Infrastructure wise I have a simple queue setup with one consumer (erlang
client)  with the producer a java client; sending very short messages
The box is running a single rabbitmq server process and is a quad core, 2
gig box

Things I have tried so far:
Increase the ulimit to 100,000+
Increase the number of consumers to 3 to try and take any load off the
rabbitmq server
Use ERL_MAX_PORTS 10240 / ERL_MAX_ETS_TABLES 10240

Any help would be great,

thanks

Patrick

=ERROR REPORT==== 5-Aug-2009::01:00:42 ===
** Generic server <0.141.0> terminating
** Last message in was {inet_async,#Port<0.1999>,16213,{ok,#Port<0.5041>}}
** When Server state == none
** Reason for termination ==
** {cannot_accept,{error,emfile}}

=INFO REPORT==== 5-Aug-2009::01:00:42 ===
starting TCP connection <0.4894.0> from 192.168.36.72:33078

=INFO REPORT==== 5-Aug-2009::01:00:42 ===
starting TCP connection <0.4895.0> from 192.168.36.72:33079

=ERROR REPORT==== 5-Aug-2009::01:00:42 ===
File operation error: emfile. Target: ./lib.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 5-Aug-2009::01:00:42 ===
File operation error: emfile. Target:
/usr/lib/erlang/lib/kernel-2.13.2/ebin/lib.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 5-Aug-2009::01:00:42 ===
File operation error: emfile. Target:
/usr/lib/erlang/lib/stdlib-1.16.2/ebin/lib.beam. Function: get_file.
Process: code_server.

.... (every lib directory in my install)

=ERROR REPORT==== 5-Aug-2009::01:00:42 ===
File operation error: emfile. Target:
/usr/lib/erlang/lib/appmon-2.1.10.1/ebin/lib.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 5-Aug-2009::01:00:42 ===
File operation error: emfile. Target: lib.beam. Function: get_file. Process:
code_server.

=ERROR REPORT==== 5-Aug-2009::01:00:42 ===
** gen_event handler rabbit_sasl_report_file_h crashed.
** Was installed in error_logger
** Last event was: {error_report,<0.102.0>,
                       {<0.141.0>,crash_report,

[[{initial_call,{tcp_acceptor,init,['Argument__1']}},
                          {pid,<0.141.0>},
                          {registered_name,[]},
                          {error_info,
                              {exit,
                                  {cannot_accept,{error,emfile}},
                                  [{gen_server,terminate,6},
                                   {proc_lib,init_p_do_apply,3}]}},
                          {ancestors,
                              ['tcp_acceptor_sup_0.0.0.0:5672',<0.138.0>,
                               rabbit_sup,<0.103.0>]},
                          {messages,[]},
                          {links,[<0.139.0>]},
                          {dictionary,[]},
                          {trap_exit,false},
                          {status,running},
                          {heap_size,987},
                          {stack_size,24},
                          {reductions,147211}],
                         []]}}
** When handler state ==
{<0.49.0>,"/var/log/rabbitmq/rabbit-sasl.log",error}
** Reason == {'module could not be loaded',
                 [{lib,format_exception,
                      [5,exit,
                       {cannot_accept,{error,emfile}},

[{gen_server,terminate,6},{proc_lib,init_p_do_apply,3}],

#Fun<proc_lib.0.17830618>,#Fun<proc_lib.1.112399459>]},
                  {proc_lib,format_exception,3},
                  {proc_lib,format_rep,1},
                  {proc_lib,format_rep,1},
                  {proc_lib,format_rep,1},
                  {proc_lib,format,1},
                  {sasl_report,write_report2,4},
                  {sasl_report_file_h,handle_event,2}]}

=WARNING REPORT==== 5-Aug-2009::01:03:19 ===
exception on TCP connection <0.736.0> from 192.168.160.203:62435
connection_closed_abruptly
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/be4ea11e/attachment.htm 

From matthias at lshift.net  Wed Aug  5 01:51:07 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Wed, 05 Aug 2009 01:51:07 +0100
Subject: [rabbitmq-discuss] rabbitmq-server halting with
 rabbit_sasl_report_file_h crash
In-Reply-To: <3157f260908041724i663dc0cfod49036d5d972d36d@mail.gmail.com>
References: <3157f260908041724i663dc0cfod49036d5d972d36d@mail.gmail.com>
Message-ID: <4A78D77B.3000906@lshift.net>

Patrick,

Patrick Galvin wrote:
> I have been testing rabbitmq for a potential use at work. I am firing 
> about 500 messages/sec (estimate) from 60 or so processes.
> All starts well (I can see all the messages being pumped out, all going 
> quickly) and after a few minutes rabbitmq halts with the error below - 
> '** gen_event handler rabbit_sasl_report_file_h crashed. '
> (same error keeps occuring).
> 
> Infrastructure wise I have a simple queue setup with one consumer 
> (erlang client)  with the producer a java client; sending very short 
> messages

Based on the error messages you see in the logs, I suspect rabbit has 
run out of file descriptors. I recommend the following:

1) check how many network connections rabbit has open, using netstat and 
'rabbitmqctl list_connections'

2) do the same for the producers and consumers, assuming they are 
running under the same user account.

3) if the figures in 1 or 2 look high, check your client code for any 
connection leaks, or rapid opening & closing of connections.

4) Check and possibly adjusting 'ulimit -n' for the user running rabbit.


Regards,

Matthias.



From pekenney at gmail.com  Wed Aug  5 02:02:30 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Tue, 4 Aug 2009 18:02:30 -0700
Subject: [rabbitmq-discuss] "Unable to write data to the transport
	connection: An established connection was aborted by the
	software in your host machine."
Message-ID: <3a5f03340908041802v293643cbu15aa004d845077dd@mail.gmail.com>

Anybody run across this being raised by the RabbitMQ Client (dotnet) before?

"Unable to write data to the transport connection: An established connection
was aborted by the software in your host machine."

it appears to be frustratingly intermittent...

possibly some kind of buried timeout?

The only thing remotely related I found was this thread...
http://social.msdn.microsoft.com/forums/en-US/netfxnetcom/thread/212feb8f-cf96-4561-9953-40a21d21ea47/

thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090804/a449c109/attachment.htm 

From anand.ved at Xoriant.Com  Wed Aug  5 02:24:44 2009
From: anand.ved at Xoriant.Com (Anand Ved)
Date: Wed, 5 Aug 2009 06:54:44 +0530
Subject: [rabbitmq-discuss] Issue in Java client while fetching channel
In-Reply-To: <269388e30908041531ub231c8fg584b8bb1c26074d8@mail.gmail.com>
References: <FA3D7C54DA3A1540B2C92C93ACD215600582EC41@XOREXCH.India.XoriantCorp.com>
	<269388e30908041531ub231c8fg584b8bb1c26074d8@mail.gmail.com>
Message-ID: <FA3D7C54DA3A1540B2C92C93ACD215600582ECC0@XOREXCH.India.XoriantCorp.com>

Ben,

As per the java client documentation, channel is not thread safe and I have multiple threads that would publish messages to the Q. For each publish, I create a new channel and publish the message. 

Earlier I was not closing the channel and this lead to connection.createChannel() returning null object. Now as per java client document again, it is stated that if there are no channels available or if the current channel number is currently in use, then it would return null. Hence now I have closed the channel after each publish.

If you are aware of any other case where we may end up getting a null channel, then please let me know.

Regards,
Anand Ved | Xoriant Solutions Pvt. Ltd.? 
Modern technology, Owes ecology, An apology. ~Alan M. Eddison - Go Green!!

-----Original Message-----
From: Ben Hood [mailto:0x6e6562 at gmail.com] 
Sent: Wednesday, August 05, 2009 4:01 AM
To: Anand Ved
Cc: rabbitmq
Subject: Re: [rabbitmq-discuss] Issue in Java client while fetching channel

Anand,

On Tue, Aug 4, 2009 at 7:44 PM, Anand Ved<anand.ved at xoriant.com> wrote:
> Investigation lead to my not closing the channel after publishing a message.
> And I have now closed the channel as soon as I publish.

Why do have to close the channel after you publish each message?

Ben



From femtowin at gmail.com  Wed Aug  5 03:36:17 2009
From: femtowin at gmail.com (femto Zheng)
Date: Wed, 5 Aug 2009 10:36:17 +0800
Subject: [rabbitmq-discuss] about the clustering of rabbitmq
In-Reply-To: <4A78590C.9040103@lshift.net>
References: <91170ee40907292227y35b3531wee18ff83f4cb3d22@mail.gmail.com>
	<4A78590C.9040103@lshift.net>
Message-ID: <91170ee40908041936s2ee059cer33dc0e3f7dc6606b@mail.gmail.com>

Hello all,
Tony Garnock-Jones, thanks for the reply,
I'm currently designing a monitor application,
the client(or agent) are on each machine to collect log file, and filter it,
and send back to server to handle it, there's mutliple server for
scaling out consideration,
and anything that monitor interested can't be lost, so it needs some
guruatee semantics
like amqp, so I'm learning amqp, but I don't feel like ampq is exactly
what I needed,
I want to ask these questions somewhere, so what do you suggest I to ask?

On Tue, Aug 4, 2009 at 11:51 PM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> femto Zheng wrote:
>> 'Nodes in a cluster perform some basic load balancing by responding to
>> client connection attempts with AMQP's connection.redirect method as
>> appropriate',
>
> It's also worth pointing out here that connection.redirect is a bit of a
> crude, blunt weapon, and in fact has been *removed* for AMQP 0-9-1. When
> we transition to 0-9-1, it will no longer be available: it will be up to
> clients to know how to connect to the broker. This seems like a
> limitation, but I personally view it as an improvement: it means that
> AMQP concentrates on *messaging*, and leaves load balancing up to load
> balancers -- as it should :-)
>
> Regards,
> ?Tony
> --
> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>



From cuonglb at facemain.com  Wed Aug  5 04:20:37 2009
From: cuonglb at facemain.com (Cuong Le)
Date: Wed, 5 Aug 2009 10:20:37 +0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>
Message-ID: <aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>

Hi Nathan,

Ah ha, because HTTP Channel was closed by timeout handle_info spontaneous.
You must keep-alive it until make json_rpc call close it.

I think it but i was'n tested it because today i'm busy for projects of my
company.

Can you chat with me? at : cuonglb at jabber.org

Regards,
Cuong


On Wed, Aug 5, 2009 at 5:22 AM, Nathan Gray <n8gray at n8gray.org> wrote:

> On Mon, Aug 3, 2009 at 9:42 PM, Cuong Le<cuonglb at facemain.com> wrote:
> > Hi Nathan,
> >
> > Can you log dump rabbitmq log dir and push it on?
> >
> > It can find at : /var/log/rabbitmq (default)
>
> The server log is pretty uninteresting:
>
> --------------------------------------------
> [n8gray at golux]% tail -f /tmp/rabbit.log
> Rolling persister log to
> "/tmp/rabbitmq-rabbit-mnesia/rabbit_persister.LOG.previous"
>
> =INFO REPORT==== 4-Aug-2009::14:58:39 ===
> started TCP listener on 0.0.0.0:5672
>
> =ERROR REPORT==== 4-Aug-2009::14:58:39 ===
> Creating new mnesia table for rfc4627_jsonrpc_registry
>
> =INFO REPORT==== 4-Aug-2009::14:58:49 ===
> Rolling persister log to
> "/tmp/rabbitmq-rabbit-mnesia/rabbit_persister.LOG.previous"
>
> =INFO REPORT==== 4-Aug-2009::14:59:43 ===
> debug:: HTTP Channel started, timeout 15
>
> =INFO REPORT==== 4-Aug-2009::14:59:58 ===
> debug:: HTTP Channel timed out, closing.
>
> --------------------------------------------
> That's it.  I've tried rebuilding erlang, rebuilding rabbitmq, and so
> on.  There just don't seem to be a lot of places where things can go
> wrong, so I'm not sure what to try next.
>
> BTW, I think I've forgotten to mention what versions of things I'm using.
>
> Erlang: R13B01
> Mac OS X 10.5.7
> rabbitmq-server 1.6.0
> rabbitmq-http2 "default"  (whatever that is)
>
> Cheers,
> -n8
>
> --
> http://n8gray.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/0684c809/attachment.htm 

From 0x6e6562 at gmail.com  Wed Aug  5 12:28:24 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Wed, 5 Aug 2009 12:28:24 +0100
Subject: [rabbitmq-discuss] Issue in Java client while fetching channel
In-Reply-To: <FA3D7C54DA3A1540B2C92C93ACD215600582ECC0@XOREXCH.India.XoriantCorp.com>
References: <FA3D7C54DA3A1540B2C92C93ACD215600582EC41@XOREXCH.India.XoriantCorp.com>
	<269388e30908041531ub231c8fg584b8bb1c26074d8@mail.gmail.com>
	<FA3D7C54DA3A1540B2C92C93ACD215600582ECC0@XOREXCH.India.XoriantCorp.com>
Message-ID: <269388e30908050428o29e4e468qdcef39e011c3bdc1@mail.gmail.com>

Arnand,

On Wed, Aug 5, 2009 at 2:24 AM, Anand Ved<anand.ved at xoriant.com> wrote:
> As per the java client documentation, channel is not thread safe and I have multiple threads that would publish messages to the Q. For each publish, I create a new channel and publish the message.

Yes, this is correct - channels are not thread safe. However, this
doesn't mean you have to dispose of them every time you publish a
message, all it means is that they shouldn't be shared across threads.
One way to achieve this is to store the channel in the ThreadLocal.

> Earlier I was not closing the channel and this lead to connection.createChannel() returning null object. Now as per java client document again, it is stated that if there are no channels available or if the current channel number is currently in use, then it would return null. Hence now I have closed the channel after each publish.

On the server side, there is no maximum number of channels per se.
This is only limited by the maximum number of processes in the Erlang
VM, which is 32768 by default, but this can be raised to any number
you like.

> If you are aware of any other case where we may end up getting a null channel, then please let me know.

As it turns out, there is actually a bug in the channel number
allocation method that under some circumstances leads to a null
channel being returned. This appears to be a bug in the HotSpot
compiler (as the attached test proves on some JDKs - I was able to
reproduce it on 1.6.0_14 on 64 bit Linux, but not on OSX or Windows).
The simple solution in the Java client is instead of comparing the max
channel against Integer.MAX_VALUE, compare against Integer.MAX_VALUE -
1, and then the compiler doesn't seem to bin the loop. So I'll raise a
bug for that and push the fix out.

HTH,

Ben
-------------- next part --------------
A non-text attachment was scrubbed...
Name: HotSpotTest.java
Type: text/x-java
Size: 432 bytes
Desc: not available
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/6a626618/attachment.java 

From m.nacos at gmail.com  Wed Aug  5 12:29:45 2009
From: m.nacos at gmail.com (Michael Nacos)
Date: Wed, 5 Aug 2009 12:29:45 +0100
Subject: [rabbitmq-discuss] Erlang client: Future of lib_amqp
In-Reply-To: <269388e30908031311g51e83796jc97f2cf83fd2b18c@mail.gmail.com>
References: <269388e30908031311g51e83796jc97f2cf83fd2b18c@mail.gmail.com>
Message-ID: <407fa4640908050429l14a05ab8tcebdc445e40744b8@mail.gmail.com>

Dear Ben,

I have recently used the erlang client in a project, and I ended up
bypassing the lib_amqp code completely. I did use it as entry point and
reference code, however. IMO, you could probably drop it and provide
more/better documentation with examples.

just my twopence,

Michael

2009/8/3 Ben Hood <0x6e6562 at gmail.com>

>
> Apart from questioning it's byzantine name, we've had a look at what
> actual value lib_amqp delivers.
>
> In our opinion, it doesn't actually save you that much typing.
> Furthermore, the structuring of the overrides (especially the publish
> methods) conveys little clarity.
>
> So we've decided that lib_amqp's existence is no longer justified and
> that it will be dropped from the pending release of the Erlang client.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/138cb59a/attachment.htm 

From 0x6e6562 at gmail.com  Wed Aug  5 12:43:13 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Wed, 5 Aug 2009 12:43:13 +0100
Subject: [rabbitmq-discuss] Erlang client: Future of lib_amqp
In-Reply-To: <407fa4640908050429l14a05ab8tcebdc445e40744b8@mail.gmail.com>
References: <269388e30908031311g51e83796jc97f2cf83fd2b18c@mail.gmail.com>
	<407fa4640908050429l14a05ab8tcebdc445e40744b8@mail.gmail.com>
Message-ID: <269388e30908050443t46253893u906e642df1b3d626@mail.gmail.com>

Michael,

On Wed, Aug 5, 2009 at 12:29 PM, Michael Nacos<m.nacos at gmail.com> wrote:
> I have recently used the erlang client in a project, and I ended up
> bypassing the lib_amqp code completely. I did use it as entry point and
> reference code, however. IMO, you could probably drop it and provide
> more/better documentation with examples.

This is exactly the plan. As part of the upcoming release of the
client we will sort out packaging, API docs and will put together a
developer's guide.

Apart from dropping lib_amqp we are also going to nuke amqp_util and
get rid of the confusing #content{} record.

Ben



From tonyg at lshift.net  Wed Aug  5 14:22:33 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Wed, 05 Aug 2009 14:22:33 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	
	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>	
	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>	
	<4A786843.80908@lshift.net>
	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
Message-ID: <4A798799.6060409@lshift.net>

Hi Patrick,

Sorry -- I don't use windows enough to know what's worth trying. Perhaps
others on the list can suggest something?

Regards,
  Tony


Patrick Kenney wrote:
> do you have a packet capture utility and filter settings that you recommend?
> 
> packets get big quick...
> 
> thanks in advance.
> 
> re:
> On Tue, Aug 4, 2009 at 9:56 AM, Tony Garnock-Jones <tonyg at lshift.net
> <mailto:tonyg at lshift.net>> wrote:
> 
>     Patrick Kenney wrote:
>     > still looking for some help on this one...
> 
>     Please send us a capture of all the network packets entering and leaving
>     the crashing application.
> 
>     Thanks,
>      Tony
>     --
>      [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
>       [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
>      []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
>     <mailto:tonyg at lshift.net>
> 
> 


-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From michael.greene at gmail.com  Wed Aug  5 14:26:43 2009
From: michael.greene at gmail.com (Michael Greene)
Date: Wed, 5 Aug 2009 08:26:43 -0500
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A798799.6060409@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>
	<4A786843.80908@lshift.net>
	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
	<4A798799.6060409@lshift.net>
Message-ID: <f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>

Wireshark (http://www.wireshark.org the former Ethereal) is also the
standard on Windows.  I've been told the newer versions have AMQP
filtering directly, but no matter the version you can filter on the
TCP ports you are using.

Michael

On Wed, Aug 5, 2009 at 8:22 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Hi Patrick,
>
> Sorry -- I don't use windows enough to know what's worth trying. Perhaps
> others on the list can suggest something?
>
> Regards,
> ?Tony
>
>
> Patrick Kenney wrote:
>> do you have a packet capture utility and filter settings that you recommend?
>>
>> packets get big quick...
>>
>> thanks in advance.
>>
>> re:
>> On Tue, Aug 4, 2009 at 9:56 AM, Tony Garnock-Jones <tonyg at lshift.net
>> <mailto:tonyg at lshift.net>> wrote:
>>
>> ? ? Patrick Kenney wrote:
>> ? ? > still looking for some help on this one...
>>
>> ? ? Please send us a capture of all the network packets entering and leaving
>> ? ? the crashing application.
>>
>> ? ? Thanks,
>> ? ? ?Tony
>> ? ? --
>> ? ? ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>> ? ? ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>> ? ? ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>> ? ? <mailto:tonyg at lshift.net>
>>
>>
>
>
> --
> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>



From holger.hoffstaette at googlemail.com  Wed Aug  5 14:38:29 2009
From: holger.hoffstaette at googlemail.com (=?ISO-8859-1?Q?Holger_Hoffst=E4tte?=)
Date: Wed, 05 Aug 2009 15:38:29 +0200
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <4A798799.6060409@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>		<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>		<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>		<4A786843.80908@lshift.net>	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
	<4A798799.6060409@lshift.net>
Message-ID: <4A798B55.6070904@googlemail.com>

Tony Garnock-Jones wrote:
> Sorry -- I don't use windows enough to know what's worth trying. Perhaps
> others on the list can suggest something?

Good old Wireshark (http://www.wireshark.org/) works just fine on Windows.

-h




From sustrik at imatix.com  Wed Aug  5 14:45:39 2009
From: sustrik at imatix.com (Martin Sustrik)
Date: Wed, 05 Aug 2009 15:45:39 +0200
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>	<4A786843.80908@lshift.net>	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>	<4A798799.6060409@lshift.net>
	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>
Message-ID: <4A798D03.4020801@imatix.com>

Yup. There's AMQP dissector shipped with Wireshark. I've used it with 
RabbitMQ on top of AMQP 0-9-1 and it seemed to work well. With AMQP/0-8 
you may encounter some problems as few command IDs were changes between 
versions 0-8 and 0-9. Still, it should dissect most of the commands 
correctly.

Martin

Michael Greene wrote:
> Wireshark (http://www.wireshark.org the former Ethereal) is also the
> standard on Windows.  I've been told the newer versions have AMQP
> filtering directly, but no matter the version you can filter on the
> TCP ports you are using.
> 
> Michael
> 
> On Wed, Aug 5, 2009 at 8:22 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>> Hi Patrick,
>>
>> Sorry -- I don't use windows enough to know what's worth trying. Perhaps
>> others on the list can suggest something?
>>
>> Regards,
>>  Tony
>>
>>
>> Patrick Kenney wrote:
>>> do you have a packet capture utility and filter settings that you recommend?
>>>
>>> packets get big quick...
>>>
>>> thanks in advance.
>>>
>>> re:
>>> On Tue, Aug 4, 2009 at 9:56 AM, Tony Garnock-Jones <tonyg at lshift.net
>>> <mailto:tonyg at lshift.net>> wrote:
>>>
>>>     Patrick Kenney wrote:
>>>     > still looking for some help on this one...
>>>
>>>     Please send us a capture of all the network packets entering and leaving
>>>     the crashing application.
>>>
>>>     Thanks,
>>>      Tony
>>>     --
>>>      [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
>>>       [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
>>>      []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
>>>     <mailto:tonyg at lshift.net>
>>>
>>>
>>
>> --
>>  [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
>>   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
>>  []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
> 
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss




From 0x6e6562 at gmail.com  Wed Aug  5 14:51:10 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Wed, 5 Aug 2009 14:51:10 +0100
Subject: [rabbitmq-discuss] Fwd:  Erlang client: Future of lib_amqp
In-Reply-To: <E548ED85-C5E6-4B08-92E0-0FFB72270FD0@epicadvertising.com>
References: <269388e30908031311g51e83796jc97f2cf83fd2b18c@mail.gmail.com>
	<82B554A0-F607-41F1-AC8F-5AEAD32BBCC1@epicadvertising.com>
	<269388e30908041528y79a55728m6b5bf79c126f62e2@mail.gmail.com>
	<E548ED85-C5E6-4B08-92E0-0FFB72270FD0@epicadvertising.com>
Message-ID: <269388e30908050651x7692d88dj8c5618b307bd724d@mail.gmail.com>

---------- Forwarded message ----------
From: Scott Brooks <scott.brooks at epicadvertising.com>
Date: Wed, Aug 5, 2009 at 2:09 PM
Subject: Re: [rabbitmq-discuss] Erlang client: Future of lib_amqp
To: Ben Hood <0x6e6562 at gmail.com>


Yeah, there are valid reasons on either side. ?It would be nice to
have an interface to program against so if the records changed, it
wouldn't really matter.

Either way once the first real release is out there, there should be a
relatively stable interface.

I've got some patches for the rabbitmq-c library that I'll clean up
and send along.

Thanks
Scott


On 4-Aug-09, at 6:28 PM, Ben Hood wrote:

> Scott,
>
> On Tue, Aug 4, 2009 at 3:23 PM, Scott
> Brooks<scott.brooks at epicadvertising.com> wrote:
>>
>> The main feature I saw when using lib_amqp was a constant interface that
>> divorced the rest of the apps from the rabbitmq server. ?That way I didn't
>> need to include the rabbit hrl's into the rest of my app, I just used the
>> interface exposed by lib_amqp.
>
> On the subject on being able to include header files in a more
> convenient way, I have to agree. Since R12B-5 you can load code from
> archives, unfortunately the same doesn't apply for header files.
>
> However, I don't think avoiding the need to set the include path in a
> make file is sufficient justification to wrap records with functions.
>
> lib_amqp has the tendency to cover over the expressiveness of Erlang's
> record and pattern matching syntax. This is even more apparent with a
> command structured protocol like AMQP.
>
>> I've attached a rough patch that expands on it a bit to be able to adjust
>> the defaults when defining a queue, and exchange.
>
> Thanks for the patch, I've seen what you've tried to achieve, but it
> would be inconsistent of me to accept it and still stand behind what I
> said above :-) Because the codegen now generates sensible defaults, I
> think the plain jane Erlang syntax is most concise way to override
> defaults. For example, the default exchange type is the direct
> exchange, so declaring a direct exchange looks like this in the lower
> API:
>
> amqp_channel:call(Pid, #'exchange.declare'{exchange = <<"foo">>})
>
> If you need this exchange to be a topic exchange, it would look like:
>
> amqp_channel:call(Pid, #'exchange.declare'{exchange = <<"foo">>, type
> = <<"topic">>})
>
> lib_amqp shortened this to:
>
> lib_amqp:declare_exchange(Pid, <<"foo">>, <<"topic">>)
>
> Which is not that much shorter. Furthermore, this is the shortest
> variant - as soon as you want to set other flags on the
> exchange.declare command, the arity of the necessary overloads grows
> considerably which in turn reduces clarity. Basic.Publish is probably
> the best example of this.
>
> Also, when reading somebody else's code, it is immediately apparent
> what each variable means.
>
> A counterexample in lib_amqp is bind_queue. Who remenbers off by heart
> what order the parameters (routing key, exchange and queue) are
> supposed to be passed in?
>
> Anyway, thanks again for the patch, please don't get discouraged by
> the judgement of this particular matter, so keep them coming because
> we are interested in popular usage patterns.
>
> HTH,
>
> Ben

---------------------
Scott Brooks
Web Developer
Epic Advertising - New York, Toronto, San Francisco, London
www.EpicAdvertising.com
60 Columbia Way, Suite 310
Markham, ON L3R 0C9
(905) 946-0300 x2356 - phone
(888) 666-3120 - fax
scott.brooks at epicadvertising.com



From tonyg at lshift.net  Wed Aug  5 16:21:11 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Wed, 05 Aug 2009 16:21:11 +0100
Subject: [rabbitmq-discuss] Recovering from power failure
In-Reply-To: <84fb38e30908041205y481f5180q9bdde5489db20991@mail.gmail.com>
References: <84fb38e30908031008y26688ddaw90a7cb77d53156eb@mail.gmail.com>	
	<84fb38e30908031332rff8b67fjb446f72ab99772fd@mail.gmail.com>	
	<4A78646E.1010803@lshift.net>
	<84fb38e30908041205y481f5180q9bdde5489db20991@mail.gmail.com>
Message-ID: <4A79A367.50403@lshift.net>

Hi again,

tsuraan wrote:
> Yeah, there is a .previous file.  it looks like the
> rabbit_persister.LOG is 8 bytes, and the .previous file is ~140MB.

Ah, that's a relief. That's exactly what's supposed to happen :-)

> The contents of the .previous file look pretty good; at least the
> message contents look reasonable from hexdump.  Should the persister
> process know how to replace a corrupt log file with the .previous
> file?

Possibly; please see previous discussions of this question, e.g.
http://www.nabble.com/Diagnosing-a-problem-to24607945.html#a24710794

As Matthias says in that thread, "The replacing really should happen
automatically. This has been discussed as a possible enhancement on the
mailing list before, but the new persister is going to be ready soon, so
we are not planning any enhancements to the old one."

> Also, if I'm using transactions everywhere, would that
> .previous contain the queue states after the last successful commit?

Yes, that's right. Any incomplete transactions are discarded on recovery.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From pekenney at gmail.com  Wed Aug  5 17:31:22 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Wed, 5 Aug 2009 09:31:22 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A798D03.4020801@imatix.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>
	<4A786843.80908@lshift.net>
	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
	<4A798799.6060409@lshift.net>
	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>
	<4A798D03.4020801@imatix.com>
Message-ID: <3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>

I downloaded Wireshark but do not see anything called AMQP Dissector...

I am attaching a related trace log that I am generating at run time, but I
still seem to be missing the detail I need to resovle the ability to do
simple subscriptions...

any comments, suggestions, etc., would be most welcome...

thanks in advance.

re:
On Wed, Aug 5, 2009 at 6:45 AM, Martin Sustrik <sustrik at imatix.com> wrote:

> Yup. There's AMQP dissector shipped with Wireshark. I've used it with
> RabbitMQ on top of AMQP 0-9-1 and it seemed to work well. With AMQP/0-8
> you may encounter some problems as few command IDs were changes between
> versions 0-8 and 0-9. Still, it should dissect most of the commands
> correctly.
>
> Martin
>
> Michael Greene wrote:
> > Wireshark (http://www.wireshark.org the former Ethereal) is also the
> > standard on Windows.  I've been told the newer versions have AMQP
> > filtering directly, but no matter the version you can filter on the
> > TCP ports you are using.
> >
> > Michael
> >
> > On Wed, Aug 5, 2009 at 8:22 AM, Tony Garnock-Jones<tonyg at lshift.net>
> wrote:
> >> Hi Patrick,
> >>
> >> Sorry -- I don't use windows enough to know what's worth trying. Perhaps
> >> others on the list can suggest something?
> >>
> >> Regards,
> >>  Tony
> >>
> >>
> >> Patrick Kenney wrote:
> >>> do you have a packet capture utility and filter settings that you
> recommend?
> >>>
> >>> packets get big quick...
> >>>
> >>> thanks in advance.
> >>>
> >>> re:
> >>> On Tue, Aug 4, 2009 at 9:56 AM, Tony Garnock-Jones <tonyg at lshift.net
> >>> <mailto:tonyg at lshift.net>> wrote:
> >>>
> >>>     Patrick Kenney wrote:
> >>>     > still looking for some help on this one...
> >>>
> >>>     Please send us a capture of all the network packets entering and
> leaving
> >>>     the crashing application.
> >>>
> >>>     Thanks,
> >>>      Tony
> >>>     --
> >>>      [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
> >>>       [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
> >>>      []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
> >>>     <mailto:tonyg at lshift.net>
> >>>
> >>>
> >>
> >> --
> >>  [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
> >>   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
> >>  []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
> >>
> >> _______________________________________________
> >> rabbitmq-discuss mailing list
> >> rabbitmq-discuss at lists.rabbitmq.com
> >> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
> >>
> >
> > _______________________________________________
> > rabbitmq-discuss mailing list
> > rabbitmq-discuss at lists.rabbitmq.com
> > http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/bab28380/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: System.Net.TraceRabbitMq.log
Type: application/octet-stream
Size: 400405 bytes
Desc: not available
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/bab28380/attachment.obj 

From jasonjwwilliams at gmail.com  Wed Aug  5 18:25:10 2009
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Wed, 5 Aug 2009 11:25:10 -0600
Subject: [rabbitmq-discuss] about the clustering of rabbitmq
In-Reply-To: <4A78590C.9040103@lshift.net>
References: <91170ee40907292227y35b3531wee18ff83f4cb3d22@mail.gmail.com>
	<4A78590C.9040103@lshift.net>
Message-ID: <3b949f090908051025s71c99495qa6c3219e235dd5a8@mail.gmail.com>

> It's also worth pointing out here that connection.redirect is a bit of a
> crude, blunt weapon, and in fact has been *removed* for AMQP 0-9-1. When
> we transition to 0-9-1, it will no longer be available: it will be up to
> clients to know how to connect to the broker. This seems like a
> limitation, but I personally view it as an improvement: it means that
> AMQP concentrates on *messaging*, and leaves load balancing up to load
> balancers -- as it should :-)


>From my point of view that's definitely less than desirable. The
clustered broker has the best point-of-view as to how many clients it
has connected and how much work it's doing. We're still
re-architecting our processing facilities around RMQ for the explicit
purpose of getting rid of the mess of load balancers we currently use.
What we've written so far is architected around the idea that a
primary and backup server are hard-coded into the config for the
client for initial connect and then the broker handles redirecting the
client to the least loaded node, which may not in the config file.
Otherwise, every time you add a Rabbit node you've got to populate
that info amongst your client config files, which means more moving
parts. Just my two cents.

-J



From tonyg at lshift.net  Wed Aug  5 18:38:32 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Wed, 05 Aug 2009 18:38:32 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>	<4A786843.80908@lshift.net>	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>	<4A798799.6060409@lshift.net>	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>	<4A798D03.4020801@imatix.com>
	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>
Message-ID: <4A79C398.8060101@lshift.net>

Hi Patrick,

Patrick Kenney wrote:
> I am attaching a related trace log that I am generating at run time, but
> I still seem to be missing the detail I need to resovle the ability to
> do simple subscriptions...

That's a useful trace. Is the particular trace you attach from a failing
situation? (i.e. a situation with that extremely large content length
number appearing.) We don't see anything particularly out of the
ordinary with it. If you can generate a similar kind of trace but for a
failing situation, that could shed some light on things.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Wed Aug  5 18:40:03 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Wed, 05 Aug 2009 18:40:03 +0100
Subject: [rabbitmq-discuss] "Unable to write data to the
 transport	connection: An established connection was aborted by the	software
 in your host machine."
In-Reply-To: <3a5f03340908041802v293643cbu15aa004d845077dd@mail.gmail.com>
References: <3a5f03340908041802v293643cbu15aa004d845077dd@mail.gmail.com>
Message-ID: <4A79C3F3.8060502@lshift.net>

Patrick Kenney wrote:
> Anybody run across this being raised by the RabbitMQ Client (dotnet) before?
> "Unable to write data to the transport connection: An established
> connection was aborted by the software in your host machine."

If this is happening a lot, please try disabling heartbeats, and let us
know if that makes a difference.

Also: sorry if you've answered these before, but

 - are you running on Windows within a virtual machine?
 - which version of Windows is it?
 - is it a 32-bit or 64-bit operating system?

Thanks,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From g at rre.tt  Wed Aug  5 19:08:15 2009
From: g at rre.tt (Garrett Smith)
Date: Wed, 5 Aug 2009 13:08:15 -0500
Subject: [rabbitmq-discuss] Python library (py-amqplib)
Message-ID: <ce2570e20908051108o3382ed2ke23e9fdd28bd2045@mail.gmail.com>

I've got some feedback (purely constructive :) I'd like to provide the
author of py-amqplib, but I can't locate an appropriate list/forum.

Does feedback for that library belong here? Else, any suggestions?

Thanks!
Garrett



From n8gray at n8gray.org  Wed Aug  5 19:39:43 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Wed, 5 Aug 2009 11:39:43 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>
Message-ID: <65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>

Hi Cuong,

On Tue, Aug 4, 2009 at 8:20 PM, Cuong Le<cuonglb at facemain.com> wrote:
> Hi Nathan,
>
> Ah ha, because HTTP Channel was closed by timeout handle_info spontaneous.
> You must keep-alive it until make json_rpc call close it.

I'm afraid that's not it.  The HTTP channel times out after 15
seconds, but the timeout that's giving me headaches happens after only
5 seconds.

BTW, I set things up on my Ubuntu machine, using the same versions of
everything and got the same problem.  I also tried out the javascript
example code and it seems to work fine, so I guess I'm just doing
something wrong on the client side.  I'm attaching my VERY simple (50
line) python client code.  Can somebody take a look at it and see if
they can spot the problem?

> Can you chat with me? at : cuonglb at jabber.org

Sure, I'll try to catch you.  Thanks!

Cheers,
-n8

-- 
http://n8gray.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: stupidRpc.py
Type: application/octet-stream
Size: 1521 bytes
Desc: not available
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/0b6fc2ca/attachment.obj 

From pekenney at gmail.com  Wed Aug  5 20:13:44 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Wed, 5 Aug 2009 12:13:44 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A79C398.8060101@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>
	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>
	<4A786843.80908@lshift.net>
	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
	<4A798799.6060409@lshift.net>
	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>
	<4A798D03.4020801@imatix.com>
	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>
	<4A79C398.8060101@lshift.net>
Message-ID: <3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>

fyi...the file does contain a failing situation...do a search of the log
text for "abort"

re:
On Wed, Aug 5, 2009 at 10:38 AM, Tony Garnock-Jones <tonyg at lshift.net>wrote:

> Hi Patrick,
>
> Patrick Kenney wrote:
> > I am attaching a related trace log that I am generating at run time, but
> > I still seem to be missing the detail I need to resovle the ability to
> > do simple subscriptions...
>
> That's a useful trace. Is the particular trace you attach from a failing
> situation? (i.e. a situation with that extremely large content length
> number appearing.) We don't see anything particularly out of the
> ordinary with it. If you can generate a similar kind of trace but for a
> failing situation, that could shed some light on things.
>
> Regards,
>   Tony
> --
>  [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
>   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
>  []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/51e6e659/attachment.htm 

From pekenney at gmail.com  Wed Aug  5 20:55:55 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Wed, 5 Aug 2009 12:55:55 -0700
Subject: [rabbitmq-discuss] "Unable to write data to the transport
	connection: An established connection was aborted by the
	software in your host machine."
In-Reply-To: <4A79C3F3.8060502@lshift.net>
References: <3a5f03340908041802v293643cbu15aa004d845077dd@mail.gmail.com>
	<4A79C3F3.8060502@lshift.net>
Message-ID: <3a5f03340908051255g64f47ad5idbb9b7978a1ee38b@mail.gmail.com>

same results on XP Pro or Windows Server 2003, both 32 bit systems...
no virtual machines...

re:
On Wed, Aug 5, 2009 at 10:40 AM, Tony Garnock-Jones <tonyg at lshift.net>wrote:

> Patrick Kenney wrote:
> > Anybody run across this being raised by the RabbitMQ Client (dotnet)
> before?
> > "Unable to write data to the transport connection: An established
> > connection was aborted by the software in your host machine."
>
> If this is happening a lot, please try disabling heartbeats, and let us
> know if that makes a difference.
>
> Also: sorry if you've answered these before, but
>
>  - are you running on Windows within a virtual machine?
>  - which version of Windows is it?
>  - is it a 32-bit or 64-bit operating system?
>
> Thanks,
>  Tony
> --
>  [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
>   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
>  []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/74da23cf/attachment.htm 

From matthias at lshift.net  Wed Aug  5 21:09:39 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Wed, 05 Aug 2009 21:09:39 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>	<4A786843.80908@lshift.net>	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>	<4A798799.6060409@lshift.net>	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>	<4A798D03.4020801@imatix.com>	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>	<4A79C398.8060101@lshift.net>
	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
Message-ID: <4A79E703.7020602@lshift.net>

Patrick,

Patrick Kenney wrote:
> fyi...the file does contain a failing situation...do a search of the log 
> text for "abort"

Googling the "An established connection was aborted by the software in 
your host machine" error suggests that it is usually caused by 
anti-virus software and sometimes firewalls. If you have any of these on 
your machine then try disabling them.


Regards,

Matthias.



From pekenney at gmail.com  Wed Aug  5 21:10:50 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Wed, 5 Aug 2009 13:10:50 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A79E703.7020602@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<4A786843.80908@lshift.net>
	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
	<4A798799.6060409@lshift.net>
	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>
	<4A798D03.4020801@imatix.com>
	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>
	<4A79C398.8060101@lshift.net>
	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
	<4A79E703.7020602@lshift.net>
Message-ID: <3a5f03340908051310g30bf5f5en2cb05b03c18b0790@mail.gmail.com>

thanks I found that previously too, did not help...

On Wed, Aug 5, 2009 at 1:09 PM, Matthias Radestock <matthias at lshift.net>wrote:

> Patrick,
>
> Patrick Kenney wrote:
>
>> fyi...the file does contain a failing situation...do a search of the log
>> text for "abort"
>>
>
> Googling the "An established connection was aborted by the software in your
> host machine" error suggests that it is usually caused by anti-virus
> software and sometimes firewalls. If you have any of these on your machine
> then try disabling them.
>
>
> Regards,
>
> Matthias.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/c2219269/attachment.htm 

From tsuraan at gmail.com  Thu Aug  6 01:57:48 2009
From: tsuraan at gmail.com (tsuraan)
Date: Wed, 5 Aug 2009 19:57:48 -0500
Subject: [rabbitmq-discuss] AMQP Permission Granularity
Message-ID: <84fb38e30908051757p76b5a32ej6b159db9291f4dc9@mail.gmail.com>

Suppose I want to use AMQP to replace RSS (real-time feeds only
though, no history).  Ideally, anybody on the entire 'net would be
able to connect to my Rabbit server and create a queue that's bound to
my "RSS" exchange.  That queue would be temporary and exclusive, so
its lifetime is tied to the client's connection.  Is there any way, in
Rabbit, to create a user that only has the ability to create temporary
exclusive queues, and to bind those queues to an exchange?

It doesn't look like Rabbit's permissions really have this sort of
usage in mind, but I thought I'd ask just to be sure.



From femtowin at gmail.com  Thu Aug  6 02:21:30 2009
From: femtowin at gmail.com (femto Zheng)
Date: Thu, 6 Aug 2009 09:21:30 +0800
Subject: [rabbitmq-discuss] about the clustering of rabbitmq
In-Reply-To: <3b949f090908051025s71c99495qa6c3219e235dd5a8@mail.gmail.com>
References: <91170ee40907292227y35b3531wee18ff83f4cb3d22@mail.gmail.com>
	<4A78590C.9040103@lshift.net>
	<3b949f090908051025s71c99495qa6c3219e235dd5a8@mail.gmail.com>
Message-ID: <91170ee40908051821o72f7a8fbu58961af95b044d3@mail.gmail.com>

No,if using load balancers, the client just needs to know
the load-balancer server, the load-balancer server will know new
server if new server adds into the cluster.

On Thu, Aug 6, 2009 at 1:25 AM, Jason J. W.
Williams<jasonjwwilliams at gmail.com> wrote:
>> It's also worth pointing out here that connection.redirect is a bit of a
>> crude, blunt weapon, and in fact has been *removed* for AMQP 0-9-1. When
>> we transition to 0-9-1, it will no longer be available: it will be up to
>> clients to know how to connect to the broker. This seems like a
>> limitation, but I personally view it as an improvement: it means that
>> AMQP concentrates on *messaging*, and leaves load balancing up to load
>> balancers -- as it should :-)
>
>
> From my point of view that's definitely less than desirable. The
> clustered broker has the best point-of-view as to how many clients it
> has connected and how much work it's doing. We're still
> re-architecting our processing facilities around RMQ for the explicit
> purpose of getting rid of the mess of load balancers we currently use.
> What we've written so far is architected around the idea that a
> primary and backup server are hard-coded into the config for the
> client for initial connect and then the broker handles redirecting the
> client to the least loaded node, which may not in the config file.
> Otherwise, every time you add a Rabbit node you've got to populate
> that info amongst your client config files, which means more moving
> parts. Just my two cents.
>
> -J
>



From tonyg at lshift.net  Thu Aug  6 02:31:34 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Thu, 06 Aug 2009 02:31:34 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	
	<3a5f03340907291200j40f91712ne6fe28aa3ce5191f@mail.gmail.com>	
	<3a5f03340908040933t28e1afceoab1917b9a993b06a@mail.gmail.com>	
	<4A786843.80908@lshift.net>	
	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>	
	<4A798799.6060409@lshift.net>	
	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>	
	<4A798D03.4020801@imatix.com>	
	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>	
	<4A79C398.8060101@lshift.net>
	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
Message-ID: <4A7A3276.9030002@lshift.net>

Patrick Kenney wrote:
> fyi...the file does contain a failing situation...do a search of the log 
> text for "abort"

Yes, but it doesn't have any instances of the "The body of a message 
(18446744073709551575 bytes) was too long" error that we've been 
chasing. Do you have, or can you generate, any traces containing that 
particular problem?

Regards,
   Tony




From pekenney at gmail.com  Thu Aug  6 03:51:15 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Wed, 5 Aug 2009 19:51:15 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A7A3276.9030002@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<4A786843.80908@lshift.net>
	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
	<4A798799.6060409@lshift.net>
	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>
	<4A798D03.4020801@imatix.com>
	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>
	<4A79C398.8060101@lshift.net>
	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
	<4A7A3276.9030002@lshift.net>
Message-ID: <3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>

the trace I have attached previously and again here is the output of the
following configured 4 trace listeners...
      System.Net
      System.Net.Sockets
      System.Net.Cache
      System.Net.HttpListener

The applicable configuration of which is depicted in the attached
tracelistenerconfig.txt file

the listener trace is showing the software aborted messages, that occur
concurrently with the message too long errors...

It appears the real error is occurring in the RabbitMq Client dll...

The error I am able to capture in debug mode from the rabbitmq client dll
is...
The AMQP operation was interrupted: AMQP close-reason, initiated by Library,
code=311, text="The body of a message (18446744073709551565 bytes) was too
long.", classId=0, methodId=0,
cause=RabbitMQ.Client.Impl.BodyTooLongException: The body of a message
(18446744073709551565 bytes) was too long.
   at RabbitMQ.Client.Impl.ContentHeaderBase.ReadFrom(Int32 channelNumber,
NetworkBinaryReader reader) in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\ContentHeaderBase.cs:line
23
   at RabbitMQ.Client.Impl.CommandAssembler.HandleFrame(Frame f) in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\CommandAssembler.cs:line
53
   at RabbitMQ.Client.Impl.Session.HandleFrame(Frame frame) in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\Session.cs:line
16
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line
434
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line
388

since the rabbitmq client dll is not returning the error the only thing I am
getting from my test consumer code previously posted is...

btnSubscribe_Click Error: Cannot access a disposed object.
Object name: 'System.Net.Sockets.NetworkStream'.

Which obviously comes much after the message too long error...

the message is "test message"

re:
On Wed, Aug 5, 2009 at 6:31 PM, Tony Garnock-Jones <tonyg at lshift.net> wrote:

> Patrick Kenney wrote:
>
>> fyi...the file does contain a failing situation...do a search of the log
>> text for "abort"
>>
>
> Yes, but it doesn't have any instances of the "The body of a message
> (18446744073709551575 bytes) was too long" error that we've been chasing. Do
> you have, or can you generate, any traces containing that particular
> problem?
>
> Regards,
>  Tony
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090805/50353928/attachment.htm 
-------------- next part --------------
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::TcpClient(InterNetwork#2)
    DateTime=2009-08-06T02:33:43.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Socket(InterNetwork#2)
    DateTime=2009-08-06T02:33:43.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Socket() 
    DateTime=2009-08-06T02:33:43.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::TcpClient() 
    DateTime=2009-08-06T02:33:43.5156250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::TcpClient()
    DateTime=2009-08-06T02:33:43.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::TcpClient() 
    DateTime=2009-08-06T02:33:43.5312500Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::Connect(localhost)
    DateTime=2009-08-06T02:33:43.5312500Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostAddresses(localhost)
    DateTime=2009-08-06T02:33:43.5468750Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostByName(localhost)
    DateTime=2009-08-06T02:33:43.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostByName() 	-> IPHostEntry#3888474
    DateTime=2009-08-06T02:33:43.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostAddresses() 	-> IPAddress[]#25209742
    DateTime=2009-08-06T02:33:43.6093750Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:33:43.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:33:43.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Connect() 
    DateTime=2009-08-06T02:33:43.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::Connect() 
    DateTime=2009-08-06T02:33:43.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::Connect() 
    DateTime=2009-08-06T02:33:43.6562500Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::GetStream()
    DateTime=2009-08-06T02:33:43.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::GetStream() 	-> NetworkStream#26966483
    DateTime=2009-08-06T02:33:43.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:43.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 41 4D 51 50                                     : AMQP
    DateTime=2009-08-06T02:33:43.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 4#4
    DateTime=2009-08-06T02:33:43.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:43.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:43.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:43.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:43.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:43.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:43.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:43.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:43.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:44.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:44.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:44.0312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:44.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:44.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.0625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:44.0625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 01 20                                     : ... 
    DateTime=2009-08-06T02:33:44.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:44.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:44.0937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 0A 00 0A 08 00 00 00-00 FB 07 70 72 6F 64 75 : ...........produ
    DateTime=2009-08-06T02:33:44.0937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 63 74 53 00 00 00 08 52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
    DateTime=2009-08-06T02:33:44.1093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 76 65 72 73 69 6F 6E 53-00 00 00 05 31 2E 36 2E : versionS....1.6.
    DateTime=2009-08-06T02:33:44.1093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 0A 45 : 0.platformS....E
    DateTime=2009-08-06T02:33:44.1250000Z
System.Net.Sockets Verbose: 0 : [2660] 00000040 : 72 6C 61 6E 67 2F 4F 54-50 09 63 6F 70 79 72 69 : rlang/OTP.copyri
    DateTime=2009-08-06T02:33:44.1406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000050 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:33:44.1406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000060 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 39 20 : t (C) 2007-2009 
    DateTime=2009-08-06T02:33:44.1406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000070 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:33:44.1562500Z
System.Net.Sockets Verbose: 0 : [2660] 00000080 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:33:44.1718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000090 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:33:44.1718750Z
System.Net.Sockets Verbose: 0 : [2660] 000000A0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:33:44.1718750Z
System.Net.Sockets Verbose: 0 : [2660] 000000B0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 0B : chnologies Ltd..
    DateTime=2009-08-06T02:33:44.1875000Z
System.Net.Sockets Verbose: 0 : [2660] 000000C0 : 69 6E 66 6F 72 6D 61 74-69 6F 6E 53 00 00 00 35 : informationS...5
    DateTime=2009-08-06T02:33:44.1875000Z
System.Net.Sockets Verbose: 0 : [2660] 000000D0 : 4C 69 63 65 6E 73 65 64-20 75 6E 64 65 72 20 74 : Licensed under t
    DateTime=2009-08-06T02:33:44.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 000000E0 : 68 65 20 4D 50 4C 2E 20-20 53 65 65 20 68 74 74 : he MPL.  See htt
    DateTime=2009-08-06T02:33:44.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 000000F0 : 70 3A 2F 2F 77 77 77 2E-72 61 62 62 69 74 6D 71 : p://www.rabbitmq
    DateTime=2009-08-06T02:33:44.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000100 : 2E 63 6F 6D 2F 00 00 00-0E 50 4C 41 49 4E 20 41 : .com/....PLAIN A
    DateTime=2009-08-06T02:33:44.2187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000110 : 4D 51 50 4C 41 49 4E 00-00 00 05 65 6E 5F 55 53 : MQPLAIN....en_US
    DateTime=2009-08-06T02:33:44.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 288#288
    DateTime=2009-08-06T02:33:44.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:44.2343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:44.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:44.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:44.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:44.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:44.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:44.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:44.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:44.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 1B                                              : .
    DateTime=2009-08-06T02:33:44.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 0B 00 00 00 F7-07 70 72 6F 64 75 63 74 : .........product
    DateTime=2009-08-06T02:33:44.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 53 00 00 00 08 52 61 62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
    DateTime=2009-08-06T02:33:44.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 72 73 69 6F 6E 53 00 00-00 07 31 2E 36 2E 30 2E : rsionS....1.6.0.
    DateTime=2009-08-06T02:33:44.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
    DateTime=2009-08-06T02:33:44.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 4E 45 54 0B 69 6E 66 6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
    DateTime=2009-08-06T02:33:44.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 00 00 00 35 4C 69 63 65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
    DateTime=2009-08-06T02:33:44.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 65 72 20 74 68 65 20 4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
    DateTime=2009-08-06T02:33:44.6562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 20 68 74 74 70 3A 2F 2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
    DateTime=2009-08-06T02:33:44.6562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 69 74 6D 71 2E 63 6F 6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
    DateTime=2009-08-06T02:33:44.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:33:44.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008 
    DateTime=2009-08-06T02:33:44.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:33:44.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:33:45.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:33:45.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:33:45.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
    DateTime=2009-08-06T02:33:45.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 50 4C 41 49 4E 00 00 00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
    DateTime=2009-08-06T02:33:45.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 67 75 65 73 74 05 65 6E-5F 55 53                : guest.en_US
    DateTime=2009-08-06T02:33:45.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 283#283
    DateTime=2009-08-06T02:33:45.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.1562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.1875000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 0C                                     : ....
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:45.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.2187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 0A 00 1E 00 00 00 02-00 00 00 00             : ............
    DateTime=2009-08-06T02:33:45.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 12#12
    DateTime=2009-08-06T02:33:45.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.2343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:45.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:45.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 1F 00 00 00 02-00 00 00 03             : ............
    DateTime=2009-08-06T02:33:45.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 12#12
    DateTime=2009-08-06T02:33:45.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:45.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.5625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:45.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 28 01 2F 00 01-                        : ...(./..
    DateTime=2009-08-06T02:33:45.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 8#8
    DateTime=2009-08-06T02:33:45.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:45.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:45.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:45.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 17                                     : ....
    DateTime=2009-08-06T02:33:45.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:45.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 0A 00 29 12 50 61 74-72 69 63 6B 4B 65 6E 6E : ...).PatrickKenn
    DateTime=2009-08-06T02:33:45.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 65 79 3A 35 36 37 32                            : ey:5672
    DateTime=2009-08-06T02:33:45.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 23#23
    DateTime=2009-08-06T02:33:45.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.9687500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:45.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.0781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:33:46.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:33:46.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 5#5
    DateTime=2009-08-06T02:33:46.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:46.2187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:46.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:46.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:46.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2500000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:46.2656250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:46.2656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.2656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2656250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:33:46.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:46.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:46.2968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:46.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.3437500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:33:46.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:33:46.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:33:46.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 5#5
    DateTime=2009-08-06T02:33:46.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.5312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:46.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:33:46.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:46.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.5468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:46.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:46.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.5625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:33:46.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:46.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:46.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:46.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.6406250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.3437500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.3593750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.3593750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.3750000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.3750000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.4062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.4062500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.4375000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.4531250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.4843750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.5000000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.5156250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.5156250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.5156250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.5312500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.5312500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.5468750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.5468750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.5625000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.5625000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.5781250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.5781250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.5937500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.5937500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:33:47.5937500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.6250000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 32 00 0A 00 00 00 0C-00 00 00 00             : .2..........
    DateTime=2009-08-06T02:33:47.6718750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 12#12
    DateTime=2009-08-06T02:33:47.6875000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:47.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:47.7343750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.7343750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:47.7500000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:47.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 2D                                     : ...-
    DateTime=2009-08-06T02:33:47.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:47.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 32 00 0B 20 61 6D 71-2E 67 65 6E 2D 4D 64 4A : .2.. amq.gen-MdJ
    DateTime=2009-08-06T02:33:47.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 6D 6C 30 69 58 6A 6F 69-6A 52 63 6B 45 76 4D 4C : ml0iXjoijRckEvML
    DateTime=2009-08-06T02:33:47.8281250Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 45 71 51 3D 3D 00 00 00-00 00 00 00 00          : EqQ==........
    DateTime=2009-08-06T02:33:47.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 45#45
    DateTime=2009-08-06T02:33:47.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.8437500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:47.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:47.8593750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.8906250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.9062500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.9218750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.9218750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.9218750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.9375000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.9531250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.9531250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.9843750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.9843750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.9843750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.0000000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.0000000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.0156250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.0156250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.0312500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.0468750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.0468750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.0781250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.0937500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 39                                              : 9
    DateTime=2009-08-06T02:33:48.1562500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.1875000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.2500000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.2812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 32 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 4D : .2.... amq.gen-M
    DateTime=2009-08-06T02:33:48.3750000Z
System.Net.Sockets Verbose: 0 : [2016] 00000010 : 64 4A 6D 6C 30 69 58 6A-6F 69 6A 52 63 6B 45 76 : dJml0iXjoijRckEv
    DateTime=2009-08-06T02:33:48.4062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000020 : 4D 4C 45 71 51 3D 3D 00-0B 2F 64 69 73 70 61 74 : MLEqQ==../dispat
    DateTime=2009-08-06T02:33:48.4062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000030 : 63 68 65 72 00 00 00 00-00                      : cher.....
    DateTime=2009-08-06T02:33:48.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 57#57
    DateTime=2009-08-06T02:33:48.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.4375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.4375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:48.4531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:48.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.4843750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.4843750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:48.5000000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.5156250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:48.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:48.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:48.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:48.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.5625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 32 00 15                                     : .2..
    DateTime=2009-08-06T02:33:48.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:48.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.5937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:48.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:48.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.6250000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.6406250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:48.6562500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.6875000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.6875000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.7031250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.7187500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.7187500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.7343750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:48.7343750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.7500000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.7500000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.7656250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.7656250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.7812500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.7812500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.8125000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.8125000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.8281250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.8281250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.8437500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.8437500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 29                                              : )
    DateTime=2009-08-06T02:33:48.8593750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 3C 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 4D : .<.... amq.gen-M
    DateTime=2009-08-06T02:33:48.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000010 : 64 4A 6D 6C 30 69 58 6A-6F 69 6A 52 63 6B 45 76 : dJml0iXjoijRckEv
    DateTime=2009-08-06T02:33:48.9062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000020 : 4D 4C 45 71 51 3D 3D 00-00                      : MLEqQ==..
    DateTime=2009-08-06T02:33:48.9062500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 41#41
    DateTime=2009-08-06T02:33:48.9218750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:48.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:48.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.9531250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.9687500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:48.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.9843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:48.9843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:49.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:49.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:49.0156250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 26                                     : ...&
    DateTime=2009-08-06T02:33:49.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:49.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:49.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:49.0468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 15 21 61 6D 71-2E 63 74 61 67 2D 38 56 : .<..!amq.ctag-8V
    DateTime=2009-08-06T02:33:49.0468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 61 4D 6F 41 4C 74 73 47-2F 59 6D 71 2F 49 2B 57 : aMoALtsG/Ymq/I+W
    DateTime=2009-08-06T02:33:49.0625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 56 48 4F 77 3D 3D                               : VHOw==
    DateTime=2009-08-06T02:33:49.0625000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 38#38
    DateTime=2009-08-06T02:33:49.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:49.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:49.0937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:49.0937500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:49.1093750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:49.1875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.5468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:51.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:51.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:51.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:51.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:33:51.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:51.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.6406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:51.6406250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:33:51.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:51.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:51.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:51.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.0000000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:52.0156250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.0156250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.0312500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.0312500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.0468750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.0781250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.0781250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.0937500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.1250000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.1406250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.1562500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.1875000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.2343750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.2812500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.3125000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.3593750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.3750000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.3906250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.4218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:52.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:33:52.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.4531250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:52.4531250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:54.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:54.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:54.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:54.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.6406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:33:54.6406250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:54.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:54.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:33:54.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:54.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:54.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.4843750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:55.4843750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.5156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.5468750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.5781250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.5937500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.5937500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.6093750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.6093750Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::TcpClient(InterNetwork#2)
    DateTime=2009-08-06T02:33:55.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Socket(InterNetwork#2)
    DateTime=2009-08-06T02:33:55.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Socket() 
    DateTime=2009-08-06T02:33:55.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::TcpClient() 
    DateTime=2009-08-06T02:33:55.6406250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::TcpClient()
    DateTime=2009-08-06T02:33:55.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::TcpClient() 
    DateTime=2009-08-06T02:33:55.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.6875000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.7187500Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::Connect(localhost)
    DateTime=2009-08-06T02:33:55.7187500Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostAddresses(localhost)
    DateTime=2009-08-06T02:33:55.7343750Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostByName(localhost)
    DateTime=2009-08-06T02:33:55.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostByName() 	-> IPHostEntry#65326725
    DateTime=2009-08-06T02:33:55.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostAddresses() 	-> IPAddress[]#61150033
    DateTime=2009-08-06T02:33:55.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.7656250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.7968750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.7968750Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:33:55.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:33:55.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Connect() 
    DateTime=2009-08-06T02:33:55.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::Connect() 
    DateTime=2009-08-06T02:33:55.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::Connect() 
    DateTime=2009-08-06T02:33:55.8437500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.8750000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:55.8906250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::GetStream()
    DateTime=2009-08-06T02:33:55.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::GetStream() 	-> NetworkStream#24123405
    DateTime=2009-08-06T02:33:55.9062500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:33:55.9062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.9218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.9218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:55.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:55.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:55.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:55.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 41 4D 51 50                                     : AMQP
    DateTime=2009-08-06T02:33:55.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 4#4
    DateTime=2009-08-06T02:33:56.0000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:56.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.2031250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.2343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:56.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:56.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:56.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.4062500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.4218750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 01 20                                     : ... 
    DateTime=2009-08-06T02:33:56.4218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:56.4218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.4531250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 0A 00 0A 08 00 00 00-00 FB 07 70 72 6F 64 75 : ...........produ
    DateTime=2009-08-06T02:33:56.4531250Z
System.Net.Sockets Verbose: 0 : [2148] 00000010 : 63 74 53 00 00 00 08 52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
    DateTime=2009-08-06T02:33:56.4687500Z
System.Net.Sockets Verbose: 0 : [2148] 00000020 : 76 65 72 73 69 6F 6E 53-00 00 00 05 31 2E 36 2E : versionS....1.6.
    DateTime=2009-08-06T02:33:56.4687500Z
System.Net.Sockets Verbose: 0 : [2148] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 0A 45 : 0.platformS....E
    DateTime=2009-08-06T02:33:56.4843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000040 : 72 6C 61 6E 67 2F 4F 54-50 09 63 6F 70 79 72 69 : rlang/OTP.copyri
    DateTime=2009-08-06T02:33:56.4843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000050 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:33:56.4843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000060 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 39 20 : t (C) 2007-2009 
    DateTime=2009-08-06T02:33:56.5000000Z
System.Net.Sockets Verbose: 0 : [2148] 00000070 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:33:56.5156250Z
System.Net.Sockets Verbose: 0 : [2148] 00000080 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:33:56.5156250Z
System.Net.Sockets Verbose: 0 : [2148] 00000090 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:33:56.5312500Z
System.Net.Sockets Verbose: 0 : [2148] 000000A0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:33:56.5312500Z
System.Net.Sockets Verbose: 0 : [2148] 000000B0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 0B : chnologies Ltd..
    DateTime=2009-08-06T02:33:56.5468750Z
System.Net.Sockets Verbose: 0 : [2148] 000000C0 : 69 6E 66 6F 72 6D 61 74-69 6F 6E 53 00 00 00 35 : informationS...5
    DateTime=2009-08-06T02:33:56.5468750Z
System.Net.Sockets Verbose: 0 : [2148] 000000D0 : 4C 69 63 65 6E 73 65 64-20 75 6E 64 65 72 20 74 : Licensed under t
    DateTime=2009-08-06T02:33:56.5625000Z
System.Net.Sockets Verbose: 0 : [2148] 000000E0 : 68 65 20 4D 50 4C 2E 20-20 53 65 65 20 68 74 74 : he MPL.  See htt
    DateTime=2009-08-06T02:33:56.5625000Z
System.Net.Sockets Verbose: 0 : [2148] 000000F0 : 70 3A 2F 2F 77 77 77 2E-72 61 62 62 69 74 6D 71 : p://www.rabbitmq
    DateTime=2009-08-06T02:33:56.5781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000100 : 2E 63 6F 6D 2F 00 00 00-0E 50 4C 41 49 4E 20 41 : .com/....PLAIN A
    DateTime=2009-08-06T02:33:56.5781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000110 : 4D 51 50 4C 41 49 4E 00-00 00 05 65 6E 5F 55 53 : MQPLAIN....en_US
    DateTime=2009-08-06T02:33:56.5937500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 288#288
    DateTime=2009-08-06T02:33:56.5937500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.6093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:56.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:56.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.7187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 1B                                              : .
    DateTime=2009-08-06T02:33:56.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 0B 00 00 00 F7-07 70 72 6F 64 75 63 74 : .........product
    DateTime=2009-08-06T02:33:56.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 53 00 00 00 08 52 61 62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
    DateTime=2009-08-06T02:33:56.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 72 73 69 6F 6E 53 00 00-00 07 31 2E 36 2E 30 2E : rsionS....1.6.0.
    DateTime=2009-08-06T02:33:56.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
    DateTime=2009-08-06T02:33:56.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 4E 45 54 0B 69 6E 66 6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
    DateTime=2009-08-06T02:33:56.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 00 00 00 35 4C 69 63 65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
    DateTime=2009-08-06T02:33:56.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 65 72 20 74 68 65 20 4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
    DateTime=2009-08-06T02:33:56.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 20 68 74 74 70 3A 2F 2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
    DateTime=2009-08-06T02:33:56.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 69 74 6D 71 2E 63 6F 6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
    DateTime=2009-08-06T02:33:56.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:33:56.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008 
    DateTime=2009-08-06T02:33:56.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:33:56.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:33:56.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:33:57.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:33:57.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
    DateTime=2009-08-06T02:33:57.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 50 4C 41 49 4E 00 00 00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
    DateTime=2009-08-06T02:33:57.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 67 75 65 73 74 05 65 6E-5F 55 53                : guest.en_US
    DateTime=2009-08-06T02:33:57.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 283#283
    DateTime=2009-08-06T02:33:57.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.0468750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:57.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:57.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.1093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:57.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:57.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.1406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 0C                                     : ....
    DateTime=2009-08-06T02:33:57.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:57.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.1718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 0A 00 1E 00 00 00 02-00 00 00 00             : ............
    DateTime=2009-08-06T02:33:57.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 12#12
    DateTime=2009-08-06T02:33:57.1875000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.1875000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.2031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:57.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:57.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.2812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.3125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:33:57.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 1F 00 00 00 02-00 00 00 03             : ............
    DateTime=2009-08-06T02:33:57.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 12#12
    DateTime=2009-08-06T02:33:57.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:57.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.6562500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:57.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:57.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:57.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.7187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.7500000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:57.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:57.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:57.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:33:57.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:57.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:57.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:57.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:57.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:33:57.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 28 01 2F 00 01-                        : ...(./..
    DateTime=2009-08-06T02:33:57.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 8#8
    DateTime=2009-08-06T02:33:57.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:57.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.9531250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.9843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:58.0000000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.0312500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:58.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:58.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.0625000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 17                                     : ....
    DateTime=2009-08-06T02:33:58.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:58.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.0937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 0A 00 29 12 50 61 74-72 69 63 6B 4B 65 6E 6E : ...).PatrickKenn
    DateTime=2009-08-06T02:33:58.1093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000010 : 65 79 3A 35 36 37 32                            : ey:5672
    DateTime=2009-08-06T02:33:58.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 23#23
    DateTime=2009-08-06T02:33:58.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.1406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:58.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.2187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.3125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:33:58.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:33:58.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 5#5
    DateTime=2009-08-06T02:33:58.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.5000000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.5156250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.5312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:58.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.5468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.5625000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:58.5625000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:58.5781250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.5781250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.5937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:58.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:58.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.6250000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:33:58.6406250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:58.6406250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.6562500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.6718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:58.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.7343750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:33:58.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:33:58.9375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:33:58.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:58.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.0000000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:59.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 5#5
    DateTime=2009-08-06T02:33:59.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.0468750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:59.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.0781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:59.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:59.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.1093750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.1250000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.1562500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.1718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:33:59.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:59.1875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.2187500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.2343750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.2343750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.2500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:59.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.2812500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.2968750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.2968750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:59.3125000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.3125000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.3281250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:33:59.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.3437500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.3593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.3593750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.3750000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:59.3750000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.4218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.4375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:59.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:59.4531250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.4843750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:59.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:33:59.5156250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.5312500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:59.5468750Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.5781250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:59.5937500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.5937500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.6250000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.6562500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.7031250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.7187500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.7500000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.7500000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:59.7656250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.7968750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.8437500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.8593750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.8750000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.8906250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.8906250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.9062500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.9062500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.9218750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.9218750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.9375000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.9531250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.9531250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.9687500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.9687500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:33:59.9843750Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.0000000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.0000000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.0156250Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00 32 00 0A 00 00 00 0C-00 00 00 00             : .2..........
    DateTime=2009-08-06T02:34:00.0156250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 12#12
    DateTime=2009-08-06T02:34:00.0312500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.0312500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.0468750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:00.0625000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.0781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:00.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:00.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.1093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:00.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:00.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.1562500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 2D                                     : ...-
    DateTime=2009-08-06T02:34:00.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:00.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.1875000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 32 00 0B 20 61 6D 71-2E 67 65 6E 2D 72 37 6C : .2.. amq.gen-r7l
    DateTime=2009-08-06T02:34:00.1875000Z
System.Net.Sockets Verbose: 0 : [2148] 00000010 : 69 42 75 50 4C 55 45 7A-4C 55 50 79 68 6B 6A 5A : iBuPLUEzLUPyhkjZ
    DateTime=2009-08-06T02:34:00.2031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000020 : 69 68 67 3D 3D 00 00 00-00 00 00 00 00          : ihg==........
    DateTime=2009-08-06T02:34:00.2031250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 45#45
    DateTime=2009-08-06T02:34:00.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.2343750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.2343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:00.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:00.2500000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.2656250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.2812500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:00.2812500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.2968750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.3125000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.3281250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.3281250Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:00.3437500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.3437500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.3593750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.3593750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:00.3750000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.3750000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.3906250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.4062500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:00.4062500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.4218750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.4375000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.4375000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:00.4531250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.4531250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.4687500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.4687500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:00.4843750Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.4843750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.5000000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.5156250Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 39                                              : 9
    DateTime=2009-08-06T02:34:00.5156250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.5312500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.5468750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.5468750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00 32 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 72 : .2.... amq.gen-r
    DateTime=2009-08-06T02:34:00.5625000Z
System.Net.Sockets Verbose: 0 : [2364] 00000010 : 37 6C 69 42 75 50 4C 55-45 7A 4C 55 50 79 68 6B : 7liBuPLUEzLUPyhk
    DateTime=2009-08-06T02:34:00.5781250Z
System.Net.Sockets Verbose: 0 : [2364] 00000020 : 6A 5A 69 68 67 3D 3D 00-0B 2F 73 75 62 73 63 72 : jZihg==../subscr
    DateTime=2009-08-06T02:34:00.5781250Z
System.Net.Sockets Verbose: 0 : [2364] 00000030 : 69 62 65 72 00 00 00 00-00                      : iber.....
    DateTime=2009-08-06T02:34:00.5937500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 57#57
    DateTime=2009-08-06T02:34:00.5937500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.6093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:00.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:00.6406250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.6562500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:00.6562500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.6875000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:00.7031250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:00.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:00.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:00.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:00.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.7968750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:34:00.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:00.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:00.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:00.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:00.8593750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.8593750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:00.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:00.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:00.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.9062500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 32 00 15                                     : .2..
    DateTime=2009-08-06T02:34:00.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:00.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:00.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:00.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:00.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.9687500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:00.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.9843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:01.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:01.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:01.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:01.0468750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.0468750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.0625000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:01.0781250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.0937500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.0937500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.1250000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:01.1406250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.1875000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.2031250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.2343750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:01.2500000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.2656250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.2968750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.3125000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:01.3593750Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.3906250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.3906250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.4062500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:01.4062500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.4218750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.4375000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.4375000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:01.4531250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.4687500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.4687500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.4843750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 29                                              : )
    DateTime=2009-08-06T02:34:01.5000000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.5156250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.5156250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.5312500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00 3C 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 72 : .<.... amq.gen-r
    DateTime=2009-08-06T02:34:01.5312500Z
System.Net.Sockets Verbose: 0 : [2364] 00000010 : 37 6C 69 42 75 50 4C 55-45 7A 4C 55 50 79 68 6B : 7liBuPLUEzLUPyhk
    DateTime=2009-08-06T02:34:01.5468750Z
System.Net.Sockets Verbose: 0 : [2364] 00000020 : 6A 5A 69 68 67 3D 3D 00-00                      : jZihg==..
    DateTime=2009-08-06T02:34:01.5625000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 41#41
    DateTime=2009-08-06T02:34:01.5625000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.5781250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.5781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:01.5937500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:01.5937500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.6250000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.6250000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:01.6562500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.6718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:01.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:01.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.7031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 26                                     : ...&
    DateTime=2009-08-06T02:34:01.7187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:01.7187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.7343750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.7343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 3C 00 15 21 61 6D 71-2E 63 74 61 67 2D 42 64 : .<..!amq.ctag-Bd
    DateTime=2009-08-06T02:34:01.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000010 : 74 73 61 62 77 30 51 73-58 35 38 75 50 4E 46 6A : tsabw0QsX58uPNFj
    DateTime=2009-08-06T02:34:01.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000020 : 41 2F 43 51 3D 3D                               : A/CQ==
    DateTime=2009-08-06T02:34:01.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 38#38
    DateTime=2009-08-06T02:34:01.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.7968750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:01.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:01.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.6093750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.6093750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:02.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.6406250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.6562500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.7187500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.7812500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.7968750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.8125000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.8281250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.8437500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.8750000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.8906250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.9062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.9062500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.9218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.9531250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.9531250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:02.9687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:02.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:03.0156250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:03.0156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:03.0312500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:03.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:03.6406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:03.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:03.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:03.7031250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:03.7343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:03.8281250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:03.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:03.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:03.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:03.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:03.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:03.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:03.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:03.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:04.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:04.0156250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:04.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:04.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:04.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:04.0781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:04.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:04.0937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:04.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:04.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:04.2343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:04.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:04.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:04.2656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:04.2812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:04.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:04.3593750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:04.3750000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:04.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:04.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:04.5156250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:04.5156250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:04.5312500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:04.5312500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:04.5468750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:04.5468750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.6875000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.6875000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:04.7031250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.7031250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.7187500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.7343750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.7500000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.7656250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.7656250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.8125000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.8125000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.8437500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.8750000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.8906250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.9218750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.9531250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.9531250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:04.9687500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:04.9687500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.9843750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:05.0000000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:05.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.1093750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:06.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.1562500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.1718750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.2031250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.2343750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.2812500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.3125000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.3437500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.3593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.3593750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.3906250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.4218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.4531250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.4687500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.4843750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.4843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.5156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:06.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:06.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.5468750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:06.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.5625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.5937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:06.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:06.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.6406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:06.6406250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:06.6562500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.6718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:06.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:06.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.7031250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.7187500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:06.7187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:06.7343750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:06.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:06.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:06.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:06.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.8281250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:06.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:06.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:06.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:06.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:06.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:06.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.9531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:06.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:06.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.0312500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.0468750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:08.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.1093750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.1406250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.1718750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.1718750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.1875000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.2187500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.2656250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.2812500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.3125000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.3281250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.3437500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.3437500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.3593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.3750000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.3906250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.3906250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.4062500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.4375000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.4531250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.4531250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.4843750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:08.4843750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:08.5000000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.5156250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.5156250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:08.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.5781250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.5937500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:09.5937500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.6093750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.6093750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.6250000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.6406250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.6718750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.7031250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.7343750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.7343750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.7500000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:09.7656250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:09.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:09.7968750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:09.8125000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.8125000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:09.8437500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:09.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:09.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:09.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:09.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:09.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:09.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:09.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:09.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:09.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:09.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:09.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:09.9531250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.9687500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.9687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.9843750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:10.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:10.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:10.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:10.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:10.0468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:10.0625000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:10.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:10.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:10.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:10.1875000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:10.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:10.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:10.2968750Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::TcpClient(InterNetwork#2)
    DateTime=2009-08-06T02:34:10.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Socket(InterNetwork#2)
    DateTime=2009-08-06T02:34:10.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Socket() 
    DateTime=2009-08-06T02:34:10.3750000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:10.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:10.3906250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:10.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:10.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::TcpClient() 
    DateTime=2009-08-06T02:34:10.4375000Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::TcpClient()
    DateTime=2009-08-06T02:34:10.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::TcpClient() 
    DateTime=2009-08-06T02:34:10.4531250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::Connect(localhost)
    DateTime=2009-08-06T02:34:10.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:10.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:10.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:10.5156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:10.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:10.5312500Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostAddresses(localhost)
    DateTime=2009-08-06T02:34:10.5468750Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostByName(localhost)
    DateTime=2009-08-06T02:34:10.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostByName() 	-> IPHostEntry#9035653
    DateTime=2009-08-06T02:34:10.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostAddresses() 	-> IPAddress[]#34917486
    DateTime=2009-08-06T02:34:10.5781250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:34:10.5937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:10.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:10.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:10.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:10.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:10.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:34:10.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Connect() 
    DateTime=2009-08-06T02:34:10.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::Connect() 
    DateTime=2009-08-06T02:34:10.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::Connect() 
    DateTime=2009-08-06T02:34:10.6875000Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::GetStream()
    DateTime=2009-08-06T02:34:10.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::GetStream() 	-> NetworkStream#22330821
    DateTime=2009-08-06T02:34:10.7031250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:10.7187500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:10.7343750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:10.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:10.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 41 4D 51 50                                     : AMQP
    DateTime=2009-08-06T02:34:10.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 4#4
    DateTime=2009-08-06T02:34:10.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:10.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:10.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:10.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:10.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:10.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:10.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:10.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:10.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:10.9375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:10.9687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:10.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:10.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.0000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:11.0468750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:11.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:11.0625000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.0781250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:11.0781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 01 20                                     : ... 
    DateTime=2009-08-06T02:34:11.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:11.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.1093750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:11.1250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 0A 00 0A 08 00 00 00-00 FB 07 70 72 6F 64 75 : ...........produ
    DateTime=2009-08-06T02:34:11.1250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 63 74 53 00 00 00 08 52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
    DateTime=2009-08-06T02:34:11.1406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 76 65 72 73 69 6F 6E 53-00 00 00 05 31 2E 36 2E : versionS....1.6.
    DateTime=2009-08-06T02:34:11.1562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 0A 45 : 0.platformS....E
    DateTime=2009-08-06T02:34:11.1562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000040 : 72 6C 61 6E 67 2F 4F 54-50 09 63 6F 70 79 72 69 : rlang/OTP.copyri
    DateTime=2009-08-06T02:34:11.1718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000050 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:34:11.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000060 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 39 20 : t (C) 2007-2009 
    DateTime=2009-08-06T02:34:11.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000070 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:34:11.2031250Z
System.Net.Sockets Verbose: 0 : [2760] 00000080 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:34:11.2187500Z
System.Net.Sockets Verbose: 0 : [2760] 00000090 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:34:11.2187500Z
System.Net.Sockets Verbose: 0 : [2760] 000000A0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:34:11.2343750Z
System.Net.Sockets Verbose: 0 : [2760] 000000B0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 0B : chnologies Ltd..
    DateTime=2009-08-06T02:34:11.2500000Z
System.Net.Sockets Verbose: 0 : [2760] 000000C0 : 69 6E 66 6F 72 6D 61 74-69 6F 6E 53 00 00 00 35 : informationS...5
    DateTime=2009-08-06T02:34:11.2500000Z
System.Net.Sockets Verbose: 0 : [2760] 000000D0 : 4C 69 63 65 6E 73 65 64-20 75 6E 64 65 72 20 74 : Licensed under t
    DateTime=2009-08-06T02:34:11.2656250Z
System.Net.Sockets Verbose: 0 : [2760] 000000E0 : 68 65 20 4D 50 4C 2E 20-20 53 65 65 20 68 74 74 : he MPL.  See htt
    DateTime=2009-08-06T02:34:11.2656250Z
System.Net.Sockets Verbose: 0 : [2760] 000000F0 : 70 3A 2F 2F 77 77 77 2E-72 61 62 62 69 74 6D 71 : p://www.rabbitmq
    DateTime=2009-08-06T02:34:11.2812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000100 : 2E 63 6F 6D 2F 00 00 00-0E 50 4C 41 49 4E 20 41 : .com/....PLAIN A
    DateTime=2009-08-06T02:34:11.2968750Z
System.Net.Sockets Verbose: 0 : [2760] 00000110 : 4D 51 50 4C 41 49 4E 00-00 00 05 65 6E 5F 55 53 : MQPLAIN....en_US
    DateTime=2009-08-06T02:34:11.3125000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 288#288
    DateTime=2009-08-06T02:34:11.3281250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.3281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:11.3437500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:11.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:11.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:11.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.4843750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.5625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.5937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:11.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 1B                                              : .
    DateTime=2009-08-06T02:34:11.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.6875000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:11.6875000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:11.7031250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:11.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:11.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 0B 00 00 00 F7-07 70 72 6F 64 75 63 74 : .........product
    DateTime=2009-08-06T02:34:11.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 53 00 00 00 08 52 61 62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
    DateTime=2009-08-06T02:34:11.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 72 73 69 6F 6E 53 00 00-00 07 31 2E 36 2E 30 2E : rsionS....1.6.0.
    DateTime=2009-08-06T02:34:11.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
    DateTime=2009-08-06T02:34:11.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 4E 45 54 0B 69 6E 66 6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
    DateTime=2009-08-06T02:34:11.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 00 00 00 35 4C 69 63 65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
    DateTime=2009-08-06T02:34:11.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 65 72 20 74 68 65 20 4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
    DateTime=2009-08-06T02:34:11.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 20 68 74 74 70 3A 2F 2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
    DateTime=2009-08-06T02:34:11.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 69 74 6D 71 2E 63 6F 6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
    DateTime=2009-08-06T02:34:11.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:34:11.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008 
    DateTime=2009-08-06T02:34:11.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:34:11.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:11.8593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.8750000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:11.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:11.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:34:11.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:34:11.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:34:11.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
    DateTime=2009-08-06T02:34:11.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 50 4C 41 49 4E 00 00 00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
    DateTime=2009-08-06T02:34:11.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 67 75 65 73 74 05 65 6E-5F 55 53                : guest.en_US
    DateTime=2009-08-06T02:34:11.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 283#283
    DateTime=2009-08-06T02:34:11.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.0000000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.0156250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.0156250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.0312500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.0468750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:12.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:12.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:12.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.0937500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.1093750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.1250000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.1250000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.1406250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.1406250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:12.1562500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.1718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:12.1875000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.2031250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.2031250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.2187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.2500000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.2656250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.2656250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.2812500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.2968750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:12.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:12.3125000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.3281250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.3281250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:12.3437500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.3437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:12.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.3750000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 0C                                     : ....
    DateTime=2009-08-06T02:34:12.3906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:12.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.4218750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 0A 00 1E 00 00 00 02-00 00 00 00             : ............
    DateTime=2009-08-06T02:34:12.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 12#12
    DateTime=2009-08-06T02:34:12.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:12.4843750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:12.5312500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:12.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:12.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:12.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:12.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:12.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:13.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:13.2812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:13.2968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:13.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:13.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:13.4062500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:13.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:13.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:13.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:34:13.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 1F 00 00 00 02-00 00 00 03             : ............
    DateTime=2009-08-06T02:34:13.5312500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:13.5468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:13.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:13.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:13.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:13.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 12#12
    DateTime=2009-08-06T02:34:13.5937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:13.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:13.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:13.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:13.6406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:13.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:13.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:13.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:13.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:13.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:13.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:13.7968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:13.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:13.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:13.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:13.8750000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:13.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:13.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.9062500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:13.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:13.9218750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:13.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:13.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.9843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:13.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:14.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:14.0312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:14.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:14.1718750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:14.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:14.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.3125000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:14.3437500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:14.3593750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:14.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.3906250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:14.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:14.5156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 28 01 2F 00 01-                        : ...(./..
    DateTime=2009-08-06T02:34:14.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 8#8
    DateTime=2009-08-06T02:34:14.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:14.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.6406250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.6406250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.6875000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.7343750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.7343750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:14.7812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:14.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:14.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:14.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:14.8281250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.8437500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.8593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:14.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:14.8906250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.8906250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.9062500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:14.9218750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.9375000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:14.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:14.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:14.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:14.9687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 17                                     : ....
    DateTime=2009-08-06T02:34:14.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:15.0000000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.0000000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.0156250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 0A 00 29 12 50 61 74-72 69 63 6B 4B 65 6E 6E : ...).PatrickKenn
    DateTime=2009-08-06T02:34:15.0312500Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 65 79 3A 35 36 37 32                            : ey:5672
    DateTime=2009-08-06T02:34:15.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 23#23
    DateTime=2009-08-06T02:34:15.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.0625000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.0625000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:15.0781250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:15.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:15.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.1718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:15.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.3125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.4062500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.4218750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:15.4375000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.4531250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:34:15.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.5000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:34:15.5156250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.5312500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.5468750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.5625000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.5625000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 5#5
    DateTime=2009-08-06T02:34:15.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.6093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:15.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:15.6406250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.6406250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:15.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.7031250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.7187500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:15.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:15.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.7968750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.8125000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:15.8281250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:15.8437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:15.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.8750000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:15.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:15.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:15.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.9218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:34:15.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:15.9531250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:15.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:15.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:15.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:16.0000000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:16.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:16.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:16.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.0625000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:16.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:16.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:16.1406250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:16.1562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:16.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:16.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:16.2656250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:16.2812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:34:16.3125000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:16.3593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:16.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:16.4062500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:16.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:16.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:16.4531250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:16.4843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:16.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:16.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:16.5156250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:16.5312500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:16.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:16.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:16.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.5625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:16.5781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:16.5937500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:16.6093750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:16.6093750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:16.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:16.6406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:16.6406250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:16.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:16.6718750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:16.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:16.7031250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:16.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:16.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:16.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:16.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:16.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:16.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:16.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:16.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:16.8281250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:16.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:16.8437500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:16.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:16.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:16.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.8906250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:16.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:16.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:16.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:16.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:16.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:16.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.0000000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.0000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:34:17.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:34:17.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 5#5
    DateTime=2009-08-06T02:34:17.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:17.2187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.2187500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.2343750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:17.2500000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:17.2500000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.2656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.2812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:17.2968750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:17.3125000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.3281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.3437500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:34:17.3437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:17.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.3750000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:34:17.3906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:17.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:17.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:17.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.5000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:17.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:17.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:34:17.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 32 00 0A 00 00 00 0C-00 00 00 00             : .2..........
    DateTime=2009-08-06T02:34:17.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 12#12
    DateTime=2009-08-06T02:34:17.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.8750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:17.8750000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:17.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:17.9375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.9531250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:17.9531250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:17.9687500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:17.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.0156250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:18.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:18.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:18.0625000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:18.0781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 2D                                     : ...-
    DateTime=2009-08-06T02:34:18.1093750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.1875000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.2187500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.2343750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.3125000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.3593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.3906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:18.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:18.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:18.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 32 00 0B 20 61 6D 71-2E 67 65 6E 2D 67 37 48 : .2.. amq.gen-g7H
    DateTime=2009-08-06T02:34:18.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.4531250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.4843750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.5000000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.5468750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.5781250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.5937500Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 39 33 45 62 4F 4F 47 4B-52 38 54 34 75 5A 67 43 : 93EbOOGKR8T4uZgC
    DateTime=2009-08-06T02:34:18.6093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 78 30 67 3D 3D 00 00 00-00 00 00 00 00          : x0g==........
    DateTime=2009-08-06T02:34:18.6093750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 45#45
    DateTime=2009-08-06T02:34:18.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:18.6406250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:18.6562500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:18.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:18.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.7031250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:18.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.7187500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:18.7343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:18.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:18.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:18.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:18.7812500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:18.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:18.7968750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:18.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:18.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:18.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:18.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:18.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.8593750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:18.8750000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:18.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:18.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:18.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:18.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:18.9375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:18.9531250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:18.9687500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:18.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:19.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:19.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:19.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:19.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:19.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.1250000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:19.1406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:19.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:19.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:19.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:19.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.1875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:19.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:19.2187500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:19.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.2968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:19.3125000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:19.3281250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:19.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.3750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:19.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.4062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:19.4218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:19.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:19.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 53                                              : S
    DateTime=2009-08-06T02:34:19.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:19.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:19.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:19.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.5625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 32 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 67 : .2.... amq.gen-g
    DateTime=2009-08-06T02:34:19.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 37 48 39 33 45 62 4F 4F-47 4B 52 38 54 34 75 5A : 7H93EbOOGKR8T4uZ
    DateTime=2009-08-06T02:34:19.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 67 43 78 30 67 3D 3D 00-25 2F 65 63 65 39 65 62 : gCx0g==.%/ece9eb
    DateTime=2009-08-06T02:34:19.5937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 39 64 2D 65 34 37 36 2D-34 63 62 34 2D 62 39 64 : 9d-e476-4cb4-b9d
    DateTime=2009-08-06T02:34:19.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 36 2D 62 36 32 34 31 64-61 37 35 61 64 32 00 00 : 6-b6241da75ad2..
    DateTime=2009-08-06T02:34:19.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 00 00 00                                        : ...
    DateTime=2009-08-06T02:34:19.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 83#83
    DateTime=2009-08-06T02:34:19.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.6562500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:19.6718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:19.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:19.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:19.7031250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:19.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:19.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.7500000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:19.7656250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:19.7812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:19.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:19.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:19.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:19.8125000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:34:19.8281250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:19.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:19.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:19.8750000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:19.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:19.9218750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:19.9531250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:19.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:19.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:19.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:20.0000000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 32 00 15                                     : .2..
    DateTime=2009-08-06T02:34:20.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:20.0312500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.0312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.0468750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.0625000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.0625000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.1093750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.1250000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.1406250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.1406250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.1562500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:20.1875000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:20.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:20.2031250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:20.2187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.2500000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:20.2656250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:20.2656250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.2968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:20.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:20.3437500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.3437500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:20.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:20.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 29                                              : )
    DateTime=2009-08-06T02:34:20.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 67 : .<.... amq.gen-g
    DateTime=2009-08-06T02:34:20.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 37 48 39 33 45 62 4F 4F-47 4B 52 38 54 34 75 5A : 7H93EbOOGKR8T4uZ
    DateTime=2009-08-06T02:34:20.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 67 43 78 30 67 3D 3D 00-00                      : gCx0g==..
    DateTime=2009-08-06T02:34:20.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 41#41
    DateTime=2009-08-06T02:34:20.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.0000000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:21.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:21.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:21.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.0781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:21.0781250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:21.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.1093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 26                                     : ...&
    DateTime=2009-08-06T02:34:21.1093750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:21.1250000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.1250000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.1406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 3C 00 15 21 61 6D 71-2E 63 74 61 67 2D 33 6A : .<..!amq.ctag-3j
    DateTime=2009-08-06T02:34:21.1406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 38 73 72 45 59 68 49 4A-6F 41 52 6A 30 31 6D 53 : 8srEYhIJoARj01mS
    DateTime=2009-08-06T02:34:21.1562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 64 35 58 41 3D 3D                               : d5XA==
    DateTime=2009-08-06T02:34:21.1562500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 38#38
    DateTime=2009-08-06T02:34:21.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:21.1875000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:21.2031250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:21.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.6562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:21.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.7187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:21.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:21.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:21.7968750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:21.7968750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:21.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.8125000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:21.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:21.8437500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:21.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:21.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.8906250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.8906250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:21.9375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:21.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:21.9531250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:21.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.9687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:21.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:21.9843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:22.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:22.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 14                                              : .
    DateTime=2009-08-06T02:34:22.0312500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.0312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:22.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:22.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:22.0937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:22.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.1562500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.1875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:22.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:22.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:22.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.3125000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.3437500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:22.3437500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:22.3593750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:22.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
    DateTime=2009-08-06T02:34:22.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:22.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:22.4062500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:22.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 68 65 72 00                                     : her.
    DateTime=2009-08-06T02:34:22.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:22.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 20#20
    DateTime=2009-08-06T02:34:22.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.4687500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:22.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:22.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:22.5000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:22.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.5468750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.5625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:22.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.5781250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:22.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:22.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:22.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.6406250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.6406250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:22.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:22.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:22.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:22.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.7656250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:22.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.8281250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:22.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:22.8437500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:22.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:22.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.8593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:22.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:22.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.8906250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:22.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:22.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.9375000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:22.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:22.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:22.9531250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:22.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.0000000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:23.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:23.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:23.0312500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:23.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:23.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0E                                              : .
    DateTime=2009-08-06T02:34:23.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 53 00 00       : .<.........S..
    DateTime=2009-08-06T02:34:23.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 14#14
    DateTime=2009-08-06T02:34:23.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:23.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:23.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:23.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:23.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:23.1875000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:23.2031250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:23.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.2187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:23.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.2968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:23.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.6562500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.6562500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.6718750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:23.6718750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.6875000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 53                                              : S
    DateTime=2009-08-06T02:34:23.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.7343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.7500000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.7500000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.7656250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.7656250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:23.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:23.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:23.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:23.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
    DateTime=2009-08-06T02:34:23.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
    DateTime=2009-08-06T02:34:23.8281250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.8593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
    DateTime=2009-08-06T02:34:23.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
    DateTime=2009-08-06T02:34:23.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:23.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
    DateTime=2009-08-06T02:34:23.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
    DateTime=2009-08-06T02:34:23.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.9218750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.9218750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
    DateTime=2009-08-06T02:34:23.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
    DateTime=2009-08-06T02:34:23.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 3A 41 63 74 69 6F 6E 3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
    DateTime=2009-08-06T02:34:23.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 67 65 49 44 3E 75 72 6E-3A 75 75 69 64 3A 31 37 : geID>urn:uuid:17
    DateTime=2009-08-06T02:34:23.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 33 34 30 30 61 61 2D 62-37 38 63 2D 34 37 62 63 : 3400aa-b78c-47bc
    DateTime=2009-08-06T02:34:23.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:24.0000000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:24.0000000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:24.0156250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:24.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 2D 39 62 64 35 2D 35 66-36 38 35 64 32 63 62 31 : -9bd5-5f685d2cb1
    DateTime=2009-08-06T02:34:24.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 66 36 3C 2F 61 3A 4D 65-73 73 61 67 65 49 44 3E : f6</a:MessageID>
    DateTime=2009-08-06T02:34:24.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000120 : 3C 61 3A 52 65 70 6C 79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
    DateTime=2009-08-06T02:34:24.0468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000130 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
    DateTime=2009-08-06T02:34:24.0468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000140 : 2F 2F 2F 65 63 65 39 65-62 39 64 2D 65 34 37 36 : ///ece9eb9d-e476
    DateTime=2009-08-06T02:34:24.0625000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:24.0625000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:24.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:24.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:24.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:24.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000150 : 2D 34 63 62 34 2D 62 39-64 36 2D 62 36 32 34 31 : -4cb4-b9d6-b6241
    DateTime=2009-08-06T02:34:24.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000160 : 64 61 37 35 61 64 32 3C-2F 61 3A 41 64 64 72 65 : da75ad2</a:Addre
    DateTime=2009-08-06T02:34:24.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000170 : 73 73 3E 3C 2F 61 3A 52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
    DateTime=2009-08-06T02:34:24.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000180 : 2F 73 3A 48 65 61 64 65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
    DateTime=2009-08-06T02:34:24.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000190 : 79 3E 3C 43 72 65 61 74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
    DateTime=2009-08-06T02:34:24.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 000001A0 : 65 20 78 6D 6C 6E 73 3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
    DateTime=2009-08-06T02:34:24.1406250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:24.1562500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:24.1562500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:24.1718750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:24.1718750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:24.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 000001B0 : 73 63 68 65 6D 61 73 2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
    DateTime=2009-08-06T02:34:24.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 000001C0 : 6F 72 67 2F 77 73 2F 32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
    DateTime=2009-08-06T02:34:24.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 000001D0 : 6D 22 3E 3C 41 63 6B 73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
    DateTime=2009-08-06T02:34:24.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 000001E0 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
    DateTime=2009-08-06T02:34:24.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 000001F0 : 2F 2F 2F 65 63 65 39 65-62 39 64 2D 65 34 37 36 : ///ece9eb9d-e476
    DateTime=2009-08-06T02:34:24.2187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:24.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000200 : 2D 34 63 62 34 2D 62 39-64 36 2D 62 36 32 34 31 : -4cb4-b9d6-b6241
    DateTime=2009-08-06T02:34:24.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000210 : 64 61 37 35 61 64 32 3C-2F 61 3A 41 64 64 72 65 : da75ad2</a:Addre
    DateTime=2009-08-06T02:34:24.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000220 : 73 73 3E 3C 2F 41 63 6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
    DateTime=2009-08-06T02:34:24.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000230 : 65 61 74 65 53 65 71 75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
    DateTime=2009-08-06T02:34:24.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000240 : 3A 42 6F 64 79 3E 3C 2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
    DateTime=2009-08-06T02:34:24.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000250 : 70 65 3E                                        : pe>
    DateTime=2009-08-06T02:34:24.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 595#595
    DateTime=2009-08-06T02:34:24.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:24.2968750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.3125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:24.3281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.3281250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.3281250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:24.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:24.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:24.3750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:24.3750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:24.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.4062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 3C                                     : ...<
    DateTime=2009-08-06T02:34:24.4062500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:24.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.4218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 3C 21 61 6D 71-2E 63 74 61 67 2D 38 56 : .<.<!amq.ctag-8V
    DateTime=2009-08-06T02:34:24.4375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 61 4D 6F 41 4C 74 73 47-2F 59 6D 71 2F 49 2B 57 : aMoALtsG/Ymq/I+W
    DateTime=2009-08-06T02:34:24.4531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 56 48 4F 77 3D 3D 00 00-00 00 00 00 00 01 00 00 : VHOw==..........
    DateTime=2009-08-06T02:34:24.4531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000030 : 0B 2F 64 69 73 70 61 74-63 68 65 72             : ./dispatcher
    DateTime=2009-08-06T02:34:24.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 60#60
    DateTime=2009-08-06T02:34:24.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:24.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.5156250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:24.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.5468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:24.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:24.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 0E                                     : ....
    DateTime=2009-08-06T02:34:24.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:24.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 53 00 00       : .<.........S..
    DateTime=2009-08-06T02:34:24.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 14#14
    DateTime=2009-08-06T02:34:24.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.6406250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.6406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:24.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.6875000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:24.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:24.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:24.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.7500000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 02 53                                     : ...S
    DateTime=2009-08-06T02:34:24.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:24.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:24.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:24.7968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:24.7968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:24.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
    DateTime=2009-08-06T02:34:24.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
    DateTime=2009-08-06T02:34:24.8281250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:24.8281250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:24.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:24.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
    DateTime=2009-08-06T02:34:24.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
    DateTime=2009-08-06T02:34:24.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:24.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
    DateTime=2009-08-06T02:34:24.8906250Z
System.Net.Sockets Verbose: 0 : [2660] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
    DateTime=2009-08-06T02:34:24.8906250Z
System.Net.Sockets Verbose: 0 : [2660] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
    DateTime=2009-08-06T02:34:24.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
    DateTime=2009-08-06T02:34:24.9062500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:24.9218750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:24.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:24.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:24.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:24.9531250Z
System.Net.Sockets Verbose: 0 : [2660] 000000D0 : 3A 41 63 74 69 6F 6E 3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
    DateTime=2009-08-06T02:34:24.9531250Z
System.Net.Sockets Verbose: 0 : [2660] 000000E0 : 67 65 49 44 3E 75 72 6E-3A 75 75 69 64 3A 31 37 : geID>urn:uuid:17
    DateTime=2009-08-06T02:34:24.9687500Z
System.Net.Sockets Verbose: 0 : [2660] 000000F0 : 33 34 30 30 61 61 2D 62-37 38 63 2D 34 37 62 63 : 3400aa-b78c-47bc
    DateTime=2009-08-06T02:34:24.9843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000100 : 2D 39 62 64 35 2D 35 66-36 38 35 64 32 63 62 31 : -9bd5-5f685d2cb1
    DateTime=2009-08-06T02:34:24.9843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000110 : 66 36 3C 2F 61 3A 4D 65-73 73 61 67 65 49 44 3E : f6</a:MessageID>
    DateTime=2009-08-06T02:34:25.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000120 : 3C 61 3A 52 65 70 6C 79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
    DateTime=2009-08-06T02:34:25.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000130 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
    DateTime=2009-08-06T02:34:25.0156250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:25.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:25.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:25.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:25.0625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000140 : 2F 2F 2F 65 63 65 39 65-62 39 64 2D 65 34 37 36 : ///ece9eb9d-e476
    DateTime=2009-08-06T02:34:25.0625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000150 : 2D 34 63 62 34 2D 62 39-64 36 2D 62 36 32 34 31 : -4cb4-b9d6-b6241
    DateTime=2009-08-06T02:34:25.0937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000160 : 64 61 37 35 61 64 32 3C-2F 61 3A 41 64 64 72 65 : da75ad2</a:Addre
    DateTime=2009-08-06T02:34:25.1250000Z
System.Net.Sockets Verbose: 0 : [2660] 00000170 : 73 73 3E 3C 2F 61 3A 52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
    DateTime=2009-08-06T02:34:25.1562500Z
System.Net.Sockets Verbose: 0 : [2660] 00000180 : 2F 73 3A 48 65 61 64 65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
    DateTime=2009-08-06T02:34:25.2031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:25.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:25.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:25.2343750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:25.2656250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:25.3125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000190 : 79 3E 3C 43 72 65 61 74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
    DateTime=2009-08-06T02:34:25.3437500Z
System.Net.Sockets Verbose: 0 : [2660] 000001A0 : 65 20 78 6D 6C 6E 73 3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
    DateTime=2009-08-06T02:34:25.3593750Z
System.Net.Sockets Verbose: 0 : [2660] 000001B0 : 73 63 68 65 6D 61 73 2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
    DateTime=2009-08-06T02:34:25.3593750Z
System.Net.Sockets Verbose: 0 : [2660] 000001C0 : 6F 72 67 2F 77 73 2F 32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
    DateTime=2009-08-06T02:34:25.3750000Z
System.Net.Sockets Verbose: 0 : [2660] 000001D0 : 6D 22 3E 3C 41 63 6B 73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
    DateTime=2009-08-06T02:34:25.3750000Z
System.Net.Sockets Verbose: 0 : [2660] 000001E0 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
    DateTime=2009-08-06T02:34:25.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:25.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:25.4062500Z
System.Net.Sockets Verbose: 0 : [2660] 000001F0 : 2F 2F 2F 65 63 65 39 65-62 39 64 2D 65 34 37 36 : ///ece9eb9d-e476
    DateTime=2009-08-06T02:34:25.4062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000200 : 2D 34 63 62 34 2D 62 39-64 36 2D 62 36 32 34 31 : -4cb4-b9d6-b6241
    DateTime=2009-08-06T02:34:25.4218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000210 : 64 61 37 35 61 64 32 3C-2F 61 3A 41 64 64 72 65 : da75ad2</a:Addre
    DateTime=2009-08-06T02:34:25.4218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000220 : 73 73 3E 3C 2F 41 63 6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
    DateTime=2009-08-06T02:34:25.4375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000230 : 65 61 74 65 53 65 71 75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
    DateTime=2009-08-06T02:34:25.4375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000240 : 3A 42 6F 64 79 3E 3C 2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
    DateTime=2009-08-06T02:34:25.4531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000250 : 70 65 3E                                        : pe>
    DateTime=2009-08-06T02:34:25.4531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 595#595
    DateTime=2009-08-06T02:34:25.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:25.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:25.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:25.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:25.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:25.5312500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.5468750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.5625000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:25.5625000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.5781250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.5781250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.5937500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:25.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.6250000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.6250000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:25.6406250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.6406250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.6562500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.6562500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:25.6718750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.6718750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.6875000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.6875000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:25.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.7187500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:25.7187500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.7343750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.7500000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.7500000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 0D                                              : .
    DateTime=2009-08-06T02:34:25.7656250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.7656250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.7812500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 3C 00 50 00 00 00 00-00 00 00 01 00          : .<.P.........
    DateTime=2009-08-06T02:34:25.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 13#13
    DateTime=2009-08-06T02:34:25.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.8125000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.8125000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:25.8281250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:25.8437500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:25.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:25.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:25.8750000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:25.8750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:25.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:25.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:25.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:25.9218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:25.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:25.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:25.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:26.0000000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:26.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:26.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:26.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:26.0312500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.0468750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.0468750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:26.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.0781250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.0781250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.0937500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:26.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:26.1093750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:26.1093750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.1250000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.1250000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.1406250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:26.1562500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.1562500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.1718750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.1718750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.1875000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.1875000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.2031250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.2187500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.2187500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.2343750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.2343750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.2500000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.2500000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.2656250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.2656250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.2812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 2E                                              : .
    DateTime=2009-08-06T02:34:26.2812500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.2968750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.3125000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.3125000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 3C 00 28 00 00 00 25-2F 65 63 65 39 65 62 39 : .<.(...%/ece9eb9
    DateTime=2009-08-06T02:34:26.3281250Z
System.Net.Sockets Verbose: 0 : [2016] 00000010 : 64 2D 65 34 37 36 2D 34-63 62 34 2D 62 39 64 36 : d-e476-4cb4-b9d6
    DateTime=2009-08-06T02:34:26.3281250Z
System.Net.Sockets Verbose: 0 : [2016] 00000020 : 2D 62 36 32 34 31 64 61-37 35 61 64 32 00       : -b6241da75ad2.
    DateTime=2009-08-06T02:34:26.3437500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 46#46
    DateTime=2009-08-06T02:34:26.3437500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.3593750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.3750000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:26.3906250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.3906250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.4062500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.4218750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:26.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.4375000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.4531250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.4531250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.4687500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.4687500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.4843750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.5000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:26.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:26.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:26.5468750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:26.5468750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.5625000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.5625000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.5781250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:26.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:26.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:26.6250000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.6250000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.6406250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.6406250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:26.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:26.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.7187500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.7187500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.7343750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.7500000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:26.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:26.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.7656250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.7812500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 0E                                              : .
    DateTime=2009-08-06T02:34:26.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.8125000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.8125000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.8281250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 4C 00 00       : .<.........L..
    DateTime=2009-08-06T02:34:26.8281250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 14#14
    DateTime=2009-08-06T02:34:26.8437500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.8437500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.8593750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:26.8593750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:26.9062500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.9062500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.9218750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.9218750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.9375000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.9375000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.9531250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.9531250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:26.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.9843750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.9843750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.0000000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.0156250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:27.0156250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:27.0312500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.0468750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.0468750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:27.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:27.0781250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:27.0781250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.1250000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:27.1406250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:27.1875000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 4C                                              : L
    DateTime=2009-08-06T02:34:27.2187500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.2343750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:27.2500000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:27.2656250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:27.3125000Z
System.Net.Sockets Verbose: 0 : [2016] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:27.3593750Z
System.Net.Sockets Verbose: 0 : [2016] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:27.3750000Z
System.Net.Sockets Verbose: 0 : [2016] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:27.3750000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.3906250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.3906250Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.4062500Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:27.4062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
    DateTime=2009-08-06T02:34:27.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:27.4375000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:27.4375000Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.4531250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.4531250Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.4687500Z
System.Net.Sockets Verbose: 0 : [2016] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
    DateTime=2009-08-06T02:34:27.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.4843750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.4843750Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.5000000Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.5156250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.5156250Z
System.Net.Sockets Verbose: 0 : [2016] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
    DateTime=2009-08-06T02:34:27.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:27.5312500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.5468750Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.5468750Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.5625000Z
System.Net.Sockets Verbose: 0 : [2016] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
    DateTime=2009-08-06T02:34:27.5625000Z
System.Net.Sockets Verbose: 0 : [2016] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:27.5781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.5937500Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.5937500Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.6093750Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.6093750Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.6250000Z
System.Net.Sockets Verbose: 0 : [2016] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
    DateTime=2009-08-06T02:34:27.6250000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.6406250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:27.6406250Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.6562500Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.6562500Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.6718750Z
System.Net.Sockets Verbose: 0 : [2016] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
    DateTime=2009-08-06T02:34:27.6718750Z
System.Net.Sockets Verbose: 0 : [2016] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
    DateTime=2009-08-06T02:34:27.6875000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.6875000Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.7031250Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.7031250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.7187500Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.7187500Z
System.Net.Sockets Verbose: 0 : [2016] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:27.7343750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.7500000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.7500000Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.7656250Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.7656250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 000000D0 : 70 6F 6E 73 65 3C 2F 61-3A 41 63 74 69 6F 6E 3E : ponse</a:Action>
    DateTime=2009-08-06T02:34:27.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 000000E0 : 3C 61 3A 52 65 6C 61 74-65 73 54 6F 3E 75 72 6E : <a:RelatesTo>urn
    DateTime=2009-08-06T02:34:27.7968750Z
System.Net.Sockets Verbose: 0 : [2016] 000000F0 : 3A 75 75 69 64 3A 31 37-33 34 30 30 61 61 2D 62 : :uuid:173400aa-b
    DateTime=2009-08-06T02:34:27.7968750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:27.8125000Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.8281250Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.8281250Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:27.8437500Z
System.Net.Sockets Verbose: 0 : [2016] 00000100 : 37 38 63 2D 34 37 62 63-2D 39 62 64 35 2D 35 66 : 78c-47bc-9bd5-5f
    DateTime=2009-08-06T02:34:27.8593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.8593750Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.8750000Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.8750000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:27.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000110 : 36 38 35 64 32 63 62 31-66 36 3C 2F 61 3A 52 65 : 685d2cb1f6</a:Re
    DateTime=2009-08-06T02:34:27.9062500Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:27.9218750Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:27.9218750Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:27.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.9531250Z
System.Net.Sockets Verbose: 0 : [2016] 00000120 : 6C 61 74 65 73 54 6F 3E-3C 61 3A 54 6F 20 73 3A : latesTo><a:To s:
    DateTime=2009-08-06T02:34:27.9531250Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.9687500Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:27.9687500Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:27.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.0000000Z
System.Net.Sockets Verbose: 0 : [2016] 00000130 : 6D 75 73 74 55 6E 64 65-72 73 74 61 6E 64 3D 22 : mustUnderstand="
    DateTime=2009-08-06T02:34:28.0000000Z
System.Net.Sockets Verbose: 0 : [2016] 00000140 : 31 22 3E 73 6F 61 70 2E-61 6D 71 70 3A 2F 2F 2F : 1">soap.amqp:///
    DateTime=2009-08-06T02:34:28.0156250Z
System.Net.Sockets Verbose: 0 : [2016] 00000150 : 65 63 65 39 65 62 39 64-2D 65 34 37 36 2D 34 63 : ece9eb9d-e476-4c
    DateTime=2009-08-06T02:34:28.0312500Z
System.Net.Sockets Verbose: 0 : [2016] 00000160 : 62 34 2D 62 39 64 36 2D-62 36 32 34 31 64 61 37 : b4-b9d6-b6241da7
    DateTime=2009-08-06T02:34:28.0312500Z
System.Net.Sockets Verbose: 0 : [2016] 00000170 : 35 61 64 32 3C 2F 61 3A-54 6F 3E 3C 2F 73 3A 48 : 5ad2</a:To></s:H
    DateTime=2009-08-06T02:34:28.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:28.0468750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:28.0625000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.0625000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:28.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.0781250Z
System.Net.Sockets Verbose: 0 : [2016] 00000180 : 65 61 64 65 72 3E 3C 73-3A 42 6F 64 79 3E 3C 43 : eader><s:Body><C
    DateTime=2009-08-06T02:34:28.0937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:28.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:28.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:28.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:28.1250000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:28.1406250Z
System.Net.Sockets Verbose: 0 : [2016] 00000190 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:28.1406250Z
System.Net.Sockets Verbose: 0 : [2016] 000001A0 : 70 6F 6E 73 65 20 78 6D-6C 6E 73 3D 22 68 74 74 : ponse xmlns="htt
    DateTime=2009-08-06T02:34:28.1562500Z
System.Net.Sockets Verbose: 0 : [2016] 000001B0 : 70 3A 2F 2F 73 63 68 65-6D 61 73 2E 78 6D 6C 73 : p://schemas.xmls
    DateTime=2009-08-06T02:34:28.1562500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:28.1718750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.1718750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:28.1875000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.1875000Z
System.Net.Sockets Verbose: 0 : [2016] 000001C0 : 6F 61 70 2E 6F 72 67 2F-77 73 2F 32 30 30 35 2F : oap.org/ws/2005/
    DateTime=2009-08-06T02:34:28.2031250Z
System.Net.Sockets Verbose: 0 : [2016] 000001D0 : 30 32 2F 72 6D 22 3E 3C-49 64 65 6E 74 69 66 69 : 02/rm"><Identifi
    DateTime=2009-08-06T02:34:28.2031250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:28.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:28.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:28.2343750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:28.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.2500000Z
System.Net.Sockets Verbose: 0 : [2016] 000001E0 : 65 72 3E 75 72 6E 3A 75-75 69 64 3A 35 65 31 39 : er>urn:uuid:5e19
    DateTime=2009-08-06T02:34:28.2656250Z
System.Net.Sockets Verbose: 0 : [2016] 000001F0 : 66 39 34 66 2D 38 39 31-33 2D 34 64 63 37 2D 38 : f94f-8913-4dc7-8
    DateTime=2009-08-06T02:34:28.2656250Z
System.Net.Sockets Verbose: 0 : [2016] 00000200 : 62 38 61 2D 63 35 63 35-66 38 36 36 34 38 38 32 : b8a-c5c5f8664882
    DateTime=2009-08-06T02:34:28.2812500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:28.2812500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:28.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.3125000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:28.3125000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:28.3281250Z
System.Net.Sockets Verbose: 0 : [2016] 00000210 : 3C 2F 49 64 65 6E 74 69-66 69 65 72 3E 3C 2F 43 : </Identifier></C
    DateTime=2009-08-06T02:34:28.3281250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:28.3437500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:28.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:28.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.3750000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.3750000Z
System.Net.Sockets Verbose: 0 : [2016] 00000220 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:28.3906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000230 : 70 6F 6E 73 65 3E 3C 2F-73 3A 42 6F 64 79 3E 3C : ponse></s:Body><
    DateTime=2009-08-06T02:34:28.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:28.4062500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.4062500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.4218750Z
System.Net.Sockets Verbose: 0 : [2016] 00000240 : 2F 73 3A 45 6E 76 65 6C-6F 70 65 3E             : /s:Envelope>
    DateTime=2009-08-06T02:34:28.4375000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 588#588
    DateTime=2009-08-06T02:34:28.4375000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:28.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.4531250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.4687500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:28.4687500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:28.4843750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.4843750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.5000000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:28.5156250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.5312500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.5312500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.5468750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:28.5468750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:28.5625000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.5625000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.5781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 56                                     : ...V
    DateTime=2009-08-06T02:34:28.5781250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:28.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.6093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 3C 00 3C 21 61 6D 71-2E 63 74 61 67 2D 33 6A : .<.<!amq.ctag-3j
    DateTime=2009-08-06T02:34:28.6093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 38 73 72 45 59 68 49 4A-6F 41 52 6A 30 31 6D 53 : 8srEYhIJoARj01mS
    DateTime=2009-08-06T02:34:28.6250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 64 35 58 41 3D 3D 00 00-00 00 00 00 00 01 00 00 : d5XA==..........
    DateTime=2009-08-06T02:34:28.6250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000030 : 25 2F 65 63 65 39 65 62-39 64 2D 65 34 37 36 2D : %/ece9eb9d-e476-
    DateTime=2009-08-06T02:34:28.6406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000040 : 34 63 62 34 2D 62 39 64-36 2D 62 36 32 34 31 64 : 4cb4-b9d6-b6241d
    DateTime=2009-08-06T02:34:28.6718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000050 : 61 37 35 61 64 32                               : a75ad2
    DateTime=2009-08-06T02:34:28.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 86#86
    DateTime=2009-08-06T02:34:28.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.7031250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.7031250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.7187500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.7187500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.7343750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.7343750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:28.7500000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.7500000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.7656250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:28.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:28.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.8125000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 0E                                     : ....
    DateTime=2009-08-06T02:34:28.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:28.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.8437500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 4C 00 00       : .<.........L..
    DateTime=2009-08-06T02:34:28.8437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 14#14
    DateTime=2009-08-06T02:34:28.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.8750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.8750000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.9062500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:28.9218750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.9218750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.9375000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:28.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:28.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.9843750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 02 4C                                     : ...L
    DateTime=2009-08-06T02:34:28.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:29.0000000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:29.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:29.0156250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:29.0312500Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:29.0468750Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:29.0625000Z
System.Net.Sockets Verbose: 0 : [2760] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:29.0625000Z
System.Net.Sockets Verbose: 0 : [2760] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
    DateTime=2009-08-06T02:34:29.0781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
    DateTime=2009-08-06T02:34:29.1093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
    DateTime=2009-08-06T02:34:29.1406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
    DateTime=2009-08-06T02:34:29.1718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:29.2031250Z
System.Net.Sockets Verbose: 0 : [2760] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
    DateTime=2009-08-06T02:34:29.2187500Z
System.Net.Sockets Verbose: 0 : [2760] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
    DateTime=2009-08-06T02:34:29.2343750Z
System.Net.Sockets Verbose: 0 : [2760] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
    DateTime=2009-08-06T02:34:29.2500000Z
System.Net.Sockets Verbose: 0 : [2760] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:29.2812500Z
System.Net.Sockets Verbose: 0 : [2760] 000000D0 : 70 6F 6E 73 65 3C 2F 61-3A 41 63 74 69 6F 6E 3E : ponse</a:Action>
    DateTime=2009-08-06T02:34:29.3125000Z
System.Net.Sockets Verbose: 0 : [2760] 000000E0 : 3C 61 3A 52 65 6C 61 74-65 73 54 6F 3E 75 72 6E : <a:RelatesTo>urn
    DateTime=2009-08-06T02:34:29.3437500Z
System.Net.Sockets Verbose: 0 : [2760] 000000F0 : 3A 75 75 69 64 3A 31 37-33 34 30 30 61 61 2D 62 : :uuid:173400aa-b
    DateTime=2009-08-06T02:34:29.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000100 : 37 38 63 2D 34 37 62 63-2D 39 62 64 35 2D 35 66 : 78c-47bc-9bd5-5f
    DateTime=2009-08-06T02:34:29.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000110 : 36 38 35 64 32 63 62 31-66 36 3C 2F 61 3A 52 65 : 685d2cb1f6</a:Re
    DateTime=2009-08-06T02:34:29.3906250Z
System.Net.Sockets Verbose: 0 : [2760] 00000120 : 6C 61 74 65 73 54 6F 3E-3C 61 3A 54 6F 20 73 3A : latesTo><a:To s:
    DateTime=2009-08-06T02:34:29.3906250Z
System.Net.Sockets Verbose: 0 : [2760] 00000130 : 6D 75 73 74 55 6E 64 65-72 73 74 61 6E 64 3D 22 : mustUnderstand="
    DateTime=2009-08-06T02:34:29.4062500Z
System.Net.Sockets Verbose: 0 : [2760] 00000140 : 31 22 3E 73 6F 61 70 2E-61 6D 71 70 3A 2F 2F 2F : 1">soap.amqp:///
    DateTime=2009-08-06T02:34:29.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000150 : 65 63 65 39 65 62 39 64-2D 65 34 37 36 2D 34 63 : ece9eb9d-e476-4c
    DateTime=2009-08-06T02:34:29.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000160 : 62 34 2D 62 39 64 36 2D-62 36 32 34 31 64 61 37 : b4-b9d6-b6241da7
    DateTime=2009-08-06T02:34:29.4375000Z
System.Net.Sockets Verbose: 0 : [2760] 00000170 : 35 61 64 32 3C 2F 61 3A-54 6F 3E 3C 2F 73 3A 48 : 5ad2</a:To></s:H
    DateTime=2009-08-06T02:34:29.4375000Z
System.Net.Sockets Verbose: 0 : [2760] 00000180 : 65 61 64 65 72 3E 3C 73-3A 42 6F 64 79 3E 3C 43 : eader><s:Body><C
    DateTime=2009-08-06T02:34:29.4531250Z
System.Net.Sockets Verbose: 0 : [2760] 00000190 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:29.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 000001A0 : 70 6F 6E 73 65 20 78 6D-6C 6E 73 3D 22 68 74 74 : ponse xmlns="htt
    DateTime=2009-08-06T02:34:29.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 000001B0 : 70 3A 2F 2F 73 63 68 65-6D 61 73 2E 78 6D 6C 73 : p://schemas.xmls
    DateTime=2009-08-06T02:34:29.4843750Z
System.Net.Sockets Verbose: 0 : [2760] 000001C0 : 6F 61 70 2E 6F 72 67 2F-77 73 2F 32 30 30 35 2F : oap.org/ws/2005/
    DateTime=2009-08-06T02:34:29.4843750Z
System.Net.Sockets Verbose: 0 : [2760] 000001D0 : 30 32 2F 72 6D 22 3E 3C-49 64 65 6E 74 69 66 69 : 02/rm"><Identifi
    DateTime=2009-08-06T02:34:29.5000000Z
System.Net.Sockets Verbose: 0 : [2760] 000001E0 : 65 72 3E 75 72 6E 3A 75-75 69 64 3A 35 65 31 39 : er>urn:uuid:5e19
    DateTime=2009-08-06T02:34:29.5000000Z
System.Net.Sockets Verbose: 0 : [2760] 000001F0 : 66 39 34 66 2D 38 39 31-33 2D 34 64 63 37 2D 38 : f94f-8913-4dc7-8
    DateTime=2009-08-06T02:34:29.5156250Z
System.Net.Sockets Verbose: 0 : [2760] 00000200 : 62 38 61 2D 63 35 63 35-66 38 36 36 34 38 38 32 : b8a-c5c5f8664882
    DateTime=2009-08-06T02:34:29.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:29.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:29.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.5625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:29.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:29.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:29.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:29.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.6250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000210 : 3C 2F 49 64 65 6E 74 69-66 69 65 72 3E 3C 2F 43 : </Identifier></C
    DateTime=2009-08-06T02:34:29.6406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000220 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:29.6406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000230 : 70 6F 6E 73 65 3E 3C 2F-73 3A 42 6F 64 79 3E 3C : ponse></s:Body><
    DateTime=2009-08-06T02:34:29.6562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000240 : 2F 73 3A 45 6E 76 65 6C-6F 70 65 3E             : /s:Envelope>
    DateTime=2009-08-06T02:34:29.6562500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 588#588
    DateTime=2009-08-06T02:34:29.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:29.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:29.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:29.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:29.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.7343750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:29.7500000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:29.7500000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:29.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:29.7656250Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.7812500Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.7812500Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:29.7968750Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.7968750Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.8125000Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.8125000Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:29.8281250Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.8281250Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.8437500Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.8593750Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:29.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:29.8750000Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.8750000Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.8906250Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.8906250Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:29.9062500Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.9062500Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.9218750Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.9218750Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:29.9375000Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.9531250Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.9531250Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.9687500Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:29.9687500Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.9843750Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.9843750Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.0000000Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 0D                                              : .
    DateTime=2009-08-06T02:34:30.0156250Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.0312500Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.0468750Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.0625000Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00 3C 00 50 00 00 00 00-00 00 00 01 00          : .<.P.........
    DateTime=2009-08-06T02:34:30.0781250Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 13#13
    DateTime=2009-08-06T02:34:30.0781250Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.0937500Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.1093750Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:30.1250000Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.1250000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.3281250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:30.3437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:30.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:30.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:30.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:30.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:30.4687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:30.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:30.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.5781250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.5937500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:30.6093750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:30.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 14                                              : .
    DateTime=2009-08-06T02:34:30.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
    DateTime=2009-08-06T02:34:30.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 68 65 72 00                                     : her.
    DateTime=2009-08-06T02:34:30.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 20#20
    DateTime=2009-08-06T02:34:30.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.7812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:30.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:30.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:30.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:30.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.9062500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:30.9062500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:30.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:30.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:30.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:30.9375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:30.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.0000000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:31.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:31.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:31.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:31.0468750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:31.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:31.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:31.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:31.2968750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:31.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0E                                              : .
    DateTime=2009-08-06T02:34:31.4062500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:31.4218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:31.4218750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:31.4375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:31.4531250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:31.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.4843750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:31.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:31.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
    DateTime=2009-08-06T02:34:31.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 14#14
    DateTime=2009-08-06T02:34:31.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.5468750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:31.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:31.5781250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:31.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.5937500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.5937500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.6093750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:31.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.6562500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.6562500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:31.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:31.6875000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.7031250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.7343750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.7343750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:31.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:31.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.7812500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.7968750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:31.8125000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.8125000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.8593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:31.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.9218750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.9218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:31.9375000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.9687500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.9687500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:32.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:32.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:32.2500000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.2812500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:32.3125000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.3281250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:32.3593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:32.3750000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:32.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.3906250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:32.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:32.4375000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:32.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.4531250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.5312500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:32.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:32.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:32.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:32.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.5937500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 04                                              : .
    DateTime=2009-08-06T02:34:32.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.6406250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.6718750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:32.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CD                                              : .
    DateTime=2009-08-06T02:34:32.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:32.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:32.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.7343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:32.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.7656250Z
System.Net.Sockets Verbose: 0 : [2932] (printing 1024 out of 1229)
    DateTime=2009-08-06T02:34:32.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:32.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:32.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:32.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:32.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:32.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:32.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:32.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 6C 6E 73 3A 72 3D 22 68-74 74 70 3A 2F 2F 73 63 : lns:r="http://sc
    DateTime=2009-08-06T02:34:32.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 68 65 6D 61 73 2E 78 6D-6C 73 6F 61 70 2E 6F 72 : hemas.xmlsoap.or
    DateTime=2009-08-06T02:34:32.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 67 2F 77 73 2F 32 30 30-35 2F 30 32 2F 72 6D 22 : g/ws/2005/02/rm"
    DateTime=2009-08-06T02:34:32.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 20 78 6D 6C 6E 73 3A 61-3D 22 68 74 74 70 3A 2F :  xmlns:a="http:/
    DateTime=2009-08-06T02:34:32.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 2F 77 77 77 2E 77 33 2E-6F 72 67 2F 32 30 30 35 : /www.w3.org/2005
    DateTime=2009-08-06T02:34:32.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:32.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:32.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 2F 30 38 2F 61 64 64 72-65 73 73 69 6E 67 22 3E : /08/addressing">
    DateTime=2009-08-06T02:34:32.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 3C 73 3A 48 65 61 64 65-72 3E 3C 72 3A 41 63 6B : <s:Header><r:Ack
    DateTime=2009-08-06T02:34:32.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 52 65 71 75 65 73 74 65-64 3E 3C 72 3A 49 64 65 : Requested><r:Ide
    DateTime=2009-08-06T02:34:32.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 6E 74 69 66 69 65 72 3E-75 72 6E 3A 75 75 69 64 : ntifier>urn:uuid
    DateTime=2009-08-06T02:34:32.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 3A 35 65 31 39 66 39 34-66 2D 38 39 31 33 2D 34 : :5e19f94f-8913-4
    DateTime=2009-08-06T02:34:32.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 64 63 37 2D 38 62 38 61-2D 63 35 63 35 66 38 36 : dc7-8b8a-c5c5f86
    DateTime=2009-08-06T02:34:32.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 36 34 38 38 32 3C 2F 72-3A 49 64 65 6E 74 69 66 : 64882</r:Identif
    DateTime=2009-08-06T02:34:33.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 69 65 72 3E 3C 2F 72 3A-41 63 6B 52 65 71 75 65 : ier></r:AckReque
    DateTime=2009-08-06T02:34:33.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 73 74 65 64 3E 3C 72 3A-53 65 71 75 65 6E 63 65 : sted><r:Sequence
    DateTime=2009-08-06T02:34:33.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000120 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:33.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000130 : 64 3D 22 31 22 3E 3C 72-3A 49 64 65 6E 74 69 66 : d="1"><r:Identif
    DateTime=2009-08-06T02:34:33.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000140 : 69 65 72 3E 75 72 6E 3A-75 75 69 64 3A 35 65 31 : ier>urn:uuid:5e1
    DateTime=2009-08-06T02:34:33.0468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000150 : 39 66 39 34 66 2D 38 39-31 33 2D 34 64 63 37 2D : 9f94f-8913-4dc7-
    DateTime=2009-08-06T02:34:33.0468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000160 : 38 62 38 61 2D 63 35 63-35 66 38 36 36 34 38 38 : 8b8a-c5c5f866488
    DateTime=2009-08-06T02:34:33.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000170 : 32 3C 2F 72 3A 49 64 65-6E 74 69 66 69 65 72 3E : 2</r:Identifier>
    DateTime=2009-08-06T02:34:33.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000180 : 3C 72 3A 4D 65 73 73 61-67 65 4E 75 6D 62 65 72 : <r:MessageNumber
    DateTime=2009-08-06T02:34:33.0781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000190 : 3E 31 3C 2F 72 3A 4D 65-73 73 61 67 65 4E 75 6D : >1</r:MessageNum
    DateTime=2009-08-06T02:34:33.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 000001A0 : 62 65 72 3E 3C 2F 72 3A-53 65 71 75 65 6E 63 65 : ber></r:Sequence
    DateTime=2009-08-06T02:34:33.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 000001B0 : 3E 3C 61 3A 41 63 74 69-6F 6E 20 73 3A 6D 75 73 : ><a:Action s:mus
    DateTime=2009-08-06T02:34:33.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 000001C0 : 74 55 6E 64 65 72 73 74-61 6E 64 3D 22 31 22 3E : tUnderstand="1">
    DateTime=2009-08-06T02:34:33.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 000001D0 : 68 74 74 70 3A 2F 2F 74-65 6D 70 75 72 69 2E 6F : http://tempuri.o
    DateTime=2009-08-06T02:34:33.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 000001E0 : 72 67 2F 49 44 69 73 70-61 74 63 68 65 72 53 65 : rg/IDispatcherSe
    DateTime=2009-08-06T02:34:33.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 000001F0 : 72 76 69 63 65 2F 53 75-62 73 63 72 69 62 65 3C : rvice/Subscribe<
    DateTime=2009-08-06T02:34:33.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000200 : 2F 61 3A 41 63 74 69 6F-6E 3E 3C 56 73 44 65 62 : /a:Action><VsDeb
    DateTime=2009-08-06T02:34:33.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000210 : 75 67 67 65 72 43 61 75-73 61 6C 69 74 79 44 61 : uggerCausalityDa
    DateTime=2009-08-06T02:34:33.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000220 : 74 61 20 78 6D 6C 6E 73-3D 22 68 74 74 70 3A 2F : ta xmlns="http:/
    DateTime=2009-08-06T02:34:33.1718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000230 : 2F 73 63 68 65 6D 61 73-2E 6D 69 63 72 6F 73 6F : /schemas.microso
    DateTime=2009-08-06T02:34:33.1718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000240 : 66 74 2E 63 6F 6D 2F 76-73 74 75 64 69 6F 2F 64 : ft.com/vstudio/d
    DateTime=2009-08-06T02:34:33.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000250 : 69 61 67 6E 6F 73 74 69-63 73 2F 73 65 72 76 69 : iagnostics/servi
    DateTime=2009-08-06T02:34:33.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000260 : 63 65 6D 6F 64 65 6C 73-69 6E 6B 22 3E 75 49 44 : cemodelsink">uID
    DateTime=2009-08-06T02:34:33.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000270 : 50 6F 78 46 75 50 66 36-57 54 6E 4A 42 70 6A 50 : PoxFuPf6WTnJBpjP
    DateTime=2009-08-06T02:34:33.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000280 : 72 32 30 45 63 4B 72 30-41 41 41 41 41 57 76 35 : r20EcKr0AAAAAWv5
    DateTime=2009-08-06T02:34:33.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000290 : 33 43 44 49 59 71 45 4B-37 30 37 78 6D 50 59 39 : 3CDIYqEK707xmPY9
    DateTime=2009-08-06T02:34:33.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 000002A0 : 6C 7A 37 46 7A 2B 32 53-33 4A 51 31 48 6A 6D 46 : lz7Fz+2S3JQ1HjmF
    DateTime=2009-08-06T02:34:33.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 000002B0 : 48 76 7A 56 6E 50 58 77-41 43 51 41 41 3C 2F 56 : HvzVnPXwACQAA</V
    DateTime=2009-08-06T02:34:33.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 000002C0 : 73 44 65 62 75 67 67 65-72 43 61 75 73 61 6C 69 : sDebuggerCausali
    DateTime=2009-08-06T02:34:33.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 000002D0 : 74 79 44 61 74 61 3E 3C-2F 73 3A 48 65 61 64 65 : tyData></s:Heade
    DateTime=2009-08-06T02:34:33.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 000002E0 : 72 3E 3C 73 3A 42 6F 64-79 3E 3C 53 75 62 73 63 : r><s:Body><Subsc
    DateTime=2009-08-06T02:34:33.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 000002F0 : 72 69 62 65 20 78 6D 6C-6E 73 3D 22 68 74 74 70 : ribe xmlns="http
    DateTime=2009-08-06T02:34:33.2812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000300 : 3A 2F 2F 74 65 6D 70 75-72 69 2E 6F 72 67 2F 22 : ://tempuri.org/"
    DateTime=2009-08-06T02:34:33.2968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000310 : 3E 3C 73 75 62 73 63 72-69 62 65 72 20 78 6D 6C : ><subscriber xml
    DateTime=2009-08-06T02:34:33.2968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000320 : 6E 73 3A 62 3D 22 68 74-74 70 3A 2F 2F 73 63 68 : ns:b="http://sch
    DateTime=2009-08-06T02:34:33.3125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000330 : 65 6D 61 73 2E 64 61 74-61 63 6F 6E 74 72 61 63 : emas.datacontrac
    DateTime=2009-08-06T02:34:33.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000340 : 74 2E 6F 72 67 2F 32 30-30 34 2F 30 37 2F 54 65 : t.org/2004/07/Te
    DateTime=2009-08-06T02:34:33.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000350 : 73 74 2E 42 61 73 65 22-20 78 6D 6C 6E 73 3A 69 : st.Base" xmlns:i
    DateTime=2009-08-06T02:34:33.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000360 : 3D 22 68 74 74 70 3A 2F-2F 77 77 77 2E 77 33 2E : ="http://www.w3.
    DateTime=2009-08-06T02:34:33.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000370 : 6F 72 67 2F 32 30 30 31-2F 58 4D 4C 53 63 68 65 : org/2001/XMLSche
    DateTime=2009-08-06T02:34:33.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000380 : 6D 61 2D 69 6E 73 74 61-6E 63 65 22 3E 3C 62 3A : ma-instance"><b:
    DateTime=2009-08-06T02:34:33.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000390 : 5F 41 64 64 72 65 73 73-3E 61 6D 71 70 3A 2F 2F : _Address>amqp://
    DateTime=2009-08-06T02:34:33.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 000003A0 : 2F 73 75 62 73 63 72 69-62 65 72 3C 2F 62 3A 5F : /subscriber</b:_
    DateTime=2009-08-06T02:34:33.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 000003B0 : 41 64 64 72 65 73 73 3E-3C 62 3A 5F 43 6F 6E 74 : Address><b:_Cont
    DateTime=2009-08-06T02:34:33.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 000003C0 : 65 78 74 73 20 78 6D 6C-6E 73 3A 63 3D 22 68 74 : exts xmlns:c="ht
    DateTime=2009-08-06T02:34:33.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 000003D0 : 74 70 3A 2F 2F 73 63 68-65 6D 61 73 2E 64 61 74 : tp://schemas.dat
    DateTime=2009-08-06T02:34:33.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 000003E0 : 61 63 6F 6E 74 72 61 63-74 2E 6F 72 67 2F 32 30 : acontract.org/20
    DateTime=2009-08-06T02:34:33.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 000003F0 : 30 34 2F 30 37 2F 54 65-73 74 2E 45 6E 74 69 74 : 04/07/Test.Entit
    DateTime=2009-08-06T02:34:33.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1229#1229
    DateTime=2009-08-06T02:34:33.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:33.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:33.4687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.4843750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:33.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.5000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:33.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.5156250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.5312500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:33.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:33.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:33.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:33.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:33.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 3C                                     : ...<
    DateTime=2009-08-06T02:34:33.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:33.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.6406250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.6562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:33.6562500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:33.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:33.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.6875000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 3C 21 61 6D 71-2E 63 74 61 67 2D 38 56 : .<.<!amq.ctag-8V
    DateTime=2009-08-06T02:34:33.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 61 4D 6F 41 4C 74 73 47-2F 59 6D 71 2F 49 2B 57 : aMoALtsG/Ymq/I+W
    DateTime=2009-08-06T02:34:33.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 56 48 4F 77 3D 3D 00 00-00 00 00 00 00 02 00 00 : VHOw==..........
    DateTime=2009-08-06T02:34:33.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000030 : 0B 2F 64 69 73 70 61 74-63 68 65 72             : ./dispatcher
    DateTime=2009-08-06T02:34:33.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 60#60
    DateTime=2009-08-06T02:34:33.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.7656250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:33.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.7968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:33.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.8281250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:33.8437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:33.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:33.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:33.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 0E                                     : ....
    DateTime=2009-08-06T02:34:33.9218750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:33.9375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:33.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:33.9531250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:33.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:34.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:34.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:34.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:34.0312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
    DateTime=2009-08-06T02:34:34.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 14#14
    DateTime=2009-08-06T02:34:34.0625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:34.0625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:34.0781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:34.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:34.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:34.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:34.2031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:34.2343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:34.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:34.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:34.3281250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:34.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:34.5312500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:34.7343750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:34.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:34.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:34.7812500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:34.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:34.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:34.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:34.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:34.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:35.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:35.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:35.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:36:20.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:36:20.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:36:20.9531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:36:23.7187500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:36:23.7968750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:36:23.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:36:23.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:36:24.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Send()
    DateTime=2009-08-06T02:36:25.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:36:32.4531250Z
System.Net.Sockets Verbose: 0 : [4004] TcpClient#32176063::Close()
    DateTime=2009-08-06T02:36:33.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:36:33.8437500Z
System.Net.Sockets Error: 0 : [2148] Exception in the Socket#44150175::Receive - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:35.9218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:36:35.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:36:35.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:36:36.0000000Z
System.Net.Sockets Verbose: 0 : [4004] TcpClient#32176063::Dispose()
    DateTime=2009-08-06T02:36:36.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Send()
    DateTime=2009-08-06T02:36:36.0625000Z
System.Net.Sockets Verbose: 0 : [4004] Socket#44150175::Dispose()
    DateTime=2009-08-06T02:36:36.0937500Z
System.Net.Sockets Error: 0 : [2660] Exception in the Socket#41014879::Send - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:36.1093750Z
System.Net.Sockets Verbose: 0 : [4004] Exiting TcpClient#32176063::Dispose() 
    DateTime=2009-08-06T02:36:36.1406250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:36:36.1562500Z
System.Net.Sockets Verbose: 0 : [4004] Exiting TcpClient#32176063::Close() 
    DateTime=2009-08-06T02:36:36.2031250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:36:36.2187500Z
System.Net.Sockets Verbose: 0 : [2148] TcpClient#32176063::Close()
    DateTime=2009-08-06T02:36:36.2343750Z
System.Net.Sockets Verbose: 0 : [1240] TcpClient#2637164::Close()
    DateTime=2009-08-06T02:36:36.2500000Z
System.Net.Sockets Verbose: 0 : [2660] TcpClient#2637164::Close()
    DateTime=2009-08-06T02:36:36.2500000Z
System.Net.Sockets Verbose: 0 : [1240] TcpClient#2637164::Dispose()
    DateTime=2009-08-06T02:36:36.2656250Z
System.Net.Sockets Verbose: 0 : [2660] TcpClient#2637164::Dispose()
    DateTime=2009-08-06T02:36:36.2656250Z
System.Net.Sockets Verbose: 0 : [1240] Socket#41014879::Dispose()
    DateTime=2009-08-06T02:36:36.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Dispose()
    DateTime=2009-08-06T02:36:36.2968750Z
System.Net.Sockets Verbose: 0 : [1240] Exiting TcpClient#2637164::Dispose() 
    DateTime=2009-08-06T02:36:36.3125000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Dispose() 
    DateTime=2009-08-06T02:36:36.3281250Z
System.Net.Sockets Verbose: 0 : [1240] Exiting TcpClient#2637164::Close() 
    DateTime=2009-08-06T02:36:36.3281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting TcpClient#2637164::Dispose() 
    DateTime=2009-08-06T02:36:36.3437500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:36:36.3593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting TcpClient#2637164::Close() 
    DateTime=2009-08-06T02:36:36.3750000Z
System.Net.Sockets Verbose: 0 : [2148] TcpClient#32176063::Dispose()
    DateTime=2009-08-06T02:36:36.3906250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:36:36.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting TcpClient#32176063::Dispose() 
    DateTime=2009-08-06T02:36:36.4531250Z
System.Net.Sockets Verbose: 0 : [3696] TcpClient#2637164::Close()
    DateTime=2009-08-06T02:36:36.4531250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting TcpClient#32176063::Close() 
    DateTime=2009-08-06T02:36:36.4687500Z
System.Net.Sockets Verbose: 0 : [3696] TcpClient#2637164::Dispose()
    DateTime=2009-08-06T02:36:36.4843750Z
System.Net.Sockets Verbose: 0 : [3352] TcpClient#32176063::Close()
    DateTime=2009-08-06T02:36:36.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting TcpClient#2637164::Dispose() 
    DateTime=2009-08-06T02:36:36.5000000Z
System.Net.Sockets Verbose: 0 : [3352] TcpClient#32176063::Dispose()
    DateTime=2009-08-06T02:36:36.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting TcpClient#2637164::Close() 
    DateTime=2009-08-06T02:36:36.5156250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting TcpClient#32176063::Dispose() 
    DateTime=2009-08-06T02:36:36.5312500Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:36:36.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting TcpClient#32176063::Close() 
    DateTime=2009-08-06T02:36:36.5468750Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:36:36.5625000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:36:36.5625000Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:36:36.5781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:36:36.5781250Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:36:36.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:36:36.5937500Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:36:36.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:36:36.6093750Z
System.Net.Sockets Error: 0 : [4028] Exception in the Socket#54234833::Send - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:36.6093750Z
System.Net.Sockets Error: 0 : [2760] Exception in the Socket#54234833::Receive - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:36.6250000Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 0#0
    DateTime=2009-08-06T02:36:36.6406250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:36:36.6718750Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:36:39.0468750Z
System.Net.Sockets Error: 0 : [1260] Exception in the Socket#54234833::Send - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:40.4062500Z
System.Net.Sockets Verbose: 0 : [2760] TcpClient#17690816::Close()
    DateTime=2009-08-06T02:36:40.4218750Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 0#0
    DateTime=2009-08-06T02:36:40.4218750Z
System.Net.Sockets Verbose: 0 : [2760] TcpClient#17690816::Dispose()
    DateTime=2009-08-06T02:36:40.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Dispose()
    DateTime=2009-08-06T02:36:40.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting TcpClient#17690816::Dispose() 
    DateTime=2009-08-06T02:36:40.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting TcpClient#17690816::Close() 
    DateTime=2009-08-06T02:36:40.4843750Z
System.Net.Sockets Verbose: 0 : [1260] TcpClient#17690816::Close()
    DateTime=2009-08-06T02:36:40.5156250Z
System.Net.Sockets Verbose: 0 : [1260] TcpClient#17690816::Dispose()
    DateTime=2009-08-06T02:36:40.5312500Z
System.Net.Sockets Verbose: 0 : [0288] TcpClient#17690816::Close()
    DateTime=2009-08-06T02:36:40.5468750Z
System.Net.Sockets Verbose: 0 : [1260] Exiting TcpClient#17690816::Dispose() 
    DateTime=2009-08-06T02:36:40.5468750Z
System.Net.Sockets Verbose: 0 : [0288] TcpClient#17690816::Dispose()
    DateTime=2009-08-06T02:36:40.5625000Z
System.Net.Sockets Verbose: 0 : [1260] Exiting TcpClient#17690816::Close() 
    DateTime=2009-08-06T02:36:42.0468750Z
System.Net.Sockets Verbose: 0 : [0288] Exiting TcpClient#17690816::Dispose() 
    DateTime=2009-08-06T02:36:43.2812500Z
System.Net.Sockets Verbose: 0 : [0288] Exiting TcpClient#17690816::Close() 
    DateTime=2009-08-06T02:36:43.3281250Z
System.Net Error: 0 : [2932] Exception in the 
#12549444::UnhandledExceptionHandler - Cannot access a disposed object.
Object name: 'System.Net.Sockets.NetworkStream'.
    DateTime=2009-08-06T02:36:43.9375000Z
System.Net Error: 0 : [2932]    at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMqPubSub1\frmMain.cs:line 347
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message& m)
   at System.Windows.Forms.ButtonBase.WndProc(Message& m)
   at System.Windows.Forms.Button.WndProc(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()
    DateTime=2009-08-06T02:36:44.0000000Z
-------------- next part --------------
  <system.diagnostics>
    <trace autoflush="true" />
    <sources>
      <source name="System.Net">
        <listeners>
          <add name="System.Net"/>
        </listeners>
      </source>
      <source name="System.Net.HttpListener">
        <listeners>
          <add name="System.Net"/>
        </listeners>
      </source>
      <source name="System.Net.Sockets">
        <listeners>
          <add name="System.Net"/>
        </listeners>
      </source>
      <source name="System.Net.Cache">
        <listeners>
          <add name="System.Net"/>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add
       name="System.Net"
       type="System.Diagnostics.TextWriterTraceListener"
        initializeData="C:\System.Net.TraceRabbitMq.log"
       traceOutputOptions = "DateTime"
              />
    </sharedListeners>
    <switches>
      <add name="System.Net" value="Verbose" />
      <add name="System.Net.Sockets" value="Verbose" />
      <add name="System.Net.Cache" value="Verbose" />
      <add name="System.Net.HttpListener" value="Verbose" />
    </switches>
  </system.diagnostics>  

From cuonglb at facemain.com  Thu Aug  6 05:36:53 2009
From: cuonglb at facemain.com (Cuong Le)
Date: Thu, 6 Aug 2009 11:36:53 +0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>
Message-ID: <aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>

Hi Nathan,

because you're using json_rpc synchronous requests - call, you must
keep-alive it with steps 5s/request.
It think you have to set : session timeout = 5s (gen_server:call default
time out is 5000ms).

resp = proxy.rpccall("/rpc/rabbitmq", "open", ["guest", "guest",*5*,"/"])

i think you should not set http channel session timeout to large

Cuong,

This is result dump on my server when run *stupidRpc.py* script :

==================================
Calling /rpc/rabbitmq, open, ['guest', 'guest', 5, None]

connect: (localhost, 55672)
send: 'POST /rpc/rabbitmq HTTP/1.1\r\nHost:
localhost:55672\r\nAccept-Encoding: identity\r\nContent-Length:
84\r\nContent-Type: application/json; charset=UTF-8\r\nAccept:
application/json\r\nUser-Agent: python\r\n\r\n'
send: '{"version": "1.1", "params": ["guest", "guest", 9, null], "id": 0,
"method": "open"}'
-----------------------
reply: 'HTTP/1.1 200 OK\r\n'
header: Server: inets/5.0.13
header: Date: Thu, 06 Aug 2009 03:17:48 GMT
header: Content-Length: 80
header: Content-Type: text/plain
body:
{"version":"1.1","id":0,"result":{"service":"B959C017343A362D4539668F9D6BA37F"}}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

got channel: B959C017343A362D4539668F9D6BA37F

==================================
Calling /rpc/B959C017343A362D4539668F9D6BA37F, poll, []

send: u'POST /rpc/B959C017343A362D4539668F9D6BA37F HTTP/1.1\r\nHost:
localhost:55672\r\nAccept-Encoding: identity\r\nContent-Length:
59\r\nContent-Type: application/json; charset=UTF-8\r\nAccept:
application/json\r\nUser-Agent: python\r\n\r\n'
send: '{"version": "1.1", "params": [], "id": 1, "method": "poll"}'
-----------------------
reply: 'HTTP/1.1 200 OK\r\n'
header: Server: inets/5.0.13
header: Date: Thu, 06 Aug 2009 03:17:52 GMT
header: Content-Length: 36
header: Content-Type: text/plain
body:
{"version":"1.1","id":1,"result":[]}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


On Thu, Aug 6, 2009 at 1:39 AM, Nathan Gray <n8gray at n8gray.org> wrote:

> Hi Cuong,
>
> On Tue, Aug 4, 2009 at 8:20 PM, Cuong Le<cuonglb at facemain.com> wrote:
> > Hi Nathan,
> >
> > Ah ha, because HTTP Channel was closed by timeout handle_info
> spontaneous.
> > You must keep-alive it until make json_rpc call close it.
>
> I'm afraid that's not it.  The HTTP channel times out after 15
> seconds, but the timeout that's giving me headaches happens after only
> 5 seconds.
>
> BTW, I set things up on my Ubuntu machine, using the same versions of
> everything and got the same problem.  I also tried out the javascript
> example code and it seems to work fine, so I guess I'm just doing
> something wrong on the client side.  I'm attaching my VERY simple (50
> line) python client code.  Can somebody take a look at it and see if
> they can spot the problem?
>
> > Can you chat with me? at : cuonglb at jabber.org
>
> Sure, I'll try to catch you.  Thanks!
>
> Cheers,
> -n8
>
> --
> http://n8gray.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090806/4f1e0a89/attachment.htm 

From n8gray at n8gray.org  Thu Aug  6 06:53:40 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Wed, 5 Aug 2009 22:53:40 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>
	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>
Message-ID: <65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>

Hi Cuong,

On Wed, Aug 5, 2009 at 9:36 PM, Cuong Le<cuonglb at facemain.com> wrote:
> Hi Nathan,
>
> because you're using json_rpc synchronous requests - call, you must
> keep-alive it with steps 5s/request.
> It think you have to set : session timeout = 5s (gen_server:call default
> time out is 5000ms).
>
> resp = proxy.rpccall("/rpc/rabbitmq", "open", ["guest", "guest",5,"/"])

Ah, thank you!  This is progress!  But I'm now quite confused about
what this session timeout really means.  Shouldn't "poll" just return
instantly?  Why does it wait for the session to timeout?

If I replace the call to poll with channel.declare, then a session
timeout of 5s gives me the gen_server timeout error again.  If I set
the session timeout to something less than 5s I get this response:

{"version":"1.1","id":1,"error":{"name":"JSONRPCError","code":504,"message":"Closed","error":null}}

And again, I'm not sure why it waits for the session timeout to expire
before replying.  Here's the code that I put in to replace the poll
rpc call:

resp = proxy.rpccall(url, "call", ["exchange.declare",
                                   [0,           #ticket
                                    "foobar",   #exchange name
                                    "fanout",    #exch type
                                    False,       #passive
                                    True,        #durable
                                    False,       #auto-delete
                                    False,       #internal
                                    True,        #nowait
                                    []           #exchange arguments
                                    ]])

Thanks again,
-n8

-- 
http://n8gray.org



From n8gray at n8gray.org  Thu Aug  6 07:09:07 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Wed, 5 Aug 2009 23:09:07 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>
	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>
	<65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>
Message-ID: <65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>

On Wed, Aug 5, 2009 at 10:53 PM, Nathan Gray<n8gray at n8gray.org> wrote:
> If I replace the call to poll with channel.declare, then a session
> timeout of 5s gives me the gen_server timeout error again. ?If I set
> the session timeout to something less than 5s I get this response:
>
> {"version":"1.1","id":1,"error":{"name":"JSONRPCError","code":504,"message":"Closed","error":null}}
>
> And again, I'm not sure why it waits for the session timeout to expire
> before replying.

Ok, never mind.  I figured this one out myself.  I shouldn't have set
"nowait" to True.  It seems like "nowait" in a synchronous API should
return immediately but instead it never returns.  On a perhaps related
note, "cast" has the same strange behavior.  Cast methods like
"simple.publish" block until the session times out.  This seems very
odd to me.  Is there some rationale for this design that I'm not
understanding?

Cheers,
-n8

-- 
http://n8gray.org



From anand.ved at Xoriant.Com  Thu Aug  6 07:47:21 2009
From: anand.ved at Xoriant.Com (Anand Ved)
Date: Thu, 6 Aug 2009 12:17:21 +0530
Subject: [rabbitmq-discuss] Issue in Java client while fetching channel
In-Reply-To: <269388e30908050428o29e4e468qdcef39e011c3bdc1@mail.gmail.com>
References: <FA3D7C54DA3A1540B2C92C93ACD215600582EC41@XOREXCH.India.XoriantCorp.com>
	<269388e30908041531ub231c8fg584b8bb1c26074d8@mail.gmail.com>
	<FA3D7C54DA3A1540B2C92C93ACD215600582ECC0@XOREXCH.India.XoriantCorp.com>
	<269388e30908050428o29e4e468qdcef39e011c3bdc1@mail.gmail.com>
Message-ID: <FA3D7C54DA3A1540B2C92C93ACD215600582F378@XOREXCH.India.XoriantCorp.com>

Ben,

>> As per the java client documentation, channel is not thread safe and I have multiple threads that would publish messages to the Q. For each publish, I create a new channel and publish the message.

> Yes, this is correct - channels are not thread safe. However, this doesn't mean you have to dispose of them every time you publish a message, all it means is that they shouldn't be shared across threads.
One way to achieve this is to store the channel in the ThreadLocal.

I am using web application to receive requests from clients. Each request would arrive as a separate thread and hence I cannot reuse the channel so it makes no sense in storing them. However, in case of consumer, I have created only one channel object and I do reuse this channel.


>> If you are aware of any other case where we may end up getting a null channel, then please let me know.

> As it turns out, there is actually a bug in the channel number allocation method that under some circumstances leads to a null channel being returned. This appears to be a bug in the HotSpot compiler (as the attached test proves on some JDKs - I was able to reproduce it on 1.6.0_14 on 64 bit Linux, but not on OSX or Windows).
The simple solution in the Java client is instead of comparing the max channel against Integer.MAX_VALUE, compare against Integer.MAX_VALUE - 1, and then the compiler doesn't seem to bin the loop. So I'll raise a bug for that and push the fix out.

I hope closing the channel as I am doing should suffice here. 
If this is not the case, I can even close the connection as soon as I detect that the channel being returned is null and reconnect. 
Please let me know if these are not the cases.


Thank you for your quick investigation and reply. Please keep me posted on the status of this bug.

Regards,
Anand Ved | Xoriant Solutions Pvt. Ltd.?
Winchester,?Hiranandani Business Park, Powai,?Mumbai 400076, INDIA. 
Tel: +91 22 30511000 |?+91 22 3051 1058 (Direct) | VOIP: +?1 408 834 4495? 
Yahoo IM: anandved? | http://www.xoriant.com? 
Modern technology, Owes ecology, An apology. ~Alan M. Eddison - Go Green!!


-----Original Message-----
From: Ben Hood [mailto:0x6e6562 at gmail.com] 
Sent: Wednesday, August 05, 2009 4:58 PM
To: Anand Ved
Cc: rabbitmq
Subject: Re: [rabbitmq-discuss] Issue in Java client while fetching channel

Arnand,

On Wed, Aug 5, 2009 at 2:24 AM, Anand Ved<anand.ved at xoriant.com> wrote:
> As per the java client documentation, channel is not thread safe and I have multiple threads that would publish messages to the Q. For each publish, I create a new channel and publish the message.

Yes, this is correct - channels are not thread safe. However, this doesn't mean you have to dispose of them every time you publish a message, all it means is that they shouldn't be shared across threads.
One way to achieve this is to store the channel in the ThreadLocal.

> Earlier I was not closing the channel and this lead to connection.createChannel() returning null object. Now as per java client document again, it is stated that if there are no channels available or if the current channel number is currently in use, then it would return null. Hence now I have closed the channel after each publish.

On the server side, there is no maximum number of channels per se.
This is only limited by the maximum number of processes in the Erlang VM, which is 32768 by default, but this can be raised to any number you like.

> If you are aware of any other case where we may end up getting a null channel, then please let me know.

As it turns out, there is actually a bug in the channel number allocation method that under some circumstances leads to a null channel being returned. This appears to be a bug in the HotSpot compiler (as the attached test proves on some JDKs - I was able to reproduce it on 1.6.0_14 on 64 bit Linux, but not on OSX or Windows).
The simple solution in the Java client is instead of comparing the max channel against Integer.MAX_VALUE, compare against Integer.MAX_VALUE - 1, and then the compiler doesn't seem to bin the loop. So I'll raise a bug for that and push the fix out.

HTH,

Ben



From matthew at lshift.net  Thu Aug  6 10:51:18 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Thu, 6 Aug 2009 10:51:18 +0100
Subject: [rabbitmq-discuss] Erlang Client - preemptive warning
Message-ID: <20090806095118.GH22693@mrnibble.lshift.net>

Howdy,

This only affects people using the Erlang AMQP client.

Currently we are investing a good amount of effort into getting the
Erlang client properly released. However, because of code sharing
between the client and server, the head of the default branch now
depends on code in the server which has not yet been part of any
release.

In the past, it has been the case that the head of the default branch
of the Erlang client works with the latest stable release of the
server. However, this has more been through luck than design - the
only two things that are trusted to work together are the head of the
default branches of both server and client.

Therefore, if you are using the Erlang client right now, you have
three choices:
a) Continue with the code you have - do not update to the default
    head of the Erlang client. Instead, wait for us to release the
    Erlang client properly.
b) Use the default branch of the server and the default branch of the
    Erlang client. Obviously, this is higher risk as the server default
    branch may contain new and exciting bugs.
c) Use the Erlang client at revision d522704ccd77. This is on the
    default branch and is the last revision before the Erlang client
    starts to rely on the unreleased server API.

If in any doubt, (a) and (b) are you best bets, or if it's non urgent
just wait for the Erlang client to be released. Obviously, we can't
give an ETA for that, suffice to say that it's going to be more than a
week or two.

Matthew



From majek04 at gmail.com  Thu Aug  6 10:52:50 2009
From: majek04 at gmail.com (majek04)
Date: Thu, 6 Aug 2009 10:52:50 +0100
Subject: [rabbitmq-discuss] Python library (py-amqplib)
In-Reply-To: <ce2570e20908051108o3382ed2ke23e9fdd28bd2045@mail.gmail.com>
References: <ce2570e20908051108o3382ed2ke23e9fdd28bd2045@mail.gmail.com>
Message-ID: <3bb0d9710908060252t7a20e5b4i36b972a222915e5e@mail.gmail.com>

On Wed, Aug 5, 2009 at 19:08, Garrett Smith<g at rre.tt> wrote:
> I've got some feedback (purely constructive :) I'd like to provide the
> author of py-amqplib, but I can't locate an appropriate list/forum.
>
> Does feedback for that library belong here? Else, any suggestions?

The author of py-amqplib is Barry Pederson, you can find his email at the
bottom of the page:
http://barryp.org/software/py-amqplib/

He used to read this list, but we haven't heard anything from him
during last few months.

Cheers!
 Marek Majkowski



From matthew at lshift.net  Thu Aug  6 11:11:58 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Thu, 6 Aug 2009 11:11:58 +0100
Subject: [rabbitmq-discuss] Erlang Client - preemptive warning
In-Reply-To: <20090806095118.GH22693@mrnibble.lshift.net>
References: <20090806095118.GH22693@mrnibble.lshift.net>
Message-ID: <20090806101158.GI22693@mrnibble.lshift.net>

On Thu, Aug 06, 2009 at 10:51:18AM +0100, Matthew Sackman wrote:
> c) Use the Erlang client at revision d522704ccd77. This is on the
>     default branch and is the last revision before the Erlang client
>     starts to rely on the unreleased server API.
d) As has been just pointed out to me, there is a rabbitmq_v1_6_0 tag
     on revision b876b7f4049d in the Erlang client (again, default
     branch). This is definitely the recommended revision to use with
     the 1.6.0 release of the server.

Matthew



From 0x6e6562 at gmail.com  Thu Aug  6 11:14:42 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 6 Aug 2009 11:14:42 +0100
Subject: [rabbitmq-discuss] Issue in Java client while fetching channel
In-Reply-To: <FA3D7C54DA3A1540B2C92C93ACD215600582F378@XOREXCH.India.XoriantCorp.com>
References: <FA3D7C54DA3A1540B2C92C93ACD215600582EC41@XOREXCH.India.XoriantCorp.com>
	<269388e30908041531ub231c8fg584b8bb1c26074d8@mail.gmail.com>
	<FA3D7C54DA3A1540B2C92C93ACD215600582ECC0@XOREXCH.India.XoriantCorp.com>
	<269388e30908050428o29e4e468qdcef39e011c3bdc1@mail.gmail.com>
	<FA3D7C54DA3A1540B2C92C93ACD215600582F378@XOREXCH.India.XoriantCorp.com>
Message-ID: <269388e30908060314k4aa21ebaye09b7232140eb0d2@mail.gmail.com>

Anand,

On Thu, Aug 6, 2009 at 7:47 AM, Anand Ved<anand.ved at xoriant.com> wrote:
> I am using web application to receive requests from clients. Each request would arrive as a separate thread and hence I cannot reuse the channel so it makes no sense in storing them.

Are you using a web server that actually creates a new thread to
handle each request?

Although creating a channel for each request is not necessarily a
major issue for Rabbit or the Java client, at some stage you might
find some kind of pooling helpful, e.g. commons-pool.

> Thank you for your quick investigation and reply. Please keep me posted on the status of this bug.

This is fixed and is awaiting QA. If you want the un-QA'ed fix, check
out the branch called bug21333 from the repository. I'll put a note in
the bug to inform the mailing list when this lands on default.

Ben



From 0x6e6562 at gmail.com  Thu Aug  6 11:33:57 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 6 Aug 2009 11:33:57 +0100
Subject: [rabbitmq-discuss] AMQP Permission Granularity
In-Reply-To: <84fb38e30908051757p76b5a32ej6b159db9291f4dc9@mail.gmail.com>
References: <84fb38e30908051757p76b5a32ej6b159db9291f4dc9@mail.gmail.com>
Message-ID: <269388e30908060333n5b8436adp2dffe78f6d76a6a6@mail.gmail.com>

Tsuraan,

On Thu, Aug 6, 2009 at 1:57 AM, tsuraan<tsuraan at gmail.com> wrote:
> Suppose I want to use AMQP to replace RSS (real-time feeds only
> though, no history). ?Ideally, anybody on the entire 'net would be
> able to connect to my Rabbit server and create a queue that's bound to
> my "RSS" exchange. ?That queue would be temporary and exclusive, so
> its lifetime is tied to the client's connection. ?Is there any way, in
> Rabbit, to create a user that only has the ability to create temporary
> exclusive queues, and to bind those queues to an exchange?
>
> It doesn't look like Rabbit's permissions really have this sort of
> usage in mind, but I thought I'd ask just to be sure.

No, the privileges for declaring queues are not fine grained enough to
do something like this.

You could define permissions to prevent binding based on a regex, but
it seems that your issue is preventing access based on type as opposed
to names. One option may be to use a strong name for the exchange, but
I don't know if that will work in your case.

For note, there was a discussion when we did the permission mechanism
about whether to go for a simple ACL scheme as opposed to user-defined
capabilities - for simplicity's sake we opted for the former.

Ben



From jonathan.stoppani at edu.hefr.ch  Thu Aug  6 15:19:25 2009
From: jonathan.stoppani at edu.hefr.ch (Jonathan Stoppani)
Date: Thu, 6 Aug 2009 16:19:25 +0200
Subject: [rabbitmq-discuss] Topic broadcast exchange
Message-ID: <c50d9eb70908060719w441a390vf50a5125ec0bbc3d@mail.gmail.com>

Hi All,
I'm trying to create a broadcast topic exchange, where all messages
matching a certain topic will be dispatched to all queues at the same
time (something like multicast).

Is it possible to do this with only one exchange?

Example:

Exchange: foo
Queues: bar1, bar2, bar3 with respectively the following routing keys:
multicast.set1.#, multicast.set1.#, multicast.set2.#

A message sent to the exchange foo with routing key
multicast.set1.hello will be relayed to the queues bar1 AND bar2.

Thanks for the responses

-- 
Best Regards,
Jonathan Stoppani



From ben.browitt at gmail.com  Thu Aug  6 15:32:49 2009
From: ben.browitt at gmail.com (Ben Browitt)
Date: Thu, 6 Aug 2009 17:32:49 +0300
Subject: [rabbitmq-discuss] building chat
Message-ID: <b0200d7f0908060732i1e9ac3efg9ef4a83ed68e76f@mail.gmail.com>

Hi,

I'm trying to understand how AMQP and RabbitMQ works by building a simple
chat.
>From reading the AMQP specs I get the impression that it's best usage is
when someone publish content to an exchange
and someone else bind his queue to this exchange to get updates. This model
works very well for publish-subscribe
and to finance systems but chat could be different. I read the xmpp gateway
docs and have some questions.

In a chat we want to be able to get presence from users on our friend-list,
send them messages
and send subscription request and messages to users not yet on our
friend-list.

One possibility is that each user will have an exchange and a queue with
binding to his own exchange.
When user1 wants to send a message to user2 he send it directly to the
exchange of user2.
There is a problem with presence updates. If user1 changes his presence,
he'll have to sends the update
to the exchange of all the users on his friend-list. With this design we
move the logic to the client rather then use the AMQP features.

Another option is that when a user logs in he'll create a binding to the
exchanges of all the users on his friend-list.
When user1 want to send a private message or a presence update to user2
he'll send it to his own exchange and it'll be directed to user2. The
problem with this design is that users without mutual presence subscription
can't send private message to each other and can't send subscription
requests.

Can you please share your thoughts on the two options and maybe other design
options?

Thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090806/58741b89/attachment.htm 

From matthias at lshift.net  Thu Aug  6 16:14:49 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 06 Aug 2009 16:14:49 +0100
Subject: [rabbitmq-discuss] Topic broadcast exchange
In-Reply-To: <c50d9eb70908060719w441a390vf50a5125ec0bbc3d@mail.gmail.com>
References: <c50d9eb70908060719w441a390vf50a5125ec0bbc3d@mail.gmail.com>
Message-ID: <4A7AF369.1050602@lshift.net>

Jonathan,

Jonathan Stoppani wrote:
> I'm trying to create a broadcast topic exchange, where all messages
> matching a certain topic will be dispatched to all queues at the same
> time (something like multicast).
> 
> Is it possible to do this with only one exchange?

Exchanges route messages to all the queues with matching bindings. So
what you are describing is not just possible, it's the standard behaviour.


Regards,

Matthias.



From traceye at pmamediagroup.com  Thu Aug  6 16:56:51 2009
From: traceye at pmamediagroup.com (teubanks)
Date: Thu, 6 Aug 2009 09:56:51 -0600
Subject: [rabbitmq-discuss] regex permissions
Message-ID: <BC6CF2EF-CCAB-45DD-83F2-F9DFD43DC923@pmamediagroup.com>

I'm having trouble with using regex to set permissions for my ruby  
application.
tracey:sandbox administrator$ sudo rabbitmqctl set_permissions -p / 
nanite nanite "^nanite-.*" ".*" ".*"
Setting permissions for user "nanite" in vhost "/nanite" ...
...done.
tracey:sandbox administrator$ sudo rabbitmqctl list_permissions -p / 
nanite
Listing permissions in vhost "/nanite" ...
mapper		.*	.*
nanite	%5enanite-.*	.*	.*
...done.
tracey:sandbox administrator$
I type in "^nanite-.*" but "%5enanite-.*" is what gets saved.
Is this an issue with rabbitmq or bash?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090806/880c7cc7/attachment.htm 

From g at rre.tt  Thu Aug  6 17:06:42 2009
From: g at rre.tt (Garrett Smith)
Date: Thu, 6 Aug 2009 11:06:42 -0500
Subject: [rabbitmq-discuss] Queues and auto_delete
Message-ID: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>

I have a queue where auto_delete = false (using rabbitmqctl
list_queues to verify), When I close the last connection, it goes
away. Are there other factors that determine whether a queue is
automatically deleted?

Also, queues where auto_delete = true seems to be deleted
*immediately* after the last channel is closed. IIRC, the broker
should wait for a period of time to allow clients to disconnect and
reconnect without losing messages.

Garrett



From matthias at lshift.net  Thu Aug  6 20:08:20 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 06 Aug 2009 20:08:20 +0100
Subject: [rabbitmq-discuss] Queues and auto_delete
In-Reply-To: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>
References: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>
Message-ID: <4A7B2A24.4080206@lshift.net>

Garrett,

Garrett Smith wrote:
> I have a queue where auto_delete = false (using rabbitmqctl
> list_queues to verify), When I close the last connection, it goes
> away. Are there other factors that determine whether a queue is
> automatically deleted?

Is your queue declared with exclusive=true?

> Also, queues where auto_delete = true seems to be deleted
> *immediately* after the last channel is closed. IIRC, the broker
> should wait for a period of time to allow clients to disconnect and
> reconnect without losing messages.

Such behaviour would be inherently unpredictable. RabbitMQ in fact goes
to great lengths to guarantee almost the opposite - for ordinary
channel/connection closure, auto-deletion will have happened by the time
a client learns of the closure.


Regards,

Matthias.



From jasonjwwilliams at gmail.com  Thu Aug  6 20:10:43 2009
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 6 Aug 2009 13:10:43 -0600
Subject: [rabbitmq-discuss] about the clustering of rabbitmq
In-Reply-To: <91170ee40908051821o72f7a8fbu58961af95b044d3@mail.gmail.com>
References: <91170ee40907292227y35b3531wee18ff83f4cb3d22@mail.gmail.com>
	<4A78590C.9040103@lshift.net>
	<3b949f090908051025s71c99495qa6c3219e235dd5a8@mail.gmail.com>
	<91170ee40908051821o72f7a8fbu58961af95b044d3@mail.gmail.com>
Message-ID: <3b949f090908061210j6a98f3d8kb17c214b62d5518e@mail.gmail.com>

Hi Femto,

That is correct...if using load balancers. As noted in my last e-mail,
one of our goals in implementing messaging queueing is to reduce or
eliminate our SLB count.

-J

On Wed, Aug 5, 2009 at 7:21 PM, femto Zheng<femtowin at gmail.com> wrote:
> No,if using load balancers, the client just needs to know
> the load-balancer server, the load-balancer server will know new
> server if new server adds into the cluster.
>
> On Thu, Aug 6, 2009 at 1:25 AM, Jason J. W.
> Williams<jasonjwwilliams at gmail.com> wrote:
>>> It's also worth pointing out here that connection.redirect is a bit of a
>>> crude, blunt weapon, and in fact has been *removed* for AMQP 0-9-1. When
>>> we transition to 0-9-1, it will no longer be available: it will be up to
>>> clients to know how to connect to the broker. This seems like a
>>> limitation, but I personally view it as an improvement: it means that
>>> AMQP concentrates on *messaging*, and leaves load balancing up to load
>>> balancers -- as it should :-)
>>
>>
>> From my point of view that's definitely less than desirable. The
>> clustered broker has the best point-of-view as to how many clients it
>> has connected and how much work it's doing. We're still
>> re-architecting our processing facilities around RMQ for the explicit
>> purpose of getting rid of the mess of load balancers we currently use.
>> What we've written so far is architected around the idea that a
>> primary and backup server are hard-coded into the config for the
>> client for initial connect and then the broker handles redirecting the
>> client to the least loaded node, which may not in the config file.
>> Otherwise, every time you add a Rabbit node you've got to populate
>> that info amongst your client config files, which means more moving
>> parts. Just my two cents.
>>
>> -J
>>
>



From 0x6e6562 at gmail.com  Thu Aug  6 20:32:37 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 6 Aug 2009 20:32:37 +0100
Subject: [rabbitmq-discuss] regex permissions
In-Reply-To: <BC6CF2EF-CCAB-45DD-83F2-F9DFD43DC923@pmamediagroup.com>
References: <BC6CF2EF-CCAB-45DD-83F2-F9DFD43DC923@pmamediagroup.com>
Message-ID: <269388e30908061232r4a70e2cfn54cb09a9bfbef094@mail.gmail.com>

Tracey,

On Thu, Aug 6, 2009 at 4:56 PM, teubanks<traceye at pmamediagroup.com> wrote:
> I'm having trouble with using regex to set permissions for my ruby
> application.
>
> tracey:sandbox administrator$ sudo rabbitmqctl set_permissions -p /nanite
> nanite "^nanite-.*" ".*" ".*"
> Setting permissions for user "nanite" in vhost "/nanite" ...
> ...done.
> tracey:sandbox administrator$ sudo rabbitmqctl list_permissions -p /nanite
> Listing permissions in vhost "/nanite" ...
> mapper		.*	.*
> nanite	%5enanite-.*	.*	.*
> ...done.
> tracey:sandbox administrator$
>
> I type in "^nanite-.*" but "%5enanite-.*" is what gets saved.
>
> Is this an issue with rabbitmq or bash?

We've just looked into this an it is indeed an issue in Rabbit. It
turns out we are url-encoding the output of the list_*** commands
before they returned to the bash script. This was used to make the
output parsing easier. So I'll take this down as a bug and we'll have
to see what we can do about it. In the meantime, I'm wondering if a
simple url-decode in your processing script can be a workaround?

Ben



From matthias at lshift.net  Thu Aug  6 20:39:51 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 06 Aug 2009 20:39:51 +0100
Subject: [rabbitmq-discuss] Queues and auto_delete
In-Reply-To: <ce2570e20908061217u1551a2bbw473071f6a51f74cd@mail.gmail.com>
References: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>	<4A7B2A24.4080206@lshift.net>
	<ce2570e20908061217u1551a2bbw473071f6a51f74cd@mail.gmail.com>
Message-ID: <4A7B3187.6070501@lshift.net>

Garrett,

Garrett Smith wrote:
> On Thu, Aug 6, 2009 at 2:08 PM, Matthias Radestock<matthias at lshift.net> wrote:
>> Is your queue declared with exclusive=true?
> 
> Yes.
> 
> I only want a single consumer from the queue, but the queue needs to
> stick around to collected messages even when the consumer is
> disconnected.

Exclusivity is on a per-connection basis. It sounds like you want a
notion of exclusivity based on consumer identity. That is not directly
supported by AMQP, but you can simulate it quite faithfully by declaring
an ordinary (non-auto-delete, non-exclusive) queue with a name that is
known only to the intended consumer.

Regards,

Matthias.



From patrick.galvin at gmail.com  Thu Aug  6 20:44:09 2009
From: patrick.galvin at gmail.com (Galvs)
Date: Thu, 6 Aug 2009 12:44:09 -0700 (PDT)
Subject: [rabbitmq-discuss] rabbitmq-server halting with
 rabbit_sasl_report_file_h crash
In-Reply-To: <4A78D77B.3000906@lshift.net>
References: <3157f260908041724i663dc0cfod49036d5d972d36d@mail.gmail.com>
	<4A78D77B.3000906@lshift.net>
Message-ID: <24853129.post@talk.nabble.com>


Thanks ill try those. I think i may have a bug in my code for opening the
connections (i.e. opening too many)


Matthias Radestock-2 wrote:
> 
> Patrick,
> 
> Patrick Galvin wrote:
>> I have been testing rabbitmq for a potential use at work. I am firing 
>> about 500 messages/sec (estimate) from 60 or so processes.
>> All starts well (I can see all the messages being pumped out, all going 
>> quickly) and after a few minutes rabbitmq halts with the error below - 
>> '** gen_event handler rabbit_sasl_report_file_h crashed. '
>> (same error keeps occuring).
>> 
>> Infrastructure wise I have a simple queue setup with one consumer 
>> (erlang client)  with the producer a java client; sending very short 
>> messages
> 
> Based on the error messages you see in the logs, I suspect rabbit has 
> run out of file descriptors. I recommend the following:
> 
> 1) check how many network connections rabbit has open, using netstat and 
> 'rabbitmqctl list_connections'
> 
> 2) do the same for the producers and consumers, assuming they are 
> running under the same user account.
> 
> 3) if the figures in 1 or 2 look high, check your client code for any 
> connection leaks, or rapid opening & closing of connections.
> 
> 4) Check and possibly adjusting 'ulimit -n' for the user running rabbit.
> 
> 
> Regards,
> 
> Matthias.
> 
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
> 
> 

-- 
View this message in context: http://www.nabble.com/rabbitmq-server-halting-with-rabbit_sasl_report_file_h-crash-tp24818562p24853129.html
Sent from the RabbitMQ mailing list archive at Nabble.com.




From pauljones23 at gmail.com  Thu Aug  6 21:57:40 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Thu, 6 Aug 2009 21:57:40 +0100
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <b0200d7f0908061342s13892628w29e8895e803aa119@mail.gmail.com>
References: <b0200d7f0908060732i1e9ac3efg9ef4a83ed68e76f@mail.gmail.com>
	<29598b610908061252o1f50fbd2j3603357386bbb3b@mail.gmail.com>
	<b0200d7f0908061342s13892628w29e8895e803aa119@mail.gmail.com>
Message-ID: <29598b610908061357i20851d1avc1c8f868f62f0266@mail.gmail.com>

Hi Ben,

It'll be a custom RabbitMQ module - as far as I've seen, the spec doesn't
specify anything like this (though I could be completely wrong on that).

Paul.

On Thu, Aug 6, 2009 at 9:42 PM, Ben Browitt <ben.browitt at gmail.com> wrote:

> Paul,
>
> That is interesting for two reasons. First because I might actually
> understand a bit of AMQP and second
> because you are addressing this issue.
>
> Will it be part of the AMQP spec or a custom RabbitMQ module?
> Maybe I can hack something until you'll release this functionality.
>
> And yes, I'll be interested to know when it is available for early testing.
>
> Thanks,
> Ben
>
>
> On Thu, Aug 6, 2009 at 10:52 PM, Paul Jones <pauljones23 at gmail.com> wrote:
>
>> Hi Ben,
>>
>> The model does certainly work best in situations where consumers and
>> producers have little need to know of each other.
>>
>> We are, however, currently experimenting with some presence functionality.
>> This was originally prototyped quite a while ago, and it is currently being
>> reworked to be remove a number of issues that previously prevented it being
>> made mainstream. This functionality creates an exchange that will receive
>> information about when queues, exchanges and bindings are created and
>> deleted - this may help in your case by letting you see when a user
>> subscribes or unsubscribes from another user's exchange.
>>
>> It is still under fairly heavy development at the moment, but I can let
>> you know when it reaches a state where it might be useful to look at.
>>
>> Paul.
>>
>> On Thu, Aug 6, 2009 at 3:32 PM, Ben Browitt <ben.browitt at gmail.com>wrote:
>>
>>> Hi,
>>>
>>> I'm trying to understand how AMQP and RabbitMQ works by building a simple
>>> chat.
>>> From reading the AMQP specs I get the impression that it's best usage is
>>> when someone publish content to an exchange
>>> and someone else bind his queue to this exchange to get updates. This
>>> model works very well for publish-subscribe
>>> and to finance systems but chat could be different. I read the xmpp
>>> gateway docs and have some questions.
>>>
>>> In a chat we want to be able to get presence from users on our
>>> friend-list, send them messages
>>> and send subscription request and messages to users not yet on our
>>> friend-list.
>>>
>>> One possibility is that each user will have an exchange and a queue with
>>> binding to his own exchange.
>>> When user1 wants to send a message to user2 he send it directly to the
>>> exchange of user2.
>>> There is a problem with presence updates. If user1 changes his presence,
>>> he'll have to sends the update
>>> to the exchange of all the users on his friend-list. With this design we
>>> move the logic to the client rather then use the AMQP features.
>>>
>>> Another option is that when a user logs in he'll create a binding to the
>>> exchanges of all the users on his friend-list.
>>> When user1 want to send a private message or a presence update to user2
>>> he'll send it to his own exchange and it'll be directed to user2. The
>>> problem with this design is that users without mutual presence subscription
>>> can't send private message to each other and can't send subscription
>>> requests.
>>>
>>> Can you please share your thoughts on the two options and maybe other
>>> design options?
>>>
>>> Thanks
>>>
>>> _______________________________________________
>>> rabbitmq-discuss mailing list
>>> rabbitmq-discuss at lists.rabbitmq.com
>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090806/cf1ae1d5/attachment.htm 

From 0x6e6562 at gmail.com  Thu Aug  6 22:00:46 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 6 Aug 2009 22:00:46 +0100
Subject: [rabbitmq-discuss] Fwd:  Queues and auto_delete
In-Reply-To: <ce2570e20908061254t603d3bfdqea9ce1f354cda22f@mail.gmail.com>
References: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>
	<269388e30908061210y123b4544y4ebd3ce55d194e50@mail.gmail.com>
	<ce2570e20908061254t603d3bfdqea9ce1f354cda22f@mail.gmail.com>
Message-ID: <269388e30908061400p4ac4bfbwb530ab9323a03297@mail.gmail.com>

---------- Forwarded message ----------
From: Garrett Smith <g at rre.tt>
Date: Thu, Aug 6, 2009 at 8:54 PM
Subject: Re: [rabbitmq-discuss] Queues and auto_delete
To: Ben Hood <0x6e6562 at gmail.com>


On Thu, Aug 6, 2009 at 2:10 PM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Garrett,
>> Also, queues where auto_delete = true seems to be deleted
>> *immediately* after the last channel is closed. IIRC, the broker
>> should wait for a period of time to allow clients to disconnect and
>> reconnect without losing messages.
>
> This is what the spec says about autodelete:
>
> "If set, the queue is deleted when all consumers have finished using
> it. Last consumer can be cancelled either explicitly or because its
> channel is closed. If there was no consumer ever on the queue, it
> won't be deleted."

This is what I'm referring to (from amqp-xml-doc0-8.pdf):

"amq_queue_02 The server SHOULD allow for a reasonable delay between
the point when it determines that a queue is not being used (or no
longer used), and the point when it deletes the queue. At the least it
must allow a client to create a queue and then create a consumer to
read from it, with a small but non? zero delay between these two
actions. The server should equally allow ? for clients that may be
disconnected prematurely, and wish to re?consume from the same queue
without losing messages. We would recommend a configurable timeout,
with a suitable default value being one minute."

I understand this is a "should", but it seems to me a useful recommendation.

If a client gets (unpredictably) disconnected (e.g. a brief network
problem), the current implementation would immediately delete the
queue, yeah?

I'm switching over from qpid (which does provide a delay before
auto-deleting) so am trying to sort through any redesigns I'll need.
Sounds like I'll want to set auto-delete to false and explicitly
handle queue deletion from the clients.



From 0x6e6562 at gmail.com  Thu Aug  6 22:07:09 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 6 Aug 2009 22:07:09 +0100
Subject: [rabbitmq-discuss] Queues and auto_delete
In-Reply-To: <ce2570e20908061254t603d3bfdqea9ce1f354cda22f@mail.gmail.com>
References: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>
	<269388e30908061210y123b4544y4ebd3ce55d194e50@mail.gmail.com>
	<ce2570e20908061254t603d3bfdqea9ce1f354cda22f@mail.gmail.com>
Message-ID: <269388e30908061407y2f12eb56j79e522cf471a5269@mail.gmail.com>

Garrett,

On Thu, Aug 6, 2009 at 8:54 PM, Garrett Smith<g at rre.tt> wrote:
> This is what I'm referring to (from amqp-xml-doc0-8.pdf):
>
> "amq_queue_02 The server SHOULD allow for a reasonable delay between
> the point when it determines that a queue is not being used (or no
> longer used), and the point when it deletes the queue. At the least it
> must allow a client to create a queue and then create a consumer to
> read from it, with a small but non? zero delay between these two
> actions. The server should equally allow ? for clients that may be
> disconnected prematurely, and wish to re?consume from the same queue
> without losing messages. We would recommend a configurable timeout,
> with a suitable default value being one minute."
>
> I understand this is a "should", but it seems to me a useful recommendation.

Yes, it does say that in 0-8 but that version of the spec was in
itself not exactly perfect, so some aspects of it should be taken with
a pinch of salt.

> If a client gets (unpredictably) disconnected (e.g. a brief network
> problem), the current implementation would immediately delete the
> queue, yeah?

As Matthias points out, it would be tricky to make this predictable.
So even though it is written into the spec, it doesn't necessarily
mean that it is a sensible thing to mandate (at least from a
cost-benefit perspective).

> I'm switching over from qpid (which does provide a delay before
> auto-deleting) so am trying to sort through any redesigns I'll need.
> Sounds like I'll want to set auto-delete to false and explicitly
> handle queue deletion from the clients.

Is there any reason why you are switching from qpid?

Ben



From g at rre.tt  Thu Aug  6 22:35:57 2009
From: g at rre.tt (Garrett Smith)
Date: Thu, 6 Aug 2009 16:35:57 -0500
Subject: [rabbitmq-discuss] Queues and auto_delete
In-Reply-To: <269388e30908061407y2f12eb56j79e522cf471a5269@mail.gmail.com>
References: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>
	<269388e30908061210y123b4544y4ebd3ce55d194e50@mail.gmail.com>
	<ce2570e20908061254t603d3bfdqea9ce1f354cda22f@mail.gmail.com>
	<269388e30908061407y2f12eb56j79e522cf471a5269@mail.gmail.com>
Message-ID: <ce2570e20908061435l2d7ae7bdua7e90930502ca9f6@mail.gmail.com>

On Thu, Aug 6, 2009 at 4:07 PM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Garrett,
> On Thu, Aug 6, 2009 at 8:54 PM, Garrett Smith<g at rre.tt> wrote:
>> I'm switching over from qpid (which does provide a delay before
>> auto-deleting) so am trying to sort through any redesigns I'll need.
>> Sounds like I'll want to set auto-delete to false and explicitly
>> handle queue deletion from the clients.
>
> Is there any reason why you are switching from qpid?

qpid is an outstanding project, well run with high quality code. I
have had nothing but positive experiences, with one significant
exception, not related to qpid itself...

qpid has quite a few external dependencies and we've had a couple of
breakages from routine upgrades. We've been able to work around them,
but rabbitmq as an OTP application sits in a well known VM and
application architecture and I expect that to offer greater stability
across upgrades.

We also may be introducing more Erlang into out environment.

Basically, consolidation and simplification of core technology.



From g at rre.tt  Thu Aug  6 22:35:57 2009
From: g at rre.tt (Garrett Smith)
Date: Thu, 6 Aug 2009 16:35:57 -0500
Subject: [rabbitmq-discuss] Queues and auto_delete
In-Reply-To: <269388e30908061407y2f12eb56j79e522cf471a5269@mail.gmail.com>
References: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>
	<269388e30908061210y123b4544y4ebd3ce55d194e50@mail.gmail.com>
	<ce2570e20908061254t603d3bfdqea9ce1f354cda22f@mail.gmail.com>
	<269388e30908061407y2f12eb56j79e522cf471a5269@mail.gmail.com>
Message-ID: <ce2570e20908061435l2d7ae7bdua7e90930502ca9f6@mail.gmail.com>

On Thu, Aug 6, 2009 at 4:07 PM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Garrett,
> On Thu, Aug 6, 2009 at 8:54 PM, Garrett Smith<g at rre.tt> wrote:
>> I'm switching over from qpid (which does provide a delay before
>> auto-deleting) so am trying to sort through any redesigns I'll need.
>> Sounds like I'll want to set auto-delete to false and explicitly
>> handle queue deletion from the clients.
>
> Is there any reason why you are switching from qpid?

qpid is an outstanding project, well run with high quality code. I
have had nothing but positive experiences, with one significant
exception, not related to qpid itself...

qpid has quite a few external dependencies and we've had a couple of
breakages from routine upgrades. We've been able to work around them,
but rabbitmq as an OTP application sits in a well known VM and
application architecture and I expect that to offer greater stability
across upgrades.

We also may be introducing more Erlang into out environment.

Basically, consolidation and simplification of core technology.



From g at rre.tt  Thu Aug  6 22:35:57 2009
From: g at rre.tt (Garrett Smith)
Date: Thu, 6 Aug 2009 16:35:57 -0500
Subject: [rabbitmq-discuss] Queues and auto_delete
In-Reply-To: <269388e30908061407y2f12eb56j79e522cf471a5269@mail.gmail.com>
References: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>
	<269388e30908061210y123b4544y4ebd3ce55d194e50@mail.gmail.com>
	<ce2570e20908061254t603d3bfdqea9ce1f354cda22f@mail.gmail.com>
	<269388e30908061407y2f12eb56j79e522cf471a5269@mail.gmail.com>
Message-ID: <ce2570e20908061435l2d7ae7bdua7e90930502ca9f6@mail.gmail.com>

On Thu, Aug 6, 2009 at 4:07 PM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Garrett,
> On Thu, Aug 6, 2009 at 8:54 PM, Garrett Smith<g at rre.tt> wrote:
>> I'm switching over from qpid (which does provide a delay before
>> auto-deleting) so am trying to sort through any redesigns I'll need.
>> Sounds like I'll want to set auto-delete to false and explicitly
>> handle queue deletion from the clients.
>
> Is there any reason why you are switching from qpid?

qpid is an outstanding project, well run with high quality code. I
have had nothing but positive experiences, with one significant
exception, not related to qpid itself...

qpid has quite a few external dependencies and we've had a couple of
breakages from routine upgrades. We've been able to work around them,
but rabbitmq as an OTP application sits in a well known VM and
application architecture and I expect that to offer greater stability
across upgrades.

We also may be introducing more Erlang into out environment.

Basically, consolidation and simplification of core technology.



From matthias at lshift.net  Thu Aug  6 22:39:58 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 06 Aug 2009 22:39:58 +0100
Subject: [rabbitmq-discuss] Queues and auto_delete
In-Reply-To: <269388e30908061407y2f12eb56j79e522cf471a5269@mail.gmail.com>
References: <ce2570e20908060906k16c17056w20df974ce133b04b@mail.gmail.com>	<269388e30908061210y123b4544y4ebd3ce55d194e50@mail.gmail.com>	<ce2570e20908061254t603d3bfdqea9ce1f354cda22f@mail.gmail.com>
	<269388e30908061407y2f12eb56j79e522cf471a5269@mail.gmail.com>
Message-ID: <4A7B4DAE.6050204@lshift.net>

Ben Hood wrote:
> Garrett,
> 
> On Thu, Aug 6, 2009 at 8:54 PM, Garrett Smith<g at rre.tt> wrote:
>> This is what I'm referring to (from amqp-xml-doc0-8.pdf):
>>
>> "amq_queue_02 The server SHOULD allow for a reasonable delay between
>> the point when it determines that a queue is not being used (or no
>> longer used), and the point when it deletes the queue. At the least it
>> must allow a client to create a queue and then create a consumer to
>> read from it, with a small but non? zero delay between these two
>> actions. The server should equally allow   for clients that may be
>> disconnected prematurely, and wish to re?consume from the same queue
>> without losing messages. We would recommend a configurable timeout,
>> with a suitable default value being one minute."
>>
>> I understand this is a "should", but it seems to me a useful recommendation.
> 
> Yes, it does say that in 0-8 but that version of the spec was in
> itself not exactly perfect, so some aspects of it should be taken with
> a pinch of salt.

Indeed. The above paragraph was dropped from the spec in 0-9, and it's 
not in 0-9-1 either.


Matthias.



From bmurphy1976 at gmail.com  Fri Aug  7 01:58:01 2009
From: bmurphy1976 at gmail.com (Bryan Murphy)
Date: Thu, 6 Aug 2009 19:58:01 -0500
Subject: [rabbitmq-discuss] Problems cloning hg repository
Message-ID: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>

Hey guys,
I'm trying to download the RabbitMQ C# driver.
  Whenever I try to clone the hg repository, I'm getting an error like
the following:

abort: premature EOF reading chunk (got 1437330 bytes, expected 4715305)

I've tried this both from my Windows machine, as well as a Linux machine up
on Amazon's EC2
cloud.  After doing some research, it looks like this is likely a
server side problem.

Is there another way I can get the C# driver source?  I believe we're
running into some sort of a race condition under heavy load and would
like to make a custom build of the driver.

Thanks,
Bryan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090806/53e0f000/attachment.htm 

From bmurphy1976 at gmail.com  Fri Aug  7 01:58:01 2009
From: bmurphy1976 at gmail.com (Bryan Murphy)
Date: Thu, 6 Aug 2009 19:58:01 -0500
Subject: [rabbitmq-discuss] Problems cloning hg repository
Message-ID: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>

Hey guys,
I'm trying to download the RabbitMQ C# driver.
  Whenever I try to clone the hg repository, I'm getting an error like
the following:

abort: premature EOF reading chunk (got 1437330 bytes, expected 4715305)

I've tried this both from my Windows machine, as well as a Linux machine up
on Amazon's EC2
cloud.  After doing some research, it looks like this is likely a
server side problem.

Is there another way I can get the C# driver source?  I believe we're
running into some sort of a race condition under heavy load and would
like to make a custom build of the driver.

Thanks,
Bryan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090806/53e0f000/attachment-0001.htm 

From bmurphy1976 at gmail.com  Fri Aug  7 01:58:01 2009
From: bmurphy1976 at gmail.com (Bryan Murphy)
Date: Thu, 6 Aug 2009 19:58:01 -0500
Subject: [rabbitmq-discuss] Problems cloning hg repository
Message-ID: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>

Hey guys,
I'm trying to download the RabbitMQ C# driver.
  Whenever I try to clone the hg repository, I'm getting an error like
the following:

abort: premature EOF reading chunk (got 1437330 bytes, expected 4715305)

I've tried this both from my Windows machine, as well as a Linux machine up
on Amazon's EC2
cloud.  After doing some research, it looks like this is likely a
server side problem.

Is there another way I can get the C# driver source?  I believe we're
running into some sort of a race condition under heavy load and would
like to make a custom build of the driver.

Thanks,
Bryan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090806/53e0f000/attachment-0002.htm 

From pekenney at gmail.com  Fri Aug  7 02:27:44 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Thu, 6 Aug 2009 18:27:44 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
	<4A798799.6060409@lshift.net>
	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>
	<4A798D03.4020801@imatix.com>
	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>
	<4A79C398.8060101@lshift.net>
	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
	<4A7A3276.9030002@lshift.net>
	<3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>
Message-ID: <3a5f03340908061827v7978367el2d5950085a259af@mail.gmail.com>

still no joy...

re:
On Wed, Aug 5, 2009 at 7:51 PM, Patrick Kenney <pekenney at gmail.com> wrote:

> the trace I have attached previously and again here is the output of the
> following configured 4 trace listeners...
>       System.Net
>       System.Net.Sockets
>       System.Net.Cache
>       System.Net.HttpListener
>
> The applicable configuration of which is depicted in the attached
> tracelistenerconfig.txt file
>
> the listener trace is showing the software aborted messages, that occur
> concurrently with the message too long errors...
>
> It appears the real error is occurring in the RabbitMq Client dll...
>
> The error I am able to capture in debug mode from the rabbitmq client dll
> is...
> The AMQP operation was interrupted: AMQP close-reason, initiated by
> Library, code=311, text="The body of a message (18446744073709551565 bytes)
> was too long.", classId=0, methodId=0,
> cause=RabbitMQ.Client.Impl.BodyTooLongException: The body of a message
> (18446744073709551565 bytes) was too long.
>    at RabbitMQ.Client.Impl.ContentHeaderBase.ReadFrom(Int32 channelNumber,
> NetworkBinaryReader reader) in
> G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\ContentHeaderBase.cs:line
> 23
>    at RabbitMQ.Client.Impl.CommandAssembler.HandleFrame(Frame f) in
> G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\CommandAssembler.cs:line
> 53
>    at RabbitMQ.Client.Impl.Session.HandleFrame(Frame frame) in
> G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\Session.cs:line
> 16
>    at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in
> G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line
> 434
>    at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in
> G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line
> 388
>
> since the rabbitmq client dll is not returning the error the only thing I
> am getting from my test consumer code previously posted is...
>
> btnSubscribe_Click Error: Cannot access a disposed object.
> Object name: 'System.Net.Sockets.NetworkStream'.
>
> Which obviously comes much after the message too long error...
>
> the message is "test message"
>
> re:
>
> On Wed, Aug 5, 2009 at 6:31 PM, Tony Garnock-Jones <tonyg at lshift.net>wrote:
>
>> Patrick Kenney wrote:
>>
>>> fyi...the file does contain a failing situation...do a search of the log
>>> text for "abort"
>>>
>>
>> Yes, but it doesn't have any instances of the "The body of a message
>> (18446744073709551575 bytes) was too long" error that we've been chasing. Do
>> you have, or can you generate, any traces containing that particular
>> problem?
>>
>> Regards,
>>  Tony
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090806/a9b7b4d3/attachment.htm 

From darien at kindlund.com  Fri Aug  7 04:12:49 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Thu, 6 Aug 2009 23:12:49 -0400
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for durable
	messages/queues/exchanges?
Message-ID: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com>

So after running RabbitMQ v1.6.0 for awhile, I've encountered a
strange crash, where the server unexpectedly dies with no crash report
or any applicable log information written to disk.  I'm trying to see
if I can replicate the issue, but in the meantime, when I recover the
server, it dutifully recovers all my messages, queues, exchanges, and
bindings (great!).  However, once the server recovers, all the durable
messages in the queues (from rabbitmqctl) are still marked as
*messages_unacknowledged" -- not "messages_ready"... To my knowledge,
this means: "RabbitMQ thinks there is already an AMQP channel and
connection open which already has these messages -- and is simply
waiting for an ACK back from this AMQP consumer."  ... The problem is:
when RabbitMQ recovers, all AMQP channels/connections are terminated,
so this assumption is clearly wrong (in this scenario).

I'm wondering if the "persister recovery" was designed so that when
RabbitMQ attempts to re-start up and sees that there was a crash -- if
it has built-in logic to essentially "reset" all durable messages in
the queues back to a "ready" state -- so that a new AMQP consumer can
process them.

So, my questions are:

1) Does such "persister recovery" logic exist? Or not?
2) Is there any recommended _manual_ way (via the erl shell?) to
perform this "reset"? ... or do I simply have to obliterate my
persister log and regenerate all my queues, exchanges, and bindings?

Regards,
-- Darien



From matthias at lshift.net  Fri Aug  7 04:33:43 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 04:33:43 +0100
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for
	durable	messages/queues/exchanges?
In-Reply-To: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com>
References: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com>
Message-ID: <4A7BA097.3050002@lshift.net>

Darien,

Darien Kindlund wrote:
> So after running RabbitMQ v1.6.0 for awhile, I've encountered a
> strange crash, where the server unexpectedly dies with no crash report
> or any applicable log information written to disk.  I'm trying to see
> if I can replicate the issue, but in the meantime, when I recover the
> server, it dutifully recovers all my messages, queues, exchanges, and
> bindings (great!).  However, once the server recovers, all the durable
> messages in the queues (from rabbitmqctl) are still marked as
> *messages_unacknowledged" -- not "messages_ready"... To my knowledge,
> this means: "RabbitMQ thinks there is already an AMQP channel and
> connection open which already has these messages -- and is simply
> waiting for an ACK back from this AMQP consumer."  ... The problem is:
> when RabbitMQ recovers, all AMQP channels/connections are terminated,
> so this assumption is clearly wrong (in this scenario).

On recovery the persister requeues recovered messages. They should all 
be counted as 'ready' unless they are sent to a consumer, in which case 
they will show up as 'unacknowledged'.

So what you are seeing is rather strange. Are you sure there aren't any 
connected consumers?

Also, are you running rabbit as a single node, or in a cluster?


Regards,

Matthias.



From darien at kindlund.com  Fri Aug  7 06:39:38 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Fri, 7 Aug 2009 01:39:38 -0400
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for durable
	messages/queues/exchanges?
In-Reply-To: <4A7BA097.3050002@lshift.net>
References: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com> 
	<4A7BA097.3050002@lshift.net>
Message-ID: <50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>

>> So after running RabbitMQ v1.6.0 for awhile, I've encountered a
>> strange crash, where the server unexpectedly dies with no crash report
>> or any applicable log information written to disk. ?I'm trying to see
>> if I can replicate the issue, but in the meantime, when I recover the
>> server, it dutifully recovers all my messages, queues, exchanges, and
>> bindings (great!). ?However, once the server recovers, all the durable
>> messages in the queues (from rabbitmqctl) are still marked as
>> *messages_unacknowledged" -- not "messages_ready"... To my knowledge,
>> this means: "RabbitMQ thinks there is already an AMQP channel and
>> connection open which already has these messages -- and is simply
>> waiting for an ACK back from this AMQP consumer." ?... The problem is:
>> when RabbitMQ recovers, all AMQP channels/connections are terminated,
>> so this assumption is clearly wrong (in this scenario).
>
> On recovery the persister requeues recovered messages. They should all be
> counted as 'ready' unless they are sent to a consumer, in which case they
> will show up as 'unacknowledged'.

Okay, your wording is a little vague, so I want to be crystal clear.
Assume we have a single RabbitMQ server, with 3 consumers, where all 3
are consuming messages off the same durable queue (with durable
messages).  When all 3 start processing their respective messages,
RabbitMQ marks all 3 durable messages as 'unacknowledged'.  Then,
let's assume RabbitMQ crashes (for some reason or another).  *STICKING
POINT: Upon crash, all 3 consumers channels and connections have
terminated -- I assume there's no way for any of the consumers to
"reuse" their existing channels/connections because RabbitMQ server
died.*

Therefore, when a sysadmin restarts RabbitMQ and the persister is
recovered, will all 3 messages be marked 'ready' ?  Or will all 3 be
marked 'unacknowledged' ?   Sorry to be pedantic, but your original
reply was slightly unclear about this.

> So what you are seeing is rather strange. Are you sure there aren't any
> connected consumers?

I'm sure there are no connected consumers -- although I assume that
when RabbitMQ crashes, all consumer channels/connections are
terminated as well.  For good measure, I also had to terminate and
restart epmd... otherwise, RabbitMQ would not start up properly via
'/etc/init.d/rabbitmq start'.  FYI, this is on a stock Ubuntu
distribution.

> Also, are you running rabbit as a single node, or in a cluster?

I'm running RabbitMQ as a single node.

To test to see if these 'unacknowledged' messages could somehow get
reset, I have:
1) shutdown all consumer connections
2) started up a single consumer.  Upon doing so, the consumer is NOT
able to fetch any of the un-ack'd messages -- although any new
messages do properly get delivered to the consumer
3) shutdown the single consumer
4) verified the un-ack'd messages still exist
5) started up a single consumer... same behavior as #2

As an interesting side case, is there any way to manually reset
un-ack'd messages back into the ready state while RabbitMQ is running
(and consumers/producers are active?).  I'm trying to avoid having to
shutdown the RabbitMQ server and obliterate the nmesia persister log
in order to clear out these messages.  (destroying and re-creating the
queues isn't ideal either, since I have active consumers processing
newer messages using these same queues).

-- Darien



From matthias at lshift.net  Fri Aug  7 11:05:12 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 11:05:12 +0100
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for durable
 messages/queues/exchanges?
In-Reply-To: <50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>
References: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com>
	<4A7BA097.3050002@lshift.net>
	<50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>
Message-ID: <4A7BFC58.9050304@lshift.net>

Darien,

Darien Kindlund wrote:
> Okay, your wording is a little vague, so I want to be crystal clear.
> Assume we have a single RabbitMQ server, with 3 consumers, where all 3
> are consuming messages off the same durable queue (with durable
> messages).

(minor quibble on terminology) resources can be made *durable*, messages 
can be made *persistent*.

> When all 3 start processing their respective messages RabbitMQ marks
> all 3 durable messages as 'unacknowledged'.  Then, let's assume
> RabbitMQ crashes (for some reason or another).  *STICKING POINT: Upon
> crash, all 3 consumers channels and connections have terminated -- I
> assume there's no way for any of the consumers to "reuse" their
> existing channels/connections because RabbitMQ server died.*

Correct.

> Therefore, when a sysadmin restarts RabbitMQ and the persister is
> recovered, will all 3 messages be marked 'ready' ?  Or will all 3 be
> marked 'unacknowledged' ?   Sorry to be pedantic, but your original
> reply was slightly unclear about this.

They will be marked as ready, unless some consumers have managed to 
connect again already and the messages have been sent out to them, in 
which case they are counted as 'unacknowledged'.

>> So what you are seeing is rather strange. Are you sure there aren't any
>> connected consumers?
> 
> I'm sure there are no connected consumers -- although I assume that
> when RabbitMQ crashes, all consumer channels/connections are
> terminated as well.  For good measure, I also had to terminate and
> restart epmd... otherwise, RabbitMQ would not start up properly via
> '/etc/init.d/rabbitmq start'.  FYI, this is on a stock Ubuntu
> distribution.

Your consumers aren't by any chance containing some reconnecting logic 
that tries to connect to the server again whenever a connection has been 
dropped? I seem to recall reports that, for example, the ruby client 
does something like that. Please check the server log to be sure - it 
contains a record of all connects/disconnects.

> As an interesting side case, is there any way to manually reset
> un-ack'd messages back into the ready state while RabbitMQ is running
> (and consumers/producers are active?).

Once the server has delivered a message to a consumer, it will only 
become available again to other consumers when then recipients 
channel/connection is closed.

> I'm trying to avoid having to shutdown the RabbitMQ server and
> obliterate the nmesia persister log in order to clear out these
> messages.

That would remove all messages completely, rather than just making the 
unacknowledged messages available to other consumers again. If the 
former is really what you want then the 'queue.purge' command is your 
friend.


Regards,

Matthias.



From matthias at lshift.net  Fri Aug  7 11:05:12 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 11:05:12 +0100
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for durable
 messages/queues/exchanges?
In-Reply-To: <50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>
References: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com>
	<4A7BA097.3050002@lshift.net>
	<50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>
Message-ID: <4A7BFC58.9050304@lshift.net>

Darien,

Darien Kindlund wrote:
> Okay, your wording is a little vague, so I want to be crystal clear.
> Assume we have a single RabbitMQ server, with 3 consumers, where all 3
> are consuming messages off the same durable queue (with durable
> messages).

(minor quibble on terminology) resources can be made *durable*, messages 
can be made *persistent*.

> When all 3 start processing their respective messages RabbitMQ marks
> all 3 durable messages as 'unacknowledged'.  Then, let's assume
> RabbitMQ crashes (for some reason or another).  *STICKING POINT: Upon
> crash, all 3 consumers channels and connections have terminated -- I
> assume there's no way for any of the consumers to "reuse" their
> existing channels/connections because RabbitMQ server died.*

Correct.

> Therefore, when a sysadmin restarts RabbitMQ and the persister is
> recovered, will all 3 messages be marked 'ready' ?  Or will all 3 be
> marked 'unacknowledged' ?   Sorry to be pedantic, but your original
> reply was slightly unclear about this.

They will be marked as ready, unless some consumers have managed to 
connect again already and the messages have been sent out to them, in 
which case they are counted as 'unacknowledged'.

>> So what you are seeing is rather strange. Are you sure there aren't any
>> connected consumers?
> 
> I'm sure there are no connected consumers -- although I assume that
> when RabbitMQ crashes, all consumer channels/connections are
> terminated as well.  For good measure, I also had to terminate and
> restart epmd... otherwise, RabbitMQ would not start up properly via
> '/etc/init.d/rabbitmq start'.  FYI, this is on a stock Ubuntu
> distribution.

Your consumers aren't by any chance containing some reconnecting logic 
that tries to connect to the server again whenever a connection has been 
dropped? I seem to recall reports that, for example, the ruby client 
does something like that. Please check the server log to be sure - it 
contains a record of all connects/disconnects.

> As an interesting side case, is there any way to manually reset
> un-ack'd messages back into the ready state while RabbitMQ is running
> (and consumers/producers are active?).

Once the server has delivered a message to a consumer, it will only 
become available again to other consumers when then recipients 
channel/connection is closed.

> I'm trying to avoid having to shutdown the RabbitMQ server and
> obliterate the nmesia persister log in order to clear out these
> messages.

That would remove all messages completely, rather than just making the 
unacknowledged messages available to other consumers again. If the 
former is really what you want then the 'queue.purge' command is your 
friend.


Regards,

Matthias.



From matthias at lshift.net  Fri Aug  7 11:05:12 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 11:05:12 +0100
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for durable
 messages/queues/exchanges?
In-Reply-To: <50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>
References: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com>
	<4A7BA097.3050002@lshift.net>
	<50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>
Message-ID: <4A7BFC58.9050304@lshift.net>

Darien,

Darien Kindlund wrote:
> Okay, your wording is a little vague, so I want to be crystal clear.
> Assume we have a single RabbitMQ server, with 3 consumers, where all 3
> are consuming messages off the same durable queue (with durable
> messages).

(minor quibble on terminology) resources can be made *durable*, messages 
can be made *persistent*.

> When all 3 start processing their respective messages RabbitMQ marks
> all 3 durable messages as 'unacknowledged'.  Then, let's assume
> RabbitMQ crashes (for some reason or another).  *STICKING POINT: Upon
> crash, all 3 consumers channels and connections have terminated -- I
> assume there's no way for any of the consumers to "reuse" their
> existing channels/connections because RabbitMQ server died.*

Correct.

> Therefore, when a sysadmin restarts RabbitMQ and the persister is
> recovered, will all 3 messages be marked 'ready' ?  Or will all 3 be
> marked 'unacknowledged' ?   Sorry to be pedantic, but your original
> reply was slightly unclear about this.

They will be marked as ready, unless some consumers have managed to 
connect again already and the messages have been sent out to them, in 
which case they are counted as 'unacknowledged'.

>> So what you are seeing is rather strange. Are you sure there aren't any
>> connected consumers?
> 
> I'm sure there are no connected consumers -- although I assume that
> when RabbitMQ crashes, all consumer channels/connections are
> terminated as well.  For good measure, I also had to terminate and
> restart epmd... otherwise, RabbitMQ would not start up properly via
> '/etc/init.d/rabbitmq start'.  FYI, this is on a stock Ubuntu
> distribution.

Your consumers aren't by any chance containing some reconnecting logic 
that tries to connect to the server again whenever a connection has been 
dropped? I seem to recall reports that, for example, the ruby client 
does something like that. Please check the server log to be sure - it 
contains a record of all connects/disconnects.

> As an interesting side case, is there any way to manually reset
> un-ack'd messages back into the ready state while RabbitMQ is running
> (and consumers/producers are active?).

Once the server has delivered a message to a consumer, it will only 
become available again to other consumers when then recipients 
channel/connection is closed.

> I'm trying to avoid having to shutdown the RabbitMQ server and
> obliterate the nmesia persister log in order to clear out these
> messages.

That would remove all messages completely, rather than just making the 
unacknowledged messages available to other consumers again. If the 
former is really what you want then the 'queue.purge' command is your 
friend.


Regards,

Matthias.



From matthias at lshift.net  Fri Aug  7 11:05:12 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 11:05:12 +0100
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for durable
 messages/queues/exchanges?
In-Reply-To: <50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>
References: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com>
	<4A7BA097.3050002@lshift.net>
	<50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>
Message-ID: <4A7BFC58.9050304@lshift.net>

Darien,

Darien Kindlund wrote:
> Okay, your wording is a little vague, so I want to be crystal clear.
> Assume we have a single RabbitMQ server, with 3 consumers, where all 3
> are consuming messages off the same durable queue (with durable
> messages).

(minor quibble on terminology) resources can be made *durable*, messages 
can be made *persistent*.

> When all 3 start processing their respective messages RabbitMQ marks
> all 3 durable messages as 'unacknowledged'.  Then, let's assume
> RabbitMQ crashes (for some reason or another).  *STICKING POINT: Upon
> crash, all 3 consumers channels and connections have terminated -- I
> assume there's no way for any of the consumers to "reuse" their
> existing channels/connections because RabbitMQ server died.*

Correct.

> Therefore, when a sysadmin restarts RabbitMQ and the persister is
> recovered, will all 3 messages be marked 'ready' ?  Or will all 3 be
> marked 'unacknowledged' ?   Sorry to be pedantic, but your original
> reply was slightly unclear about this.

They will be marked as ready, unless some consumers have managed to 
connect again already and the messages have been sent out to them, in 
which case they are counted as 'unacknowledged'.

>> So what you are seeing is rather strange. Are you sure there aren't any
>> connected consumers?
> 
> I'm sure there are no connected consumers -- although I assume that
> when RabbitMQ crashes, all consumer channels/connections are
> terminated as well.  For good measure, I also had to terminate and
> restart epmd... otherwise, RabbitMQ would not start up properly via
> '/etc/init.d/rabbitmq start'.  FYI, this is on a stock Ubuntu
> distribution.

Your consumers aren't by any chance containing some reconnecting logic 
that tries to connect to the server again whenever a connection has been 
dropped? I seem to recall reports that, for example, the ruby client 
does something like that. Please check the server log to be sure - it 
contains a record of all connects/disconnects.

> As an interesting side case, is there any way to manually reset
> un-ack'd messages back into the ready state while RabbitMQ is running
> (and consumers/producers are active?).

Once the server has delivered a message to a consumer, it will only 
become available again to other consumers when then recipients 
channel/connection is closed.

> I'm trying to avoid having to shutdown the RabbitMQ server and
> obliterate the nmesia persister log in order to clear out these
> messages.

That would remove all messages completely, rather than just making the 
unacknowledged messages available to other consumers again. If the 
former is really what you want then the 'queue.purge' command is your 
friend.


Regards,

Matthias.



From 0x6e6562 at gmail.com  Fri Aug  7 11:14:39 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Fri, 7 Aug 2009 11:14:39 +0100
Subject: [rabbitmq-discuss] Problems cloning hg repository
In-Reply-To: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>
References: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>
Message-ID: <269388e30908070314s192cc02bn16f1421bef703872@mail.gmail.com>

Brian,

On Fri, Aug 7, 2009 at 1:58 AM, Bryan Murphy<bmurphy1976 at gmail.com> wrote:
> Hey guys,
> I'm trying to download the RabbitMQ C# driver.
> ??Whenever?I?try?to?clone?the?hg?repository,?I'm?getting?an?error?like?the?following:
> abort: premature EOF reading chunk (got 1437330 bytes, expected 4715305)
> I've tried this both from my Windows machine, as well as a Linux machine up
> on Amazon's EC2
> cloud.??After?doing?some?research,?it?looks?like?this?is?likely?a?server?side?problem.

Is?there?another?way?I?can?get?the?C#?driver?source???I?believe?we're
running?into?some?sort?of?a?race?condition?under?heavy?load?and?would
like?to?make?a?custom?build?of?the?driver.

You can use the hgweb interface to get a zip file of the latest source.

When doing so, make sure that you use something from the default
branch, e.g. http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/5d07ce8ecbc9.zip
, otherwise you will just get some random junk.

Ben



From matthias at lshift.net  Fri Aug  7 11:26:27 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 11:26:27 +0100
Subject: [rabbitmq-discuss] Problems cloning hg repository
In-Reply-To: <269388e30908070314s192cc02bn16f1421bef703872@mail.gmail.com>
References: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>
	<269388e30908070314s192cc02bn16f1421bef703872@mail.gmail.com>
Message-ID: <4A7C0153.8090709@lshift.net>

Bryan,

Ben Hood wrote:
> On Fri, Aug 7, 2009 at 1:58 AM, Bryan Murphy<bmurphy1976 at gmail.com> wrote:
>> Hey guys,
>> I'm trying to download the RabbitMQ C# driver.
>>   Whenever I try to clone the hg repository, I'm getting an error like the following:
>> abort: premature EOF reading chunk (got 1437330 bytes, expected 4715305)

What version of hg are you running at your end?

> You can use the hgweb interface to get a zip file of the latest source.
> 
> When doing so, make sure that you use something from the default
> branch, e.g. http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/5d07ce8ecbc9.zip
> , otherwise you will just get some random junk.

Or, better still, 
http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/default.zip


Matthias.



From alexis.richardson at gmail.com  Fri Aug  7 11:31:05 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Fri, 7 Aug 2009 11:31:05 +0100
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <29598b610908061357i20851d1avc1c8f868f62f0266@mail.gmail.com>
References: <b0200d7f0908060732i1e9ac3efg9ef4a83ed68e76f@mail.gmail.com>
	<29598b610908061252o1f50fbd2j3603357386bbb3b@mail.gmail.com>
	<b0200d7f0908061342s13892628w29e8895e803aa119@mail.gmail.com>
	<29598b610908061357i20851d1avc1c8f868f62f0266@mail.gmail.com>
Message-ID: <167204d20908070331haf0ad2el61cd2b607645c8de@mail.gmail.com>

Ben, Paul,

That's right, the spec does not specify this.  However presence turns
out to be very useful for all sorts of lifecycle management, so it's a
natural thing to look at in an implementation.

alexis



On Thu, Aug 6, 2009 at 9:57 PM, Paul Jones<pauljones23 at gmail.com> wrote:
> Hi Ben,
>
> It'll be a custom RabbitMQ module - as far as I've seen, the spec doesn't
> specify anything like this (though I could be completely wrong on that).
>
> Paul.
>
> On Thu, Aug 6, 2009 at 9:42 PM, Ben Browitt <ben.browitt at gmail.com> wrote:
>>
>> Paul,
>>
>> That is interesting for two reasons. First because I might actually
>> understand a bit of AMQP and second
>> because you are addressing this issue.
>>
>> Will it be part of the AMQP spec or a custom RabbitMQ module?
>> Maybe I can hack something until you'll release this functionality.
>>
>> And yes, I'll be interested to know when it is available for early
>> testing.
>>
>> Thanks,
>> Ben
>>
>> On Thu, Aug 6, 2009 at 10:52 PM, Paul Jones <pauljones23 at gmail.com> wrote:
>>>
>>> Hi Ben,
>>>
>>> The model does certainly work best in situations where consumers and
>>> producers have little need to know of each other.
>>>
>>> We are, however, currently experimenting with some presence
>>> functionality. This was originally prototyped quite a while ago, and it is
>>> currently being reworked to be remove a number of issues that previously
>>> prevented it being made mainstream. This functionality creates an exchange
>>> that will receive information about when queues, exchanges and bindings are
>>> created and deleted - this may help in your case by letting you see when a
>>> user subscribes or unsubscribes from another user's exchange.
>>>
>>> It is still under fairly heavy development at the moment, but I can let
>>> you know when it reaches a state where it might be useful to look at.
>>>
>>> Paul.
>>>
>>> On Thu, Aug 6, 2009 at 3:32 PM, Ben Browitt <ben.browitt at gmail.com>
>>> wrote:
>>>>
>>>> Hi,
>>>>
>>>> I'm trying to understand how AMQP and RabbitMQ works by building a
>>>> simple chat.
>>>> From reading the AMQP specs I get the impression that it's best usage is
>>>> when someone publish content to an exchange
>>>> and someone else bind his queue to this exchange to get updates. This
>>>> model works very well for publish-subscribe
>>>> and to finance systems but chat could be different. I read the xmpp
>>>> gateway docs and have some questions.
>>>>
>>>> In a chat we want to be able to get presence from users on our
>>>> friend-list, send them messages
>>>> and send subscription request and messages to users not yet on our
>>>> friend-list.
>>>>
>>>> One possibility is that each user will have an exchange and a queue with
>>>> binding to his own exchange.
>>>> When user1 wants to send a message to user2 he send it directly to the
>>>> exchange of user2.
>>>> There is a problem with presence updates. If user1 changes his presence,
>>>> he'll have to?sends the update
>>>> to the exchange of all the users?on his friend-list. With this design we
>>>> move the logic to the client rather then use the AMQP features.
>>>>
>>>> Another option is that when a user logs in he'll create a binding to the
>>>> exchanges of all the users on his friend-list.
>>>> When user1 want to send a private message or a presence update to user2
>>>> he'll send it to his own exchange and it'll be directed to user2. The
>>>> problem with this design is that users without mutual presence subscription
>>>> can't send private message to each other and can't send subscription
>>>> requests.
>>>>
>>>> Can you please share your thoughts on the two options and maybe other
>>>> design options?
>>>>
>>>> Thanks
>>>> _______________________________________________
>>>> rabbitmq-discuss mailing list
>>>> rabbitmq-discuss at lists.rabbitmq.com
>>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>>
>>>
>>
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From alexis.richardson at gmail.com  Fri Aug  7 11:52:41 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Fri, 7 Aug 2009 11:52:41 +0100
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <b0200d7f0908060732i1e9ac3efg9ef4a83ed68e76f@mail.gmail.com>
References: <b0200d7f0908060732i1e9ac3efg9ef4a83ed68e76f@mail.gmail.com>
Message-ID: <167204d20908070352g43e8e2efv732f664bdd398bb0@mail.gmail.com>

Ben,

Further to your email exchanges with Paul...

On Thu, Aug 6, 2009 at 3:32 PM, Ben Browitt<ben.browitt at gmail.com> wrote:
> Hi,
>
> I'm trying to understand how AMQP and RabbitMQ works by building a simple
> chat.

Cool :-)


> From reading the AMQP specs I get the impression that it's best usage is
> when someone publish content to an exchange
> and someone else bind his queue to this exchange to get updates. This model
> works very well for publish-subscribe
> and to finance systems but chat could be different.

I think chat is a very natural application of AMQP.  The benefit of
using XMPP would be to integrate with existing chat infra in a
standard way, but that does not prevent you from using an AMQP based
implementation underneath.

Do you want to do MUC or IM?

In fact, you can use a single approach to both.

One approach is to have one queue per consumer 'chat window' and one
exchange per 'chat room'.  The queue is bound to the exchange when the
user is in the chatroom.  Then, IM is a special case of MUC - it is a
chatroom with two participants.

Another approach would be to have one queue per consumer, and have
that queue bound to the exchange(s) N times, where N is the number of
chatrooms (or IMs) which the consumer is currently in.  In this
approach, you will need to identify which message came from which
room, before you show the messages to the user.  That's easy but it's
extra work and data to carry around.

Let me know if you want more detail on either of the above, eg which
exchange type to use.


> I read the xmpp gateway
> docs and have some questions.
>
> In a chat we want to be able to get presence from users on our friend-list,
> send them messages
> and send subscription request and messages to users not yet on our
> friend-list.

Do you only want to enable chat when both users are online and have a
'friend' relationship?


> One possibility is that each user will have an exchange and a queue with
> binding to his own exchange.
> When user1 wants to send a message to user2 he send it directly to the
> exchange of user2.
> There is a problem with presence updates. If user1 changes his presence,
> he'll have to?sends the update
> to the exchange of all the users?on his friend-list. With this design we
> move the logic to the client rather then use the AMQP features.

One approach to presence is to broadcast changes using the pubsub
system.  Changes could include:

* User goes online / offline
* User changes their 'status message'



> Another option is that when a user logs in he'll create a binding to the
> exchanges of all the users on his friend-list.

You can do this but it creates quite a lot of churn on the exchange
layer.  Paul's suggestion is one way to prevent that.  Another is to
use exchange-exchange bindings, which we are also looking at.


> When user1 want to send a private message or a presence update to user2
> he'll send it to his own exchange and it'll be directed to user2. The
> problem with this design is that users without mutual presence subscription
> can't send private message to each other and can't send subscription
> requests.

You can decouple presence, which is about status updates, from
friendship.  If you like, you could have a set up where one user can
DM another, provided they are mutual friends, regardless of who is
online.  Do you want that?

Subscription requests could also be implemented using a queue - one
per user.  Whenever a new user wishes to request mutual friendship
with user A, then user A could be notified of this via a queue.




> Can you please share your thoughts on the two options and maybe other design
> options?

I've tried to shed some light on some of the issues above.  Feel free
to elaborate on your needs and ask more questions.

alexis





> Thanks
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From waltenhares at yahoo.com.br  Fri Aug  7 12:33:26 2009
From: waltenhares at yahoo.com.br (Waltenhares Vilela)
Date: Fri, 7 Aug 2009 04:33:26 -0700 (PDT)
Subject: [rabbitmq-discuss] Res:  Problems cloning hg repository
In-Reply-To: <4A7C0153.8090709@lshift.net>
References: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>
	<269388e30908070314s192cc02bn16f1421bef703872@mail.gmail.com>
	<4A7C0153.8090709@lshift.net>
Message-ID: <294622.58545.qm@web38801.mail.mud.yahoo.com>

Since
yesterday I am trying to clone the Mercurial repositories for
dotnet-client and it is not working. It always stops at: adding file
changes (see log below). So I had tried to download a snapshot
(default.zip) and the site stop feeding wget randomly and I got a
useless zipfile. The http download did not work with any browser too.

wvilela at wvilela-desktop:~/Projects/RabbitMQ$ 
hg clone http://hg.rabbitmq.com/rabbitmq-dotnet-client/
destination directory: rabbitmq-dotnet-client
requesting all changes
adding changesets
adding manifests
adding file changes
transaction abort!
rollback completed
abort: premature EOF reading chunk (got 95103 bytes, expected 494761)

 Thanks,

Waltenhares




________________________________
De: Matthias Radestock <matthias at lshift.net>
Para: Bryan Murphy <bmurphy1976 at gmail.com>
Cc: rabbitmq-discuss at lists.rabbitmq.com
Enviadas: Sexta-feira, 7 de Agosto de 2009 7:26:27
Assunto: Re: [rabbitmq-discuss] Problems cloning hg repository

Bryan,

Ben Hood wrote:
> On Fri, Aug 7, 2009 at 1:58 AM, Bryan Murphy<bmurphy1976 at gmail.com> wrote:
>> Hey guys,
>> I'm trying to download the RabbitMQ C# driver.
>>   Whenever I try to clone the hg repository, I'm getting an error like the following:
>> abort: premature EOF reading chunk (got 1437330 bytes, expected 4715305)

What version of hg are you running at your end?

> You can use the hgweb interface to get a zip file of the latest source.
> 
> When doing so, make sure that you use something from the default
> branch, e.g. http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/5d07ce8ecbc9.zip
> , otherwise you will just get some random junk.

Or, better still, 
http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/default.zip


Matthias.

_______________________________________________
rabbitmq-discuss mailing list
rabbitmq-discuss at lists.rabbitmq.com
http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss



      ____________________________________________________________________________________
Veja quais s?o os assuntos do momento no Yahoo! +Buscados
http://br.maisbuscados.yahoo.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090807/73062559/attachment.htm 

From darien at kindlund.com  Fri Aug  7 16:04:11 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Fri, 7 Aug 2009 11:04:11 -0400
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for durable
	messages/queues/exchanges?
In-Reply-To: <4A7BFC58.9050304@lshift.net>
References: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com> 
	<4A7BA097.3050002@lshift.net>
	<50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com> 
	<4A7BFC58.9050304@lshift.net>
Message-ID: <50c8ffe90908070804r2d3c6d07i2b5f8cf90d5f8cb1@mail.gmail.com>

> Your consumers aren't by any chance containing some reconnecting logic that
> tries to connect to the server again whenever a connection has been dropped?
> I seem to recall reports that, for example, the ruby client does something
> like that. Please check the server log to be sure - it contains a record of
> all connects/disconnects.

Understood.  Yes, I've checked and there were no
connection/re-connection attempts, when I had witnessed the the
persistent messages in the durable queue were still marked as
un-ack'd.

> Once the server has delivered a message to a consumer, it will only become
> available again to other consumers when then recipients channel/connection
> is closed.

Okay.

>> I'm trying to avoid having to shutdown the RabbitMQ server and
>> obliterate the nmesia persister log in order to clear out these
>> messages.
>
> That would remove all messages completely, rather than just making the
> unacknowledged messages available to other consumers again. If the former is
> really what you want then the 'queue.purge' command is your friend.

Okay, so 'queue.purge' will flush all 'ready' and 'un-ack'd' messages
from a particular queue -- or just un-ack'd messages?  Is there a
command in the AMQP spec that will instruct RabbitMQ to re-mark all
un-ack'd messages as ready?  If no such command exists, I'm thinking
it would be useful to include such a command in future versions of the
spec, so that people could develop 'message recovery logic', when
dealing with buggy consumers that are connected but are not actually
properly processing the messages.  I'm guessing your reply would be to
simply forcefully terminate the buggy consumers manually (i'm assuming
there's an AMQP spec command to do this), which would cause RabbitMQ
to re-mark those un-ack'd messages as 'ready'.  However, providing an
explicit command may be helpful for debugging purposes, as I've seemed
to encounter a bug where RabbitMQ didn't perform the re-mark operation
as expected.

If I run into this issue in the future, would it help if I could
provide you a copy of the mnesia directory once RabbitMQ has
unexpectedly crashed?

Thanks again,
-- Darien



From darien at kindlund.com  Fri Aug  7 16:13:44 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Fri, 7 Aug 2009 11:13:44 -0400
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for durable
	messages/queues/exchanges?
In-Reply-To: <50c8ffe90908070804r2d3c6d07i2b5f8cf90d5f8cb1@mail.gmail.com>
References: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com> 
	<4A7BA097.3050002@lshift.net>
	<50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com> 
	<4A7BFC58.9050304@lshift.net>
	<50c8ffe90908070804r2d3c6d07i2b5f8cf90d5f8cb1@mail.gmail.com>
Message-ID: <50c8ffe90908070813m51c96466r99d9c322082c1773@mail.gmail.com>

>> That would remove all messages completely, rather than just making the
>> unacknowledged messages available to other consumers again. If the former is
>> really what you want then the 'queue.purge' command is your friend.

Well, this is interesting... the queue.purge command isn't working.
There are still un-ack'd messages in the queue. Is it possible that
the mnesia data didn't get recovered properly?

-- Darien



From bmurphy1976 at gmail.com  Fri Aug  7 16:31:57 2009
From: bmurphy1976 at gmail.com (Bryan Murphy)
Date: Fri, 7 Aug 2009 10:31:57 -0500
Subject: [rabbitmq-discuss] Problems cloning hg repository
In-Reply-To: <4A7C0153.8090709@lshift.net>
References: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>
	<269388e30908070314s192cc02bn16f1421bef703872@mail.gmail.com>
	<4A7C0153.8090709@lshift.net>
Message-ID: <7fd310d10908070831x662cec9r3ca0eee19c0bacaf@mail.gmail.com>

On Fri, Aug 7, 2009 at 5:26 AM, Matthias Radestock <matthias at lshift.net>wrote:

> What version of hg are you running at your end?


On Linux, v1.0.1
On Windows, v1.3.1

 You can use the hgweb interface to get a zip file of the latest source.
>>
>> When doing so, make sure that you use something from the default
>> branch, e.g.
>> http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/5d07ce8ecbc9.zip
>> , otherwise you will just get some random junk.
>>
>
> Or, better still,
> http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/default.zip
>
>
> Matthias.
>

Thanks.  At least I'll be able to debug this now. :)

Bryan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090807/cdff7cf9/attachment.htm 

From michael.greene at gmail.com  Fri Aug  7 16:44:32 2009
From: michael.greene at gmail.com (Michael Greene)
Date: Fri, 7 Aug 2009 10:44:32 -0500
Subject: [rabbitmq-discuss] Res: Problems cloning hg repository
In-Reply-To: <294622.58545.qm@web38801.mail.mud.yahoo.com>
References: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>
	<269388e30908070314s192cc02bn16f1421bef703872@mail.gmail.com>
	<4A7C0153.8090709@lshift.net>
	<294622.58545.qm@web38801.mail.mud.yahoo.com>
Message-ID: <f4d6a21a0908070844n466d840bm9442ace21c6f4050@mail.gmail.com>

This has been reported several times across all major operating systems,
varied connection speeds and locales, and several versions of Mercurial.
 There's clearly something wrong with the dotnet repository.  I've stopped
trying to follow it and have been using the releases instead.  I realize
this isn't the best solution, but I think anything else is going to just
cause you trouble.
Michael

On Fri, Aug 7, 2009 at 6:33 AM, Waltenhares Vilela <waltenhares at yahoo.com.br
> wrote:

> Since yesterday I am trying to clone the Mercurial repositories for
> dotnet-client and it is not working. It always stops at: adding file changes
> (see log below). So I had tried to download a snapshot (default.zip) and the
> site stop feeding wget randomly and I got a useless zipfile. The http
> download did not work with any browser too.
>
> wvilela at wvilela-desktop:~/Projects/RabbitMQ$
> hg clone http://hg.rabbitmq.com/rabbitmq-dotnet-client/
> destination directory: rabbitmq-dotnet-client
> requesting all changes
> adding changesets
> adding manifests
> adding file changes
> transaction abort!
> rollback completed
> abort: premature EOF reading chunk (got 95103 bytes, expected 494761)
>
>  Thanks,
>
> Waltenhares
>
> ------------------------------
> *De:* Matthias Radestock <matthias at lshift.net>
> *Para:* Bryan Murphy <bmurphy1976 at gmail.com>
> *Cc:* rabbitmq-discuss at lists.rabbitmq.com
> *Enviadas:* Sexta-feira, 7 de Agosto de 2009 7:26:27
> *Assunto:* Re: [rabbitmq-discuss] Problems cloning hg repository
>
> Bryan,
>
> Ben Hood wrote:
> > On Fri, Aug 7, 2009 at 1:58 AM, Bryan Murphy<bmurphy1976 at gmail.com>
> wrote:
> >> Hey guys,
> >> I'm trying to download the RabbitMQ C# driver.
> >>  Whenever I try to clone the hg repository, I'm getting an error like
> the following:
> >> abort: premature EOF reading chunk (got 1437330 bytes, expected 4715305)
>
> What version of hg are you running at your end?
>
> > You can use the hgweb interface to get a zip file of the latest source.
> >
> > When doing so, make sure that you use something from the default
> > branch, e.g.
> http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/5d07ce8ecbc9.zip
> > , otherwise you will just get some random junk.
>
> Or, better still,
> http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/default.zip
>
>
> Matthias.
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
> ------------------------------
> Veja quais s?o os assuntos do momento no Yahoo! + Buscados: Top 10<http://br.rd.yahoo.com/mail/taglines/mail/*http://br.maisbuscados.yahoo.com/>-
> Celebridades<http://br.rd.yahoo.com/mail/taglines/mail/*http://br.maisbuscados.yahoo.com/celebridades/>-
> M?sica<http://br.rd.yahoo.com/mail/taglines/mail/*http://br.maisbuscados.yahoo.com/m%C3%BAsica/>-
> Esportes<http://br.rd.yahoo.com/mail/taglines/mail/*http://br.maisbuscados.yahoo.com/esportes/>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090807/c6dfefd1/attachment.htm 

From viditdrolia at gmail.com  Fri Aug  7 17:03:57 2009
From: viditdrolia at gmail.com (Vidit Drolia)
Date: Fri, 7 Aug 2009 12:03:57 -0400
Subject: [rabbitmq-discuss] Receiving Undelivered Persistent Messages
Message-ID: <4e1b00700908070903i796986c8v978c49c071376ffe@mail.gmail.com>

Hi,

I am using a durable exchange, durable queue and persistent delivery
mode for messages. This makes sure that the messages I receive are
persisted till they have been consumed. The consumer is receiving
messages by subscription. However, if the consumer dies, the next time
it runs again it receives only one message. I believe this is by
design of receiving messages by subscription. Now, if I want the
consumer to receive all the messages it has not received so far, I
could do a basicGet till I consume those messages  and then switch
back to subscription mode. Is there any mechanism in RabbitMQ that I
could use to do this?

Thanks!

Vidit



From bmurphy1976 at gmail.com  Fri Aug  7 17:25:24 2009
From: bmurphy1976 at gmail.com (Bryan Murphy)
Date: Fri, 7 Aug 2009 11:25:24 -0500
Subject: [rabbitmq-discuss] Problems cloning hg repository
In-Reply-To: <4A7C0153.8090709@lshift.net>
References: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>
	<269388e30908070314s192cc02bn16f1421bef703872@mail.gmail.com>
	<4A7C0153.8090709@lshift.net>
Message-ID: <7fd310d10908070925s4a577923i66e711cb44b9d2e1@mail.gmail.com>

On Fri, Aug 7, 2009 at 5:26 AM, Matthias Radestock <matthias at lshift.net>wrote:

> Ben Hood wrote:
>
>> On Fri, Aug 7, 2009 at 1:58 AM, Bryan Murphy<bmurphy1976 at gmail.com>
>> wrote:
>>
>>> Hey guys,
>>> I'm trying to download the RabbitMQ C# driver.
>>>  Whenever I try to clone the hg repository, I'm getting an error like the
>>> following:
>>> abort: premature EOF reading chunk (got 1437330 bytes, expected 4715305)
>>>
>>
> What version of hg are you running at your end?
>
>  You can use the hgweb interface to get a zip file of the latest source.
>>
>> When doing so, make sure that you use something from the default
>> branch, e.g.
>> http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/5d07ce8ecbc9.zip
>> , otherwise you will just get some random junk.
>>
>
> Or, better still,
> http://hg.rabbitmq.com/rabbitmq-dotnet-client/archive/default.zip
>
>
> Matthias.
>

Argh, I just can't seem to win today.  I downloaded this three separate
times:

Archive:  5d07ce8ecbc9.zip
  End-of-central-directory signature not found.  Either this file is not
  a zipfile, or it constitutes one disk of a multi-part archive.  In the
  latter case the central directory and zipfile comment will be found on
  the last disk(s) of this archive.

Similar problem with the other link.  Similar problem in both windows
(download via firefox) and linux (download via wget).

Bryan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090807/3fc0a47d/attachment.htm 

From matthias at lshift.net  Fri Aug  7 18:11:31 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 18:11:31 +0100
Subject: [rabbitmq-discuss] Res: Problems cloning hg repository
In-Reply-To: <f4d6a21a0908070844n466d840bm9442ace21c6f4050@mail.gmail.com>
References: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>	<269388e30908070314s192cc02bn16f1421bef703872@mail.gmail.com>	<4A7C0153.8090709@lshift.net>	<294622.58545.qm@web38801.mail.mud.yahoo.com>
	<f4d6a21a0908070844n466d840bm9442ace21c6f4050@mail.gmail.com>
Message-ID: <4A7C6043.5080306@lshift.net>


Michael Greene wrote:
> This has been reported several times across all major operating systems,
> varied connection speeds and locales, and several versions of Mercurial.
>  There's clearly something wrong with the dotnet repository.

Access to the dotnet repo works perfectly fine for a number of people.

What distinguishes the dotnet repo from the others is that it is
substantially bigger.

If anybody can give us access to a machine where the problem can be
reproduced then we can look into it further.


Regards,

Matthias.



From matthias at lshift.net  Fri Aug  7 19:20:51 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 19:20:51 +0100
Subject: [rabbitmq-discuss] Weird Crash - Recovery logic for durable
	messages/queues/exchanges?
In-Reply-To: <50c8ffe90908070804r2d3c6d07i2b5f8cf90d5f8cb1@mail.gmail.com>
References: <50c8ffe90908062012j1f619daiae1f6379fcbdbf2f@mail.gmail.com>
	<4A7BA097.3050002@lshift.net>	<50c8ffe90908062239o25ef8110wad353a2f744f625a@mail.gmail.com>
	<4A7BFC58.9050304@lshift.net>
	<50c8ffe90908070804r2d3c6d07i2b5f8cf90d5f8cb1@mail.gmail.com>
Message-ID: <4A7C7083.3010700@lshift.net>

Darien,

Darien Kindlund wrote:
> Understood.  Yes, I've checked and there were no
> connection/re-connection attempts, when I had witnessed the the
> persistent messages in the durable queue were still marked as
> un-ack'd.

And you are sure that the server actually restarted?

Also, how easy is it to reproduce this problem? Does it happen with,
say, a clean installation (empty db dir, no log files) when you publish
a few persistent messages, consume (but not ack) them, and then restart
the broker?

If you can construct such a test case for us then we'll try to replicate
it on our systems.

> Okay, so 'queue.purge' will flush all 'ready' and 'un-ack'd' messages
> from a particular queue -- or just un-ack'd messages?

Good question :) In AMQP 0-8 the spec requires that queue.purge removes
*all* messages. In 0-9-1 this got changed to the more sensible "all
messages not awaiting acknowledgement", and that is what RabbitMQ
implements.

> Is there a command in the AMQP spec that will instruct RabbitMQ to re-mark all
> un-ack'd messages as ready?

There have been several discussions about this on the mailing list.
AMQP's 'basic.reject' command, which, if RabbitMQ implemented it (which
it doesn't, yet) would allow a client to reject, and thus make available
to other consumers, specific messages it has received.

But that falls short of what you are after, since you want some agent
other than the consumer to initiate the reclaim of messages.

> If no such command exists, I'm thinking it would be useful to include
> such a command in future versions of the spec, so that people could
> develop 'message recovery logic', when dealing with buggy consumers
> that are connected but are not actually properly processing the
> messages.

Do you want to have a stab at defining the syntax and semantics of this
new command? Take a look at the 0-9-1 xml spec
(http://jira.amqp.org/confluence/download/attachments/720900/amqp0-9-1.xml),
to get an idea of the flavour in which AMQP commands are defined, and
follow that as closely as possible.

I'd be happy to review and discuss your proposal.

One issue you are going to have to think about is what to do with
acknowledgments sent by the original consumer for a message that has
been "reclaimed". Do we treat the message as ack'ed at that point? Or
not? Should the ack fail (as it would if a consumer tried to ack a
message it didn't receive)? If we treat the message as ack'ed, what then
happens when another consumer to which the reclaimed message was sent
tries to ack it?

> If I run into this issue in the future, would it help if I could
> provide you a copy of the mnesia directory once RabbitMQ has
> unexpectedly crashed?

Possibly. Though looking at the code I am struggling to see how mnesia
or the persister could have anything to do with the behaviour you are
observing. You see, messages don't actually carry an 'unacknowledged'
mark. Instead when a message is sent to a consumer it is moved to a
different part of the state of the queue process, associated with that
particular consumer. rabbitmqctl quite literally counts the messages in
all these so-called consumer records to determined the unack'ed message
count. The consumer records do not survive a server restart. So for the
count to return a non-zero number after a restart the queue process must
have created some consumer records, which means some consumers must have
connected. Now, there could of course be all kinds of bugs lurking in
the code, including the queue processes conjuring up consumer records
from thin air, but atm I cannot see how a bug in the persistence
mechanism would result in the behaviour you have described.


Regards,

Matthias



From majek04 at gmail.com  Fri Aug  7 19:29:02 2009
From: majek04 at gmail.com (majek04)
Date: Fri, 7 Aug 2009 19:29:02 +0100
Subject: [rabbitmq-discuss] Res: Problems cloning hg repository
In-Reply-To: <294622.58545.qm@web38801.mail.mud.yahoo.com>
References: <7fd310d10908061758q72e07707r27a6a5fe7bb6772@mail.gmail.com>
	<269388e30908070314s192cc02bn16f1421bef703872@mail.gmail.com>
	<4A7C0153.8090709@lshift.net>
	<294622.58545.qm@web38801.mail.mud.yahoo.com>
Message-ID: <3bb0d9710908071129h6f5da8f9k2887e5e388f27979@mail.gmail.com>

On Fri, Aug 7, 2009 at 12:33, Waltenhares
Vilela<waltenhares at yahoo.com.br> wrote:
> Since yesterday I am trying to clone the Mercurial repositories for
> dotnet-client and it is not working. It always stops at: adding file changes
> (see log below). So I had tried to download a snapshot (default.zip) and the
> site stop feeding wget randomly and I got a useless zipfile. The http
> download did not work with any browser too.
>
> wvilela at wvilela-desktop:~/Projects/RabbitMQ$
> hg clone http://hg.rabbitmq.com/rabbitmq-dotnet-client/

That's strange. I was able to do the same command on remote host
without any issues.


Cheers!
 Marek Majkowski



From darien at kindlund.com  Fri Aug  7 21:39:40 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Fri, 7 Aug 2009 16:39:40 -0400
Subject: [rabbitmq-discuss] Weird Crash (1M to 10M messages over STOMP?)
	- Recovery logic for durable messages/queues/exchanges?
Message-ID: <50c8ffe90908071339le06bcdh64023d616d0eceb7@mail.gmail.com>

Hi Matthias & Tony,

Back to the main crash issue.  It happened again.  The short version:
This crash may have to do with sending large messages over STOMP --
I'm not sure.  I've proposed a couple of unit test cases below and am
curious if you're able to replicate the issue, based upon those tests.

Here's the details:

1) Primary indication that RabbitMQ died, is when issuing a
'rabbitmqctl' command:
# rabbitmqctl list_exchanges
Listing exchanges ...
Error: {badrpc,nodedown}

2) Listing all the erlang relevant processes shows just this:
# ps ax | grep erla
14488 ?        S      0:00 /usr/lib/erlang/erts-5.5.5/bin/epmd -daemon

So epmd is still alive, but everything else is dead.

3) Checking the rabbit.log file shows these entries as the last messages:
# tail -f /var/log/rabbitmq/rabbit.log
Rolling persister log to
"/var/lib/rabbitmq/mnesia/rabbit/rabbit_persister.LOG.previous"

=INFO REPORT==== 7-Aug-2009::14:48:16 ===
Rolling persister log to
"/var/lib/rabbitmq/mnesia/rabbit/rabbit_persister.LOG.previous"

=INFO REPORT==== 7-Aug-2009::14:48:40 ===
Rolling persister log to
"/var/lib/rabbitmq/mnesia/rabbit/rabbit_persister.LOG.previous"

=INFO REPORT==== 7-Aug-2009::14:49:22 ===
Rolling persister log to
"/var/lib/rabbitmq/mnesia/rabbit/rabbit_persister.LOG.previous"

4) The rabbit-sasl.log file shows *nothing*.

5) Matthias, I'll send you another email containing the tar.gz of the
mnesia directory, so that you can see what the state of the database
looks like after this crash.  And before start up.

> Darien Kindlund wrote:
>> Understood. ?Yes, I've checked and there were no
>> connection/re-connection attempts, when I had witnessed the the
>> persistent messages in the durable queue were still marked as
>> un-ack'd.
>
> And you are sure that the server actually restarted?

Yes, I manually killed all erlang related processes, then proceeded to
issue a '/etc/init.d/rabbitmq start'.
Then, I checked the /var/log/rabbitmq/startup_log file, which showed:
# cat startup_log
Starting all nodes...
Starting node rabbit at manager...
RabbitMQ 1.6.0 (AMQP 8-0)
Copyright (C) 2007-2009 LShift Ltd., Cohesive Financial Technologies
LLC., and Rabbit Technologies Ltd.
Licensed under the MPL.  See http://www.rabbitmq.com/

node        : rabbit at manager
log         : /var/log/rabbitmq/rabbit.log
sasl log    : /var/log/rabbitmq/rabbit-sasl.log
database dir: /var/lib/rabbitmq/mnesia/rabbit

starting database             ...done
starting core processes       ...done
starting recovery             ...done
starting persister            ...done
starting guid generator       ...done
starting builtin applications ...done
starting TCP listeners        ...done
starting STOMP-listeners      ...done

broker running
OK
done.

> Also, how easy is it to reproduce this problem? Does it happen with,
> say, a clean installation (empty db dir, no log files) when you publish
> a few persistent messages, consume (but not ack) them, and then restart
> the broker?

I'm not sure.  I've been using v1.6.0 since it was released, and this
is really the first time I've encountered any type of problem.

There has been one major, noticeable change that I've been
experimenting with... which may explain the crash:
Lately, I've been increasing the message sizes, which may have played
a role in this crash.
I'm still using the STOMP adapter, so this problem may only be present
when sending large messages via STOMP -- I'm not sure.

> If you can construct such a test case for us then we'll try to replicate
> it on our systems.

I'll see what I can do; one basic set of unit tests, is see if
RabbitMQ behaves differently, when you feed it different message sizes
over AMQP and STOMP:

For starters, try the following unit tests:

Message Size | Protocol
10K | AMQP
100K | AMQP
1M | AMQP
10M | AMQP
100M | AMQP
1G | AMQP

10K | STOMP
100K | STOMP
1M | STOMP
10M | STOMP
100M | STOMP
1G | STOMP

In my case, I think I'm getting errors with either the 1M or 10M
message size over STOMP.  In fact, I'm almost positive that this crash
was caused by sending a large message via STOMP.  Furthermore, it
looks like when the STOMP adapter fails, there's no sufficient crash
log reported.

Is there some sort of (implicit) upper limit on the allowable message
size when sending over STOMP?

>> Okay, so 'queue.purge' will flush all 'ready' and 'un-ack'd' messages
>> from a particular queue -- or just un-ack'd messages?
>
> Good question :) In AMQP 0-8 the spec requires that queue.purge removes
> *all* messages. In 0-9-1 this got changed to the more sensible "all
> messages not awaiting acknowledgement", and that is what RabbitMQ
> implements.

Okay, so that explains why the queue.purge did nothing.

>> Is there a command in the AMQP spec that will instruct RabbitMQ to re-mark all
>> un-ack'd messages as ready?
>
> There have been several discussions about this on the mailing list.
> AMQP's 'basic.reject' command, which, if RabbitMQ implemented it (which
> it doesn't, yet) would allow a client to reject, and thus make available
> to other consumers, specific messages it has received.
>
> But that falls short of what you are after, since you want some agent
> other than the consumer to initiate the reclaim of messages.
>
>> If no such command exists, I'm thinking it would be useful to include
>> such a command in future versions of the spec, so that people could
>> develop 'message recovery logic', when dealing with buggy consumers
>> that are connected but are not actually properly processing the
>> messages.
>
> Do you want to have a stab at defining the syntax and semantics of this
> new command? Take a look at the 0-9-1 xml spec
> (http://jira.amqp.org/confluence/download/attachments/720900/amqp0-9-1.xml),
> to get an idea of the flavour in which AMQP commands are defined, and
> follow that as closely as possible.
>
> I'd be happy to review and discuss your proposal.

Hrm, I'll try and get an idea of how it would work at a high-level,
before trying to capture the behavior in the XML spec.

> One issue you are going to have to think about is what to do with
> acknowledgments sent by the original consumer for a message that has
> been "reclaimed". Do we treat the message as ack'ed at that point? Or
> not? Should the ack fail (as it would if a consumer tried to ack a
> message it didn't receive)? If we treat the message as ack'ed, what then
> happens when another consumer to which the reclaimed message was sent
> tries to ack it?

My first thought is that an ACK from the original consumer a
"reclaimed" message should be silently ignored -- similar to a NO-OP.
To be clear, the use case would look like:

1) Consumers A & B are subscribed to the same durable queue, receiving
the same persistent messages.
2) Consumer A gets a single message; Consumer B is still waiting for more data.
3) *** Some other external monitoring program, which is watching the
queue (via the same interface as rabbitmqctl), sees that consumer A
has taking too long to process the message decides to issue some sort
of "reclaim" for that message, which causes Consumer B to receive it.
4) RabbitMQ updates its message tracking logic, and still marks the
message as un-ack'd -- but expects Consumer B to issue the ACK -- not
Consumer A.
5) Let's say Consumer A finally finishes and issues an ACK; RabbitMQ
silently ignores the ACK and still keeps the message as un-ack'd.
6) Consumer B issues the ACK, which RabbitMQ respects and flushes the
message from the queue.

However, I could see other use-cases, where perhaps, you may want
Consumer A's ACK (in #5) to actually flush the queue, and simply NO-OP
on Consumer B's ACK (in #6).  This behavior could be dictated by a
property associated with the queue (e.g., like durable=True).

I'll have to think about it a bit more, since I'm sure there are more use-cases.

>> If I run into this issue in the future, would it help if I could
>> provide you a copy of the mnesia directory once RabbitMQ has
>> unexpectedly crashed?
>
> Possibly. Though looking at the code I am struggling to see how mnesia
> or the persister could have anything to do with the behaviour you are
> observing. You see, messages don't actually carry an 'unacknowledged'
> mark. Instead when a message is sent to a consumer it is moved to a
> different part of the state of the queue process, associated with that
> particular consumer. rabbitmqctl quite literally counts the messages in
> all these so-called consumer records to determined the unack'ed message
> count. The consumer records do not survive a server restart. So for the
> count to return a non-zero number after a restart the queue process must
> have created some consumer records, which means some consumers must have
> connected. Now, there could of course be all kinds of bugs lurking in
> the code, including the queue processes conjuring up consumer records
> from thin air, but atm I cannot see how a bug in the persistence
> mechanism would result in the behaviour you have described.

Okay, I'm sending you a copy of the mnesia directory in a separate
email directly to you.  If you need additional information about the
server's environment, let me know.

-- Darien



From matthias at lshift.net  Fri Aug  7 22:39:14 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 22:39:14 +0100
Subject: [rabbitmq-discuss] Weird Crash (1M to 10M messages over STOMP?)
 -	Recovery logic for durable messages/queues/exchanges?
In-Reply-To: <50c8ffe90908071339le06bcdh64023d616d0eceb7@mail.gmail.com>
References: <50c8ffe90908071339le06bcdh64023d616d0eceb7@mail.gmail.com>
Message-ID: <4A7C9F02.80305@lshift.net>

Darien,

Darien Kindlund wrote:
> Back to the main crash issue.  It happened again.  The short version:
> This crash may have to do with sending large messages over STOMP --
> I'm not sure.  I've proposed a couple of unit test cases below and am
> curious if you're able to replicate the issue, based upon those tests.

I forgot you were one of the STOMPers ;)

That opens up a new direction of investigation.

> Here's the details:
> 
> 1) Primary indication that RabbitMQ died, is when issuing a
> 'rabbitmqctl' command:
> # rabbitmqctl list_exchanges
> Listing exchanges ...
> Error: {badrpc,nodedown}
> 
> 2) Listing all the erlang relevant processes shows just this:
> # ps ax | grep erla
> 14488 ?        S      0:00 /usr/lib/erlang/erts-5.5.5/bin/epmd -daemon

ok. Looks like the rabbit had indeed perished.

> Then, I checked the /var/log/rabbitmq/startup_log file, which showed:
> [...]

Can you send me a copy of the rabbit.log?

> Is there some sort of (implicit) upper limit on the allowable message
> size when sending over STOMP?

Not that I am aware of.

> I'm sending you a copy of the mnesia directory in a separate
> email directly to you. 

When I recover that into my local rabbit instance I get a whole bunch of 
exchanges, queues and bindings, but no messages - unacknowledged or 
otherwise. Do you see something different?


Regards,

Matthias.




From darien at kindlund.com  Fri Aug  7 23:01:13 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Fri, 7 Aug 2009 18:01:13 -0400
Subject: [rabbitmq-discuss] Weird Crash (1M to 10M messages over STOMP?)
	- Recovery logic for durable messages/queues/exchanges?
In-Reply-To: <4A7C9F02.80305@lshift.net>
References: <50c8ffe90908071339le06bcdh64023d616d0eceb7@mail.gmail.com> 
	<4A7C9F02.80305@lshift.net>
Message-ID: <50c8ffe90908071501o28af0a56i7ae599b3bd9c69ee@mail.gmail.com>

>> Back to the main crash issue. ?It happened again. ?The short version:
>> This crash may have to do with sending large messages over STOMP --
>> I'm not sure. ?I've proposed a couple of unit test cases below and am
>> curious if you're able to replicate the issue, based upon those tests.
>
> I forgot you were one of the STOMPers ;)

Yes, I am.  I'd like to move to the AMQP perl code, but it's still
undergoing testing.
I'll try to wear my "I'm a STOMPer" T-shirt in the future. ;)

> That opens up a new direction of investigation.

I figured as much.

> ok. Looks like the rabbit had indeed perished.

Yup.  What's more annoying is the fact that rabbit died without making
a peep (at least from what I can tell).

> Can you send me a copy of the rabbit.log?

Yup, will do in a separate email to you.

>> Is there some sort of (implicit) upper limit on the allowable message
>> size when sending over STOMP?
>
> Not that I am aware of.

Have you guys done any sort of unit testing with various message
sizes?  I'm guessing for AMQP, you have, but I'm wondering if you've
done the same for all the different protocols you guys support with
extensions (e.g., HTTP, STOMP ...).

>> I'm sending you a copy of the mnesia directory in a separate
>> email directly to you.
>
> When I recover that into my local rabbit instance I get a whole bunch of
> exchanges, queues and bindings, but no messages - unacknowledged or
> otherwise. Do you see something different?

Hrm.  I was hoping the second crash generated the same unack'd
messages... I guess I was wrong.  Okay, if it happens again -- and I
can verify it upon restart -- then I'll send you the mnesia directory.

In any event, it gives you an idea about the types of exchanges,
queues, bindings, I'm currently using.

-- Darien



From matthias at lshift.net  Fri Aug  7 23:27:03 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 07 Aug 2009 23:27:03 +0100
Subject: [rabbitmq-discuss] Weird Crash (1M to 10M messages over STOMP?)
 -	Recovery logic for durable messages/queues/exchanges?
In-Reply-To: <50c8ffe90908071501o28af0a56i7ae599b3bd9c69ee@mail.gmail.com>
References: <50c8ffe90908071339le06bcdh64023d616d0eceb7@mail.gmail.com>
	<4A7C9F02.80305@lshift.net>
	<50c8ffe90908071501o28af0a56i7ae599b3bd9c69ee@mail.gmail.com>
Message-ID: <4A7CAA37.8050700@lshift.net>

Darien,

Darien Kindlund wrote:
>> Can you send me a copy of the rabbit.log?
> 
> Yup, will do in a separate email to you.

What's interesting here is that within one second of the TCP listener 
starting there are three AMQP (not STOMP) connections. STOMP connections 
get established ~80 seconds later.

Could it be possible that the three initial AMQP connections consume 
from the queues? That would explain why you are seeing unacknowledged 
messages in the counts.

> Have you guys done any sort of unit testing with various message
> sizes?  I'm guessing for AMQP, you have, but I'm wondering if you've
> done the same for all the different protocols you guys support with
> extensions (e.g., HTTP, STOMP ...).

Tony may know the answer to that one... but one reason why the STOMP 
extension still has experimental status is that we haven't done any 
extensive testing.


Regards,

Matthias



From darien at kindlund.com  Fri Aug  7 23:43:19 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Fri, 7 Aug 2009 18:43:19 -0400
Subject: [rabbitmq-discuss] Weird Crash (1M to 10M messages over STOMP?)
	- Recovery logic for durable messages/queues/exchanges?
In-Reply-To: <4A7CAA37.8050700@lshift.net>
References: <50c8ffe90908071339le06bcdh64023d616d0eceb7@mail.gmail.com> 
	<4A7C9F02.80305@lshift.net>
	<50c8ffe90908071501o28af0a56i7ae599b3bd9c69ee@mail.gmail.com> 
	<4A7CAA37.8050700@lshift.net>
Message-ID: <50c8ffe90908071543n57f0b74l6c0a6221926345b9@mail.gmail.com>

Hi Matthias,

>>> Can you send me a copy of the rabbit.log?
>>
>> Yup, will do in a separate email to you.
>
> What's interesting here is that within one second of the TCP listener
> starting there are three AMQP (not STOMP) connections. STOMP connections get
> established ~80 seconds later.
>
> Could it be possible that the three initial AMQP connections consume from
> the queues? That would explain why you are seeing unacknowledged messages in
> the counts.

Those three AMQP connections don't subscribe to the same queue as all
the STOMP connections.  In fact, all three AMQP connections just
subscribe to their own, independent queues.  To be clear all the STOMP
connections share the same queue, which is the one that usually has
the un-ack'd messages.

At this point, I'm thinking you probably need more information to
replace the message un-ack'd issue.  Perhaps if we can nail down the
original culprit for the weird crash, then we can replicate the
un-ack'd issue.  If I can construct the original message sent via
STOMP which caused RabbitMQ to die unexpectedly... I'm thinking that
would be enough to replicate... right?  In any event, I'm working on
this and it will probably take 1-2 hours to complete.

>> Have you guys done any sort of unit testing with various message
>> sizes? ?I'm guessing for AMQP, you have, but I'm wondering if you've
>> done the same for all the different protocols you guys support with
>> extensions (e.g., HTTP, STOMP ...).
>
> Tony may know the answer to that one... but one reason why the STOMP
> extension still has experimental status is that we haven't done any
> extensive testing.

Yeah, that makes sense.  Okay, I'll try to get the example message I'm using...

-- Darien



From suhail at mixpanel.com  Sat Aug  8 00:17:13 2009
From: suhail at mixpanel.com (Suhail Doshi)
Date: Fri, 7 Aug 2009 16:17:13 -0700
Subject: [rabbitmq-discuss] Rabbitmq+Ubuntu+TIMEOUT
Message-ID: <376f3e6f0908071617p54c4aed8m4a94ef52e496f451@mail.gmail.com>

Hi there,
I installed RabbitMQ using the *.deb file available on the download page.
Whenever I try to run the server however I get:

suhail ~: /etc/init.d/rabbitmq-server restart
Restarting rabbitmq-server: No nodes running
TIMEOUT - check /var/log/rabbitmq/startup_{log,err}
rabbitmq-server.

The startup_log/err files do not provide much information, this problem has
been discussed a bit before:
http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-April/003767.html

I can't tell if it's a problem with my hostname or perhaps erlang
installation. I am using Erlang R13B01 (erts-5.7.2).

Sincerely,
Suhail Doshi

-- 
http://mixpanel.com
Blog: http://blog.mixpanel.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090807/7d16a48c/attachment.htm 

From darien at kindlund.com  Sat Aug  8 07:04:20 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Sat, 8 Aug 2009 02:04:20 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
Message-ID: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>

Hi Matthias,

Okay, so after enabling verbose logging, I was able to replicate the
error, reliably.

Specifically, I have a message that is approximately 91 MB in size.  A
perl process using Net::Stomp sends the persistent message to an
exchange which routes the message to a durable queue.  As soon as the
perl process finishes sending the message, RabbitMQ v1.6.0 completely
dies with _zero_ warning or logging.

I've got a copy of the perl code which generates the message as a
scalar variable ($VAR1); from that point, you can feed the contents of
that scalar into any test perl code (such as the example code Tony has
authored) in order to generate the crash.

I don't believe my message format matters -- just the size of the
message.  However, I will send the 91 MB example message in an email
directly to you, since I don't think everyone on the list wants to get
such a large attachment.  If you don't get the email containing the
attachment (perhaps your mailserver blocks large attachments), then
let me know what the best method for sending you the attachment.

Also, I will include the rabbit.log, rabbit-sasl.log, and the entire
mnesia directory immediately after the crash.  Additionally, I'll
provide the erl_crash.dump which RabbitMQ generates upon crashing.

Let me know when you get the attachment as well as if you need any
additional information.  Also, I'd appreciate it if you can confirm
these findings on your own deployment.

Thanks again,
-- Darien



From matthias at lshift.net  Sat Aug  8 08:44:16 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Sat, 08 Aug 2009 08:44:16 +0100
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
Message-ID: <4A7D2CD0.9020305@lshift.net>

Darien,

Darien Kindlund wrote:
> Okay, so after enabling verbose logging, I was able to replicate the
> error, reliably.

including the "messages show up as unacknowledged after restart" problem?

> Specifically, I have a message that is approximately 91 MB in size.  A
> perl process using Net::Stomp sends the persistent message to an
> exchange which routes the message to a durable queue.  As soon as the
> perl process finishes sending the message, RabbitMQ v1.6.0 completely
> dies with _zero_ warning or logging.

The fact that it dies doesn't surprise me. I can think of at least two 
possible causes for this:

1) The current persister doesn't cope with such large messages very 
well. If the message was transient you may well be ok. Did you try 
running the test with transient messages? (NB: the queues can still be 
durable)

2) I noticed yesterday that the disconnect of a STOMP client can cause 
the contents of a delivery attempt to be logged as part of an error 
message. Logging such a large message may well bring down the server. I 
have filed a bug to get rid of that verbose error message. Meanwhile 
though, can you tell me whether your STOMP clients are well-behaved and 
issue a DISCONNECT at the end of a session?

You say rabbit died with zero logging. That may well be true, but rabbit 
  *did* produce a crash dump, and that should allow us to establish the 
cause of death.

> I don't believe my message format matters -- just the size of the
> message.  However, I will send the 91 MB example message in an email
> directly to you, since I don't think everyone on the list wants to get
> such a large attachment.  If you don't get the email containing the
> attachment (perhaps your mailserver blocks large attachments), then
> let me know what the best method for sending you the attachment.

I didn't get the second email, though I don't think I'll need the exact 
message - as you say, the content probably doesn't matter. So just send 
me the code & logs, and the erl_crash.dump (if it's not too large; if it 
is then please send me the first few k only).


Regards,

Matthias.



From darien at kindlund.com  Sat Aug  8 08:53:44 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Sat, 8 Aug 2009 03:53:44 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <4A7D2CD0.9020305@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7D2CD0.9020305@lshift.net>
Message-ID: <50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>

Hi Matthias,

>> Okay, so after enabling verbose logging, I was able to replicate the
>> error, reliably.
>
> including the "messages show up as unacknowledged after restart" problem?

YES.  I think this problem is also STOMP specific!  After recovering
the persister from the last crash.  I start up a single STOMP client
and attempt to subscribe and get the first message off the queue.  At
that time, rabbit.log generates this error:

=INFO REPORT==== 8-Aug-2009::03:40:01 ===
accepted TCP connection on 0.0.0.0:61613 from 127.0.0.1:50113

=INFO REPORT==== 8-Aug-2009::03:40:01 ===
starting STOMP connection <0.6224.0> from 127.0.0.1:50113

=ERROR REPORT==== 8-Aug-2009::03:40:01 ===
STOMP Reply command unhandled: {'basic.deliver',
                                   <<"Q_500.manager.workers">>,
                                   1,
                                   false,
                                   <<"events">>,
                                   <<"500.job.create.job.urls.job_alerts">>}
{content,60,
         none,
... followed by the entire message contents...

Then, after disconnecting the STOMP consumer, if I try to issue a
queue.purge command, it completely fails and messages are actually
marked as 'ready' in the queue.  You should be able to replicate this
behavior (I think) with the mnesia copy in the report.tar.gz I sent
you (just now).

>> Specifically, I have a message that is approximately 91 MB in size. ?A
>> perl process using Net::Stomp sends the persistent message to an
>> exchange which routes the message to a durable queue. ?As soon as the
>> perl process finishes sending the message, RabbitMQ v1.6.0 completely
>> dies with _zero_ warning or logging.
>
> The fact that it dies doesn't surprise me. I can think of at least two
> possible causes for this:
>
> 1) The current persister doesn't cope with such large messages very well. If
> the message was transient you may well be ok. Did you try running the test
> with transient messages? (NB: the queues can still be durable)

Good idea, I'll re-test with transient messages and let you know if
that solves the problem.

> 2) I noticed yesterday that the disconnect of a STOMP client can cause the
> contents of a delivery attempt to be logged as part of an error message.
> Logging such a large message may well bring down the server. I have filed a
> bug to get rid of that verbose error message. Meanwhile though, can you tell
> me whether your STOMP clients are well-behaved and issue a DISCONNECT at the
> end of a session?

Yes. The STOMP clients issue a DISCONNECT at the end of the session.

> You say rabbit died with zero logging. That may well be true, but rabbit
> ?*did* produce a crash dump, and that should allow us to establish the cause
> of death.

Okay, good to know.

>> I don't believe my message format matters -- just the size of the
>> message. ?However, I will send the 91 MB example message in an email
>> directly to you, since I don't think everyone on the list wants to get
>> such a large attachment. ?If you don't get the email containing the
>> attachment (perhaps your mailserver blocks large attachments), then
>> let me know what the best method for sending you the attachment.
>
> I didn't get the second email, though I don't think I'll need the exact
> message - as you say, the content probably doesn't matter. So just send me
> the code & logs, and the erl_crash.dump (if it's not too large; if it is
> then please send me the first few k only).

Done.  I tried sending the 91 MB file through, but it was taking way
too long to upload (63 MB compressed).

-- Darien



From darien at kindlund.com  Sat Aug  8 08:56:42 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Sat, 8 Aug 2009 03:56:42 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
Message-ID: <50c8ffe90908080056r9d89748y835c4c2845d41f2a@mail.gmail.com>

> Then, after disconnecting the STOMP consumer, if I try to issue a
> queue.purge command, it completely fails and messages are actually
> marked as 'ready' in the queue. ?You should be able to replicate this
> behavior (I think) with the mnesia copy in the report.tar.gz I sent
> you (just now).

Gah.  My mistake on this.... I was purging the wrong queue.  Okay,
purging actually works when the messages are marked as 'ready'.  Sorry
about that.

-- Darien



From darien at kindlund.com  Sat Aug  8 09:09:04 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Sat, 8 Aug 2009 04:09:04 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
Message-ID: <50c8ffe90908080109r14ca69c4mdc6bd63401535236@mail.gmail.com>

>> 1) The current persister doesn't cope with such large messages very well. If
>> the message was transient you may well be ok. Did you try running the test
>> with transient messages? (NB: the queues can still be durable)
>
> Good idea, I'll re-test with transient messages and let you know if
> that solves the problem.

This is interesting.  So I resent the large message with
'delivery-mode' of '1' instead of '2' (which should make it NOT
persistent -- right?).  RabbitMQ still dies.

I also tried sending the message via STOMP without specifying any type
of 'delivery-mode' (because I think the default is to mark the message
as non-persistent).  Even in that scenario, RabbitMQ still dies.

I don't think this is just a persister problem... unless the persister
is involved in handling non-persistent messages on durable queues.

FYI,
-- Darien



From darien at kindlund.com  Sat Aug  8 09:29:49 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Sat, 8 Aug 2009 04:29:49 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
Message-ID: <50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>

>> including the "messages show up as unacknowledged after restart" problem?
>
> YES. ?I think this problem is also STOMP specific! ?After recovering
> the persister from the last crash. ?I start up a single STOMP client
> and attempt to subscribe and get the first message off the queue. ?At
> that time, rabbit.log generates this error:
>
> =INFO REPORT==== 8-Aug-2009::03:40:01 ===
> accepted TCP connection on 0.0.0.0:61613 from 127.0.0.1:50113
>
> =INFO REPORT==== 8-Aug-2009::03:40:01 ===
> starting STOMP connection <0.6224.0> from 127.0.0.1:50113
>
> =ERROR REPORT==== 8-Aug-2009::03:40:01 ===
> STOMP Reply command unhandled: {'basic.deliver',
> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? <<"Q_500.manager.workers">>,

Actually, this problem is a bit worse.... apparently, when RabbitMQ
restarts and recovers the persister -- even persistent messages marked
'ready' on OTHER durable queues are NOT retrievable by other STOMP
clients.... I get the same type of error in the rabbit.log:

=ERROR REPORT==== 8-Aug-2009::04:21:16 ===
STOMP Reply command unhandled: {'basic.deliver',
                                   <<"Q_1.manager.workers">>,
                                   1,
                                   false,
                                   <<"events">>,
                                   <<"1.job.create.job.urls.job_alerts">>}

The unit test case for this would be:
1) Create a durable exchange
2) Create a durable queue
3) Bind the queue to the exchange
4) Make sure the queue has no consumers subscribed
5) Send a small (normal) persistent message to the queue
6) Crash RabbitMQ by sending a large message to a different, unrelated queue
7) Kill epmd
8) Restart RabbitMQ
9) Verify the (normal) message still exists via rabbitmqctl
10) Start STOMP consumer and attempt to subscribe to the queue
11) STOMP consumer waits, RabbitMQ generates the log message, but no
persistent (normal) message gets delivered

Let me know if this makes sense.... I'm thinking the STOMP adapter
doesn't know how to properly deal with recovered, persisted messages
in general... but I'd like to know if this is a general problem or a
specific one.

-- Darien



From matthias at lshift.net  Sat Aug  8 09:33:02 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Sat, 08 Aug 2009 09:33:02 +0100
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
Message-ID: <4A7D383E.6060202@lshift.net>

Darien,

Darien Kindlund wrote:
> Hi Matthias,
> 
>>> Okay, so after enabling verbose logging, I was able to replicate the
>>> error, reliably.
>> including the "messages show up as unacknowledged after restart" problem?
> 
> YES.  I think this problem is also STOMP specific!  After recovering
> the persister from the last crash.  I start up a single STOMP client
> and attempt to subscribe and get the first message off the queue.  At
> that time, rabbit.log generates this error:

Hang on. At what point do you see the unacknowledged messages? Right 
after the restart? (and how? with 'rabbitmqctl list_queues'?) Or after 
you start up that single STOMP client?

I am asking because when I recover your latest db dir into my rabbit 
instance I see three *ready* messages in the '500.manager.workers' queue.

> =ERROR REPORT==== 8-Aug-2009::03:40:01 ===
> STOMP Reply command unhandled: {'basic.deliver',
>                                    <<"Q_500.manager.workers">>,
>                                    1,
>                                    false,
>                                    <<"events">>,
>                                    <<"500.job.create.job.urls.job_alerts">>}
> {content,60,
>          none,
> ... followed by the entire message contents...

That may well be a bug. Can you send me just a little bit more of the 
above error? Another k or so should do.

>> You say rabbit died with zero logging. That may well be true, but rabbit
>>  *did* produce a crash dump, and that should allow us to establish the cause
>> of death.
> 
> Okay, good to know.

It ran out of memory, which is what I suspected.

> This is interesting. So I resent the large message with 
> 'delivery-mode' of '1' instead of '2' (which should make it NOT 
> persistent -- right?). RabbitMQ still dies.

Interesting indeed. Yes, that means the persister is unlikely to be the 
causing the OoM.


Regards,

Matthias.



From darien at kindlund.com  Sat Aug  8 09:46:53 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Sat, 8 Aug 2009 04:46:53 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <4A7D383E.6060202@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com> 
	<4A7D383E.6060202@lshift.net>
Message-ID: <50c8ffe90908080146u7927a58fra3b753cd7bdb398@mail.gmail.com>

>>>> Okay, so after enabling verbose logging, I was able to replicate the
>>>> error, reliably.
>>>
>>> including the "messages show up as unacknowledged after restart" problem?
>>
>> YES. ?I think this problem is also STOMP specific! ?After recovering
>> the persister from the last crash. ?I start up a single STOMP client
>> and attempt to subscribe and get the first message off the queue. ?At
>> that time, rabbit.log generates this error:
>
> Hang on. At what point do you see the unacknowledged messages? Right after
> the restart? (and how? with 'rabbitmqctl list_queues'?) Or after you start
> up that single STOMP client?
>
> I am asking because when I recover your latest db dir into my rabbit
> instance I see three *ready* messages in the '500.manager.workers' queue.

I know what you mean.
I see the 'unacknowledged messages' after a start up the STOMP
clients.  So, I'm thinking the order of operations is:

1) Unacknowledged messages exist on the queue
2) RabbitMQ dies
3) RabbitMQ starts up
4) Recovery mode starts, marks all un-ack'd messages as 'ready'
5) STOMP clients connect
6) RabbitMQ generates the STOMP error
7) I check the rabbitmqctl output, and see that there are un-ack'd messages

To be honest, I can't seem to replicate the issue where the STOMP
clients disconnect and the messages remain 'un-ack'd' -- I'm thinking
this error may be transient or somehow a wierd corner case.  If I ever
encounter that scenario again, I'll be sure to save the mnesia
directory at that point.

>> =ERROR REPORT==== 8-Aug-2009::03:40:01 ===
>> STOMP Reply command unhandled: {'basic.deliver',
>> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? <<"Q_500.manager.workers">>,
>> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 1,
>> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? false,
>> ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? <<"events">>,
>>
>> <<"500.job.create.job.urls.job_alerts">>}
>> {content,60,
>> ? ? ? ? none,
>> ... followed by the entire message contents...
>
> That may well be a bug. Can you send me just a little bit more of the above
> error? Another k or so should do.

Okay, I'll send you another direct email with an attachment of the log.

>>> You say rabbit died with zero logging. That may well be true, but rabbit
>>> ?*did* produce a crash dump, and that should allow us to establish the
>>> cause
>>> of death.
>>
>> Okay, good to know.
>
> It ran out of memory, which is what I suspected.
>
>> This is interesting. So I resent the large message with 'delivery-mode' of
>> '1' instead of '2' (which should make it NOT persistent -- right?). RabbitMQ
>> still dies.
>
> Interesting indeed. Yes, that means the persister is unlikely to be the
> causing the OoM.

I don't have a pure AMQP test client, but I'm curious if this error
condition exists if the large message were sent over AMQP instead of
STOMP...

-- Darien



From matthias at lshift.net  Sat Aug  8 10:32:31 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Sat, 08 Aug 2009 10:32:31 +0100
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<4A7D2CD0.9020305@lshift.net>	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
Message-ID: <4A7D462F.3020401@lshift.net>

Darien,

Darien Kindlund wrote:
> Actually, this problem is a bit worse.... apparently, when RabbitMQ
> restarts and recovers the persister -- even persistent messages marked
> 'ready' on OTHER durable queues are NOT retrievable by other STOMP
> clients.... I get the same type of error in the rabbit.log:
> 
> =ERROR REPORT==== 8-Aug-2009::04:21:16 ===
> STOMP Reply command unhandled: {'basic.deliver',
>                                    <<"Q_1.manager.workers">>,
>                                    1,
>                                    false,
>                                    <<"events">>,
>                                    <<"1.job.create.job.urls.job_alerts">>}

Right. I think I know what the problem is, and it is indeed a bug in the 
STOMP adapter which causes it to barf when attempting to deliver any 
message that was recovered from the persister.

> The unit test case for this would be:
> 1) Create a durable exchange
> 2) Create a durable queue
> 3) Bind the queue to the exchange
> 4) Make sure the queue has no consumers subscribed
> 5) Send a small (normal) persistent message to the queue
> 6) Crash RabbitMQ by sending a large message to a different, unrelated queue
> 7) Kill epmd
> 8) Restart RabbitMQ
> 9) Verify the (normal) message still exists via rabbitmqctl
> 10) Start STOMP consumer and attempt to subscribe to the queue
> 11) STOMP consumer waits, RabbitMQ generates the log message, but no
> persistent (normal) message gets delivered

You should be able to skip steps 6 and 7, i.e. just bounce rabbit 
normally, and still see the problem.

> I see the 'unacknowledged messages' after a start up the STOMP
> clients.

*phew*. That is much more plausible, and means there is unlikely to be a 
bug in the rabbit core.

> So, I'm thinking the order of operations is:
> 1) Unacknowledged messages exist on the queue
> 2) RabbitMQ dies
> 3) RabbitMQ starts up
> 4) Recovery mode starts, marks all un-ack'd messages as 'ready'
> 5) STOMP clients connect
> 6) RabbitMQ generates the STOMP error
> 7) I check the rabbitmqctl output, and see that there are un-ack'd messages
> 
> To be honest, I can't seem to replicate the issue where the STOMP
> clients disconnect and the messages remain 'un-ack'd' -- I'm thinking
> this error may be transient or somehow a wierd corner case.  If I ever
> encounter that scenario again, I'll be sure to save the mnesia
> directory at that point.

Makes sense. There may well be a delay between the error being generated 
and the messages being moved back into the 'ready' state, particularly, 
say, when rabbit is busy dumping a large error message to a log file.

> I don't have a pure AMQP test client, but I'm curious if this error
> condition exists if the large message were sent over AMQP instead of
> STOMP...

That we have definitely tested. And no, it doesn't cause an error.


So, in summary, I think you have managed to uncover three bugs in the 
STOMP adapter:

1) attempting to deliver messages recovered from the persister via STOMP 
causes an error

2) STOMP client disconnects can result in huge error messages being logged

3) sending large messages via STOMP causes rabbit to die


Thanks for your help in tracking down these problems.


I have one last request: Would it be possible for you to construct a 
simple test case for 3? Ideally I want something along the lines of "1) 
start a clean (i.e. no existing db) rabbit with stomp enabled, 2) run 
this program, 3) see rabbit die". Based on your investigation so far, 
the program in question could perhaps be as simple as creating a large 
message and then attempting to send it over STOMP.


Regards,

Matthias.



From darien at kindlund.com  Sat Aug  8 14:29:07 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Sat, 8 Aug 2009 09:29:07 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <4A7D462F.3020401@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
	<4A7D462F.3020401@lshift.net>
Message-ID: <E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>

Hi Matthias,

Okay, I'll try and develop a compact version of the perl test code  
that I've got. If, for some reason, the message content actually  
matters, then you'll have to let me know the best way for me to send  
you a 91MB test file.  If you guys have no preferred method, then I'll  
use my company's default method (not email).

You'll have the test code by Monday at the latest.

-- Darien

On Aug 8, 2009, at 5:32 AM, Matthias Radestock <matthias at lshift.net>  
wrote:

> Darien,
>
> Darien Kindlund wrote:
>> Actually, this problem is a bit worse.... apparently, when RabbitMQ
>> restarts and recovers the persister -- even persistent messages  
>> marked
>> 'ready' on OTHER durable queues are NOT retrievable by other STOMP
>> clients.... I get the same type of error in the rabbit.log:
>> =ERROR REPORT==== 8-Aug-2009::04:21:16 ===
>> STOMP Reply command unhandled: {'basic.deliver',
>>                                   <<"Q_1.manager.workers">>,
>>                                   1,
>>                                   false,
>>                                   <<"events">>,
>>                                    
>> <<"1.job.create.job.urls.job_alerts">>}
>
> Right. I think I know what the problem is, and it is indeed a bug in  
> the STOMP adapter which causes it to barf when attempting to deliver  
> any message that was recovered from the persister.
>
>> The unit test case for this would be:
>> 1) Create a durable exchange
>> 2) Create a durable queue
>> 3) Bind the queue to the exchange
>> 4) Make sure the queue has no consumers subscribed
>> 5) Send a small (normal) persistent message to the queue
>> 6) Crash RabbitMQ by sending a large message to a different,  
>> unrelated queue
>> 7) Kill epmd
>> 8) Restart RabbitMQ
>> 9) Verify the (normal) message still exists via rabbitmqctl
>> 10) Start STOMP consumer and attempt to subscribe to the queue
>> 11) STOMP consumer waits, RabbitMQ generates the log message, but no
>> persistent (normal) message gets delivered
>
> You should be able to skip steps 6 and 7, i.e. just bounce rabbit  
> normally, and still see the problem.
>
>> I see the 'unacknowledged messages' after a start up the STOMP
>> clients.
>
> *phew*. That is much more plausible, and means there is unlikely to  
> be a bug in the rabbit core.
>
>> So, I'm thinking the order of operations is:
>> 1) Unacknowledged messages exist on the queue
>> 2) RabbitMQ dies
>> 3) RabbitMQ starts up
>> 4) Recovery mode starts, marks all un-ack'd messages as 'ready'
>> 5) STOMP clients connect
>> 6) RabbitMQ generates the STOMP error
>> 7) I check the rabbitmqctl output, and see that there are un-ack'd  
>> messages
>> To be honest, I can't seem to replicate the issue where the STOMP
>> clients disconnect and the messages remain 'un-ack'd' -- I'm thinking
>> this error may be transient or somehow a wierd corner case.  If I  
>> ever
>> encounter that scenario again, I'll be sure to save the mnesia
>> directory at that point.
>
> Makes sense. There may well be a delay between the error being  
> generated and the messages being moved back into the 'ready' state,  
> particularly, say, when rabbit is busy dumping a large error message  
> to a log file.
>
>> I don't have a pure AMQP test client, but I'm curious if this error
>> condition exists if the large message were sent over AMQP instead of
>> STOMP...
>
> That we have definitely tested. And no, it doesn't cause an error.
>
>
> So, in summary, I think you have managed to uncover three bugs in  
> the STOMP adapter:
>
> 1) attempting to deliver messages recovered from the persister via  
> STOMP causes an error
>
> 2) STOMP client disconnects can result in huge error messages being  
> logged
>
> 3) sending large messages via STOMP causes rabbit to die
>
>
> Thanks for your help in tracking down these problems.
>
>
> I have one last request: Would it be possible for you to construct a  
> simple test case for 3? Ideally I want something along the lines of  
> "1) start a clean (i.e. no existing db) rabbit with stomp enabled,  
> 2) run this program, 3) see rabbit die". Based on your investigation  
> so far, the program in question could perhaps be as simple as  
> creating a large message and then attempting to send it over STOMP.
>
>
> Regards,
>
> Matthias.



From ben.browitt at gmail.com  Sat Aug  8 14:31:05 2009
From: ben.browitt at gmail.com (Ben Browitt)
Date: Sat, 8 Aug 2009 15:31:05 +0200
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <167204d20908070352g43e8e2efv732f664bdd398bb0@mail.gmail.com>
References: <b0200d7f0908060732i1e9ac3efg9ef4a83ed68e76f@mail.gmail.com>
	<167204d20908070352g43e8e2efv732f664bdd398bb0@mail.gmail.com>
Message-ID: <b0200d7f0908080631k199c3c08t91ea4a93b7fd2c83@mail.gmail.com>

On Fri, Aug 7, 2009 at 12:52 PM, Alexis Richardson <
alexis.richardson at gmail.com> wrote:

> Ben,
>
> Further to your email exchanges with Paul...
>
> On Thu, Aug 6, 2009 at 3:32 PM, Ben Browitt<ben.browitt at gmail.com> wrote:
> > Hi,
> >
> > I'm trying to understand how AMQP and RabbitMQ works by building a simple
> > chat.
>
> Cool :-)
>
>
> > From reading the AMQP specs I get the impression that it's best usage is
> > when someone publish content to an exchange
> > and someone else bind his queue to this exchange to get updates. This
> model
> > works very well for publish-subscribe
> > and to finance systems but chat could be different.
>
> I think chat is a very natural application of AMQP.  The benefit of
> using XMPP would be to integrate with existing chat infra in a
> standard way, but that does not prevent you from using an AMQP based
> implementation underneath.
>
> Do you want to do MUC or IM?


I'm not actually building it.
I keep hearing about AMQP and RabbitMQ so I read the spec and the server
docs.
I couldn't find use cases on the web so I thought I'll try to fit the
protocol to a fun application.


>
>
> In fact, you can use a single approach to both.
>
> One approach is to have one queue per consumer 'chat window' and one
> exchange per 'chat room'.  The queue is bound to the exchange when the
> user is in the chatroom.  Then, IM is a special case of MUC - it is a
> chatroom with two participants.
>
> Another approach would be to have one queue per consumer, and have
> that queue bound to the exchange(s) N times, where N is the number of
> chatrooms (or IMs) which the consumer is currently in.  In this
> approach, you will need to identify which message came from which
> room, before you show the messages to the user.  That's easy but it's
> extra work and data to carry around.
>

When a client sends a message to another client he usually doesn't create a
chatroom for two,
he just sends the message and the server routes it. With your suggestion the
server will create
the room if it doesn't exists when it needs to route a message.
When all the users leaves a MUC room if it is not persistent the server
destroys it.
What will be the case with a chatroom with two participants?
Maybe the server will destroy it when both users are offline?
Is there a way to destroy an exchange if it is not active for several
minutes to save memory?
Can you use a standard XMPP client with this setup?


>
> Let me know if you want more detail on either of the above, eg which
> exchange type to use.


I thought of a non durable exchange. One exchange per chatroom and one queue
per user.



>
>
>
> > I read the xmpp gateway
> > docs and have some questions.
> >
> > In a chat we want to be able to get presence from users on our
> friend-list,
> > send them messages
> > and send subscription request and messages to users not yet on our
> > friend-list.
>
> Do you only want to enable chat when both users are online and have a
> 'friend' relationship?
>
>
> > One possibility is that each user will have an exchange and a queue with
> > binding to his own exchange.
> > When user1 wants to send a message to user2 he send it directly to the
> > exchange of user2.
> > There is a problem with presence updates. If user1 changes his presence,
> > he'll have to sends the update
> > to the exchange of all the users on his friend-list. With this design we
> > move the logic to the client rather then use the AMQP features.
>
> One approach to presence is to broadcast changes using the pubsub
> system.  Changes could include:
>
> * User goes online / offline
> * User changes their 'status message'
>

All I know is that there are queues exchanges and bindings.
What do you mean by the pubsub system?


>
> > Another option is that when a user logs in he'll create a binding to the
> > exchanges of all the users on his friend-list.
>
> You can do this but it creates quite a lot of churn on the exchange
> layer.  Paul's suggestion is one way to prevent that.  Another is to
> use exchange-exchange bindings, which we are also looking at.
>

I meant to create bindings to all your online friends.
Can you explain how Paul's suggestion or exchange-exchange bindings solve or
improve it?

>
>
> > When user1 want to send a private message or a presence update to user2
> > he'll send it to his own exchange and it'll be directed to user2. The
> > problem with this design is that users without mutual presence
> subscription
> > can't send private message to each other and can't send subscription
> > requests.
>
> You can decouple presence, which is about status updates, from
> friendship.  If you like, you could have a set up where one user can
> DM another, provided they are mutual friends, regardless of who is
> online.  Do you want that?
>
> Subscription requests could also be implemented using a queue - one
> per user.  Whenever a new user wishes to request mutual friendship
> with user A, then user A could be notified of this via a queue.
>

In that case will the server send the friendship request directly to the
queue?
Do you need another queue per user just for friendship requests or can you
use the same queue from above?


>
>
>
>
> > Can you please share your thoughts on the two options and maybe other
> design
> > options?
>
> I've tried to shed some light on some of the issues above.  Feel free
> to elaborate on your needs and ask more questions.
>
> alexis
>
>
>
>
>
> > Thanks
> > _______________________________________________
> > rabbitmq-discuss mailing list
> > rabbitmq-discuss at lists.rabbitmq.com
> > http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
> >
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090808/6652a8b5/attachment.htm 

From darien at kindlund.com  Sun Aug  9 08:28:58 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Sun, 9 Aug 2009 03:28:58 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com> 
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com> 
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
Message-ID: <50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>

Hi Matthias,

> Okay, I'll try and develop a compact version of the perl test code that I've
> got. If, for some reason, the message content actually matters, then you'll
> have to let me know the best way for me to send you a 91MB test file. ?If
> you guys have no preferred method, then I'll use my company's default method
> (not email).

The perl code below will generate a ~96MB message and send it to
RabbitMQ via STOMP.  The exchange and destination need not even exist
on the server -- just as long as there's a valid vhost.  Once the
message is sent, RabbitMQ v1.6.0 will crash before the STOMP client
has a chance to even disconnect.

Please let me know if you're able to replicate the problem.  Once you
or Tony has an initial patch, I would recommend testing this code
against the following scenarios:

1) Sent to a non existent exchange
2) Sent to an existing exchange but with a non-existent destination (queue)
3) Sent to an existing exchange and existing non-durable queue
4) Sent to an existing exchange and existing durable queue

Repeat 1-4 with both persistent and non-persistent messages.

Thanks,
-- Darien

--- BEGIN CODE ---
#!/usr/bin/perl -w

use strict;
use warnings;

use Net::Stomp;

my $stomp = Net::Stomp->new({
                'hostname' => 'localhost',
                'port'     => '61613'
            });
$stomp->connect({
    'login'        => 'guest',
    'passcode'     => 'guest',
    'virtual-host' => '/',
});

$stomp->send({
    'exchange'      => 'foo',
    'delivery-mode' => 2,
    'destination'   => 'bar',
    'body'          => "a" x 100_000_000 . "\n",
});

$stomp->disconnect();
--- END CODE ---



From matthias at lshift.net  Sun Aug  9 09:58:18 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Sun, 09 Aug 2009 09:58:18 +0100
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<4A7D2CD0.9020305@lshift.net>	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
	<4A7D462F.3020401@lshift.net>	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
Message-ID: <4A7E8FAA.3030202@lshift.net>

Darien,

Darien Kindlund wrote:
> The perl code below will generate a ~96MB message and send it to
> RabbitMQ via STOMP.  The exchange and destination need not even exist
> on the server -- just as long as there's a valid vhost.  Once the
> message is sent, RabbitMQ v1.6.0 will crash before the STOMP client
> has a chance to even disconnect.

Thanks for the code. I can reproduce the problem, even for the minimal 
case of using the default exchange (thus ensuring no error occurs) and 
non-persistent messages, i.e.

$stomp->send({
      'destination'   => 'bar',
      'body'          => "a" x 100_000_000 . "\n",
  });

I reckon the cause is some inefficiency in the way we process stomp 
bodies, causing the server to allocate far more memory than it ought to.

Shouldn't be too hard to track down and fix. Will do so hopefully this week.

Thanks again for your detailed bug report and constructing such a simple 
test case. Saves us a lot of time.


Regards,

Matthias



From pekenney at gmail.com  Sun Aug  9 18:16:58 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Sun, 9 Aug 2009 10:16:58 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340908041423p59472e2q5fa25f4db267c199@mail.gmail.com>
	<4A798799.6060409@lshift.net>
	<f4d6a21a0908050626o350fe524keff8a719a93eb93b@mail.gmail.com>
	<4A798D03.4020801@imatix.com>
	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>
	<4A79C398.8060101@lshift.net>
	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
	<4A7A3276.9030002@lshift.net>
	<3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>
Message-ID: <3a5f03340908091016s42e48d79s6111e8002cd2433@mail.gmail.com>

still looking for further help on this one...

thanks in advance.

re:
the trace I have attached previously and again here is the output of the
following configured 4 trace listeners...
      System.Net
      System.Net.Sockets
      System.Net.Cache
      System.Net.HttpListener

The applicable configuration of which is depicted in the attached
tracelistenerconfig.txt file

the listener trace is showing the software aborted messages, that occur
concurrently with the message too long errors...

It appears the real error is occurring in the RabbitMq Client dll...

The error I am able to capture in debug mode from the rabbitmq client dll
is...
The AMQP operation was interrupted: AMQP close-reason, initiated by Library,
code=311, text="The body of a message (18446744073709551565 bytes) was too
long.", classId=0, methodId=0,
cause=RabbitMQ.Client.Impl.BodyTooLongException: The body of a message
(18446744073709551565 bytes) was too long.
   at RabbitMQ.Client.Impl.ContentHeaderBase.ReadFrom(Int32 channelNumber,
NetworkBinaryReader reader) in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\ContentHeaderBase.cs:line
23
   at RabbitMQ.Client.Impl.CommandAssembler.HandleFrame(Frame f) in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\CommandAssembler.cs:line
53
   at RabbitMQ.Client.Impl.Session.HandleFrame(Frame frame) in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\Session.cs:line
16
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line
434
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in
G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line
388

since the rabbitmq client dll is not returning the error the only thing I am
getting from my test consumer code previously posted is...

btnSubscribe_Click Error: Cannot access a disposed object.
Object name: 'System.Net.Sockets.NetworkStream'.

Which obviously comes much after the message too long error...

the message is "test message"

re:

On Wed, Aug 5, 2009 at 6:31 PM, Tony Garnock-Jones <tonyg at lshift.net> wrote:

> Patrick Kenney wrote:
>
>> fyi...the file does contain a failing situation...do a search of the log
>> text for "abort"
>>
>
> Yes, but it doesn't have any instances of the "The body of a message
> (18446744073709551575 bytes) was too long" error that we've been chasing. Do
> you have, or can you generate, any traces containing that particular
> problem?
>
> Regards,
>  Tony
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090809/e98f7abd/attachment.htm 
-------------- next part --------------
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::TcpClient(InterNetwork#2)
    DateTime=2009-08-06T02:33:43.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Socket(InterNetwork#2)
    DateTime=2009-08-06T02:33:43.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Socket() 
    DateTime=2009-08-06T02:33:43.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::TcpClient() 
    DateTime=2009-08-06T02:33:43.5156250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::TcpClient()
    DateTime=2009-08-06T02:33:43.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::TcpClient() 
    DateTime=2009-08-06T02:33:43.5312500Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::Connect(localhost)
    DateTime=2009-08-06T02:33:43.5312500Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostAddresses(localhost)
    DateTime=2009-08-06T02:33:43.5468750Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostByName(localhost)
    DateTime=2009-08-06T02:33:43.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostByName() 	-> IPHostEntry#3888474
    DateTime=2009-08-06T02:33:43.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostAddresses() 	-> IPAddress[]#25209742
    DateTime=2009-08-06T02:33:43.6093750Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:33:43.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:33:43.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Connect() 
    DateTime=2009-08-06T02:33:43.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::Connect() 
    DateTime=2009-08-06T02:33:43.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::Connect() 
    DateTime=2009-08-06T02:33:43.6562500Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#2637164::GetStream()
    DateTime=2009-08-06T02:33:43.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#2637164::GetStream() 	-> NetworkStream#26966483
    DateTime=2009-08-06T02:33:43.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:43.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 41 4D 51 50                                     : AMQP
    DateTime=2009-08-06T02:33:43.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 4#4
    DateTime=2009-08-06T02:33:43.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:43.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:43.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:43.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:43.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:43.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:43.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:43.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:43.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:43.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:43.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:44.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:44.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:44.0312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:44.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:44.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.0625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:44.0625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 01 20                                     : ... 
    DateTime=2009-08-06T02:33:44.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:44.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:44.0937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 0A 00 0A 08 00 00 00-00 FB 07 70 72 6F 64 75 : ...........produ
    DateTime=2009-08-06T02:33:44.0937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 63 74 53 00 00 00 08 52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
    DateTime=2009-08-06T02:33:44.1093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 76 65 72 73 69 6F 6E 53-00 00 00 05 31 2E 36 2E : versionS....1.6.
    DateTime=2009-08-06T02:33:44.1093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 0A 45 : 0.platformS....E
    DateTime=2009-08-06T02:33:44.1250000Z
System.Net.Sockets Verbose: 0 : [2660] 00000040 : 72 6C 61 6E 67 2F 4F 54-50 09 63 6F 70 79 72 69 : rlang/OTP.copyri
    DateTime=2009-08-06T02:33:44.1406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000050 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:33:44.1406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000060 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 39 20 : t (C) 2007-2009 
    DateTime=2009-08-06T02:33:44.1406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000070 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:33:44.1562500Z
System.Net.Sockets Verbose: 0 : [2660] 00000080 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:33:44.1718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000090 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:33:44.1718750Z
System.Net.Sockets Verbose: 0 : [2660] 000000A0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:33:44.1718750Z
System.Net.Sockets Verbose: 0 : [2660] 000000B0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 0B : chnologies Ltd..
    DateTime=2009-08-06T02:33:44.1875000Z
System.Net.Sockets Verbose: 0 : [2660] 000000C0 : 69 6E 66 6F 72 6D 61 74-69 6F 6E 53 00 00 00 35 : informationS...5
    DateTime=2009-08-06T02:33:44.1875000Z
System.Net.Sockets Verbose: 0 : [2660] 000000D0 : 4C 69 63 65 6E 73 65 64-20 75 6E 64 65 72 20 74 : Licensed under t
    DateTime=2009-08-06T02:33:44.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 000000E0 : 68 65 20 4D 50 4C 2E 20-20 53 65 65 20 68 74 74 : he MPL.  See htt
    DateTime=2009-08-06T02:33:44.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 000000F0 : 70 3A 2F 2F 77 77 77 2E-72 61 62 62 69 74 6D 71 : p://www.rabbitmq
    DateTime=2009-08-06T02:33:44.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000100 : 2E 63 6F 6D 2F 00 00 00-0E 50 4C 41 49 4E 20 41 : .com/....PLAIN A
    DateTime=2009-08-06T02:33:44.2187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000110 : 4D 51 50 4C 41 49 4E 00-00 00 05 65 6E 5F 55 53 : MQPLAIN....en_US
    DateTime=2009-08-06T02:33:44.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 288#288
    DateTime=2009-08-06T02:33:44.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:44.2343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:44.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:44.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:44.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:44.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:44.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:44.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:44.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:44.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:44.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 1B                                              : .
    DateTime=2009-08-06T02:33:44.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:44.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:44.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:44.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 0B 00 00 00 F7-07 70 72 6F 64 75 63 74 : .........product
    DateTime=2009-08-06T02:33:44.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 53 00 00 00 08 52 61 62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
    DateTime=2009-08-06T02:33:44.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 72 73 69 6F 6E 53 00 00-00 07 31 2E 36 2E 30 2E : rsionS....1.6.0.
    DateTime=2009-08-06T02:33:44.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
    DateTime=2009-08-06T02:33:44.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 4E 45 54 0B 69 6E 66 6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
    DateTime=2009-08-06T02:33:44.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 00 00 00 35 4C 69 63 65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
    DateTime=2009-08-06T02:33:44.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 65 72 20 74 68 65 20 4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
    DateTime=2009-08-06T02:33:44.6562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 20 68 74 74 70 3A 2F 2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
    DateTime=2009-08-06T02:33:44.6562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 69 74 6D 71 2E 63 6F 6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
    DateTime=2009-08-06T02:33:44.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:33:44.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008 
    DateTime=2009-08-06T02:33:44.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:33:44.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:33:45.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:33:45.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:33:45.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
    DateTime=2009-08-06T02:33:45.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 50 4C 41 49 4E 00 00 00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
    DateTime=2009-08-06T02:33:45.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 67 75 65 73 74 05 65 6E-5F 55 53                : guest.en_US
    DateTime=2009-08-06T02:33:45.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 283#283
    DateTime=2009-08-06T02:33:45.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.1562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.1875000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 0C                                     : ....
    DateTime=2009-08-06T02:33:45.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:45.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.2187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 0A 00 1E 00 00 00 02-00 00 00 00             : ............
    DateTime=2009-08-06T02:33:45.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 12#12
    DateTime=2009-08-06T02:33:45.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.2343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:45.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:45.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 1F 00 00 00 02-00 00 00 03             : ............
    DateTime=2009-08-06T02:33:45.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 12#12
    DateTime=2009-08-06T02:33:45.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:45.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.5625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:45.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:45.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 28 01 2F 00 01-                        : ...(./..
    DateTime=2009-08-06T02:33:45.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 8#8
    DateTime=2009-08-06T02:33:45.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:45.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:45.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:45.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:45.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:45.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 17                                     : ....
    DateTime=2009-08-06T02:33:45.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:45.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 0A 00 29 12 50 61 74-72 69 63 6B 4B 65 6E 6E : ...).PatrickKenn
    DateTime=2009-08-06T02:33:45.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 65 79 3A 35 36 37 32                            : ey:5672
    DateTime=2009-08-06T02:33:45.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 23#23
    DateTime=2009-08-06T02:33:45.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:45.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:45.9687500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:45.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:45.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.0781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:33:46.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:33:46.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 5#5
    DateTime=2009-08-06T02:33:46.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:46.2187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:46.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:46.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:46.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2500000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:46.2656250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:46.2656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.2656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2656250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:33:46.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:46.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.2812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:46.2968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:46.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.3437500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:33:46.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:46.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:33:46.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:33:46.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 5#5
    DateTime=2009-08-06T02:33:46.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:46.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:46.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:46.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:46.5312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:46.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:46.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:33:46.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:46.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.5468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:46.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:46.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.5625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:33:46.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:46.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:46.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:46.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:46.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:46.6406250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.3437500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.3593750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.3593750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.3750000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.3750000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.4062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.4062500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.4375000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.4531250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.4843750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.5000000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.5156250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.5156250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.5156250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.5312500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.5312500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.5468750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.5468750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.5625000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.5625000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.5781250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.5781250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.5937500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.5937500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:33:47.5937500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.6250000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 32 00 0A 00 00 00 0C-00 00 00 00             : .2..........
    DateTime=2009-08-06T02:33:47.6718750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 12#12
    DateTime=2009-08-06T02:33:47.6875000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:47.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:47.7343750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.7343750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:47.7500000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:47.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 2D                                     : ...-
    DateTime=2009-08-06T02:33:47.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:47.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 32 00 0B 20 61 6D 71-2E 67 65 6E 2D 4D 64 4A : .2.. amq.gen-MdJ
    DateTime=2009-08-06T02:33:47.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 6D 6C 30 69 58 6A 6F 69-6A 52 63 6B 45 76 4D 4C : ml0iXjoijRckEvML
    DateTime=2009-08-06T02:33:47.8281250Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 45 71 51 3D 3D 00 00 00-00 00 00 00 00          : EqQ==........
    DateTime=2009-08-06T02:33:47.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 45#45
    DateTime=2009-08-06T02:33:47.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:47.8437500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:47.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:47.8593750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.8906250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:47.9062500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.9218750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.9218750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.9218750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.9375000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.9531250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.9531250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:47.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:47.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:47.9843750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:47.9843750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:47.9843750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.0000000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.0000000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.0156250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.0156250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.0312500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.0468750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.0468750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.0781250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.0937500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 39                                              : 9
    DateTime=2009-08-06T02:33:48.1562500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.1875000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.2500000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.2812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 32 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 4D : .2.... amq.gen-M
    DateTime=2009-08-06T02:33:48.3750000Z
System.Net.Sockets Verbose: 0 : [2016] 00000010 : 64 4A 6D 6C 30 69 58 6A-6F 69 6A 52 63 6B 45 76 : dJml0iXjoijRckEv
    DateTime=2009-08-06T02:33:48.4062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000020 : 4D 4C 45 71 51 3D 3D 00-0B 2F 64 69 73 70 61 74 : MLEqQ==../dispat
    DateTime=2009-08-06T02:33:48.4062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000030 : 63 68 65 72 00 00 00 00-00                      : cher.....
    DateTime=2009-08-06T02:33:48.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 57#57
    DateTime=2009-08-06T02:33:48.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.4375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.4375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:48.4531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:48.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.4843750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.4843750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:48.5000000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.5156250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:48.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:48.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:48.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:48.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.5625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 32 00 15                                     : .2..
    DateTime=2009-08-06T02:33:48.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:48.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.5937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:48.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:48.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.6250000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.6406250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:48.6562500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.6875000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.6875000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.7031250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.7187500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.7187500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.7343750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:48.7343750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.7500000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.7500000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.7656250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.7656250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.7812500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.7812500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.8125000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.8125000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:48.8281250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.8281250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.8437500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.8437500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 29                                              : )
    DateTime=2009-08-06T02:33:48.8593750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 3C 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 4D : .<.... amq.gen-M
    DateTime=2009-08-06T02:33:48.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000010 : 64 4A 6D 6C 30 69 58 6A-6F 69 6A 52 63 6B 45 76 : dJml0iXjoijRckEv
    DateTime=2009-08-06T02:33:48.9062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000020 : 4D 4C 45 71 51 3D 3D 00-00                      : MLEqQ==..
    DateTime=2009-08-06T02:33:48.9062500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 41#41
    DateTime=2009-08-06T02:33:48.9218750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:48.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:48.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:48.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:48.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:48.9531250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:48.9687500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:48.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:48.9843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:48.9843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:49.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:49.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:49.0156250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 26                                     : ...&
    DateTime=2009-08-06T02:33:49.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:49.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:49.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:49.0468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 15 21 61 6D 71-2E 63 74 61 67 2D 38 56 : .<..!amq.ctag-8V
    DateTime=2009-08-06T02:33:49.0468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 61 4D 6F 41 4C 74 73 47-2F 59 6D 71 2F 49 2B 57 : aMoALtsG/Ymq/I+W
    DateTime=2009-08-06T02:33:49.0625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 56 48 4F 77 3D 3D                               : VHOw==
    DateTime=2009-08-06T02:33:49.0625000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 38#38
    DateTime=2009-08-06T02:33:49.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:49.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:49.0937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:49.0937500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:49.1093750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:49.1875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.5468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:51.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:51.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:51.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:51.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:33:51.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:51.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.6406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:51.6406250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:33:51.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:51.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:51.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:51.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:51.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:51.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.0000000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:52.0156250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.0156250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.0312500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.0312500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.0468750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.0781250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.0781250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.0937500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.1250000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.1406250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.1562500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.1875000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.2343750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.2812500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.3125000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.3593750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.3750000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:52.3906250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.4218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:52.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:33:52.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:52.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:52.4531250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:52.4531250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:52.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:54.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:54.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:54.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:54.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.6406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:33:54.6406250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:54.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:54.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:33:54.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:54.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:54.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:54.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:54.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.4843750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:55.4843750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.5156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.5468750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.5781250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.5937500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.5937500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.6093750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.6093750Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::TcpClient(InterNetwork#2)
    DateTime=2009-08-06T02:33:55.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Socket(InterNetwork#2)
    DateTime=2009-08-06T02:33:55.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Socket() 
    DateTime=2009-08-06T02:33:55.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::TcpClient() 
    DateTime=2009-08-06T02:33:55.6406250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::TcpClient()
    DateTime=2009-08-06T02:33:55.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::TcpClient() 
    DateTime=2009-08-06T02:33:55.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.6875000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.7187500Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::Connect(localhost)
    DateTime=2009-08-06T02:33:55.7187500Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostAddresses(localhost)
    DateTime=2009-08-06T02:33:55.7343750Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostByName(localhost)
    DateTime=2009-08-06T02:33:55.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostByName() 	-> IPHostEntry#65326725
    DateTime=2009-08-06T02:33:55.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostAddresses() 	-> IPAddress[]#61150033
    DateTime=2009-08-06T02:33:55.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.7656250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.7968750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.7968750Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:33:55.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:33:55.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Connect() 
    DateTime=2009-08-06T02:33:55.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::Connect() 
    DateTime=2009-08-06T02:33:55.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::Connect() 
    DateTime=2009-08-06T02:33:55.8437500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:55.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.8750000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:55.8906250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#32176063::GetStream()
    DateTime=2009-08-06T02:33:55.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#32176063::GetStream() 	-> NetworkStream#24123405
    DateTime=2009-08-06T02:33:55.9062500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:33:55.9062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:55.9218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:55.9218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:55.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:55.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:55.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:55.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:55.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 41 4D 51 50                                     : AMQP
    DateTime=2009-08-06T02:33:55.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 4#4
    DateTime=2009-08-06T02:33:56.0000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:56.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.2031250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.2343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:56.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:56.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:56.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.4062500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.4218750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 01 20                                     : ... 
    DateTime=2009-08-06T02:33:56.4218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:56.4218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.4531250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 0A 00 0A 08 00 00 00-00 FB 07 70 72 6F 64 75 : ...........produ
    DateTime=2009-08-06T02:33:56.4531250Z
System.Net.Sockets Verbose: 0 : [2148] 00000010 : 63 74 53 00 00 00 08 52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
    DateTime=2009-08-06T02:33:56.4687500Z
System.Net.Sockets Verbose: 0 : [2148] 00000020 : 76 65 72 73 69 6F 6E 53-00 00 00 05 31 2E 36 2E : versionS....1.6.
    DateTime=2009-08-06T02:33:56.4687500Z
System.Net.Sockets Verbose: 0 : [2148] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 0A 45 : 0.platformS....E
    DateTime=2009-08-06T02:33:56.4843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000040 : 72 6C 61 6E 67 2F 4F 54-50 09 63 6F 70 79 72 69 : rlang/OTP.copyri
    DateTime=2009-08-06T02:33:56.4843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000050 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:33:56.4843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000060 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 39 20 : t (C) 2007-2009 
    DateTime=2009-08-06T02:33:56.5000000Z
System.Net.Sockets Verbose: 0 : [2148] 00000070 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:33:56.5156250Z
System.Net.Sockets Verbose: 0 : [2148] 00000080 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:33:56.5156250Z
System.Net.Sockets Verbose: 0 : [2148] 00000090 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:33:56.5312500Z
System.Net.Sockets Verbose: 0 : [2148] 000000A0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:33:56.5312500Z
System.Net.Sockets Verbose: 0 : [2148] 000000B0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 0B : chnologies Ltd..
    DateTime=2009-08-06T02:33:56.5468750Z
System.Net.Sockets Verbose: 0 : [2148] 000000C0 : 69 6E 66 6F 72 6D 61 74-69 6F 6E 53 00 00 00 35 : informationS...5
    DateTime=2009-08-06T02:33:56.5468750Z
System.Net.Sockets Verbose: 0 : [2148] 000000D0 : 4C 69 63 65 6E 73 65 64-20 75 6E 64 65 72 20 74 : Licensed under t
    DateTime=2009-08-06T02:33:56.5625000Z
System.Net.Sockets Verbose: 0 : [2148] 000000E0 : 68 65 20 4D 50 4C 2E 20-20 53 65 65 20 68 74 74 : he MPL.  See htt
    DateTime=2009-08-06T02:33:56.5625000Z
System.Net.Sockets Verbose: 0 : [2148] 000000F0 : 70 3A 2F 2F 77 77 77 2E-72 61 62 62 69 74 6D 71 : p://www.rabbitmq
    DateTime=2009-08-06T02:33:56.5781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000100 : 2E 63 6F 6D 2F 00 00 00-0E 50 4C 41 49 4E 20 41 : .com/....PLAIN A
    DateTime=2009-08-06T02:33:56.5781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000110 : 4D 51 50 4C 41 49 4E 00-00 00 05 65 6E 5F 55 53 : MQPLAIN....en_US
    DateTime=2009-08-06T02:33:56.5937500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 288#288
    DateTime=2009-08-06T02:33:56.5937500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:56.6093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:56.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:56.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:56.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.7187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:56.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:56.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 1B                                              : .
    DateTime=2009-08-06T02:33:56.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:56.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:56.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:56.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 0B 00 00 00 F7-07 70 72 6F 64 75 63 74 : .........product
    DateTime=2009-08-06T02:33:56.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 53 00 00 00 08 52 61 62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
    DateTime=2009-08-06T02:33:56.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 72 73 69 6F 6E 53 00 00-00 07 31 2E 36 2E 30 2E : rsionS....1.6.0.
    DateTime=2009-08-06T02:33:56.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
    DateTime=2009-08-06T02:33:56.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 4E 45 54 0B 69 6E 66 6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
    DateTime=2009-08-06T02:33:56.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 00 00 00 35 4C 69 63 65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
    DateTime=2009-08-06T02:33:56.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 65 72 20 74 68 65 20 4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
    DateTime=2009-08-06T02:33:56.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 20 68 74 74 70 3A 2F 2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
    DateTime=2009-08-06T02:33:56.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 69 74 6D 71 2E 63 6F 6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
    DateTime=2009-08-06T02:33:56.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:33:56.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008 
    DateTime=2009-08-06T02:33:56.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:33:56.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:33:56.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:33:57.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:33:57.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
    DateTime=2009-08-06T02:33:57.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 50 4C 41 49 4E 00 00 00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
    DateTime=2009-08-06T02:33:57.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 67 75 65 73 74 05 65 6E-5F 55 53                : guest.en_US
    DateTime=2009-08-06T02:33:57.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 283#283
    DateTime=2009-08-06T02:33:57.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.0468750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:57.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:57.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.1093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:57.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:57.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.1406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 0C                                     : ....
    DateTime=2009-08-06T02:33:57.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:57.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.1718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 0A 00 1E 00 00 00 02-00 00 00 00             : ............
    DateTime=2009-08-06T02:33:57.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 12#12
    DateTime=2009-08-06T02:33:57.1875000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.1875000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.2031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:57.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:57.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:57.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.2812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.3125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:33:57.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 1F 00 00 00 02-00 00 00 03             : ............
    DateTime=2009-08-06T02:33:57.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 12#12
    DateTime=2009-08-06T02:33:57.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:57.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.6562500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:57.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:57.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:57.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.7187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.7500000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:57.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:57.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:57.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:33:57.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:57.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:57.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:57.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:57.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:57.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:33:57.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 28 01 2F 00 01-                        : ...(./..
    DateTime=2009-08-06T02:33:57.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 8#8
    DateTime=2009-08-06T02:33:57.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:57.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:57.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:33:57.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.9531250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:57.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:57.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:57.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:57.9843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:33:58.0000000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.0312500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:33:58.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:58.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.0625000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 17                                     : ....
    DateTime=2009-08-06T02:33:58.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:58.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.0937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 0A 00 29 12 50 61 74-72 69 63 6B 4B 65 6E 6E : ...).PatrickKenn
    DateTime=2009-08-06T02:33:58.1093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000010 : 65 79 3A 35 36 37 32                            : ey:5672
    DateTime=2009-08-06T02:33:58.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 23#23
    DateTime=2009-08-06T02:33:58.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.1406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:58.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.2187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.3125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:33:58.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:33:58.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 5#5
    DateTime=2009-08-06T02:33:58.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.5000000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.5156250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.5312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:58.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.5468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.5625000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:33:58.5625000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:58.5781250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.5781250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.5937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:58.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:58.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.6250000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:33:58.6406250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:58.6406250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.6562500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:58.6718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:58.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:58.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:58.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.7343750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:58.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:33:58.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:58.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:33:58.9375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:58.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:58.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:58.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:33:58.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:58.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.0000000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:33:59.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 5#5
    DateTime=2009-08-06T02:33:59.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.0468750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:59.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.0781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:59.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:59.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.1093750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.1250000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.1562500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.1718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:33:59.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:33:59.1875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.2187500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.2343750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.2343750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.2500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:33:59.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.2812500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.2968750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.2968750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:59.3125000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.3125000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.3281250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:33:59.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.3437500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.3593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.3593750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.3750000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:33:59.3750000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:33:59.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.4218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.4375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:59.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:33:59.4531250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:33:59.4843750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:33:59.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:33:59.5156250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.5312500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:59.5468750Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:33:59.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:33:59.5781250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:33:59.5937500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.5937500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.6250000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.6562500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.7031250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.7187500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.7500000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.7500000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:33:59.7656250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.7968750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.8437500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.8593750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.8750000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.8906250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.8906250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.9062500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.9062500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.9218750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.9218750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.9375000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:33:59.9531250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:33:59.9531250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:33:59.9687500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:33:59.9687500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:33:59.9843750Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.0000000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.0000000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.0156250Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00 32 00 0A 00 00 00 0C-00 00 00 00             : .2..........
    DateTime=2009-08-06T02:34:00.0156250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 12#12
    DateTime=2009-08-06T02:34:00.0312500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.0312500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.0468750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:00.0625000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.0781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:00.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:00.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.1093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:00.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:00.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.1562500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 2D                                     : ...-
    DateTime=2009-08-06T02:34:00.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:00.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.1875000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 32 00 0B 20 61 6D 71-2E 67 65 6E 2D 72 37 6C : .2.. amq.gen-r7l
    DateTime=2009-08-06T02:34:00.1875000Z
System.Net.Sockets Verbose: 0 : [2148] 00000010 : 69 42 75 50 4C 55 45 7A-4C 55 50 79 68 6B 6A 5A : iBuPLUEzLUPyhkjZ
    DateTime=2009-08-06T02:34:00.2031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000020 : 69 68 67 3D 3D 00 00 00-00 00 00 00 00          : ihg==........
    DateTime=2009-08-06T02:34:00.2031250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 45#45
    DateTime=2009-08-06T02:34:00.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.2343750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.2343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:00.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:00.2500000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.2656250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.2812500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:00.2812500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.2968750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.3125000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.3281250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.3281250Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:00.3437500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.3437500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.3593750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.3593750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:00.3750000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.3750000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.3906250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.4062500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:00.4062500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.4218750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.4375000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.4375000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:00.4531250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.4531250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.4687500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.4687500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:00.4843750Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.4843750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.5000000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.5156250Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 39                                              : 9
    DateTime=2009-08-06T02:34:00.5156250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.5312500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.5468750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.5468750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00 32 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 72 : .2.... amq.gen-r
    DateTime=2009-08-06T02:34:00.5625000Z
System.Net.Sockets Verbose: 0 : [2364] 00000010 : 37 6C 69 42 75 50 4C 55-45 7A 4C 55 50 79 68 6B : 7liBuPLUEzLUPyhk
    DateTime=2009-08-06T02:34:00.5781250Z
System.Net.Sockets Verbose: 0 : [2364] 00000020 : 6A 5A 69 68 67 3D 3D 00-0B 2F 73 75 62 73 63 72 : jZihg==../subscr
    DateTime=2009-08-06T02:34:00.5781250Z
System.Net.Sockets Verbose: 0 : [2364] 00000030 : 69 62 65 72 00 00 00 00-00                      : iber.....
    DateTime=2009-08-06T02:34:00.5937500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 57#57
    DateTime=2009-08-06T02:34:00.5937500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:00.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.6093750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:00.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:00.6406250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:00.6562500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:00.6562500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:00.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.6875000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:00.7031250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:00.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:00.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:00.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:00.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.7968750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:34:00.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:00.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:00.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:00.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:00.8593750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.8593750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:00.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:00.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:00.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.9062500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 32 00 15                                     : .2..
    DateTime=2009-08-06T02:34:00.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:00.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:00.9375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:00.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:00.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:00.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:00.9687500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:00.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:00.9843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:01.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:01.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:01.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:01.0468750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.0468750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.0625000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:01.0781250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.0937500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.0937500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.1250000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:01.1406250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.1875000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.2031250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.2343750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:01.2500000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.2656250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.2968750Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.3125000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:01.3593750Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.3906250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.3906250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.4062500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:01.4062500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.4218750Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.4375000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.4375000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:01.4531250Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.4687500Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.4687500Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.4843750Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 29                                              : )
    DateTime=2009-08-06T02:34:01.5000000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.5156250Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.5156250Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.5312500Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : 00 3C 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 72 : .<.... amq.gen-r
    DateTime=2009-08-06T02:34:01.5312500Z
System.Net.Sockets Verbose: 0 : [2364] 00000010 : 37 6C 69 42 75 50 4C 55-45 7A 4C 55 50 79 68 6B : 7liBuPLUEzLUPyhk
    DateTime=2009-08-06T02:34:01.5468750Z
System.Net.Sockets Verbose: 0 : [2364] 00000020 : 6A 5A 69 68 67 3D 3D 00-00                      : jZihg==..
    DateTime=2009-08-06T02:34:01.5625000Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 41#41
    DateTime=2009-08-06T02:34:01.5625000Z
System.Net.Sockets Verbose: 0 : [2364] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:01.5781250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.5781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:01.5937500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:01.5937500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.6250000Z
System.Net.Sockets Verbose: 0 : [2364] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:01.6250000Z
System.Net.Sockets Verbose: 0 : [2364] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:01.6562500Z
System.Net.Sockets Verbose: 0 : [2364] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:01.6718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:01.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:01.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.7031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 26                                     : ...&
    DateTime=2009-08-06T02:34:01.7187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:01.7187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.7343750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.7343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 3C 00 15 21 61 6D 71-2E 63 74 61 67 2D 42 64 : .<..!amq.ctag-Bd
    DateTime=2009-08-06T02:34:01.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000010 : 74 73 61 62 77 30 51 73-58 35 38 75 50 4E 46 6A : tsabw0QsX58uPNFj
    DateTime=2009-08-06T02:34:01.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000020 : 41 2F 43 51 3D 3D                               : A/CQ==
    DateTime=2009-08-06T02:34:01.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 38#38
    DateTime=2009-08-06T02:34:01.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:01.7968750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:01.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:01.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:01.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.6093750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.6093750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:02.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.6406250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.6562500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.7187500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.7812500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.7968750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.8125000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.8281250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.8437500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.8750000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.8906250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.9062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.9062500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.9218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:02.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:02.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:02.9531250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:02.9531250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:02.9687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:02.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:03.0156250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:03.0156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:03.0312500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:03.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:03.6406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:03.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:03.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:03.7031250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:03.7343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:03.8281250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:03.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:03.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:03.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:03.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:03.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:03.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:03.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:03.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:04.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:04.0156250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:04.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:04.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:04.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:04.0781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:04.0781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:04.0937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:04.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:04.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:04.2343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:04.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:04.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:04.2656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:04.2812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:04.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:04.3593750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:04.3750000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:04.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:04.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:04.5156250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:04.5156250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:04.5312500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:04.5312500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:04.5468750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:04.5468750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.6875000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.6875000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:04.7031250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.7031250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.7187500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.7343750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.7500000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.7656250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.7656250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.8125000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.8125000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.8437500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.8750000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.8906250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.9218750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:04.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:04.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.9531250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.9531250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:04.9687500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:04.9687500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:04.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:04.9843750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:05.0000000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:05.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.0625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.1093750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:06.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.1562500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.1718750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.2031250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.2343750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.2812500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.3125000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.3437500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.3593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.3593750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.3906250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.4218750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.4531250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.4687500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:06.4843750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.4843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.5156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:06.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:06.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:06.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:06.5468750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:06.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:06.5625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.5937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:06.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:06.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.6406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:06.6406250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:06.6562500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.6718750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.6718750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:06.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:06.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.7031250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.7187500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:06.7187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:06.7343750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:06.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:06.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:06.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:06.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:06.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.8281250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:06.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:06.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:06.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:06.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:06.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:06.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:06.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:06.9531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:06.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:06.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:06.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.0312500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.0468750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:08.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.1093750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.1406250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.1718750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.1718750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.1875000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.2187500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.2656250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.2812500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.3125000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.3281250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.3437500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.3437500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.3593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.3750000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.3906250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.3906250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.4062500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.4375000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.4531250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:08.4531250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.4843750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:08.4843750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:08.5000000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:08.5156250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:08.5156250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:08.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:08.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.5781250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.5937500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:09.5937500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.6093750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.6093750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.6250000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.6406250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.6718750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.7031250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.7343750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.7343750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.7500000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:09.7656250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:09.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:09.7968750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:09.8125000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.8125000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:09.8437500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:09.8437500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:09.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:09.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:09.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:09.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:09.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:09.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:09.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:09.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:09.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:09.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:09.9531250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:09.9687500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:09.9687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:09.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:09.9843750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:10.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:10.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:10.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:10.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:10.0468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:10.0625000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:10.0781250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:10.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:10.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:10.1875000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:10.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:10.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:10.2968750Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::TcpClient(InterNetwork#2)
    DateTime=2009-08-06T02:34:10.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Socket(InterNetwork#2)
    DateTime=2009-08-06T02:34:10.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Socket() 
    DateTime=2009-08-06T02:34:10.3750000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:10.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:10.3906250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.4062500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:10.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:10.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::TcpClient() 
    DateTime=2009-08-06T02:34:10.4375000Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::TcpClient()
    DateTime=2009-08-06T02:34:10.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::TcpClient() 
    DateTime=2009-08-06T02:34:10.4531250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::Connect(localhost)
    DateTime=2009-08-06T02:34:10.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:10.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:10.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:10.5156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:10.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:10.5312500Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostAddresses(localhost)
    DateTime=2009-08-06T02:34:10.5468750Z
System.Net.Sockets Verbose: 0 : [2932] DNS::GetHostByName(localhost)
    DateTime=2009-08-06T02:34:10.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostByName() 	-> IPHostEntry#9035653
    DateTime=2009-08-06T02:34:10.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting DNS::GetHostAddresses() 	-> IPAddress[]#34917486
    DateTime=2009-08-06T02:34:10.5781250Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:34:10.5937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:10.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:10.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:10.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:10.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:10.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Connect(1:5672#16782935)
    DateTime=2009-08-06T02:34:10.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Connect() 
    DateTime=2009-08-06T02:34:10.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::Connect() 
    DateTime=2009-08-06T02:34:10.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::Connect() 
    DateTime=2009-08-06T02:34:10.6875000Z
System.Net.Sockets Verbose: 0 : [2932] TcpClient#17690816::GetStream()
    DateTime=2009-08-06T02:34:10.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting TcpClient#17690816::GetStream() 	-> NetworkStream#22330821
    DateTime=2009-08-06T02:34:10.7031250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:10.7187500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:10.7343750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:10.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:10.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 41 4D 51 50                                     : AMQP
    DateTime=2009-08-06T02:34:10.7812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 4#4
    DateTime=2009-08-06T02:34:10.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:10.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:10.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:10.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:10.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:10.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:10.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:10.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:10.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:10.9375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:10.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:10.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:10.9687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:10.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:10.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.0000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:11.0468750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:11.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:11.0625000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.0781250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:11.0781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 01 20                                     : ... 
    DateTime=2009-08-06T02:34:11.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:11.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.1093750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:11.1250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 0A 00 0A 08 00 00 00-00 FB 07 70 72 6F 64 75 : ...........produ
    DateTime=2009-08-06T02:34:11.1250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 63 74 53 00 00 00 08 52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
    DateTime=2009-08-06T02:34:11.1406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 76 65 72 73 69 6F 6E 53-00 00 00 05 31 2E 36 2E : versionS....1.6.
    DateTime=2009-08-06T02:34:11.1562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 0A 45 : 0.platformS....E
    DateTime=2009-08-06T02:34:11.1562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000040 : 72 6C 61 6E 67 2F 4F 54-50 09 63 6F 70 79 72 69 : rlang/OTP.copyri
    DateTime=2009-08-06T02:34:11.1718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000050 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:34:11.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000060 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 39 20 : t (C) 2007-2009 
    DateTime=2009-08-06T02:34:11.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000070 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:34:11.2031250Z
System.Net.Sockets Verbose: 0 : [2760] 00000080 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:34:11.2187500Z
System.Net.Sockets Verbose: 0 : [2760] 00000090 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:34:11.2187500Z
System.Net.Sockets Verbose: 0 : [2760] 000000A0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:34:11.2343750Z
System.Net.Sockets Verbose: 0 : [2760] 000000B0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 0B : chnologies Ltd..
    DateTime=2009-08-06T02:34:11.2500000Z
System.Net.Sockets Verbose: 0 : [2760] 000000C0 : 69 6E 66 6F 72 6D 61 74-69 6F 6E 53 00 00 00 35 : informationS...5
    DateTime=2009-08-06T02:34:11.2500000Z
System.Net.Sockets Verbose: 0 : [2760] 000000D0 : 4C 69 63 65 6E 73 65 64-20 75 6E 64 65 72 20 74 : Licensed under t
    DateTime=2009-08-06T02:34:11.2656250Z
System.Net.Sockets Verbose: 0 : [2760] 000000E0 : 68 65 20 4D 50 4C 2E 20-20 53 65 65 20 68 74 74 : he MPL.  See htt
    DateTime=2009-08-06T02:34:11.2656250Z
System.Net.Sockets Verbose: 0 : [2760] 000000F0 : 70 3A 2F 2F 77 77 77 2E-72 61 62 62 69 74 6D 71 : p://www.rabbitmq
    DateTime=2009-08-06T02:34:11.2812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000100 : 2E 63 6F 6D 2F 00 00 00-0E 50 4C 41 49 4E 20 41 : .com/....PLAIN A
    DateTime=2009-08-06T02:34:11.2968750Z
System.Net.Sockets Verbose: 0 : [2760] 00000110 : 4D 51 50 4C 41 49 4E 00-00 00 05 65 6E 5F 55 53 : MQPLAIN....en_US
    DateTime=2009-08-06T02:34:11.3125000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 288#288
    DateTime=2009-08-06T02:34:11.3281250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.3281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:11.3437500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:11.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:11.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:11.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.4843750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:11.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.5625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.5937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:11.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 1B                                              : .
    DateTime=2009-08-06T02:34:11.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:11.6875000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:11.6875000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:11.7031250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:11.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:11.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 0B 00 00 00 F7-07 70 72 6F 64 75 63 74 : .........product
    DateTime=2009-08-06T02:34:11.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 53 00 00 00 08 52 61 62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
    DateTime=2009-08-06T02:34:11.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 72 73 69 6F 6E 53 00 00-00 07 31 2E 36 2E 30 2E : rsionS....1.6.0.
    DateTime=2009-08-06T02:34:11.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
    DateTime=2009-08-06T02:34:11.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 4E 45 54 0B 69 6E 66 6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
    DateTime=2009-08-06T02:34:11.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 00 00 00 35 4C 69 63 65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
    DateTime=2009-08-06T02:34:11.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 65 72 20 74 68 65 20 4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
    DateTime=2009-08-06T02:34:11.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 20 68 74 74 70 3A 2F 2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
    DateTime=2009-08-06T02:34:11.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 69 74 6D 71 2E 63 6F 6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
    DateTime=2009-08-06T02:34:11.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
    DateTime=2009-08-06T02:34:11.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008 
    DateTime=2009-08-06T02:34:11.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
    DateTime=2009-08-06T02:34:11.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:11.8593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:11.8750000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:11.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:11.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:11.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
    DateTime=2009-08-06T02:34:11.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
    DateTime=2009-08-06T02:34:11.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
    DateTime=2009-08-06T02:34:11.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
    DateTime=2009-08-06T02:34:11.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 50 4C 41 49 4E 00 00 00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
    DateTime=2009-08-06T02:34:11.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 67 75 65 73 74 05 65 6E-5F 55 53                : guest.en_US
    DateTime=2009-08-06T02:34:11.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 283#283
    DateTime=2009-08-06T02:34:11.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:11.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.0000000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.0156250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.0156250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.0312500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.0468750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:12.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:12.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:12.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.0937500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.1093750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.1250000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.1250000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.1406250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.1406250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:12.1562500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.1718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:12.1875000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.2031250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.2031250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.2187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.2500000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.2656250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.2656250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.2812500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.2968750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:12.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:12.3125000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:12.3281250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:12.3281250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:12.3437500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.3437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:12.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.3750000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 0C                                     : ....
    DateTime=2009-08-06T02:34:12.3906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:12.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.4218750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 0A 00 1E 00 00 00 02-00 00 00 00             : ............
    DateTime=2009-08-06T02:34:12.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 12#12
    DateTime=2009-08-06T02:34:12.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:12.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:12.4843750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:12.5312500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:12.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:12.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:12.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:12.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:12.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:12.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:12.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:12.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:13.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:13.2812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:13.2968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:13.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:13.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:13.4062500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:13.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:13.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:13.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:34:13.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 1F 00 00 00 02-00 00 00 03             : ............
    DateTime=2009-08-06T02:34:13.5312500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:13.5468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:13.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:13.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:13.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:13.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 12#12
    DateTime=2009-08-06T02:34:13.5937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:13.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:13.6093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:13.6250000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:13.6406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:13.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:13.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:13.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:13.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:13.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:13.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:13.7968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:13.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:13.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:13.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:13.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:13.8750000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:13.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:13.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:13.9062500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:13.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:13.9218750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:13.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:13.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:13.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:13.9843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:13.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:14.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:14.0312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:14.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.1250000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:14.1718750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.2031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.2343750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:14.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:14.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.3125000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:14.3437500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:14.3593750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:14.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.3906250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.4375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:14.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:14.5156250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 0A 00 28 01 2F 00 01-                        : ...(./..
    DateTime=2009-08-06T02:34:14.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 8#8
    DateTime=2009-08-06T02:34:14.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:14.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:14.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:14.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.6406250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.6406250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.6875000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.7187500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.7343750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.7343750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:14.7812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:14.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:14.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:14.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:14.8281250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:14.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.8437500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.8593750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.8593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:14.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:14.8906250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:14.8906250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:14.9062500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:14.9218750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:14.9375000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:14.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:14.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:14.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:14.9687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 17                                     : ....
    DateTime=2009-08-06T02:34:14.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:15.0000000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.0000000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.0156250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 0A 00 29 12 50 61 74-72 69 63 6B 4B 65 6E 6E : ...).PatrickKenn
    DateTime=2009-08-06T02:34:15.0312500Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 65 79 3A 35 36 37 32                            : ey:5672
    DateTime=2009-08-06T02:34:15.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 23#23
    DateTime=2009-08-06T02:34:15.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.0625000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.0625000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:15.0781250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:15.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:15.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.1718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:15.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.3125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.4062500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.4218750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:15.4375000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.4531250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.4687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:34:15.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.5000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:34:15.5156250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.5312500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.5468750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.5625000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.5625000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 5#5
    DateTime=2009-08-06T02:34:15.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:15.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.6093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:15.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:15.6406250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.6406250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:15.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:15.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.7031250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.7187500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:15.7500000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:15.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.7968750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:15.8125000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:15.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:15.8281250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:15.8437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:15.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:15.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:15.8750000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:15.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:15.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:15.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:15.9218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:34:15.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:15.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:15.9531250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:15.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:15.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:15.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:16.0000000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:16.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:16.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:16.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.0625000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:16.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:16.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:16.1406250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:16.1562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:16.2031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:16.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:16.2656250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:16.2812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:34:16.3125000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:16.3593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:16.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:16.4062500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:16.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:16.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:16.4531250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:16.4843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:16.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:16.5000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:16.5156250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:16.5312500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:16.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:16.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:16.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.5625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:16.5781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:16.5937500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:16.6093750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:16.6093750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:16.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:16.6406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:16.6406250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:16.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:16.6718750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.6875000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:16.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:16.7031250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:16.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:16.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:16.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:16.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:16.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:16.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:16.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:16.8125000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:16.8281250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:16.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:16.8437500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:16.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:16.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:16.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.8906250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:16.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:16.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:16.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:16.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:16.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:16.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:16.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:16.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.0000000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.0000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.0156250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.0312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 05                                              : .
    DateTime=2009-08-06T02:34:17.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 14 00 0A 00                                  : .....
    DateTime=2009-08-06T02:34:17.1718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 5#5
    DateTime=2009-08-06T02:34:17.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:17.2187500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.2187500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.2343750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:17.2500000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:17.2500000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.2656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.2812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:17.2968750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:17.3125000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.3281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.3437500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:34:17.3437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:17.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.3750000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 14 00 0B                                     : ....
    DateTime=2009-08-06T02:34:17.3906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:17.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:17.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:17.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.5000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:17.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:17.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:17.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0C                                              : .
    DateTime=2009-08-06T02:34:17.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.8281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 32 00 0A 00 00 00 0C-00 00 00 00             : .2..........
    DateTime=2009-08-06T02:34:17.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 12#12
    DateTime=2009-08-06T02:34:17.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:17.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.8750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:17.8750000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:17.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:17.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:17.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:17.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:17.9375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:17.9531250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:17.9531250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:17.9687500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:17.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.0156250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:18.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:18.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:18.0625000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:18.0781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 2D                                     : ...-
    DateTime=2009-08-06T02:34:18.1093750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.1406250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.1875000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.2187500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.2343750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.3125000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.3593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.3906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:18.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:18.4062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:18.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 32 00 0B 20 61 6D 71-2E 67 65 6E 2D 67 37 48 : .2.. amq.gen-g7H
    DateTime=2009-08-06T02:34:18.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.4531250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.4843750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.5000000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.5468750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.5781250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.5937500Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 39 33 45 62 4F 4F 47 4B-52 38 54 34 75 5A 67 43 : 93EbOOGKR8T4uZgC
    DateTime=2009-08-06T02:34:18.6093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 78 30 67 3D 3D 00 00 00-00 00 00 00 00          : x0g==........
    DateTime=2009-08-06T02:34:18.6093750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 45#45
    DateTime=2009-08-06T02:34:18.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:18.6406250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:18.6562500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:18.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:18.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:18.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:18.7031250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:18.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.7187500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:18.7343750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:18.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:18.7500000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:18.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:18.7812500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:18.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:18.7968750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:18.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:18.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:18.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:18.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:18.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.8593750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:18.8750000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:18.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:18.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:18.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:18.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:18.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:18.9375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:18.9531250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:18.9687500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:18.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:18.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:19.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:19.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:19.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:19.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:19.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.1250000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:19.1406250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:19.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:19.1562500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:19.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:19.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.1875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:19.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:19.2187500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:19.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.2968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:19.3125000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:19.3281250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:19.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.3750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:19.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.4062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:19.4218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:19.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:19.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 53                                              : S
    DateTime=2009-08-06T02:34:19.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:19.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:19.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:19.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:19.5625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 32 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 67 : .2.... amq.gen-g
    DateTime=2009-08-06T02:34:19.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 37 48 39 33 45 62 4F 4F-47 4B 52 38 54 34 75 5A : 7H93EbOOGKR8T4uZ
    DateTime=2009-08-06T02:34:19.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 67 43 78 30 67 3D 3D 00-25 2F 65 63 65 39 65 62 : gCx0g==.%/ece9eb
    DateTime=2009-08-06T02:34:19.5937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 39 64 2D 65 34 37 36 2D-34 63 62 34 2D 62 39 64 : 9d-e476-4cb4-b9d
    DateTime=2009-08-06T02:34:19.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 36 2D 62 36 32 34 31 64-61 37 35 61 64 32 00 00 : 6-b6241da75ad2..
    DateTime=2009-08-06T02:34:19.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 00 00 00                                        : ...
    DateTime=2009-08-06T02:34:19.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 83#83
    DateTime=2009-08-06T02:34:19.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:19.6562500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:19.6718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:19.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:19.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:19.7031250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:19.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:19.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:19.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.7500000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:19.7656250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:19.7812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:19.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:19.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:19.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:19.8125000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 04                                     : ....
    DateTime=2009-08-06T02:34:19.8281250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:19.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:19.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:19.8750000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:19.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:19.9218750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:19.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:19.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:19.9531250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:19.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:19.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:19.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:20.0000000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 32 00 15                                     : .2..
    DateTime=2009-08-06T02:34:20.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:20.0312500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.0312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.0468750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.0625000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.0625000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.1093750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.1250000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.1406250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.1406250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.1562500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:20.1875000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:20.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:20.2031250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:20.2187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.2500000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:20.2656250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:20.2656250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:20.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.2968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:20.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:20.3437500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:20.3437500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:20.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.4531250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:20.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.5781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:20.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 29                                              : )
    DateTime=2009-08-06T02:34:20.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:20.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:20.9062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 67 : .<.... amq.gen-g
    DateTime=2009-08-06T02:34:20.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 37 48 39 33 45 62 4F 4F-47 4B 52 38 54 34 75 5A : 7H93EbOOGKR8T4uZ
    DateTime=2009-08-06T02:34:20.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 67 43 78 30 67 3D 3D 00-00                      : gCx0g==..
    DateTime=2009-08-06T02:34:20.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 41#41
    DateTime=2009-08-06T02:34:20.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:20.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.0000000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:21.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:21.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.0468750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:21.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.0781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:21.0781250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:21.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.1093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 26                                     : ...&
    DateTime=2009-08-06T02:34:21.1093750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:21.1250000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.1250000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.1406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 3C 00 15 21 61 6D 71-2E 63 74 61 67 2D 33 6A : .<..!amq.ctag-3j
    DateTime=2009-08-06T02:34:21.1406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 38 73 72 45 59 68 49 4A-6F 41 52 6A 30 31 6D 53 : 8srEYhIJoARj01mS
    DateTime=2009-08-06T02:34:21.1562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 64 35 58 41 3D 3D                               : d5XA==
    DateTime=2009-08-06T02:34:21.1562500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 38#38
    DateTime=2009-08-06T02:34:21.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:21.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:21.1875000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:21.2031250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:21.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:21.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.6562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:21.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.7187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:21.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:21.7812500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:21.7968750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:21.7968750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:21.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.8125000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:21.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:21.8437500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:21.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:21.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:21.8906250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:21.8906250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:21.9375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:21.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:21.9531250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:21.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:21.9687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:21.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:21.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:21.9843750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:22.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:22.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 14                                              : .
    DateTime=2009-08-06T02:34:22.0312500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.0312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:22.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:22.0625000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:22.0937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:22.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.1562500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.1875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:22.2031250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.2187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:22.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:22.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.3125000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.3281250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.3437500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:22.3437500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:22.3593750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:22.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
    DateTime=2009-08-06T02:34:22.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:22.3906250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:22.4062500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:22.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 68 65 72 00                                     : her.
    DateTime=2009-08-06T02:34:22.4218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:22.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 20#20
    DateTime=2009-08-06T02:34:22.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.4687500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.4687500Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:22.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:22.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:22.5000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:22.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.5468750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.5625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:22.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.5781250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:22.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:22.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:22.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.6406250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.6406250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:22.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:22.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.7031250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:22.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:22.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.7500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:22.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.7656250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.7656250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.7812500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:22.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.8125000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.8281250Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.8281250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:22.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:22.8437500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:22.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:22.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.8593750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:22.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:22.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:22.8906250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:22.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:22.9062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.9218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:22.9218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:22.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:22.9375000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:22.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:22.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:22.9531250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:22.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:22.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:22.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.0000000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:23.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:23.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:23.0312500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:23.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:23.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.0468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0E                                              : .
    DateTime=2009-08-06T02:34:23.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 53 00 00       : .<.........S..
    DateTime=2009-08-06T02:34:23.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 14#14
    DateTime=2009-08-06T02:34:23.1093750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.1250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:23.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.1562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:23.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:23.1718750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:23.1875000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:23.1875000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:23.2031250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:23.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.2031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.2187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.2343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.2500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:23.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.2968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.2968750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.3125000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.5937500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:23.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.6562500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.6562500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.6718750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:23.6718750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.6875000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 53                                              : S
    DateTime=2009-08-06T02:34:23.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:23.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:23.7343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.7500000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.7500000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.7656250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.7656250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:23.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:23.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:23.7968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:23.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
    DateTime=2009-08-06T02:34:23.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
    DateTime=2009-08-06T02:34:23.8281250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.8593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
    DateTime=2009-08-06T02:34:23.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
    DateTime=2009-08-06T02:34:23.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:23.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
    DateTime=2009-08-06T02:34:23.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
    DateTime=2009-08-06T02:34:23.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.9218750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:23.9218750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:23.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:23.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
    DateTime=2009-08-06T02:34:23.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
    DateTime=2009-08-06T02:34:23.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 3A 41 63 74 69 6F 6E 3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
    DateTime=2009-08-06T02:34:23.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 67 65 49 44 3E 75 72 6E-3A 75 75 69 64 3A 31 37 : geID>urn:uuid:17
    DateTime=2009-08-06T02:34:23.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 33 34 30 30 61 61 2D 62-37 38 63 2D 34 37 62 63 : 3400aa-b78c-47bc
    DateTime=2009-08-06T02:34:23.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:23.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:24.0000000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:24.0000000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:24.0156250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:24.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 2D 39 62 64 35 2D 35 66-36 38 35 64 32 63 62 31 : -9bd5-5f685d2cb1
    DateTime=2009-08-06T02:34:24.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 66 36 3C 2F 61 3A 4D 65-73 73 61 67 65 49 44 3E : f6</a:MessageID>
    DateTime=2009-08-06T02:34:24.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000120 : 3C 61 3A 52 65 70 6C 79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
    DateTime=2009-08-06T02:34:24.0468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000130 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
    DateTime=2009-08-06T02:34:24.0468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000140 : 2F 2F 2F 65 63 65 39 65-62 39 64 2D 65 34 37 36 : ///ece9eb9d-e476
    DateTime=2009-08-06T02:34:24.0625000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:24.0625000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:24.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:24.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:24.0937500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:24.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 00000150 : 2D 34 63 62 34 2D 62 39-64 36 2D 62 36 32 34 31 : -4cb4-b9d6-b6241
    DateTime=2009-08-06T02:34:24.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000160 : 64 61 37 35 61 64 32 3C-2F 61 3A 41 64 64 72 65 : da75ad2</a:Addre
    DateTime=2009-08-06T02:34:24.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000170 : 73 73 3E 3C 2F 61 3A 52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
    DateTime=2009-08-06T02:34:24.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000180 : 2F 73 3A 48 65 61 64 65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
    DateTime=2009-08-06T02:34:24.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000190 : 79 3E 3C 43 72 65 61 74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
    DateTime=2009-08-06T02:34:24.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 000001A0 : 65 20 78 6D 6C 6E 73 3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
    DateTime=2009-08-06T02:34:24.1406250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:24.1562500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:24.1562500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:24.1718750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:24.1718750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:24.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 000001B0 : 73 63 68 65 6D 61 73 2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
    DateTime=2009-08-06T02:34:24.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 000001C0 : 6F 72 67 2F 77 73 2F 32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
    DateTime=2009-08-06T02:34:24.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 000001D0 : 6D 22 3E 3C 41 63 6B 73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
    DateTime=2009-08-06T02:34:24.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 000001E0 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
    DateTime=2009-08-06T02:34:24.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 000001F0 : 2F 2F 2F 65 63 65 39 65-62 39 64 2D 65 34 37 36 : ///ece9eb9d-e476
    DateTime=2009-08-06T02:34:24.2187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:24.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000200 : 2D 34 63 62 34 2D 62 39-64 36 2D 62 36 32 34 31 : -4cb4-b9d6-b6241
    DateTime=2009-08-06T02:34:24.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000210 : 64 61 37 35 61 64 32 3C-2F 61 3A 41 64 64 72 65 : da75ad2</a:Addre
    DateTime=2009-08-06T02:34:24.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000220 : 73 73 3E 3C 2F 41 63 6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
    DateTime=2009-08-06T02:34:24.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 00000230 : 65 61 74 65 53 65 71 75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
    DateTime=2009-08-06T02:34:24.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000240 : 3A 42 6F 64 79 3E 3C 2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
    DateTime=2009-08-06T02:34:24.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000250 : 70 65 3E                                        : pe>
    DateTime=2009-08-06T02:34:24.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 595#595
    DateTime=2009-08-06T02:34:24.2812500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:24.2968750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.3125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:24.3281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.3281250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.3281250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:24.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:24.3593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:24.3750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:24.3750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:24.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.3906250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.4062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 3C                                     : ...<
    DateTime=2009-08-06T02:34:24.4062500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:24.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.4218750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.4218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 3C 21 61 6D 71-2E 63 74 61 67 2D 38 56 : .<.<!amq.ctag-8V
    DateTime=2009-08-06T02:34:24.4375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 61 4D 6F 41 4C 74 73 47-2F 59 6D 71 2F 49 2B 57 : aMoALtsG/Ymq/I+W
    DateTime=2009-08-06T02:34:24.4531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 56 48 4F 77 3D 3D 00 00-00 00 00 00 00 01 00 00 : VHOw==..........
    DateTime=2009-08-06T02:34:24.4531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000030 : 0B 2F 64 69 73 70 61 74-63 68 65 72             : ./dispatcher
    DateTime=2009-08-06T02:34:24.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 60#60
    DateTime=2009-08-06T02:34:24.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:24.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.5156250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:24.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.5468750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:24.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:24.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 0E                                     : ....
    DateTime=2009-08-06T02:34:24.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:24.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 53 00 00       : .<.........S..
    DateTime=2009-08-06T02:34:24.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 14#14
    DateTime=2009-08-06T02:34:24.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.6406250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.6406250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:24.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.6875000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:24.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:24.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:24.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.7500000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 02 53                                     : ...S
    DateTime=2009-08-06T02:34:24.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:24.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:24.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:24.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:24.7812500Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:24.7968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:24.7968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:24.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
    DateTime=2009-08-06T02:34:24.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
    DateTime=2009-08-06T02:34:24.8281250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:24.8281250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:24.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:24.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:24.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
    DateTime=2009-08-06T02:34:24.8593750Z
System.Net.Sockets Verbose: 0 : [2660] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
    DateTime=2009-08-06T02:34:24.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:24.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
    DateTime=2009-08-06T02:34:24.8906250Z
System.Net.Sockets Verbose: 0 : [2660] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
    DateTime=2009-08-06T02:34:24.8906250Z
System.Net.Sockets Verbose: 0 : [2660] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
    DateTime=2009-08-06T02:34:24.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
    DateTime=2009-08-06T02:34:24.9062500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:24.9218750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:24.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:24.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:24.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:24.9531250Z
System.Net.Sockets Verbose: 0 : [2660] 000000D0 : 3A 41 63 74 69 6F 6E 3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
    DateTime=2009-08-06T02:34:24.9531250Z
System.Net.Sockets Verbose: 0 : [2660] 000000E0 : 67 65 49 44 3E 75 72 6E-3A 75 75 69 64 3A 31 37 : geID>urn:uuid:17
    DateTime=2009-08-06T02:34:24.9687500Z
System.Net.Sockets Verbose: 0 : [2660] 000000F0 : 33 34 30 30 61 61 2D 62-37 38 63 2D 34 37 62 63 : 3400aa-b78c-47bc
    DateTime=2009-08-06T02:34:24.9843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000100 : 2D 39 62 64 35 2D 35 66-36 38 35 64 32 63 62 31 : -9bd5-5f685d2cb1
    DateTime=2009-08-06T02:34:24.9843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000110 : 66 36 3C 2F 61 3A 4D 65-73 73 61 67 65 49 44 3E : f6</a:MessageID>
    DateTime=2009-08-06T02:34:25.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000120 : 3C 61 3A 52 65 70 6C 79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
    DateTime=2009-08-06T02:34:25.0000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000130 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
    DateTime=2009-08-06T02:34:25.0156250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:25.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:25.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:25.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:25.0625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000140 : 2F 2F 2F 65 63 65 39 65-62 39 64 2D 65 34 37 36 : ///ece9eb9d-e476
    DateTime=2009-08-06T02:34:25.0625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000150 : 2D 34 63 62 34 2D 62 39-64 36 2D 62 36 32 34 31 : -4cb4-b9d6-b6241
    DateTime=2009-08-06T02:34:25.0937500Z
System.Net.Sockets Verbose: 0 : [2660] 00000160 : 64 61 37 35 61 64 32 3C-2F 61 3A 41 64 64 72 65 : da75ad2</a:Addre
    DateTime=2009-08-06T02:34:25.1250000Z
System.Net.Sockets Verbose: 0 : [2660] 00000170 : 73 73 3E 3C 2F 61 3A 52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
    DateTime=2009-08-06T02:34:25.1562500Z
System.Net.Sockets Verbose: 0 : [2660] 00000180 : 2F 73 3A 48 65 61 64 65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
    DateTime=2009-08-06T02:34:25.2031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:25.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:25.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:25.2343750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:25.2656250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:25.3125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000190 : 79 3E 3C 43 72 65 61 74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
    DateTime=2009-08-06T02:34:25.3437500Z
System.Net.Sockets Verbose: 0 : [2660] 000001A0 : 65 20 78 6D 6C 6E 73 3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
    DateTime=2009-08-06T02:34:25.3593750Z
System.Net.Sockets Verbose: 0 : [2660] 000001B0 : 73 63 68 65 6D 61 73 2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
    DateTime=2009-08-06T02:34:25.3593750Z
System.Net.Sockets Verbose: 0 : [2660] 000001C0 : 6F 72 67 2F 77 73 2F 32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
    DateTime=2009-08-06T02:34:25.3750000Z
System.Net.Sockets Verbose: 0 : [2660] 000001D0 : 6D 22 3E 3C 41 63 6B 73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
    DateTime=2009-08-06T02:34:25.3750000Z
System.Net.Sockets Verbose: 0 : [2660] 000001E0 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
    DateTime=2009-08-06T02:34:25.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:25.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:25.4062500Z
System.Net.Sockets Verbose: 0 : [2660] 000001F0 : 2F 2F 2F 65 63 65 39 65-62 39 64 2D 65 34 37 36 : ///ece9eb9d-e476
    DateTime=2009-08-06T02:34:25.4062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000200 : 2D 34 63 62 34 2D 62 39-64 36 2D 62 36 32 34 31 : -4cb4-b9d6-b6241
    DateTime=2009-08-06T02:34:25.4218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000210 : 64 61 37 35 61 64 32 3C-2F 61 3A 41 64 64 72 65 : da75ad2</a:Addre
    DateTime=2009-08-06T02:34:25.4218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000220 : 73 73 3E 3C 2F 41 63 6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
    DateTime=2009-08-06T02:34:25.4375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000230 : 65 61 74 65 53 65 71 75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
    DateTime=2009-08-06T02:34:25.4375000Z
System.Net.Sockets Verbose: 0 : [2660] 00000240 : 3A 42 6F 64 79 3E 3C 2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
    DateTime=2009-08-06T02:34:25.4531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000250 : 70 65 3E                                        : pe>
    DateTime=2009-08-06T02:34:25.4531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 595#595
    DateTime=2009-08-06T02:34:25.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:25.4687500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:25.4843750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:25.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:25.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:25.5312500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.5468750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.5625000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:25.5625000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.5781250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.5781250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.5937500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:25.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.6093750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.6250000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.6250000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:25.6406250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.6406250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.6562500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.6562500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:25.6718750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.6718750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.6875000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.6875000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:25.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.7187500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:25.7187500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.7343750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.7500000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.7500000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 0D                                              : .
    DateTime=2009-08-06T02:34:25.7656250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.7656250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.7812500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 3C 00 50 00 00 00 00-00 00 00 01 00          : .<.P.........
    DateTime=2009-08-06T02:34:25.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 13#13
    DateTime=2009-08-06T02:34:25.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:25.8125000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:25.8125000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:25.8281250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:25.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:25.8437500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:25.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:25.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:25.8750000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:25.8750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:25.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:25.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:25.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:25.9218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:25.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:25.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:25.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:26.0000000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:26.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:26.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:26.0312500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:26.0312500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.0468750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.0468750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:26.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.0781250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.0781250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.0937500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:26.0937500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:26.1093750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:26.1093750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.1250000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.1250000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.1406250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:26.1562500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.1562500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.1718750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.1718750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.1875000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.1875000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.2031250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.2187500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.2187500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.2343750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.2343750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.2500000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.2500000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.2656250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.2656250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.2812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 2E                                              : .
    DateTime=2009-08-06T02:34:26.2812500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.2968750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.3125000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.3125000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 3C 00 28 00 00 00 25-2F 65 63 65 39 65 62 39 : .<.(...%/ece9eb9
    DateTime=2009-08-06T02:34:26.3281250Z
System.Net.Sockets Verbose: 0 : [2016] 00000010 : 64 2D 65 34 37 36 2D 34-63 62 34 2D 62 39 64 36 : d-e476-4cb4-b9d6
    DateTime=2009-08-06T02:34:26.3281250Z
System.Net.Sockets Verbose: 0 : [2016] 00000020 : 2D 62 36 32 34 31 64 61-37 35 61 64 32 00       : -b6241da75ad2.
    DateTime=2009-08-06T02:34:26.3437500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 46#46
    DateTime=2009-08-06T02:34:26.3437500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.3593750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.3750000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:26.3906250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.3906250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.4062500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.4218750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:26.4218750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.4375000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.4531250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.4531250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.4687500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.4687500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.4843750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.4843750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.5000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:26.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:26.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:26.5468750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:26.5468750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.5625000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.5625000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.5781250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:26.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:26.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:26.6250000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.6250000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.6406250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.6406250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.6562500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:26.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:26.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.7031250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.7187500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.7187500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.7343750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:26.7500000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:26.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:26.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:26.7656250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.7812500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 0E                                              : .
    DateTime=2009-08-06T02:34:26.7968750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.8125000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.8125000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.8281250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 4C 00 00       : .<.........L..
    DateTime=2009-08-06T02:34:26.8281250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 14#14
    DateTime=2009-08-06T02:34:26.8437500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.8437500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.8593750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:26.8593750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.8750000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:26.9062500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.9062500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.9218750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.9218750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:26.9375000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.9375000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.9531250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.9531250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:26.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:26.9687500Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:26.9843750Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:26.9843750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.0000000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.0156250Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:27.0156250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:27.0312500Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.0468750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.0468750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:27.0625000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:27.0781250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:27.0781250Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.1250000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:27.1406250Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:27.1875000Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 4C                                              : L
    DateTime=2009-08-06T02:34:27.2187500Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.2343750Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:27.2500000Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:27.2656250Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:27.3125000Z
System.Net.Sockets Verbose: 0 : [2016] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:27.3593750Z
System.Net.Sockets Verbose: 0 : [2016] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:27.3750000Z
System.Net.Sockets Verbose: 0 : [2016] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:27.3750000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.3906250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.3906250Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.4062500Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:27.4062500Z
System.Net.Sockets Verbose: 0 : [2016] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
    DateTime=2009-08-06T02:34:27.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:27.4375000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:27.4375000Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.4531250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.4531250Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.4687500Z
System.Net.Sockets Verbose: 0 : [2016] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
    DateTime=2009-08-06T02:34:27.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.4843750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.4843750Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.5000000Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.5156250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.5156250Z
System.Net.Sockets Verbose: 0 : [2016] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
    DateTime=2009-08-06T02:34:27.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:27.5312500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.5468750Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.5468750Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.5625000Z
System.Net.Sockets Verbose: 0 : [2016] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
    DateTime=2009-08-06T02:34:27.5625000Z
System.Net.Sockets Verbose: 0 : [2016] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:27.5781250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.5937500Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.5937500Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.6093750Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.6093750Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.6250000Z
System.Net.Sockets Verbose: 0 : [2016] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
    DateTime=2009-08-06T02:34:27.6250000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.6406250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:27.6406250Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.6562500Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.6562500Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.6718750Z
System.Net.Sockets Verbose: 0 : [2016] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
    DateTime=2009-08-06T02:34:27.6718750Z
System.Net.Sockets Verbose: 0 : [2016] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
    DateTime=2009-08-06T02:34:27.6875000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.6875000Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.7031250Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.7031250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.7187500Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.7187500Z
System.Net.Sockets Verbose: 0 : [2016] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:27.7343750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.7500000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.7500000Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.7656250Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.7656250Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 000000D0 : 70 6F 6E 73 65 3C 2F 61-3A 41 63 74 69 6F 6E 3E : ponse</a:Action>
    DateTime=2009-08-06T02:34:27.7812500Z
System.Net.Sockets Verbose: 0 : [2016] 000000E0 : 3C 61 3A 52 65 6C 61 74-65 73 54 6F 3E 75 72 6E : <a:RelatesTo>urn
    DateTime=2009-08-06T02:34:27.7968750Z
System.Net.Sockets Verbose: 0 : [2016] 000000F0 : 3A 75 75 69 64 3A 31 37-33 34 30 30 61 61 2D 62 : :uuid:173400aa-b
    DateTime=2009-08-06T02:34:27.7968750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:27.8125000Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.8281250Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.8281250Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.8437500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:27.8437500Z
System.Net.Sockets Verbose: 0 : [2016] 00000100 : 37 38 63 2D 34 37 62 63-2D 39 62 64 35 2D 35 66 : 78c-47bc-9bd5-5f
    DateTime=2009-08-06T02:34:27.8593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:27.8593750Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.8750000Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.8750000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:27.8906250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.8906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000110 : 36 38 35 64 32 63 62 31-66 36 3C 2F 61 3A 52 65 : 685d2cb1f6</a:Re
    DateTime=2009-08-06T02:34:27.9062500Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:27.9218750Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:27.9218750Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:27.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:27.9375000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:27.9531250Z
System.Net.Sockets Verbose: 0 : [2016] 00000120 : 6C 61 74 65 73 54 6F 3E-3C 61 3A 54 6F 20 73 3A : latesTo><a:To s:
    DateTime=2009-08-06T02:34:27.9531250Z
System.Net.Sockets Verbose: 0 : [1260] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:27.9687500Z
System.Net.Sockets Verbose: 0 : [1260] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:27.9687500Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:27.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:27.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.0000000Z
System.Net.Sockets Verbose: 0 : [2016] 00000130 : 6D 75 73 74 55 6E 64 65-72 73 74 61 6E 64 3D 22 : mustUnderstand="
    DateTime=2009-08-06T02:34:28.0000000Z
System.Net.Sockets Verbose: 0 : [2016] 00000140 : 31 22 3E 73 6F 61 70 2E-61 6D 71 70 3A 2F 2F 2F : 1">soap.amqp:///
    DateTime=2009-08-06T02:34:28.0156250Z
System.Net.Sockets Verbose: 0 : [2016] 00000150 : 65 63 65 39 65 62 39 64-2D 65 34 37 36 2D 34 63 : ece9eb9d-e476-4c
    DateTime=2009-08-06T02:34:28.0312500Z
System.Net.Sockets Verbose: 0 : [2016] 00000160 : 62 34 2D 62 39 64 36 2D-62 36 32 34 31 64 61 37 : b4-b9d6-b6241da7
    DateTime=2009-08-06T02:34:28.0312500Z
System.Net.Sockets Verbose: 0 : [2016] 00000170 : 35 61 64 32 3C 2F 61 3A-54 6F 3E 3C 2F 73 3A 48 : 5ad2</a:To></s:H
    DateTime=2009-08-06T02:34:28.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:28.0468750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:28.0625000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.0625000Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:28.0781250Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.0781250Z
System.Net.Sockets Verbose: 0 : [2016] 00000180 : 65 61 64 65 72 3E 3C 73-3A 42 6F 64 79 3E 3C 43 : eader><s:Body><C
    DateTime=2009-08-06T02:34:28.0937500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:28.0937500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:28.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:28.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:28.1250000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:28.1406250Z
System.Net.Sockets Verbose: 0 : [2016] 00000190 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:28.1406250Z
System.Net.Sockets Verbose: 0 : [2016] 000001A0 : 70 6F 6E 73 65 20 78 6D-6C 6E 73 3D 22 68 74 74 : ponse xmlns="htt
    DateTime=2009-08-06T02:34:28.1562500Z
System.Net.Sockets Verbose: 0 : [2016] 000001B0 : 70 3A 2F 2F 73 63 68 65-6D 61 73 2E 78 6D 6C 73 : p://schemas.xmls
    DateTime=2009-08-06T02:34:28.1562500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:28.1718750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.1718750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:28.1875000Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.1875000Z
System.Net.Sockets Verbose: 0 : [2016] 000001C0 : 6F 61 70 2E 6F 72 67 2F-77 73 2F 32 30 30 35 2F : oap.org/ws/2005/
    DateTime=2009-08-06T02:34:28.2031250Z
System.Net.Sockets Verbose: 0 : [2016] 000001D0 : 30 32 2F 72 6D 22 3E 3C-49 64 65 6E 74 69 66 69 : 02/rm"><Identifi
    DateTime=2009-08-06T02:34:28.2031250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:28.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:28.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:28.2343750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:28.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.2500000Z
System.Net.Sockets Verbose: 0 : [2016] 000001E0 : 65 72 3E 75 72 6E 3A 75-75 69 64 3A 35 65 31 39 : er>urn:uuid:5e19
    DateTime=2009-08-06T02:34:28.2656250Z
System.Net.Sockets Verbose: 0 : [2016] 000001F0 : 66 39 34 66 2D 38 39 31-33 2D 34 64 63 37 2D 38 : f94f-8913-4dc7-8
    DateTime=2009-08-06T02:34:28.2656250Z
System.Net.Sockets Verbose: 0 : [2016] 00000200 : 62 38 61 2D 63 35 63 35-66 38 36 36 34 38 38 32 : b8a-c5c5f8664882
    DateTime=2009-08-06T02:34:28.2812500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:28.2812500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:28.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.3125000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:28.3125000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:28.3281250Z
System.Net.Sockets Verbose: 0 : [2016] 00000210 : 3C 2F 49 64 65 6E 74 69-66 69 65 72 3E 3C 2F 43 : </Identifier></C
    DateTime=2009-08-06T02:34:28.3281250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:28.3437500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:28.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:28.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:28.3750000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.3750000Z
System.Net.Sockets Verbose: 0 : [2016] 00000220 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:28.3906250Z
System.Net.Sockets Verbose: 0 : [2016] 00000230 : 70 6F 6E 73 65 3E 3C 2F-73 3A 42 6F 64 79 3E 3C : ponse></s:Body><
    DateTime=2009-08-06T02:34:28.3906250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:28.4062500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.4062500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.4218750Z
System.Net.Sockets Verbose: 0 : [2016] 00000240 : 2F 73 3A 45 6E 76 65 6C-6F 70 65 3E             : /s:Envelope>
    DateTime=2009-08-06T02:34:28.4375000Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 588#588
    DateTime=2009-08-06T02:34:28.4375000Z
System.Net.Sockets Verbose: 0 : [2016] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:28.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.4531250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.4687500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:28.4687500Z
System.Net.Sockets Verbose: 0 : [2016] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:28.4843750Z
System.Net.Sockets Verbose: 0 : [2016] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.4843750Z
System.Net.Sockets Verbose: 0 : [2016] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:28.5000000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:28.5156250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.5312500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.5312500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.5468750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:28.5468750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:28.5625000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.5625000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.5781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 56                                     : ...V
    DateTime=2009-08-06T02:34:28.5781250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:28.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.6093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 3C 00 3C 21 61 6D 71-2E 63 74 61 67 2D 33 6A : .<.<!amq.ctag-3j
    DateTime=2009-08-06T02:34:28.6093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 38 73 72 45 59 68 49 4A-6F 41 52 6A 30 31 6D 53 : 8srEYhIJoARj01mS
    DateTime=2009-08-06T02:34:28.6250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 64 35 58 41 3D 3D 00 00-00 00 00 00 00 01 00 00 : d5XA==..........
    DateTime=2009-08-06T02:34:28.6250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000030 : 25 2F 65 63 65 39 65 62-39 64 2D 65 34 37 36 2D : %/ece9eb9d-e476-
    DateTime=2009-08-06T02:34:28.6406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000040 : 34 63 62 34 2D 62 39 64-36 2D 62 36 32 34 31 64 : 4cb4-b9d6-b6241d
    DateTime=2009-08-06T02:34:28.6718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000050 : 61 37 35 61 64 32                               : a75ad2
    DateTime=2009-08-06T02:34:28.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 86#86
    DateTime=2009-08-06T02:34:28.6875000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.7031250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.7031250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.7187500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.7187500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.7343750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.7343750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:28.7500000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.7500000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.7656250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:28.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:28.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.8125000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 0E                                     : ....
    DateTime=2009-08-06T02:34:28.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:28.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.8437500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 4C 00 00       : .<.........L..
    DateTime=2009-08-06T02:34:28.8437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 14#14
    DateTime=2009-08-06T02:34:28.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.8750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:28.8750000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.8906250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.9062500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.9062500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:28.9218750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:28.9218750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.9375000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.9375000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 02                                           : ..
    DateTime=2009-08-06T02:34:28.9531250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:28.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:28.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:28.9843750Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 02 4C                                     : ...L
    DateTime=2009-08-06T02:34:28.9843750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:29.0000000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:29.0156250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:29.0156250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:29.0312500Z
System.Net.Sockets Verbose: 0 : [2760] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:29.0468750Z
System.Net.Sockets Verbose: 0 : [2760] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:29.0625000Z
System.Net.Sockets Verbose: 0 : [2760] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:29.0625000Z
System.Net.Sockets Verbose: 0 : [2760] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
    DateTime=2009-08-06T02:34:29.0781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
    DateTime=2009-08-06T02:34:29.1093750Z
System.Net.Sockets Verbose: 0 : [2760] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
    DateTime=2009-08-06T02:34:29.1406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
    DateTime=2009-08-06T02:34:29.1718750Z
System.Net.Sockets Verbose: 0 : [2760] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:29.2031250Z
System.Net.Sockets Verbose: 0 : [2760] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
    DateTime=2009-08-06T02:34:29.2187500Z
System.Net.Sockets Verbose: 0 : [2760] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
    DateTime=2009-08-06T02:34:29.2343750Z
System.Net.Sockets Verbose: 0 : [2760] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
    DateTime=2009-08-06T02:34:29.2500000Z
System.Net.Sockets Verbose: 0 : [2760] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:29.2812500Z
System.Net.Sockets Verbose: 0 : [2760] 000000D0 : 70 6F 6E 73 65 3C 2F 61-3A 41 63 74 69 6F 6E 3E : ponse</a:Action>
    DateTime=2009-08-06T02:34:29.3125000Z
System.Net.Sockets Verbose: 0 : [2760] 000000E0 : 3C 61 3A 52 65 6C 61 74-65 73 54 6F 3E 75 72 6E : <a:RelatesTo>urn
    DateTime=2009-08-06T02:34:29.3437500Z
System.Net.Sockets Verbose: 0 : [2760] 000000F0 : 3A 75 75 69 64 3A 31 37-33 34 30 30 61 61 2D 62 : :uuid:173400aa-b
    DateTime=2009-08-06T02:34:29.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000100 : 37 38 63 2D 34 37 62 63-2D 39 62 64 35 2D 35 66 : 78c-47bc-9bd5-5f
    DateTime=2009-08-06T02:34:29.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000110 : 36 38 35 64 32 63 62 31-66 36 3C 2F 61 3A 52 65 : 685d2cb1f6</a:Re
    DateTime=2009-08-06T02:34:29.3906250Z
System.Net.Sockets Verbose: 0 : [2760] 00000120 : 6C 61 74 65 73 54 6F 3E-3C 61 3A 54 6F 20 73 3A : latesTo><a:To s:
    DateTime=2009-08-06T02:34:29.3906250Z
System.Net.Sockets Verbose: 0 : [2760] 00000130 : 6D 75 73 74 55 6E 64 65-72 73 74 61 6E 64 3D 22 : mustUnderstand="
    DateTime=2009-08-06T02:34:29.4062500Z
System.Net.Sockets Verbose: 0 : [2760] 00000140 : 31 22 3E 73 6F 61 70 2E-61 6D 71 70 3A 2F 2F 2F : 1">soap.amqp:///
    DateTime=2009-08-06T02:34:29.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000150 : 65 63 65 39 65 62 39 64-2D 65 34 37 36 2D 34 63 : ece9eb9d-e476-4c
    DateTime=2009-08-06T02:34:29.4218750Z
System.Net.Sockets Verbose: 0 : [2760] 00000160 : 62 34 2D 62 39 64 36 2D-62 36 32 34 31 64 61 37 : b4-b9d6-b6241da7
    DateTime=2009-08-06T02:34:29.4375000Z
System.Net.Sockets Verbose: 0 : [2760] 00000170 : 35 61 64 32 3C 2F 61 3A-54 6F 3E 3C 2F 73 3A 48 : 5ad2</a:To></s:H
    DateTime=2009-08-06T02:34:29.4375000Z
System.Net.Sockets Verbose: 0 : [2760] 00000180 : 65 61 64 65 72 3E 3C 73-3A 42 6F 64 79 3E 3C 43 : eader><s:Body><C
    DateTime=2009-08-06T02:34:29.4531250Z
System.Net.Sockets Verbose: 0 : [2760] 00000190 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:29.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 000001A0 : 70 6F 6E 73 65 20 78 6D-6C 6E 73 3D 22 68 74 74 : ponse xmlns="htt
    DateTime=2009-08-06T02:34:29.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 000001B0 : 70 3A 2F 2F 73 63 68 65-6D 61 73 2E 78 6D 6C 73 : p://schemas.xmls
    DateTime=2009-08-06T02:34:29.4843750Z
System.Net.Sockets Verbose: 0 : [2760] 000001C0 : 6F 61 70 2E 6F 72 67 2F-77 73 2F 32 30 30 35 2F : oap.org/ws/2005/
    DateTime=2009-08-06T02:34:29.4843750Z
System.Net.Sockets Verbose: 0 : [2760] 000001D0 : 30 32 2F 72 6D 22 3E 3C-49 64 65 6E 74 69 66 69 : 02/rm"><Identifi
    DateTime=2009-08-06T02:34:29.5000000Z
System.Net.Sockets Verbose: 0 : [2760] 000001E0 : 65 72 3E 75 72 6E 3A 75-75 69 64 3A 35 65 31 39 : er>urn:uuid:5e19
    DateTime=2009-08-06T02:34:29.5000000Z
System.Net.Sockets Verbose: 0 : [2760] 000001F0 : 66 39 34 66 2D 38 39 31-33 2D 34 64 63 37 2D 38 : f94f-8913-4dc7-8
    DateTime=2009-08-06T02:34:29.5156250Z
System.Net.Sockets Verbose: 0 : [2760] 00000200 : 62 38 61 2D 63 35 63 35-66 38 36 36 34 38 38 32 : b8a-c5c5f8664882
    DateTime=2009-08-06T02:34:29.5312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.5312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:29.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:29.5468750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.5625000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:29.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:29.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:29.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:29.6250000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.6250000Z
System.Net.Sockets Verbose: 0 : [2760] 00000210 : 3C 2F 49 64 65 6E 74 69-66 69 65 72 3E 3C 2F 43 : </Identifier></C
    DateTime=2009-08-06T02:34:29.6406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000220 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
    DateTime=2009-08-06T02:34:29.6406250Z
System.Net.Sockets Verbose: 0 : [2760] 00000230 : 70 6F 6E 73 65 3E 3C 2F-73 3A 42 6F 64 79 3E 3C : ponse></s:Body><
    DateTime=2009-08-06T02:34:29.6562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000240 : 2F 73 3A 45 6E 76 65 6C-6F 70 65 3E             : /s:Envelope>
    DateTime=2009-08-06T02:34:29.6562500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 588#588
    DateTime=2009-08-06T02:34:29.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.6718750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:29.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:29.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:29.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:29.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:29.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:29.7343750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:29.7500000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:29.7500000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:29.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:29.7656250Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.7812500Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.7812500Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:29.7968750Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.7968750Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.8125000Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.8125000Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:29.8281250Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.8281250Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.8437500Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.8593750Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:29.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:29.8750000Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.8750000Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.8906250Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.8906250Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:29.9062500Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.9062500Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.9218750Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.9218750Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:29.9375000Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.9531250Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.9531250Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:29.9687500Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:29.9687500Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:29.9843750Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:29.9843750Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.0000000Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 0D                                              : .
    DateTime=2009-08-06T02:34:30.0156250Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.0312500Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.0468750Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.0625000Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 00 3C 00 50 00 00 00 00-00 00 00 01 00          : .<.P.........
    DateTime=2009-08-06T02:34:30.0781250Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 13#13
    DateTime=2009-08-06T02:34:30.0781250Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.0937500Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.1093750Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:30.1250000Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.1250000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.3281250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:30.3437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:30.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.3593750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.3750000Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:30.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:30.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.4218750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:30.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:30.4687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:30.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:30.5156250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.5625000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.5781250Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.5937500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:30.6093750Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:30.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.6250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.6562500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.6718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.6718750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.6875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.7031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 14                                              : .
    DateTime=2009-08-06T02:34:30.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.7187500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
    DateTime=2009-08-06T02:34:30.7343750Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 68 65 72 00                                     : her.
    DateTime=2009-08-06T02:34:30.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 20#20
    DateTime=2009-08-06T02:34:30.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.7656250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:30.7812500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:30.7812500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:30.7968750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:30.7968750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.8125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:30.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.8437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:30.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.8593750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:30.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.9062500Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:30.9062500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:30.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:30.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:30.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:30.9375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:30.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:30.9687500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:30.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:30.9843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.0000000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:31.0156250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:31.0312500Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:31.0468750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:31.0468750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:31.0625000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.0781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.0937500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.1406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.2187500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:31.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:31.2656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:31.2968750Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:31.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.3750000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.3906250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 0E                                              : .
    DateTime=2009-08-06T02:34:31.4062500Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:31.4218750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:31.4218750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:31.4375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:31.4531250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:31.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.4843750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:31.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:31.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.5156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
    DateTime=2009-08-06T02:34:31.5312500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 14#14
    DateTime=2009-08-06T02:34:31.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.5468750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:31.5625000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:31.5781250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:31.5781250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.5937500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.5937500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.6093750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.6250000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.6406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:31.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.6562500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.6562500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:31.6718750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:31.6875000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.7031250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.7031250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.7187500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.7343750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.7343750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.7500000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:31.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.7656250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 03                                              : .
    DateTime=2009-08-06T02:34:31.7656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.7812500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.7812500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.7968750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:31.8125000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.8125000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.8281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.8437500Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.8593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.8593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.8750000Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:31.8750000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:31.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.8906250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.9062500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.9218750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:31.9218750Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:31.9375000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.9375000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.9531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:31.9687500Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:31.9687500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:31.9843750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:31.9843750Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.0000000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.1875000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:32.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:32.2343750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:32.2500000Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.2500000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.2656250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.2656250Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.2812500Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.2968750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:32.3125000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.3281250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.3281250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.3437500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.3593750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:32.3593750Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:32.3750000Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:32.3750000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.3906250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.4062500Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:34:32.4218750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:34:32.4375000Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:32.4375000Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.4531250Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.4531250Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.4687500Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.4687500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.4843750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:34:32.5000000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.5312500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.5312500Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:32.5468750Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:34:32.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:32.5781250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:32.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.5937500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:32.6093750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.6093750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 04                                              : .
    DateTime=2009-08-06T02:34:32.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.6250000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.6406250Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.6406250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.6562500Z
System.Net.Sockets Verbose: 0 : [3696] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:32.6718750Z
System.Net.Sockets Verbose: 0 : [3696] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:32.6875000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.6875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CD                                              : .
    DateTime=2009-08-06T02:34:32.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:32.7031250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:32.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.7187500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.7343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:32.7343750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:32.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:32.7500000Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:32.7656250Z
System.Net.Sockets Verbose: 0 : [2932] (printing 1024 out of 1229)
    DateTime=2009-08-06T02:34:32.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
    DateTime=2009-08-06T02:34:32.7812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
    DateTime=2009-08-06T02:34:32.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:32.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.8125000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:32.8281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:32.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
    DateTime=2009-08-06T02:34:32.8437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
    DateTime=2009-08-06T02:34:32.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000040 : 6C 6E 73 3A 72 3D 22 68-74 74 70 3A 2F 2F 73 63 : lns:r="http://sc
    DateTime=2009-08-06T02:34:32.8593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000050 : 68 65 6D 61 73 2E 78 6D-6C 73 6F 61 70 2E 6F 72 : hemas.xmlsoap.or
    DateTime=2009-08-06T02:34:32.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000060 : 67 2F 77 73 2F 32 30 30-35 2F 30 32 2F 72 6D 22 : g/ws/2005/02/rm"
    DateTime=2009-08-06T02:34:32.8750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000070 : 20 78 6D 6C 6E 73 3A 61-3D 22 68 74 74 70 3A 2F :  xmlns:a="http:/
    DateTime=2009-08-06T02:34:32.8906250Z
System.Net.Sockets Verbose: 0 : [2932] 00000080 : 2F 77 77 77 2E 77 33 2E-6F 72 67 2F 32 30 30 35 : /www.w3.org/2005
    DateTime=2009-08-06T02:34:32.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:32.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:32.9218750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:32.9375000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:32.9375000Z
System.Net.Sockets Verbose: 0 : [2932] 00000090 : 2F 30 38 2F 61 64 64 72-65 73 73 69 6E 67 22 3E : /08/addressing">
    DateTime=2009-08-06T02:34:32.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000A0 : 3C 73 3A 48 65 61 64 65-72 3E 3C 72 3A 41 63 6B : <s:Header><r:Ack
    DateTime=2009-08-06T02:34:32.9531250Z
System.Net.Sockets Verbose: 0 : [2932] 000000B0 : 52 65 71 75 65 73 74 65-64 3E 3C 72 3A 49 64 65 : Requested><r:Ide
    DateTime=2009-08-06T02:34:32.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000C0 : 6E 74 69 66 69 65 72 3E-75 72 6E 3A 75 75 69 64 : ntifier>urn:uuid
    DateTime=2009-08-06T02:34:32.9687500Z
System.Net.Sockets Verbose: 0 : [2932] 000000D0 : 3A 35 65 31 39 66 39 34-66 2D 38 39 31 33 2D 34 : :5e19f94f-8913-4
    DateTime=2009-08-06T02:34:32.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 000000E0 : 64 63 37 2D 38 62 38 61-2D 63 35 63 35 66 38 36 : dc7-8b8a-c5c5f86
    DateTime=2009-08-06T02:34:32.9843750Z
System.Net.Sockets Verbose: 0 : [2932] 000000F0 : 36 34 38 38 32 3C 2F 72-3A 49 64 65 6E 74 69 66 : 64882</r:Identif
    DateTime=2009-08-06T02:34:33.0000000Z
System.Net.Sockets Verbose: 0 : [2932] 00000100 : 69 65 72 3E 3C 2F 72 3A-41 63 6B 52 65 71 75 65 : ier></r:AckReque
    DateTime=2009-08-06T02:34:33.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000110 : 73 74 65 64 3E 3C 72 3A-53 65 71 75 65 6E 63 65 : sted><r:Sequence
    DateTime=2009-08-06T02:34:33.0156250Z
System.Net.Sockets Verbose: 0 : [2932] 00000120 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
    DateTime=2009-08-06T02:34:33.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000130 : 64 3D 22 31 22 3E 3C 72-3A 49 64 65 6E 74 69 66 : d="1"><r:Identif
    DateTime=2009-08-06T02:34:33.0312500Z
System.Net.Sockets Verbose: 0 : [2932] 00000140 : 69 65 72 3E 75 72 6E 3A-75 75 69 64 3A 35 65 31 : ier>urn:uuid:5e1
    DateTime=2009-08-06T02:34:33.0468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000150 : 39 66 39 34 66 2D 38 39-31 33 2D 34 64 63 37 2D : 9f94f-8913-4dc7-
    DateTime=2009-08-06T02:34:33.0468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000160 : 38 62 38 61 2D 63 35 63-35 66 38 36 36 34 38 38 : 8b8a-c5c5f866488
    DateTime=2009-08-06T02:34:33.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000170 : 32 3C 2F 72 3A 49 64 65-6E 74 69 66 69 65 72 3E : 2</r:Identifier>
    DateTime=2009-08-06T02:34:33.0625000Z
System.Net.Sockets Verbose: 0 : [2932] 00000180 : 3C 72 3A 4D 65 73 73 61-67 65 4E 75 6D 62 65 72 : <r:MessageNumber
    DateTime=2009-08-06T02:34:33.0781250Z
System.Net.Sockets Verbose: 0 : [2932] 00000190 : 3E 31 3C 2F 72 3A 4D 65-73 73 61 67 65 4E 75 6D : >1</r:MessageNum
    DateTime=2009-08-06T02:34:33.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 000001A0 : 62 65 72 3E 3C 2F 72 3A-53 65 71 75 65 6E 63 65 : ber></r:Sequence
    DateTime=2009-08-06T02:34:33.0937500Z
System.Net.Sockets Verbose: 0 : [2932] 000001B0 : 3E 3C 61 3A 41 63 74 69-6F 6E 20 73 3A 6D 75 73 : ><a:Action s:mus
    DateTime=2009-08-06T02:34:33.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 000001C0 : 74 55 6E 64 65 72 73 74-61 6E 64 3D 22 31 22 3E : tUnderstand="1">
    DateTime=2009-08-06T02:34:33.1093750Z
System.Net.Sockets Verbose: 0 : [2932] 000001D0 : 68 74 74 70 3A 2F 2F 74-65 6D 70 75 72 69 2E 6F : http://tempuri.o
    DateTime=2009-08-06T02:34:33.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 000001E0 : 72 67 2F 49 44 69 73 70-61 74 63 68 65 72 53 65 : rg/IDispatcherSe
    DateTime=2009-08-06T02:34:33.1250000Z
System.Net.Sockets Verbose: 0 : [2932] 000001F0 : 72 76 69 63 65 2F 53 75-62 73 63 72 69 62 65 3C : rvice/Subscribe<
    DateTime=2009-08-06T02:34:33.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000200 : 2F 61 3A 41 63 74 69 6F-6E 3E 3C 56 73 44 65 62 : /a:Action><VsDeb
    DateTime=2009-08-06T02:34:33.1406250Z
System.Net.Sockets Verbose: 0 : [2932] 00000210 : 75 67 67 65 72 43 61 75-73 61 6C 69 74 79 44 61 : uggerCausalityDa
    DateTime=2009-08-06T02:34:33.1562500Z
System.Net.Sockets Verbose: 0 : [2932] 00000220 : 74 61 20 78 6D 6C 6E 73-3D 22 68 74 74 70 3A 2F : ta xmlns="http:/
    DateTime=2009-08-06T02:34:33.1718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000230 : 2F 73 63 68 65 6D 61 73-2E 6D 69 63 72 6F 73 6F : /schemas.microso
    DateTime=2009-08-06T02:34:33.1718750Z
System.Net.Sockets Verbose: 0 : [2932] 00000240 : 66 74 2E 63 6F 6D 2F 76-73 74 75 64 69 6F 2F 64 : ft.com/vstudio/d
    DateTime=2009-08-06T02:34:33.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000250 : 69 61 67 6E 6F 73 74 69-63 73 2F 73 65 72 76 69 : iagnostics/servi
    DateTime=2009-08-06T02:34:33.1875000Z
System.Net.Sockets Verbose: 0 : [2932] 00000260 : 63 65 6D 6F 64 65 6C 73-69 6E 6B 22 3E 75 49 44 : cemodelsink">uID
    DateTime=2009-08-06T02:34:33.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000270 : 50 6F 78 46 75 50 66 36-57 54 6E 4A 42 70 6A 50 : PoxFuPf6WTnJBpjP
    DateTime=2009-08-06T02:34:33.2031250Z
System.Net.Sockets Verbose: 0 : [2932] 00000280 : 72 32 30 45 63 4B 72 30-41 41 41 41 41 57 76 35 : r20EcKr0AAAAAWv5
    DateTime=2009-08-06T02:34:33.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 00000290 : 33 43 44 49 59 71 45 4B-37 30 37 78 6D 50 59 39 : 3CDIYqEK707xmPY9
    DateTime=2009-08-06T02:34:33.2187500Z
System.Net.Sockets Verbose: 0 : [2932] 000002A0 : 6C 7A 37 46 7A 2B 32 53-33 4A 51 31 48 6A 6D 46 : lz7Fz+2S3JQ1HjmF
    DateTime=2009-08-06T02:34:33.2343750Z
System.Net.Sockets Verbose: 0 : [2932] 000002B0 : 48 76 7A 56 6E 50 58 77-41 43 51 41 41 3C 2F 56 : HvzVnPXwACQAA</V
    DateTime=2009-08-06T02:34:33.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 000002C0 : 73 44 65 62 75 67 67 65-72 43 61 75 73 61 6C 69 : sDebuggerCausali
    DateTime=2009-08-06T02:34:33.2500000Z
System.Net.Sockets Verbose: 0 : [2932] 000002D0 : 74 79 44 61 74 61 3E 3C-2F 73 3A 48 65 61 64 65 : tyData></s:Heade
    DateTime=2009-08-06T02:34:33.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 000002E0 : 72 3E 3C 73 3A 42 6F 64-79 3E 3C 53 75 62 73 63 : r><s:Body><Subsc
    DateTime=2009-08-06T02:34:33.2656250Z
System.Net.Sockets Verbose: 0 : [2932] 000002F0 : 72 69 62 65 20 78 6D 6C-6E 73 3D 22 68 74 74 70 : ribe xmlns="http
    DateTime=2009-08-06T02:34:33.2812500Z
System.Net.Sockets Verbose: 0 : [2932] 00000300 : 3A 2F 2F 74 65 6D 70 75-72 69 2E 6F 72 67 2F 22 : ://tempuri.org/"
    DateTime=2009-08-06T02:34:33.2968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000310 : 3E 3C 73 75 62 73 63 72-69 62 65 72 20 78 6D 6C : ><subscriber xml
    DateTime=2009-08-06T02:34:33.2968750Z
System.Net.Sockets Verbose: 0 : [2932] 00000320 : 6E 73 3A 62 3D 22 68 74-74 70 3A 2F 2F 73 63 68 : ns:b="http://sch
    DateTime=2009-08-06T02:34:33.3125000Z
System.Net.Sockets Verbose: 0 : [2932] 00000330 : 65 6D 61 73 2E 64 61 74-61 63 6F 6E 74 72 61 63 : emas.datacontrac
    DateTime=2009-08-06T02:34:33.3281250Z
System.Net.Sockets Verbose: 0 : [2932] 00000340 : 74 2E 6F 72 67 2F 32 30-30 34 2F 30 37 2F 54 65 : t.org/2004/07/Te
    DateTime=2009-08-06T02:34:33.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000350 : 73 74 2E 42 61 73 65 22-20 78 6D 6C 6E 73 3A 69 : st.Base" xmlns:i
    DateTime=2009-08-06T02:34:33.3437500Z
System.Net.Sockets Verbose: 0 : [2932] 00000360 : 3D 22 68 74 74 70 3A 2F-2F 77 77 77 2E 77 33 2E : ="http://www.w3.
    DateTime=2009-08-06T02:34:33.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000370 : 6F 72 67 2F 32 30 30 31-2F 58 4D 4C 53 63 68 65 : org/2001/XMLSche
    DateTime=2009-08-06T02:34:33.3593750Z
System.Net.Sockets Verbose: 0 : [2932] 00000380 : 6D 61 2D 69 6E 73 74 61-6E 63 65 22 3E 3C 62 3A : ma-instance"><b:
    DateTime=2009-08-06T02:34:33.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 00000390 : 5F 41 64 64 72 65 73 73-3E 61 6D 71 70 3A 2F 2F : _Address>amqp://
    DateTime=2009-08-06T02:34:33.3750000Z
System.Net.Sockets Verbose: 0 : [2932] 000003A0 : 2F 73 75 62 73 63 72 69-62 65 72 3C 2F 62 3A 5F : /subscriber</b:_
    DateTime=2009-08-06T02:34:33.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 000003B0 : 41 64 64 72 65 73 73 3E-3C 62 3A 5F 43 6F 6E 74 : Address><b:_Cont
    DateTime=2009-08-06T02:34:33.3906250Z
System.Net.Sockets Verbose: 0 : [2932] 000003C0 : 65 78 74 73 20 78 6D 6C-6E 73 3A 63 3D 22 68 74 : exts xmlns:c="ht
    DateTime=2009-08-06T02:34:33.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 000003D0 : 74 70 3A 2F 2F 73 63 68-65 6D 61 73 2E 64 61 74 : tp://schemas.dat
    DateTime=2009-08-06T02:34:33.4062500Z
System.Net.Sockets Verbose: 0 : [2932] 000003E0 : 61 63 6F 6E 74 72 61 63-74 2E 6F 72 67 2F 32 30 : acontract.org/20
    DateTime=2009-08-06T02:34:33.4218750Z
System.Net.Sockets Verbose: 0 : [2932] 000003F0 : 30 34 2F 30 37 2F 54 65-73 74 2E 45 6E 74 69 74 : 04/07/Test.Entit
    DateTime=2009-08-06T02:34:33.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1229#1229
    DateTime=2009-08-06T02:34:33.4375000Z
System.Net.Sockets Verbose: 0 : [2932] Socket#54234833::Send()
    DateTime=2009-08-06T02:34:33.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.4687500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:33.4687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.4843750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.4843750Z
System.Net.Sockets Verbose: 0 : [2932] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:34:33.5000000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.5000000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:33.5156250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.5156250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.5312500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:33.5468750Z
System.Net.Sockets Verbose: 0 : [2932] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:33.5468750Z
System.Net.Sockets Verbose: 0 : [2932] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:33.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.5625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.5781250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:33.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:33.5937500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.6093750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.6093750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 3C                                     : ...<
    DateTime=2009-08-06T02:34:33.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:33.6250000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.6406250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.6562500Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:33.6562500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:33.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:33.6718750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.6875000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.6875000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 3C 21 61 6D 71-2E 63 74 61 67 2D 38 56 : .<.<!amq.ctag-8V
    DateTime=2009-08-06T02:34:33.7031250Z
System.Net.Sockets Verbose: 0 : [2660] 00000010 : 61 4D 6F 41 4C 74 73 47-2F 59 6D 71 2F 49 2B 57 : aMoALtsG/Ymq/I+W
    DateTime=2009-08-06T02:34:33.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000020 : 56 48 4F 77 3D 3D 00 00-00 00 00 00 00 02 00 00 : VHOw==..........
    DateTime=2009-08-06T02:34:33.7187500Z
System.Net.Sockets Verbose: 0 : [2660] 00000030 : 0B 2F 64 69 73 70 61 74-63 68 65 72             : ./dispatcher
    DateTime=2009-08-06T02:34:33.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 60#60
    DateTime=2009-08-06T02:34:33.7343750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.7500000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.7656250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:33.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.7812500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.7968750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 02                                              : .
    DateTime=2009-08-06T02:34:33.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.8125000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.8281250Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.8281250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:33.8437500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:33.8593750Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.8593750Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 01                                           : ..
    DateTime=2009-08-06T02:34:33.8750000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:33.8906250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:33.9062500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:33.9062500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 00 00 0E                                     : ....
    DateTime=2009-08-06T02:34:33.9218750Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:34:33.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:33.9375000Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:34:33.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:33.9531250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:33.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:33.9687500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:34:33.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:34.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:34.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:34.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:34.0312500Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
    DateTime=2009-08-06T02:34:34.0468750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 14#14
    DateTime=2009-08-06T02:34:34.0625000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Receive()
    DateTime=2009-08-06T02:34:34.0625000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Receive
    DateTime=2009-08-06T02:34:34.0781250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00                                           : ..
    DateTime=2009-08-06T02:34:34.1093750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 2#2
    DateTime=2009-08-06T02:34:34.1406250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:34.1718750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:34.2031250Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 00 00 00 00                                     : ....
    DateTime=2009-08-06T02:34:34.2343750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:34.2500000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:34.2500000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 4#4
    DateTime=2009-08-06T02:34:34.3281250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:34.4843750Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:34.5312500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 :                                                 : 
    DateTime=2009-08-06T02:34:34.7343750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:34:34.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:34.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:34:34.7812500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : CE                                              : .
    DateTime=2009-08-06T02:34:34.7968750Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:34.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:34:34.8750000Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:34:34.9687500Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:34:34.9843750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:34:35.0000000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:34:35.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Send()
    DateTime=2009-08-06T02:34:35.0312500Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:36:20.7656250Z
System.Net.Sockets Verbose: 0 : [2148] Data from Socket#44150175::Receive
    DateTime=2009-08-06T02:36:20.8281250Z
System.Net.Sockets Verbose: 0 : [3352] Socket#44150175::Send()
    DateTime=2009-08-06T02:36:20.9531250Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 00                                              : .
    DateTime=2009-08-06T02:36:23.7187500Z
System.Net.Sockets Verbose: 0 : [2148] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:36:23.7968750Z
System.Net.Sockets Verbose: 0 : [3352] Data from Socket#44150175::Send
    DateTime=2009-08-06T02:36:23.8125000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:36:23.9218750Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 1#1
    DateTime=2009-08-06T02:36:24.0156250Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Send()
    DateTime=2009-08-06T02:36:25.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Socket#44150175::Receive()
    DateTime=2009-08-06T02:36:32.4531250Z
System.Net.Sockets Verbose: 0 : [4004] TcpClient#32176063::Close()
    DateTime=2009-08-06T02:36:33.7656250Z
System.Net.Sockets Verbose: 0 : [2660] Data from Socket#41014879::Send
    DateTime=2009-08-06T02:36:33.8437500Z
System.Net.Sockets Error: 0 : [2148] Exception in the Socket#44150175::Receive - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:35.9218750Z
System.Net.Sockets Verbose: 0 : [2660] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:36:35.9375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting Socket#44150175::Receive() 	-> 0#0
    DateTime=2009-08-06T02:36:35.9531250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Send() 	-> 1#1
    DateTime=2009-08-06T02:36:36.0000000Z
System.Net.Sockets Verbose: 0 : [4004] TcpClient#32176063::Dispose()
    DateTime=2009-08-06T02:36:36.0000000Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Send()
    DateTime=2009-08-06T02:36:36.0625000Z
System.Net.Sockets Verbose: 0 : [4004] Socket#44150175::Dispose()
    DateTime=2009-08-06T02:36:36.0937500Z
System.Net.Sockets Error: 0 : [2660] Exception in the Socket#41014879::Send - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:36.1093750Z
System.Net.Sockets Verbose: 0 : [4004] Exiting TcpClient#32176063::Dispose() 
    DateTime=2009-08-06T02:36:36.1406250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Send() 	-> 0#0
    DateTime=2009-08-06T02:36:36.1562500Z
System.Net.Sockets Verbose: 0 : [4004] Exiting TcpClient#32176063::Close() 
    DateTime=2009-08-06T02:36:36.2031250Z
System.Net.Sockets Verbose: 0 : [3352] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:36:36.2187500Z
System.Net.Sockets Verbose: 0 : [2148] TcpClient#32176063::Close()
    DateTime=2009-08-06T02:36:36.2343750Z
System.Net.Sockets Verbose: 0 : [1240] TcpClient#2637164::Close()
    DateTime=2009-08-06T02:36:36.2500000Z
System.Net.Sockets Verbose: 0 : [2660] TcpClient#2637164::Close()
    DateTime=2009-08-06T02:36:36.2500000Z
System.Net.Sockets Verbose: 0 : [1240] TcpClient#2637164::Dispose()
    DateTime=2009-08-06T02:36:36.2656250Z
System.Net.Sockets Verbose: 0 : [2660] TcpClient#2637164::Dispose()
    DateTime=2009-08-06T02:36:36.2656250Z
System.Net.Sockets Verbose: 0 : [1240] Socket#41014879::Dispose()
    DateTime=2009-08-06T02:36:36.2812500Z
System.Net.Sockets Verbose: 0 : [2660] Socket#41014879::Dispose()
    DateTime=2009-08-06T02:36:36.2968750Z
System.Net.Sockets Verbose: 0 : [1240] Exiting TcpClient#2637164::Dispose() 
    DateTime=2009-08-06T02:36:36.3125000Z
System.Net.Sockets Verbose: 0 : [2660] Exiting Socket#41014879::Dispose() 
    DateTime=2009-08-06T02:36:36.3281250Z
System.Net.Sockets Verbose: 0 : [1240] Exiting TcpClient#2637164::Close() 
    DateTime=2009-08-06T02:36:36.3281250Z
System.Net.Sockets Verbose: 0 : [2660] Exiting TcpClient#2637164::Dispose() 
    DateTime=2009-08-06T02:36:36.3437500Z
System.Net.Sockets Verbose: 0 : [3696] Socket#41014879::Send()
    DateTime=2009-08-06T02:36:36.3593750Z
System.Net.Sockets Verbose: 0 : [2660] Exiting TcpClient#2637164::Close() 
    DateTime=2009-08-06T02:36:36.3750000Z
System.Net.Sockets Verbose: 0 : [2148] TcpClient#32176063::Dispose()
    DateTime=2009-08-06T02:36:36.3906250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting Socket#44150175::Send() 	-> 1#1
    DateTime=2009-08-06T02:36:36.4375000Z
System.Net.Sockets Verbose: 0 : [2148] Exiting TcpClient#32176063::Dispose() 
    DateTime=2009-08-06T02:36:36.4531250Z
System.Net.Sockets Verbose: 0 : [3696] TcpClient#2637164::Close()
    DateTime=2009-08-06T02:36:36.4531250Z
System.Net.Sockets Verbose: 0 : [2148] Exiting TcpClient#32176063::Close() 
    DateTime=2009-08-06T02:36:36.4687500Z
System.Net.Sockets Verbose: 0 : [3696] TcpClient#2637164::Dispose()
    DateTime=2009-08-06T02:36:36.4843750Z
System.Net.Sockets Verbose: 0 : [3352] TcpClient#32176063::Close()
    DateTime=2009-08-06T02:36:36.5000000Z
System.Net.Sockets Verbose: 0 : [3696] Exiting TcpClient#2637164::Dispose() 
    DateTime=2009-08-06T02:36:36.5000000Z
System.Net.Sockets Verbose: 0 : [3352] TcpClient#32176063::Dispose()
    DateTime=2009-08-06T02:36:36.5156250Z
System.Net.Sockets Verbose: 0 : [3696] Exiting TcpClient#2637164::Close() 
    DateTime=2009-08-06T02:36:36.5156250Z
System.Net.Sockets Verbose: 0 : [3352] Exiting TcpClient#32176063::Dispose() 
    DateTime=2009-08-06T02:36:36.5312500Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:36:36.5312500Z
System.Net.Sockets Verbose: 0 : [3352] Exiting TcpClient#32176063::Close() 
    DateTime=2009-08-06T02:36:36.5468750Z
System.Net.Sockets Verbose: 0 : [4028] Data from Socket#54234833::Send
    DateTime=2009-08-06T02:36:36.5625000Z
System.Net.Sockets Verbose: 0 : [2760] Data from Socket#54234833::Receive
    DateTime=2009-08-06T02:36:36.5625000Z
System.Net.Sockets Verbose: 0 : [4028] 00000000 : 01                                              : .
    DateTime=2009-08-06T02:36:36.5781250Z
System.Net.Sockets Verbose: 0 : [2760] 00000000 : 08                                              : .
    DateTime=2009-08-06T02:36:36.5781250Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 1#1
    DateTime=2009-08-06T02:36:36.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 1#1
    DateTime=2009-08-06T02:36:36.5937500Z
System.Net.Sockets Verbose: 0 : [4028] Socket#54234833::Send()
    DateTime=2009-08-06T02:36:36.5937500Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Receive()
    DateTime=2009-08-06T02:36:36.6093750Z
System.Net.Sockets Error: 0 : [4028] Exception in the Socket#54234833::Send - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:36.6093750Z
System.Net.Sockets Error: 0 : [2760] Exception in the Socket#54234833::Receive - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:36.6250000Z
System.Net.Sockets Verbose: 0 : [4028] Exiting Socket#54234833::Send() 	-> 0#0
    DateTime=2009-08-06T02:36:36.6406250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting Socket#54234833::Receive() 	-> 0#0
    DateTime=2009-08-06T02:36:36.6718750Z
System.Net.Sockets Verbose: 0 : [1260] Socket#54234833::Send()
    DateTime=2009-08-06T02:36:39.0468750Z
System.Net.Sockets Error: 0 : [1260] Exception in the Socket#54234833::Send - An established connection was aborted by the software in your host machine
    DateTime=2009-08-06T02:36:40.4062500Z
System.Net.Sockets Verbose: 0 : [2760] TcpClient#17690816::Close()
    DateTime=2009-08-06T02:36:40.4218750Z
System.Net.Sockets Verbose: 0 : [1260] Exiting Socket#54234833::Send() 	-> 0#0
    DateTime=2009-08-06T02:36:40.4218750Z
System.Net.Sockets Verbose: 0 : [2760] TcpClient#17690816::Dispose()
    DateTime=2009-08-06T02:36:40.4375000Z
System.Net.Sockets Verbose: 0 : [2760] Socket#54234833::Dispose()
    DateTime=2009-08-06T02:36:40.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting TcpClient#17690816::Dispose() 
    DateTime=2009-08-06T02:36:40.4531250Z
System.Net.Sockets Verbose: 0 : [2760] Exiting TcpClient#17690816::Close() 
    DateTime=2009-08-06T02:36:40.4843750Z
System.Net.Sockets Verbose: 0 : [1260] TcpClient#17690816::Close()
    DateTime=2009-08-06T02:36:40.5156250Z
System.Net.Sockets Verbose: 0 : [1260] TcpClient#17690816::Dispose()
    DateTime=2009-08-06T02:36:40.5312500Z
System.Net.Sockets Verbose: 0 : [0288] TcpClient#17690816::Close()
    DateTime=2009-08-06T02:36:40.5468750Z
System.Net.Sockets Verbose: 0 : [1260] Exiting TcpClient#17690816::Dispose() 
    DateTime=2009-08-06T02:36:40.5468750Z
System.Net.Sockets Verbose: 0 : [0288] TcpClient#17690816::Dispose()
    DateTime=2009-08-06T02:36:40.5625000Z
System.Net.Sockets Verbose: 0 : [1260] Exiting TcpClient#17690816::Close() 
    DateTime=2009-08-06T02:36:42.0468750Z
System.Net.Sockets Verbose: 0 : [0288] Exiting TcpClient#17690816::Dispose() 
    DateTime=2009-08-06T02:36:43.2812500Z
System.Net.Sockets Verbose: 0 : [0288] Exiting TcpClient#17690816::Close() 
    DateTime=2009-08-06T02:36:43.3281250Z
System.Net Error: 0 : [2932] Exception in the 
#12549444::UnhandledExceptionHandler - Cannot access a disposed object.
Object name: 'System.Net.Sockets.NetworkStream'.
    DateTime=2009-08-06T02:36:43.9375000Z
System.Net Error: 0 : [2932]    at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMqPubSub1\frmMain.cs:line 347
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message& m)
   at System.Windows.Forms.ButtonBase.WndProc(Message& m)
   at System.Windows.Forms.Button.WndProc(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in G:\Patrick\Development\C#.NetProjects\RabbitMQ\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()
    DateTime=2009-08-06T02:36:44.0000000Z
-------------- next part --------------
  <system.diagnostics>
    <trace autoflush="true" />
    <sources>
      <source name="System.Net">
        <listeners>
          <add name="System.Net"/>
        </listeners>
      </source>
      <source name="System.Net.HttpListener">
        <listeners>
          <add name="System.Net"/>
        </listeners>
      </source>
      <source name="System.Net.Sockets">
        <listeners>
          <add name="System.Net"/>
        </listeners>
      </source>
      <source name="System.Net.Cache">
        <listeners>
          <add name="System.Net"/>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add
       name="System.Net"
       type="System.Diagnostics.TextWriterTraceListener"
        initializeData="C:\System.Net.TraceRabbitMq.log"
       traceOutputOptions = "DateTime"
              />
    </sharedListeners>
    <switches>
      <add name="System.Net" value="Verbose" />
      <add name="System.Net.Sockets" value="Verbose" />
      <add name="System.Net.Cache" value="Verbose" />
      <add name="System.Net.HttpListener" value="Verbose" />
    </switches>
  </system.diagnostics>  

From darien at kindlund.com  Sun Aug  9 20:52:47 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Sun, 9 Aug 2009 15:52:47 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <4A7E8FAA.3030202@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com> 
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com> 
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com> 
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com> 
	<4A7E8FAA.3030202@lshift.net>
Message-ID: <50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>

> I reckon the cause is some inefficiency in the way we process stomp bodies,
> causing the server to allocate far more memory than it ought to.
>
> Shouldn't be too hard to track down and fix. Will do so hopefully this week.
>
> Thanks again for your detailed bug report and constructing such a simple
> test case. Saves us a lot of time.

No problem; glad to help.  When you're ready to test the fix on real
data, let me know.  I'd be willing to do some testing, so long as the
patch only requires recompiling the STOMP adapter (as I'm using the
pre-packaged v1.6.0 of RabbitMQ).

This particular bug makes me wonder about a much larger issue: In
general, how *should* RabbitMQ behave when it's fed an astronomically
large message size?

Let's say that RabbitMQ is smart, in that if the message is to big to
fit into RAM, it will attempt to page the rest of the message onto
disk ... but what happens when the disk is completely full and there's
simply no space left?

Ideally, I'm thinking (in this scenario) RabbitMQ should gracefully
return an error message to the producer, discard the message, and
somehow terminate the producer's send operation.  I'm not sure if this
is exactly how it's handled already -- or if this behavior is
consistent across all the different connector transports (e.g., HTTP,
STOMP).

I'm not an AMQP spec expert, but if the AMQP spec requires that all
producers supply the message size in the header (ahead of time), then
RabbitMQ could easily perform sanity checks on the maximum allowable
message size.  A RabbitMQ admin could specify this configuration
option in the /etc/rabbitmq/rabbitmq.conf file... or RabbitMQ could
approximate a maximal message size by looking at the total RAM + a
portion of the unused swap.  That way RabbitMQ could inspect the
message size and pre-emptively reject the producer's message before
running into the out-of-RAM/diskspace issue.

If the AMQP spec doesn't require producers to tell RabbitMQ the
message size in an initial header, I'm guessing that feature would be
very beneficial in a future version.

Of course, this 'message size' sanity check may become even harder to
implement, in a clustered environment.  Perhaps all cluster members
have to agree on some max threshold... or if each cluster member has
their own threshold, then the producer will have to play the odds of
getting their message sent properly -- depending on their message
size.

I'm thinking you guys have already thought/implemented something like
this... I'd be interested to know how RabbitMQ behaves currently in
this scenario as well as if that behavior is ideal.

Thanks,
-- Darien



From alexis.richardson at gmail.com  Sun Aug  9 22:25:48 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Sun, 9 Aug 2009 22:25:48 +0100
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <b0200d7f0908080628g233cd1f9i70e2171f876a505c@mail.gmail.com>
References: <b0200d7f0908060732i1e9ac3efg9ef4a83ed68e76f@mail.gmail.com>
	<167204d20908070352g43e8e2efv732f664bdd398bb0@mail.gmail.com>
	<b0200d7f0908080628g233cd1f9i70e2171f876a505c@mail.gmail.com>
Message-ID: <167204d20908091425i58aaad1bi938372f03773ec83@mail.gmail.com>

Ben,


On Sat, Aug 8, 2009 at 2:28 PM, Ben Browitt<ben.browitt at gmail.com> wrote:
>>
>> Do you want to do MUC or IM?
>
> I'm not actually building it.
> I keep hearing about AMQP and RabbitMQ so I read the spec and the server
> docs.
> I couldn't find use cases on the web so I thought I'll try to fit the
> protocol to a fun application.

Cool - understood.



>> In fact, you can use a single approach to both.
>>
>> One approach is to have one queue per consumer 'chat window' and one
>> exchange per 'chat room'. ?The queue is bound to the exchange when the
>> user is in the chatroom. ?Then, IM is a special case of MUC - it is a
>> chatroom with two participants.
>>
>> Another approach would be to have one queue per consumer, and have
>> that queue bound to the exchange(s) N times, where N is the number of
>> chatrooms (or IMs) which the consumer is currently in. ?In this
>> approach, you will need to identify which message came from which
>> room, before you show the messages to the user. ?That's easy but it's
>> extra work and data to carry around.
>
> When a client sends a message to another client he usually doesn't create a
> chatroom for two,
> he just sends the message and the server routes it. With your suggestion the
> server will create
> the room if it doesn't exists when it needs to route a message.

What I am suggesting is that the solution for IM can use queues.  In
AMQP you can also think of queues as buffers with configurable
properties including routing rules based on AMQP's "bindings" and QoS
eg durability.  So, for an IM example you could have each user
consuming a message stream of 'what the other user said' through that
user's queue.  So, yes, when the queue doesn't exist, and is needed,
it should be created.  It can be deleted later, or kept around -
depending on what you want to achieve.




> When all the users leaves a MUC room if it is not persistent the server
> destroys it.

You could set up an AMQP MUC system to do that if you liked.  Or, you
could set it up to make the queues durable and therefore not destroyed
in this case.




> What will be the case with a chatroom with two participants?

It's up to you.

I would suggest deleting the queues used for the IM once the IM has completed.

Separately, you might want to add the feature "being able to send
messages when the other user is offline.  For this, you would want the
queue lifecycle to be independent of the user's connections.



> Maybe the server will destroy it when both users are offline?

It comes down to how you set up your system.  AMQP is very flexible,
eg allowing both the cases (a) destroy queues, (b) keep queues.


> Is there a way to destroy an exchange if it is not active for several
> minutes to save memory?

You can destroy exchanges whenever you like.  How you monitor activity
is up to you.

There isn't a 'built in' functions for 'delete an unused exchange
after time T'.  Some of the ideas Paul was talking about could be
helpful here - using presence to manage internal broker lifecycle.

Direct and fanout exchanges are 'lightweight' lookup tables so you
might want to manage memory by monitoring overall memory use and user
activity.


> Can you use a standard XMPP client with this setup?

You can use an XMPP client if you run RabbitMQ with the XMPP adaptor.



>> Let me know if you want more detail on either of the above, eg which
>> exchange type to use.
>
> I thought of a non durable exchange. One exchange per chatroom and one queue
> per user.

That seems like a good approach.  In this case you would use a
'fanout' exchange.

Another approach would be to use just one 'direct' exchange and bind
all user queues to it using the routing keys corresponding to the
chatrooms the users are in.

If you haven't yet seen it, the 'rabbits and warrens' intro article
linked to here is good: http://www.rabbitmq.com/how.html



>> > I read the xmpp gateway
>> > docs and have some questions.
>> >
>> > In a chat we want to be able to get presence from users on our
>> > friend-list,
>> > send them messages
>> > and send subscription request and messages to users not yet on our
>> > friend-list.
>>
>> Do you only want to enable chat when both users are online and have a
>> 'friend' relationship?
>>
>>
>> > One possibility is that each user will have an exchange and a queue with
>> > binding to his own exchange.
>> > When user1 wants to send a message to user2 he send it directly to the
>> > exchange of user2.
>> > There is a problem with presence updates. If user1 changes his presence,
>> > he'll have to?sends the update
>> > to the exchange of all the users?on his friend-list. With this design we
>> > move the logic to the client rather then use the AMQP features.
>>
>> One approach to presence is to broadcast changes using the pubsub
>> system. ?Changes could include:
>>
>> * User goes online / offline
>> * User changes their 'status message'
>
>
> All I know is that there are queues exchanges and bindings.
> What do you mean by the pubsub system?

By 'the pubsub system' I mean the RabbitMQ broker, and how you have
configured the queues by binding them to the exchange(s).

For example you can do 'pubsub' by binding queues to a direct
exchange.  Take a look at slides 20-22 from the presentation linked to
from this page:
http://skillsmatter.com/podcast/erlang/alexis-richardson-introduction-to-rabbitmq
 This shows how a queue can use one or more bindings to 'subscribe' to
what producers ('publishers') are saying.

So there is nothing stopping you using the same mechanism to publish
presence information.  Suppose that whenever a user's presence
changes, a message is sent to a direct exchange on the broker with key
'username' and content 'presence_update_info'.  Then, anyone who cares
about that user's presence just has to bind a queue with the key
'username'.  I suggest you try and implement this pattern - it should
be very straightforward.


>> > Another option is that when a user logs in he'll create a binding to the
>> > exchanges of all the users on his friend-list.
>>
>> You can do this but it creates quite a lot of churn on the exchange
>> layer. ?Paul's suggestion is one way to prevent that. ?Another is to
>> use exchange-exchange bindings, which we are also looking at.
>
> I meant to create bindings to all your online friends.

Yes I understand that.


> Can you explain how Paul's suggestion or exchange-exchange bindings solve or
> improve it?

Mostly they are performance optimisations that I would ignore for now,
not least because they are under investigation and not implemented yet
:-)

When you create a binding, this action adds information to the routing
tables (ie the exchange).  This carries a (very small) computational
cost that you may not want to pay (if under heavy load, say).
Additionally if you are running in a multi-machine cluster, RabbitMQ
will copy the bindings to other machines, so that the routing table
info is shared across the cluster.  This additional copying carries a
(higher) computational cost.  To avoid paying this cost, you might
want to optimise how much binding and unbinding takes place.  Using
exchange-exchange bindings would mean, for example, that you could
store N bindings persistently on one exchange, corresponding to a
user's N friends, and have one binding between exchanges which gets
destroyed when that user is offline, and recreated whenever they come
online.  This would save you from having to make N bindings every time
a user came online.




>> > When user1 want to send a private message or a presence update to user2
>> > he'll send it to his own exchange and it'll be directed to user2. The
>> > problem with this design is that users without mutual presence
>> > subscription
>> > can't send private message to each other and can't send subscription
>> > requests.
>>
>> You can decouple presence, which is about status updates, from
>> friendship. ?If you like, you could have a set up where one user can
>> DM another, provided they are mutual friends, regardless of who is
>> online. ?Do you want that?
>>
>> Subscription requests could also be implemented using a queue - one
>> per user. ?Whenever a new user wishes to request mutual friendship
>> with user A, then user A could be notified of this via a queue.
>
> In that case will the server send the friendship request directly to the
> queue?

Yes.

> Do you need another queue per user just for friendship requests or can you
> use the same queue from above?

It's up to you, but I would have, for each user, a special queue for
messages from people they are not following yet.

Is this helping?

alexis





>> > Can you please share your thoughts on the two options and maybe other
>> > design
>> > options?
>>
>> I've tried to shed some light on some of the issues above. ?Feel free
>> to elaborate on your needs and ask more questions.
>>
>> alexis
>>
>>
>>
>>
>>
>> > Thanks
>> > _______________________________________________
>> > rabbitmq-discuss mailing list
>> > rabbitmq-discuss at lists.rabbitmq.com
>> > http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>> >
>> >
>
>



From matthias at lshift.net  Sun Aug  9 23:56:29 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Sun, 09 Aug 2009 23:56:29 +0100
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<4A7D2CD0.9020305@lshift.net>	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
	<4A7D462F.3020401@lshift.net>	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
Message-ID: <4A7F541D.4050701@lshift.net>

Darien,

Darien Kindlund wrote:
> This particular bug makes me wonder about a much larger issue: In
> general, how *should* RabbitMQ behave when it's fed an astronomically
> large message size?
> 
> Let's say that RabbitMQ is smart, in that if the message is to big to
> fit into RAM, it will attempt to page the rest of the message onto
> disk ... but what happens when the disk is completely full and there's
> simply no space left?
> 
> Ideally, I'm thinking (in this scenario) RabbitMQ should gracefully
> return an error message to the producer, discard the message, and
> somehow terminate the producer's send operation.  I'm not sure if this
> is exactly how it's handled already -- or if this behavior is
> consistent across all the different connector transports (e.g., HTTP,
> STOMP).
> 
> I'm not an AMQP spec expert, but if the AMQP spec requires that all
> producers supply the message size in the header (ahead of time), then
> RabbitMQ could easily perform sanity checks on the maximum allowable
> message size.  A RabbitMQ admin could specify this configuration
> option in the /etc/rabbitmq/rabbitmq.conf file... or RabbitMQ could
> approximate a maximal message size by looking at the total RAM + a
> portion of the unused swap.  That way RabbitMQ could inspect the
> message size and pre-emptively reject the producer's message before
> running into the out-of-RAM/diskspace issue.

In theory that's all possible in AMQP, which requires the content-length 
to be transmitted at the beginning, an even STOMP, as long as producers 
include the optional content-length header there.

One complication is that not all messages do in fact need to be stored - 
there may be no queues to send the message to, or the queues may have 
only auto-ack consumers (in which case the message could in theory be 
"streamed through").

RabbitMQ doesn't implement anything fancy here; if a message doesn't fit 
into available virtual memory then the broker will die.

RabbitMQ can still transmit large messages though. The way to do that is 
to get the producer to chop up the original message into smaller ones, 
and for the consumer to reassemble them. This has the added advantage of 
making it easier to deal with failures by performing partial 
retransmissions - something that isn't possible if messages are treated 
as indivisible entities.


Regards,

Matthias.



From matthias at lshift.net  Mon Aug 10 00:02:40 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Mon, 10 Aug 2009 00:02:40 +0100
Subject: [rabbitmq-discuss] Receiving Undelivered Persistent Messages
In-Reply-To: <4e1b00700908070903i796986c8v978c49c071376ffe@mail.gmail.com>
References: <4e1b00700908070903i796986c8v978c49c071376ffe@mail.gmail.com>
Message-ID: <4A7F5590.8080707@lshift.net>

Vidit,

Vidit Drolia wrote:
> I am using a durable exchange, durable queue and persistent delivery
> mode for messages. This makes sure that the messages I receive are
> persisted till they have been consumed.

More precisely, this makes sure messages are persisted until a consumer 
has *acknowledged* them.

> The consumer is receiving messages by subscription. However, if the
> consumer dies, the next time it runs again it receives only one
> message. I believe this is by design of receiving messages by
> subscription.

Err, no. When a consumer's channel or connection are closed then all 
unacknowledged messages become available for consumption by other (or 
subsequent) consumers.

Is that not what you are seeing?


Regards,

Matthias.



From matthias at lshift.net  Mon Aug 10 00:10:54 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Mon, 10 Aug 2009 00:10:54 +0100
Subject: [rabbitmq-discuss] Rabbitmq+Ubuntu+TIMEOUT
In-Reply-To: <376f3e6f0908071617p54c4aed8m4a94ef52e496f451@mail.gmail.com>
References: <376f3e6f0908071617p54c4aed8m4a94ef52e496f451@mail.gmail.com>
Message-ID: <4A7F577E.6080903@lshift.net>

Suhail,

Suhail Doshi wrote:
> I installed RabbitMQ using the *.deb file available on the download 
> page. Whenever I try to run the server however I get: 
> 
> suhail ~: /etc/init.d/rabbitmq-server restart
> Restarting rabbitmq-server: No nodes running
> TIMEOUT - check /var/log/rabbitmq/startup_{log,err}
> rabbitmq-server.
> 
> The startup_log/err files do not provide much information, this problem 
> has been discussed a bit 
> before: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-April/003767.html
> 
> I can't tell if it's a problem with my hostname or perhaps erlang 
> installation. I am using Erlang R13B01 (erts-5.7.2).

Are you sure it's not the very same problem described in that thread, 
namely the use of a custom erlang installation with a packaged RabbitMQ 
installation?

The thread at 
http://www.nabble.com/Error-(re)installing-rabbit-on-ubuntu-9.04-td24633591.html 
may also be of help.


Regards,

Matthias.



From viditdrolia at gmail.com  Mon Aug 10 03:16:55 2009
From: viditdrolia at gmail.com (Vidit Drolia)
Date: Sun, 9 Aug 2009 22:16:55 -0400
Subject: [rabbitmq-discuss] Receiving Undelivered Persistent Messages
In-Reply-To: <4A7F5590.8080707@lshift.net>
References: <4e1b00700908070903i796986c8v978c49c071376ffe@mail.gmail.com>
	<4A7F5590.8080707@lshift.net>
Message-ID: <4e1b00700908091916x7cd53333i3f77e69de0238d5a@mail.gmail.com>

On Sun, Aug 9, 2009 at 7:02 PM, Matthias Radestock<matthias at lshift.net> wrote:
> Vidit,
>
> Vidit Drolia wrote:
>>
>> I am using a durable exchange, durable queue and persistent delivery
>> mode for messages. This makes sure that the messages I receive are
>> persisted till they have been consumed.
>
> More precisely, this makes sure messages are persisted until a consumer has
> *acknowledged* them.
>
>> The consumer is receiving messages by subscription. However, if the
>> consumer dies, the next time it runs again it receives only one
>> message. I believe this is by design of receiving messages by
>> subscription.
>
> Err, no. When a consumer's channel or connection are closed then all
> unacknowledged messages become available for consumption by other (or
> subsequent) consumers.
>
> Is that not what you are seeing?
>

When a consumer's channel is closed, then all unacknowledged messages
are still available in the queue for subsequent consumers. If there
are N messages in the queue when the last consumer died, then when a
new consumer fires up, 1 message is delivered when the consumer
requests for a message by subscription. That is to say, executing:

while(true){
  delivery = consumer.nextDelivery();
//do something...
//acknowledge for delivery
}

will deliver 1 message leaving N-1 messages in the queue. However,
after one execution of the above loop, the consumer keeps waiting for
the next delivery, even though there are N-1 messages in the queue. My
question was, is this supposed to happen by design of a subscription.
If so, then that means I need to pro-actively consume the messages
using channel.basicGet(). If not, then how can I get the exchange to
deliver all the messages available in the queue?


Regards,

-- 
Vidit Drolia

>
> Regards,
>
> Matthias.
>



From matthias at lshift.net  Mon Aug 10 09:16:17 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Mon, 10 Aug 2009 09:16:17 +0100
Subject: [rabbitmq-discuss] Receiving Undelivered Persistent Messages
In-Reply-To: <4e1b00700908091916x7cd53333i3f77e69de0238d5a@mail.gmail.com>
References: <4e1b00700908070903i796986c8v978c49c071376ffe@mail.gmail.com>	<4A7F5590.8080707@lshift.net>
	<4e1b00700908091916x7cd53333i3f77e69de0238d5a@mail.gmail.com>
Message-ID: <4A7FD751.1030408@lshift.net>

Vidit,

Vidit Drolia wrote:

> When a consumer's channel is closed, then all unacknowledged messages
> are still available in the queue for subsequent consumers. If there
> are N messages in the queue when the last consumer died, then when a
> new consumer fires up, 1 message is delivered when the consumer
> requests for a message by subscription. That is to say, executing:
> 
> while(true){
>   delivery = consumer.nextDelivery();
> //do something...
> //acknowledge for delivery
> }
> 
> will deliver 1 message leaving N-1 messages in the queue. However,
> after one execution of the above loop, the consumer keeps waiting for
> the next delivery, even though there are N-1 messages in the queue. My
> question was, is this supposed to happen by design of a subscription.

No, that is not supposed to happen. If there are N messages in the queue 
and you have one consumer connecting to it and consuming messages as you 
describe then that consumer should receive all the messages.

What client are you using? Can you post all the code to reproduce this?


Regards,

Matthias.



From alexis.richardson at gmail.com  Mon Aug 10 09:26:58 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Mon, 10 Aug 2009 09:26:58 +0100
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <167204d20908091425i58aaad1bi938372f03773ec83@mail.gmail.com>
References: <b0200d7f0908060732i1e9ac3efg9ef4a83ed68e76f@mail.gmail.com>
	<167204d20908070352g43e8e2efv732f664bdd398bb0@mail.gmail.com>
	<b0200d7f0908080628g233cd1f9i70e2171f876a505c@mail.gmail.com>
	<167204d20908091425i58aaad1bi938372f03773ec83@mail.gmail.com>
Message-ID: <167204d20908100126o3d8a389x71270368b7b1521@mail.gmail.com>

Ben,

I've had a few more thoughts about your questions and wanted to
summarise them here:

My understanding is that you are curious about RabbitMQ and AMQP, so
you are interested in how chat would be implemented using them.
That's a great idea.

I think the best approach is if you hack up a quick prototype.  Doing
this will quickly show you what the main moving parts are, and how to
fit them together.  Because AMQP is designed for general purpose
messaging including queueing and pubsub, as opposed to 'single use
special cases' such as IM chat or MUC chat, it is abstract and
flexible.  This makes it a great tool for building systems but working
out how to build them in the best way, may not be immediately obvious.
 So getting your hands dirty with some immediate coding may be the
best way to make things more concrete.

You asked about using XMPP with RabbitMQ.  I would not recommend using
this initially.  It will not show you anything useful about how AMQP
works.  The implementation enables RabbitMQ AMQP messages to be
exposed through an XMPP IM interface, so that (eg) people can chat
with RabbitMQ, or with each other through RabbitMQ.  This means you
can use RabbitMQ as a 'drop in' pubsub server behind an XMPP IM
facade.  This is very useful.  However note that RabbitMQ's XMPP
adaptor is for vanilla IM only and does not implement XEP-0045 or
XEP-0060 or PEP.

Implicit in your question is that you'd be interested in whether AMQP
and RabbitMQ would be a good tool for implementing a chat system.  In
my view, the answer to that is yes: you should be able to build your
own very powerful chat system using RabbitMQ AMQP.  Moreover, RabbitMQ
is built with erlang which is also used in ejbabberd XMPP, in
Facebook's chat app, and afaik for parts of 37signals Campfire.

Basically, to build a chat system using RabbitMQ, including presence
updates, friend requests, etc, you need to think of every action in
your system as being some sort of message.  Then ask what is the best
routing model so that the right messages get delivered to the right
queues and on to the right consumers.

To illustrate my point about AMQP's flexibility, consider the following:

On the one hand, you may see IM as an abstraction of a network
connection (eg TCP) between two users via a chat server.  In this
view, the job of an IM client is to send messages that one user types,
over some network connection, to the other user, and vice versa.  If
the network connection goes down then the user may still see their
messages appearing on their own client GUI, but they may not know
which messages (if any) have been delivered to the chat server or
indeed to the other user.

So to implement this you could create a client that wrote all of its
users messages to the GUI screen, and concurrently attempted to send
them over the wire.  In an AMQP based implementation, these messages
would be AMQP messages sent to eg a direct exchange on a RabbitMQ
broker acting as the chat server.  The messages might have the routing
key "chat_ID_from_user_ID".  Then, the second user would have a queue,
which was bound to the exchange, with just that key.

In other words the second user's queue would be used ONLY to buffer
messages sent in chat chat_ID and from the first user to the second.
The second user would be the sole consumer from that queue and it
would contain only those messages from the first user in that chat,
that had been processed by the broker.  Then, to get messages back
from the second user to the first, the same exchange would be used,
but the second user would have their OWN queue and this would be bound
to the exchange with a different key, e.g.
"chat_ID_from_seconduser_ID".

In the above implementation:

* One direct exchange is used for everything
* There are two queues per chat
* Each queue contains only messages from one user to another
* The messages on any given queue may be a subset of what those
messages' producer created in his or her user GUI, because eg failure
might have prevented the arrival or processing of a message
* We have not mentioned lifecycle, but it is implicit that the chat
queues are bound to the session lifecycle, possibly with some margin
to allow for temporary disconnection and reconnection, handled by the
session (just like Google Talk seems to do it)

....

Now consider an alternatives implementation.

You may see IM as an interaction between two users on a shared piece
of data held eg. on a chat server.  In this view, the job of an IM
client is to send messages that one user types, over some network
connection, to the master of the shared data, and communicate updates
on that shared data to anyone who needs to see them.  If the network
connection goes down then, in this case, the user cannot complete the
operation of updating the shared data because it is remote, so that
*nothing* appears on their GUI screen except an error message.

So to implement this you could create a client that wrote all of its
users messages straight to AMQP messages sent to eg a direct exchange
on a RabbitMQ broker acting as the chat server.  The messages might
have the routing key "chat_ID".  BOTH chat users would each have a
queue, which was bound to the exchange, with that key.

Each user's queue would be used to buffer ALL messages in chat
chat_ID, ie. messages from both users would be in each queue.  The
users would not see the messages until they had been consumed by the
clients, which would publish all messages to the appropriate GUI
screen.

In the above implementation:

* One direct exchange is used for everything
* There are two queues per chat
* Each queue contains only the same messages - these are the messages
that the broker has processed from the users
* Both users' GUIs will show the same messages but not necessarily at
the same time
* Once again the queue and chat are implicitly of session duration

It's worth thinking about things like:

- which implementation is best - and why
- how one might do logging of the chat, in both cases
- how each case might be adapted to do MUC
- what happens if you want to change the lifecycle

Let me know what you think.

alexis























On Sun, Aug 9, 2009 at 10:25 PM, Alexis
Richardson<alexis.richardson at gmail.com> wrote:
> Ben,
>
>
> On Sat, Aug 8, 2009 at 2:28 PM, Ben Browitt<ben.browitt at gmail.com> wrote:
>>>
>>> Do you want to do MUC or IM?
>>
>> I'm not actually building it.
>> I keep hearing about AMQP and RabbitMQ so I read the spec and the server
>> docs.
>> I couldn't find use cases on the web so I thought I'll try to fit the
>> protocol to a fun application.
>
> Cool - understood.
>
>
>
>>> In fact, you can use a single approach to both.
>>>
>>> One approach is to have one queue per consumer 'chat window' and one
>>> exchange per 'chat room'. ?The queue is bound to the exchange when the
>>> user is in the chatroom. ?Then, IM is a special case of MUC - it is a
>>> chatroom with two participants.
>>>
>>> Another approach would be to have one queue per consumer, and have
>>> that queue bound to the exchange(s) N times, where N is the number of
>>> chatrooms (or IMs) which the consumer is currently in. ?In this
>>> approach, you will need to identify which message came from which
>>> room, before you show the messages to the user. ?That's easy but it's
>>> extra work and data to carry around.
>>
>> When a client sends a message to another client he usually doesn't create a
>> chatroom for two,
>> he just sends the message and the server routes it. With your suggestion the
>> server will create
>> the room if it doesn't exists when it needs to route a message.
>
> What I am suggesting is that the solution for IM can use queues. ?In
> AMQP you can also think of queues as buffers with configurable
> properties including routing rules based on AMQP's "bindings" and QoS
> eg durability. ?So, for an IM example you could have each user
> consuming a message stream of 'what the other user said' through that
> user's queue. ?So, yes, when the queue doesn't exist, and is needed,
> it should be created. ?It can be deleted later, or kept around -
> depending on what you want to achieve.
>
>
>
>
>> When all the users leaves a MUC room if it is not persistent the server
>> destroys it.
>
> You could set up an AMQP MUC system to do that if you liked. ?Or, you
> could set it up to make the queues durable and therefore not destroyed
> in this case.
>
>
>
>
>> What will be the case with a chatroom with two participants?
>
> It's up to you.
>
> I would suggest deleting the queues used for the IM once the IM has completed.
>
> Separately, you might want to add the feature "being able to send
> messages when the other user is offline. ?For this, you would want the
> queue lifecycle to be independent of the user's connections.
>
>
>
>> Maybe the server will destroy it when both users are offline?
>
> It comes down to how you set up your system. ?AMQP is very flexible,
> eg allowing both the cases (a) destroy queues, (b) keep queues.
>
>
>> Is there a way to destroy an exchange if it is not active for several
>> minutes to save memory?
>
> You can destroy exchanges whenever you like. ?How you monitor activity
> is up to you.
>
> There isn't a 'built in' functions for 'delete an unused exchange
> after time T'. ?Some of the ideas Paul was talking about could be
> helpful here - using presence to manage internal broker lifecycle.
>
> Direct and fanout exchanges are 'lightweight' lookup tables so you
> might want to manage memory by monitoring overall memory use and user
> activity.
>
>
>> Can you use a standard XMPP client with this setup?
>
> You can use an XMPP client if you run RabbitMQ with the XMPP adaptor.
>
>
>
>>> Let me know if you want more detail on either of the above, eg which
>>> exchange type to use.
>>
>> I thought of a non durable exchange. One exchange per chatroom and one queue
>> per user.
>
> That seems like a good approach. ?In this case you would use a
> 'fanout' exchange.
>
> Another approach would be to use just one 'direct' exchange and bind
> all user queues to it using the routing keys corresponding to the
> chatrooms the users are in.
>
> If you haven't yet seen it, the 'rabbits and warrens' intro article
> linked to here is good: http://www.rabbitmq.com/how.html
>
>
>
>>> > I read the xmpp gateway
>>> > docs and have some questions.
>>> >
>>> > In a chat we want to be able to get presence from users on our
>>> > friend-list,
>>> > send them messages
>>> > and send subscription request and messages to users not yet on our
>>> > friend-list.
>>>
>>> Do you only want to enable chat when both users are online and have a
>>> 'friend' relationship?
>>>
>>>
>>> > One possibility is that each user will have an exchange and a queue with
>>> > binding to his own exchange.
>>> > When user1 wants to send a message to user2 he send it directly to the
>>> > exchange of user2.
>>> > There is a problem with presence updates. If user1 changes his presence,
>>> > he'll have to?sends the update
>>> > to the exchange of all the users?on his friend-list. With this design we
>>> > move the logic to the client rather then use the AMQP features.
>>>
>>> One approach to presence is to broadcast changes using the pubsub
>>> system. ?Changes could include:
>>>
>>> * User goes online / offline
>>> * User changes their 'status message'
>>
>>
>> All I know is that there are queues exchanges and bindings.
>> What do you mean by the pubsub system?
>
> By 'the pubsub system' I mean the RabbitMQ broker, and how you have
> configured the queues by binding them to the exchange(s).
>
> For example you can do 'pubsub' by binding queues to a direct
> exchange. ?Take a look at slides 20-22 from the presentation linked to
> from this page:
> http://skillsmatter.com/podcast/erlang/alexis-richardson-introduction-to-rabbitmq
> ?This shows how a queue can use one or more bindings to 'subscribe' to
> what producers ('publishers') are saying.
>
> So there is nothing stopping you using the same mechanism to publish
> presence information. ?Suppose that whenever a user's presence
> changes, a message is sent to a direct exchange on the broker with key
> 'username' and content 'presence_update_info'. ?Then, anyone who cares
> about that user's presence just has to bind a queue with the key
> 'username'. ?I suggest you try and implement this pattern - it should
> be very straightforward.
>
>
>>> > Another option is that when a user logs in he'll create a binding to the
>>> > exchanges of all the users on his friend-list.
>>>
>>> You can do this but it creates quite a lot of churn on the exchange
>>> layer. ?Paul's suggestion is one way to prevent that. ?Another is to
>>> use exchange-exchange bindings, which we are also looking at.
>>
>> I meant to create bindings to all your online friends.
>
> Yes I understand that.
>
>
>> Can you explain how Paul's suggestion or exchange-exchange bindings solve or
>> improve it?
>
> Mostly they are performance optimisations that I would ignore for now,
> not least because they are under investigation and not implemented yet
> :-)
>
> When you create a binding, this action adds information to the routing
> tables (ie the exchange). ?This carries a (very small) computational
> cost that you may not want to pay (if under heavy load, say).
> Additionally if you are running in a multi-machine cluster, RabbitMQ
> will copy the bindings to other machines, so that the routing table
> info is shared across the cluster. ?This additional copying carries a
> (higher) computational cost. ?To avoid paying this cost, you might
> want to optimise how much binding and unbinding takes place. ?Using
> exchange-exchange bindings would mean, for example, that you could
> store N bindings persistently on one exchange, corresponding to a
> user's N friends, and have one binding between exchanges which gets
> destroyed when that user is offline, and recreated whenever they come
> online. ?This would save you from having to make N bindings every time
> a user came online.
>
>
>
>
>>> > When user1 want to send a private message or a presence update to user2
>>> > he'll send it to his own exchange and it'll be directed to user2. The
>>> > problem with this design is that users without mutual presence
>>> > subscription
>>> > can't send private message to each other and can't send subscription
>>> > requests.
>>>
>>> You can decouple presence, which is about status updates, from
>>> friendship. ?If you like, you could have a set up where one user can
>>> DM another, provided they are mutual friends, regardless of who is
>>> online. ?Do you want that?
>>>
>>> Subscription requests could also be implemented using a queue - one
>>> per user. ?Whenever a new user wishes to request mutual friendship
>>> with user A, then user A could be notified of this via a queue.
>>
>> In that case will the server send the friendship request directly to the
>> queue?
>
> Yes.
>
>> Do you need another queue per user just for friendship requests or can you
>> use the same queue from above?
>
> It's up to you, but I would have, for each user, a special queue for
> messages from people they are not following yet.
>
> Is this helping?
>
> alexis
>
>
>
>
>
>>> > Can you please share your thoughts on the two options and maybe other
>>> > design
>>> > options?
>>>
>>> I've tried to shed some light on some of the issues above. ?Feel free
>>> to elaborate on your needs and ask more questions.
>>>
>>> alexis
>>>
>>>
>>>
>>>
>>>
>>> > Thanks
>>> > _______________________________________________
>>> > rabbitmq-discuss mailing list
>>> > rabbitmq-discuss at lists.rabbitmq.com
>>> > http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>> >
>>> >
>>
>>
>



From viditdrolia at gmail.com  Mon Aug 10 15:32:47 2009
From: viditdrolia at gmail.com (Vidit Drolia)
Date: Mon, 10 Aug 2009 10:32:47 -0400
Subject: [rabbitmq-discuss] Receiving Undelivered Persistent Messages
In-Reply-To: <4A7FD751.1030408@lshift.net>
References: <4e1b00700908070903i796986c8v978c49c071376ffe@mail.gmail.com>
	<4A7F5590.8080707@lshift.net>
	<4e1b00700908091916x7cd53333i3f77e69de0238d5a@mail.gmail.com>
	<4A7FD751.1030408@lshift.net>
Message-ID: <4e1b00700908100732y184ef1dap72d6109f77a8e4cc@mail.gmail.com>

Matthias,

I am using RabbitMQ Java AMQP library ver. 1.6.0. PFA the scratch code
for the Consumer and Producer. You will have to pass in the username
and password as command line arguments.

On Mon, Aug 10, 2009 at 4:16 AM, Matthias Radestock<matthias at lshift.net> wrote:
> Vidit,
>
> Vidit Drolia wrote:
>
>> When a consumer's channel is closed, then all unacknowledged messages
>> are still available in the queue for subsequent consumers. If there
>> are N messages in the queue when the last consumer died, then when a
>> new consumer fires up, 1 message is delivered when the consumer
>> requests for a message by subscription. That is to say, executing:
>>
>> while(true){
>> ?delivery = consumer.nextDelivery();
>> //do something...
>> //acknowledge for delivery
>> }
>>
>> will deliver 1 message leaving N-1 messages in the queue. However,
>> after one execution of the above loop, the consumer keeps waiting for
>> the next delivery, even though there are N-1 messages in the queue. My
>> question was, is this supposed to happen by design of a subscription.
>
> No, that is not supposed to happen. If there are N messages in the queue and
> you have one consumer connecting to it and consuming messages as you
> describe then that consumer should receive all the messages.
>
> What client are you using? Can you post all the code to reproduce this?
>
>
> Regards,
>
> Matthias.
>



-- 
Vidit Drolia
-------------- next part --------------
A non-text attachment was scrubbed...
Name: QueueConsumer.java
Type: text/x-java
Size: 2305 bytes
Desc: not available
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090810/74b54d4a/attachment.java 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: QueueProducer.java
Type: text/x-java
Size: 1690 bytes
Desc: not available
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090810/74b54d4a/attachment-0001.java 

From tonyg at lshift.net  Mon Aug 10 17:50:59 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Mon, 10 Aug 2009 17:50:59 +0100
Subject: [rabbitmq-discuss] about the clustering of rabbitmq
In-Reply-To: <91170ee40908041936s2ee059cer33dc0e3f7dc6606b@mail.gmail.com>
References: <91170ee40907292227y35b3531wee18ff83f4cb3d22@mail.gmail.com>	
	<4A78590C.9040103@lshift.net>
	<91170ee40908041936s2ee059cer33dc0e3f7dc6606b@mail.gmail.com>
Message-ID: <4A804FF3.8090503@lshift.net>

Hi,

femto Zheng wrote:
> I want to ask these questions somewhere, so what do you suggest I to ask?

This list is a good starting place for questions about how to use AMQP
to achieve various goals.

Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Mon Aug 10 18:06:28 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Mon, 10 Aug 2009 18:06:28 +0100
Subject: [rabbitmq-discuss] simple.publish over the JSON RPC interface
In-Reply-To: <65a6e3960907301628q2baac55ck59509244e8e8429f@mail.gmail.com>
References: <65a6e3960907301628q2baac55ck59509244e8e8429f@mail.gmail.com>
Message-ID: <4A805394.7070208@lshift.net>

Hi Nathan,

Nathan Gray wrote:
> { "name":"JSONRPCError",
>   "code":500,
>   "message":"Internal error",
>   "error":"{timeout,\n    {gen_server,call,\n        [<0.432.0>,\n

I've seen this a couple of times now. I think there's something fishy
about the way we're setting timeouts. I've filed a bug and am investigating.

> Can anybody explain what I've done wrong?

It could well be the case that you're not doing *anything* wrong. I've
seen similar errors very occasionally crop up in the example code, too.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Mon Aug 10 18:24:29 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Mon, 10 Aug 2009 18:24:29 +0100
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
 over the JSON RPC interface)
In-Reply-To: <65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>	<65a6e3960908031235g2cf4b9dbv8cbbe175c67f19c1@mail.gmail.com>	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>	<65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>
	<65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>
Message-ID: <4A8057CD.9070004@lshift.net>

Nathan Gray wrote:
> "simple.publish" block until the session times out.  This seems very
> odd to me.  Is there some rationale for this design that I'm not
> understanding?

There are *two* timeouts involved:

 1. the "session" timeout. This is the length of time that an open
    channel object will survive in the absence of any active poll()
    calls. It's also used to compute the length of time to wait for
    incoming work before replying to active polls.

 2. a per-method-call timeout on JSON-RPC objects (including those
    implementing the AMQP channel API). This is a normal RPC timeout
    and defaults to five seconds.

With regard to (1), the idea is that because AMQP can involve
asynchronous events, there will usually be a long-polling call
outstanding -- either a cast() or a poll(). Previously this has been
fine, but I suspect now that cast() *shouldn't* also act as a long-poll.
The session timeout is set at channel creation time. If a channel is
left alone for longer than the session timeout, it closes itself.

With regard to (2), this is controllable on a per-request basis with and
"x-json-rpc-timeout" header that can take values of "default" (5s,
currently), "infinity", or a whole number of milliseconds.

So, for your specific use case:

 1. run a long-polling poll() call in the background to keep the
    channel alive.

 2. set the session timeout (argument to "open") to a bigger
    number of seconds.

 3. set each individual request timeout to longer than 5000ms by
    using the "x-json-rpc-timeout" header.

I will alter the code to make cast() non-long-polling. Thanks for
drawing this to my attention!

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From suhail at mixpanel.com  Mon Aug 10 19:38:03 2009
From: suhail at mixpanel.com (Suhail Doshi)
Date: Mon, 10 Aug 2009 11:38:03 -0700
Subject: [rabbitmq-discuss] Rabbitmq+Ubuntu+TIMEOUT
In-Reply-To: <4A7F577E.6080903@lshift.net>
References: <376f3e6f0908071617p54c4aed8m4a94ef52e496f451@mail.gmail.com> 
	<4A7F577E.6080903@lshift.net>
Message-ID: <376f3e6f0908101138q11645145kc17d88fef67e669a@mail.gmail.com>

Is the solution installing erlang 5.6.3 with the packaged version or just
install rabbitmq from source?
Suhail

On Sun, Aug 9, 2009 at 4:10 PM, Matthias Radestock <matthias at lshift.net>wrote:

> Suhail,
>
> Suhail Doshi wrote:
>
>> I installed RabbitMQ using the *.deb file available on the download page.
>> Whenever I try to run the server however I get:
>> suhail ~: /etc/init.d/rabbitmq-server restart
>> Restarting rabbitmq-server: No nodes running
>> TIMEOUT - check /var/log/rabbitmq/startup_{log,err}
>> rabbitmq-server.
>>
>> The startup_log/err files do not provide much information, this problem
>> has been discussed a bit before:
>> http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-April/003767.html
>>
>> I can't tell if it's a problem with my hostname or perhaps erlang
>> installation. I am using Erlang R13B01 (erts-5.7.2).
>>
>
> Are you sure it's not the very same problem described in that thread,
> namely the use of a custom erlang installation with a packaged RabbitMQ
> installation?
>
> The thread at
> http://www.nabble.com/Error-(re)installing-rabbit-on-ubuntu-9.04-td24633591.htmlmay also be of help.
>
>
> Regards,
>
> Matthias.
>



-- 
http://mixpanel.com
Blog: http://blog.mixpanel.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090810/2a5c3806/attachment.htm 

From brownspice at gmail.com  Mon Aug 10 21:30:50 2009
From: brownspice at gmail.com (amit bhatnagar)
Date: Mon, 10 Aug 2009 13:30:50 -0700 (PDT)
Subject: [rabbitmq-discuss] Receiving Undelivered Persistent Messages
In-Reply-To: <4e1b00700908100732y184ef1dap72d6109f77a8e4cc@mail.gmail.com>
References: <4e1b00700908070903i796986c8v978c49c071376ffe@mail.gmail.com> 
	<4A7F5590.8080707@lshift.net>
	<4e1b00700908091916x7cd53333i3f77e69de0238d5a@mail.gmail.com> 
	<4A7FD751.1030408@lshift.net>
	<4e1b00700908100732y184ef1dap72d6109f77a8e4cc@mail.gmail.com>
Message-ID: <2e1af3e2-daf1-444b-a8c7-cecf1aadd832@x6g2000prc.googlegroups.com>

Vidit.

Check the consumer code. Probably a cut and paste error, but you are
creating the connection / channel and declaring the exchange and
bindings within the loop. This is probably what is causing you to
think you have received only one of the messages that is in the
queue.

On Aug 10, 8:32?am, Vidit Drolia <viditdro... at gmail.com> wrote:
> Matthias,
>
> I am using RabbitMQ Java AMQP library ver. 1.6.0. PFA the scratch code
> for the Consumer and Producer. You will have to pass in the username
> and password as command line arguments.
>
>
>
> On Mon, Aug 10, 2009 at 4:16 AM, Matthias Radestock<matth... at lshift.net> wrote:
> > Vidit,
>
> > Vidit Drolia wrote:
>
> >> When a consumer's channel is closed, then all unacknowledged messages
> >> are still available in the queue for subsequent consumers. If there
> >> are N messages in the queue when the last consumer died, then when a
> >> new consumer fires up, 1 message is delivered when the consumer
> >> requests for a message by subscription. That is to say, executing:
>
> >> while(true){
> >> ?delivery = consumer.nextDelivery();
> >> //do something...
> >> //acknowledge for delivery
> >> }
>
> >> will deliver 1 message leaving N-1 messages in the queue. However,
> >> after one execution of the above loop, the consumer keeps waiting for
> >> the next delivery, even though there are N-1 messages in the queue. My
> >> question was, is this supposed to happen by design of a subscription.
>
> > No, that is not supposed to happen. If there are N messages in the queue and
> > you have one consumer connecting to it and consuming messages as you
> > describe then that consumer should receive all the messages.
>
> > What client are you using? Can you post all the code to reproduce this?
>
> > Regards,
>
> > Matthias.
>
> --
> Vidit Drolia
>
> ?QueueConsumer.java
> 3KViewDownload
>
> ?QueueProducer.java
> 2KViewDownload
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-disc... at lists.rabbitmq.comhttp://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss



From n8gray at n8gray.org  Mon Aug 10 22:11:12 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Mon, 10 Aug 2009 14:11:12 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <4A8057CD.9070004@lshift.net>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>
	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>
	<65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>
	<65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>
	<4A8057CD.9070004@lshift.net>
Message-ID: <65a6e3960908101411y14d8bbabnf7d3557bc06fedff@mail.gmail.com>

Hi Tony,

On Mon, Aug 10, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Nathan Gray wrote:
>> "simple.publish" block until the session times out. ?This seems very
>> odd to me. ?Is there some rationale for this design that I'm not
>> understanding?
>
> There are *two* timeouts involved:
>
> ?1. the "session" timeout. This is the length of time that an open
> ? ?channel object will survive in the absence of any active poll()
> ? ?calls. It's also used to compute the length of time to wait for
> ? ?incoming work before replying to active polls.
>
> ?2. a per-method-call timeout on JSON-RPC objects (including those
> ? ?implementing the AMQP channel API). This is a normal RPC timeout
> ? ?and defaults to five seconds.
>
> With regard to (1), the idea is that because AMQP can involve
> asynchronous events, there will usually be a long-polling call
> outstanding -- either a cast() or a poll(). Previously this has been
> fine, but I suspect now that cast() *shouldn't* also act as a long-poll.
> The session timeout is set at channel creation time. If a channel is
> left alone for longer than the session timeout, it closes itself.
>
> With regard to (2), this is controllable on a per-request basis with and
> "x-json-rpc-timeout" header that can take values of "default" (5s,
> currently), "infinity", or a whole number of milliseconds.

Ok, so if you set timeout 1 bigger than timeout 2 you get trouble,
unless there's something else keeping the channel alive.

> So, for your specific use case:
>
> ?1. run a long-polling poll() call in the background to keep the
> ? ?channel alive.
>
> ?2. set the session timeout (argument to "open") to a bigger
> ? ?number of seconds.
>
> ?3. set each individual request timeout to longer than 5000ms by
> ? ?using the "x-json-rpc-timeout" header.

Actually, my publisher use case doesn't require long timeouts -- It's
quite the opposite.  I'm trying to use Google App Engine to publish to
a rabbitmq server.  It just needs to fire & forget events, one at a
time, as quickly as possible.  This is why having simple.publish block
for several seconds was alarming to me.

For my subscriber code, OTOH, I want to have a long-running,
low-maintenance connections so this information will be very useful.

> I will alter the code to make cast() non-long-polling. Thanks for
> drawing this to my attention!

Sounds like a good move.

Cheers,
-n8

-- 
http://n8gray.org



From femtowin at gmail.com  Tue Aug 11 02:21:56 2009
From: femtowin at gmail.com (femto Zheng)
Date: Tue, 11 Aug 2009 09:21:56 +0800
Subject: [rabbitmq-discuss] about the Frame of amqp
Message-ID: <91170ee40908101821o24121d8drbc6e7a44114b3dad@mail.gmail.com>

hello all, I'm looking at amqp documentation,
one thing I'm not sure, the Frame amqp refered,
is it a fixed size thing (just represent some unit that
transport layer transported, more like tcp/udp's packet), or is it
variable size thing(it can be variable sized), more fitted to
application's usage somehow?
because if the specification decides it is a fixed size thing,
it's more like a udp's packet, while transport in network(of course may be split
because the gateway's max packet size is smaller), but you get the
idea, it's just
a packet thing.



From tonyg at lshift.net  Tue Aug 11 12:19:31 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 11 Aug 2009 12:19:31 +0100
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
 over the JSON RPC interface)
In-Reply-To: <65a6e3960908101411y14d8bbabnf7d3557bc06fedff@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>	
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>	
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>	
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>	
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>	
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>	
	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>	
	<65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>	
	<65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>	
	<4A8057CD.9070004@lshift.net>
	<65a6e3960908101411y14d8bbabnf7d3557bc06fedff@mail.gmail.com>
Message-ID: <4A8153C3.4070103@lshift.net>

Nathan Gray wrote:
>>  1. the "session" timeout.
>>  2. a per-method-call timeout
> Ok, so if you set timeout 1 bigger than timeout 2 you get trouble,
> unless there's something else keeping the channel alive.

Hmm. There are two kinds of trouble:

 - the session closing when you want it kept open

 - individual blocking operations timing out, perhaps because the
   server is slow, or whatever other reason

To avoid the session closing, you have to poke it every
sessionTimeout-minus-epsilon. To avoid individual blocking operation
timeouts, you have to either make the server not take forever or set the
x-json-rpc-timeout longer.

Where they interact is in the case of the long-poll. The AMQP channel
object is set to deliberately not answer poll() requests until
sessionTimeout/2 has elapsed -- giving long-polling behaviour -- so in
the case of the poll() method, you want the x-json-rpc-timeout header to
let the operation take *at least* as long as sessionTimeout/2.

I did it that way because it's nice and simple, has fairly predictable
behaviour, and generally seemed like a reasonable first approach. Is
there a better way of doing it?

So in summary:

 - poll()'s request timeout needs to be sessionTimeout/2 + epsilon

 - blocking operation timeouts should be under user control but
   some reasonable default should exist

 - sessionTimeout should be under user control, but values less than
   about a minute are probably not a good idea, especially once the
   number of connections goes up? We haven't good data here.

... and of course I still need to make the changes we discussed
yesterday :-)

Cheers,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Tue Aug 11 12:31:21 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 11 Aug 2009 12:31:21 +0100
Subject: [rabbitmq-discuss] Receiving Undelivered Persistent Messages
In-Reply-To: <2e1af3e2-daf1-444b-a8c7-cecf1aadd832@x6g2000prc.googlegroups.com>
References: <4e1b00700908070903i796986c8v978c49c071376ffe@mail.gmail.com>
	<4A7F5590.8080707@lshift.net>	<4e1b00700908091916x7cd53333i3f77e69de0238d5a@mail.gmail.com>
	<4A7FD751.1030408@lshift.net>	<4e1b00700908100732y184ef1dap72d6109f77a8e4cc@mail.gmail.com>
	<2e1af3e2-daf1-444b-a8c7-cecf1aadd832@x6g2000prc.googlegroups.com>
Message-ID: <4A815689.60400@lshift.net>

amit bhatnagar wrote:
> Vidit.
> Check the consumer code.

I think Amit's advice is right -- the code is, in a loop, creating
connections and subscribing them to a queue. By the time the second
connection is created, the first subscription will have been delivered
all the messages asynchronously -- but there'll be no-one reading from
that first subscription anymore. Take a look at the SimpleConsumer
example:
http://hg.rabbitmq.com/rabbitmq-java-client/file/default/test/src/com/rabbitmq/examples/SimpleConsumer.java

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Tue Aug 11 12:34:02 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 11 Aug 2009 12:34:02 +0100
Subject: [rabbitmq-discuss] Rabbitmq+Ubuntu+TIMEOUT
In-Reply-To: <376f3e6f0908101138q11645145kc17d88fef67e669a@mail.gmail.com>
References: <376f3e6f0908071617p54c4aed8m4a94ef52e496f451@mail.gmail.com>
	<4A7F577E.6080903@lshift.net>
	<376f3e6f0908101138q11645145kc17d88fef67e669a@mail.gmail.com>
Message-ID: <4A81572A.9080506@lshift.net>

Suhail Doshi wrote:
> Is the solution installing erlang 5.6.3 with the packaged version or
> just install rabbitmq from source?

Either ought to work. The idea is to be consistent about which set of
libraries, virtual machines and compilers you tell the system to use.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From pauljones23 at gmail.com  Tue Aug 11 14:08:05 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Tue, 11 Aug 2009 14:08:05 +0100
Subject: [rabbitmq-discuss] Fwd:  about the Frame of amqp
In-Reply-To: <29598b610908110607we36b9b8ifb2f449ef7c8957a@mail.gmail.com>
References: <91170ee40908101821o24121d8drbc6e7a44114b3dad@mail.gmail.com>
	<29598b610908110607we36b9b8ifb2f449ef7c8957a@mail.gmail.com>
Message-ID: <29598b610908110608r5738314dg57fdd193b20dcc29@mail.gmail.com>

---------- Forwarded message ----------
From: Paul Jones <pauljones23 at gmail.com>
Date: Tue, Aug 11, 2009 at 2:07 PM
Subject: Re: [rabbitmq-discuss] about the Frame of amqp
To: femto Zheng <femtowin at gmail.com>


Hi Femto,

The AMQP specification defines frames as being variable length, depending on
the size of the payload.

If you'd like to see specific framing details, have a look at 2.3.5 of
http://jira.amqp.org/confluence/download/attachments/720900/amqp0-8.pdf?version=1

Thanks,
Paul.


On Tue, Aug 11, 2009 at 2:21 AM, femto Zheng <femtowin at gmail.com> wrote:

> hello all, I'm looking at amqp documentation,
> one thing I'm not sure, the Frame amqp refered,
> is it a fixed size thing (just represent some unit that
> transport layer transported, more like tcp/udp's packet), or is it
> variable size thing(it can be variable sized), more fitted to
> application's usage somehow?
> because if the specification decides it is a fixed size thing,
> it's more like a udp's packet, while transport in network(of course may be
> split
> because the gateway's max packet size is smaller), but you get the
> idea, it's just
> a packet thing.
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090811/e4b499a8/attachment.htm 

From viditdrolia at gmail.com  Tue Aug 11 15:16:15 2009
From: viditdrolia at gmail.com (Vidit Drolia)
Date: Tue, 11 Aug 2009 10:16:15 -0400
Subject: [rabbitmq-discuss] Receiving Undelivered Persistent Messages
In-Reply-To: <4A815689.60400@lshift.net>
References: <4e1b00700908070903i796986c8v978c49c071376ffe@mail.gmail.com>
	<4A7F5590.8080707@lshift.net>
	<4e1b00700908091916x7cd53333i3f77e69de0238d5a@mail.gmail.com>
	<4A7FD751.1030408@lshift.net>
	<4e1b00700908100732y184ef1dap72d6109f77a8e4cc@mail.gmail.com>
	<2e1af3e2-daf1-444b-a8c7-cecf1aadd832@x6g2000prc.googlegroups.com>
	<4A815689.60400@lshift.net>
Message-ID: <4e1b00700908110716l6d358420i2852240c01a1b2a@mail.gmail.com>

Amit, Tony,

That fixed the problem. Thanks!

Regards,

Vidit

On Tue, Aug 11, 2009 at 7:31 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> amit bhatnagar wrote:
>> Vidit.
>> Check the consumer code.
>
> I think Amit's advice is right -- the code is, in a loop, creating
> connections and subscribing them to a queue. By the time the second
> connection is created, the first subscription will have been delivered
> all the messages asynchronously -- but there'll be no-one reading from
> that first subscription anymore. Take a look at the SimpleConsumer
> example:
> http://hg.rabbitmq.com/rabbitmq-java-client/file/default/test/src/com/rabbitmq/examples/SimpleConsumer.java
>
> Regards,
> ?Tony
> --
> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>



From femtowin at gmail.com  Tue Aug 11 16:31:48 2009
From: femtowin at gmail.com (femto Zheng)
Date: Tue, 11 Aug 2009 23:31:48 +0800
Subject: [rabbitmq-discuss] Fwd: about the Frame of amqp
In-Reply-To: <29598b610908110608r5738314dg57fdd193b20dcc29@mail.gmail.com>
References: <91170ee40908101821o24121d8drbc6e7a44114b3dad@mail.gmail.com>
	<29598b610908110607we36b9b8ifb2f449ef7c8957a@mail.gmail.com>
	<29598b610908110608r5738314dg57fdd193b20dcc29@mail.gmail.com>
Message-ID: <91170ee40908110831i9244190v50815db425c58b3b@mail.gmail.com>

Thank you very much!:)

On Tue, Aug 11, 2009 at 9:08 PM, Paul Jones<pauljones23 at gmail.com> wrote:
>
> ---------- Forwarded message ----------
> From: Paul Jones <pauljones23 at gmail.com>
> Date: Tue, Aug 11, 2009 at 2:07 PM
> Subject: Re: [rabbitmq-discuss] about the Frame of amqp
> To: femto Zheng <femtowin at gmail.com>
>
>
> Hi Femto,
>
> The AMQP specification defines frames as being variable length, depending on
> the size of the payload.
>
> If you'd like to see specific framing details, have a look at 2.3.5 of
> http://jira.amqp.org/confluence/download/attachments/720900/amqp0-8.pdf?version=1
>
> Thanks,
> Paul.
>
> On Tue, Aug 11, 2009 at 2:21 AM, femto Zheng <femtowin at gmail.com> wrote:
>>
>> hello all, I'm looking at amqp documentation,
>> one thing I'm not sure, the Frame amqp refered,
>> is it a fixed size thing (just represent some unit that
>> transport layer transported, more like tcp/udp's packet), or is it
>> variable size thing(it can be variable sized), more fitted to
>> application's usage somehow?
>> because if the specification decides it is a fixed size thing,
>> it's more like a udp's packet, while transport in network(of course may be
>> split
>> because the gateway's max packet size is smaller), but you get the
>> idea, it's just
>> a packet thing.
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From n8gray at n8gray.org  Tue Aug 11 19:22:15 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Tue, 11 Aug 2009 11:22:15 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <4A8153C3.4070103@lshift.net>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>
	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>
	<65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>
	<65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>
	<4A8057CD.9070004@lshift.net>
	<65a6e3960908101411y14d8bbabnf7d3557bc06fedff@mail.gmail.com>
	<4A8153C3.4070103@lshift.net>
Message-ID: <65a6e3960908111122l24ee30d8n9ee2301cd62a07de@mail.gmail.com>

On Tue, Aug 11, 2009 at 4:19 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> The AMQP channel
> object is set to deliberately not answer poll() requests until
> sessionTimeout/2 has elapsed -- giving long-polling behaviour -- so in
> the case of the poll() method, you want the x-json-rpc-timeout header to
> let the operation take *at least* as long as sessionTimeout/2.
>
> I did it that way because it's nice and simple, has fairly predictable
> behaviour, and generally seemed like a reasonable first approach. Is
> there a better way of doing it?

It seems to me that there's no one-size-fits-all timeout for poll.
Some apps will want non-blocking polling and others will want it to
block indefinitely until there's work to do.  Wouldn't it be better to
just have an explicit timeout parameter to poll()?

Cheers,
-n8

-- 
http://n8gray.org



From n8gray at n8gray.org  Tue Aug 11 20:20:22 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Tue, 11 Aug 2009 12:20:22 -0700
Subject: [rabbitmq-discuss] How to sanely bind one queue to many exchanges?
Message-ID: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>

Hi folks,

I'm using rabbitmq as an event notification system.  In my application
each client will subscribe to a number of exchanges.  Exchanges may
come and go.  The client cannot be expected to know in advance which
exchanges no longer exist, so they will use exchange.declare(...,
passive=True,...) to find out which ones exist.  However,
exchange.declare in passive mode raises a channel exception and kills
the channel if the exchange doesn't exist.  Assuming I want to use one
channel per client I'm stuck with ugly, racy code to subscribe to
multiple exchanges.  (See the end of the post for the python code to
do it.)  And if something goes wrong and kills the channel I have to
go through the whole dance again.  This seems crazy.

My question is, what's the right way for one client to get messages
from multiple exchanges?  Can one auto-delete queue be bound in
multiple channels, and if so is that the proper approach?  Should I be
making N queues & channels to subscribe to N exchanges?

Also, exchange-exchange binding [1] would solve a lot of problems for
me -- does it work or is it just a proposal?

Thanks,
-n8

-- 
http://n8gray.org

[1]: https://dev.rabbitmq.com/wiki/ExchangeToExchangeBindings

while True:
    chan = connection.channel()
    found = []
    for xc in exchanges:
        try:
            chan.exchange_declare(exchange=xc, passive=True, ...)
            found.append(xc)
        except amqp.exceptions.AMQPChannelException, e:
            if e.amqp_reply_code == 404:
                # Channel got closed.  Open a new channel.
                chan = connection.channel()
            else:
                raise e
    # Sure hope nothing gets deleted at this point!
    qname, _, _ = chan.queue_declare(exclusive=True)
    try:
        for xc in found:
            chan.queue_bind(queue=qname, exchange=xc)
    except amqp.exceptions.AMQPChannelException, e:
        if e.amqp_reply_code == 404:
            # Oops, an exchange got deleted.  Start over.
            continue
        else:
            raise e
    # No exception raised, so we're done (until something
    # else goes wrong & kills the channel...)
    break



From darien at kindlund.com  Tue Aug 11 20:46:38 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Tue, 11 Aug 2009 15:46:38 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <4A7F541D.4050701@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com> 
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com> 
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com> 
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com> 
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com> 
	<4A7F541D.4050701@lshift.net>
Message-ID: <50c8ffe90908111246o13e01f64n853fb94bee526dc@mail.gmail.com>

Hi Matthias,

> RabbitMQ doesn't implement anything fancy here; if a message doesn't fit
> into available virtual memory then the broker will die.

Just as a sanity check... when the broker "dies" in this instance, I
assume the supervisory code will restart the broker -- correct?

-- Darien



From femtowin at gmail.com  Wed Aug 12 02:34:50 2009
From: femtowin at gmail.com (femto Zheng)
Date: Wed, 12 Aug 2009 09:34:50 +0800
Subject: [rabbitmq-discuss] Fwd: about the Frame of amqp
In-Reply-To: <91170ee40908110831i9244190v50815db425c58b3b@mail.gmail.com>
References: <91170ee40908101821o24121d8drbc6e7a44114b3dad@mail.gmail.com>
	<29598b610908110607we36b9b8ifb2f449ef7c8957a@mail.gmail.com>
	<29598b610908110608r5738314dg57fdd193b20dcc29@mail.gmail.com>
	<91170ee40908110831i9244190v50815db425c58b3b@mail.gmail.com>
Message-ID: <91170ee40908111834h57a92aa5nd4e1e7f8336dc488@mail.gmail.com>

Hi, so I understand, the Frame is kind of like,
in object oriented terminology, a Message class,
I send a Message to server, and the server gets it,
in Message boundaries,

class Message
  #some properties
end
we can think some marshaling/dump here to mimic amqp's behavior,
it's just like sending Message.
but now I'm puzzled, why do we need segment?Why do we need assembly?
a segment comprises of many frames, an assembly comprises of many segments.


On Tue, Aug 11, 2009 at 11:31 PM, femto Zheng<femtowin at gmail.com> wrote:
> Thank you very much!:)
>
> On Tue, Aug 11, 2009 at 9:08 PM, Paul Jones<pauljones23 at gmail.com> wrote:
>>
>> ---------- Forwarded message ----------
>> From: Paul Jones <pauljones23 at gmail.com>
>> Date: Tue, Aug 11, 2009 at 2:07 PM
>> Subject: Re: [rabbitmq-discuss] about the Frame of amqp
>> To: femto Zheng <femtowin at gmail.com>
>>
>>
>> Hi Femto,
>>
>> The AMQP specification defines frames as being variable length, depending on
>> the size of the payload.
>>
>> If you'd like to see specific framing details, have a look at 2.3.5 of
>> http://jira.amqp.org/confluence/download/attachments/720900/amqp0-8.pdf?version=1
>>
>> Thanks,
>> Paul.
>>
>> On Tue, Aug 11, 2009 at 2:21 AM, femto Zheng <femtowin at gmail.com> wrote:
>>>
>>> hello all, I'm looking at amqp documentation,
>>> one thing I'm not sure, the Frame amqp refered,
>>> is it a fixed size thing (just represent some unit that
>>> transport layer transported, more like tcp/udp's packet), or is it
>>> variable size thing(it can be variable sized), more fitted to
>>> application's usage somehow?
>>> because if the specification decides it is a fixed size thing,
>>> it's more like a udp's packet, while transport in network(of course may be
>>> split
>>> because the gateway's max packet size is smaller), but you get the
>>> idea, it's just
>>> a packet thing.
>>>
>>> _______________________________________________
>>> rabbitmq-discuss mailing list
>>> rabbitmq-discuss at lists.rabbitmq.com
>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
>>
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
>>
>



From westling at perceptech.com  Wed Aug 12 03:42:03 2009
From: westling at perceptech.com (Mark Westling)
Date: Wed, 12 Aug 2009 10:42:03 +0800
Subject: [rabbitmq-discuss] Socket errors and connections not closing
Message-ID: <3de9aeb50908111942j1521cc11o323cf9eadac068e0@mail.gmail.com>

Hi all,
I'm using RabbitMQ for background processing in a Ruby on Rails environment.
 The client application runs in multiple instances via Passenger/nginx on a
CentOS 5 server and uses the Bunny gem to send messages to RabbitMQ running
on a different CentOS server.  Each of the 15 instances of the RoR
application on the client machine opens a connection and keeps it in a
threadsafe location for repeated use.

Everything works perfectly on two different deployments of this system but
on the third, the clients are getting occasional errors, "Connection closed
unexpectedly by peer".  At the same time, I'm not seeing any errors at all
in the RabbitMQ log on the other server.

When the client gets an error sending a message, it creates a new connection
and tries passing the message again.  I do see the new connection in
rabbit.log but nothing corresponding to the error reported by the client.
 The result is a slow but steadily growing number of sockets in use by
RabbitMQ; lsof shows an increase of about 150-200 of these sockets per day
with state "established".  I haven't watched carefully but it appears these
sockets aren't dying, even though they refer to ports that aren't open any
more on the client machine.

Since this is happening in only one deployment, my first action was to look
for differences in configuration between a working client/server pair and a
problem pair, but I'm at a loss to find any.  I know I must be overlooking
something.  I've compared ruby gem versions, RabbitMQ versions, Erlang
versions, kernel versions, kernel network configuration variables, etc.
 I've used netstat -s to look for unusual network problems but I don't see
any.

Any suggestions on where to look for the cause of these broken connections?
 If that fails, is there a configuration option that lets RabbitMQ close
broken connections?

Thanks,
Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090812/cd716542/attachment.htm 

From tonyg at lshift.net  Wed Aug 12 05:04:21 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Wed, 12 Aug 2009 05:04:21 +0100
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
 over the JSON RPC interface)
In-Reply-To: <65a6e3960908111122l24ee30d8n9ee2301cd62a07de@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>	
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>	
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>	
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>	
	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>	
	<65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>	
	<65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>	
	<4A8057CD.9070004@lshift.net>	
	<65a6e3960908101411y14d8bbabnf7d3557bc06fedff@mail.gmail.com>	
	<4A8153C3.4070103@lshift.net>
	<65a6e3960908111122l24ee30d8n9ee2301cd62a07de@mail.gmail.com>
Message-ID: <4A823F45.5000307@lshift.net>

Nathan Gray wrote:
> It seems to me that there's no one-size-fits-all timeout for poll.
> Some apps will want non-blocking polling and others will want it to
> block indefinitely until there's work to do.  Wouldn't it be better to
> just have an explicit timeout parameter to poll()?

Yes, but that makes the timeout-maintaining code in the channel object
much more complex. Generally, channel *instances* are not shared between
applications, so each app is still free to set sessionTimeout according
to its needs. One app could set it to half an hour (and get
corresponding 15-minute poll() cycles), another to 30s. The current
setup lets all parallel poll()s on a single instance (if there's more
than one) be treated identically; a timeout parameter to each poll()
would require a separate timer on the server-side for each. Ultimately
though, if the way it's currently being done is shown to be a problem,
it's totally changeable.

Adding a *non*-blocking variant of poll() is an interesting idea. I
hadn't thought anyone would want that! Is it something you would use?

Tony



From matthias at lshift.net  Wed Aug 12 05:46:09 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Wed, 12 Aug 2009 05:46:09 +0100
Subject: [rabbitmq-discuss] Socket errors and connections not closing
In-Reply-To: <3de9aeb50908111942j1521cc11o323cf9eadac068e0@mail.gmail.com>
References: <3de9aeb50908111942j1521cc11o323cf9eadac068e0@mail.gmail.com>
Message-ID: <4A824911.2070906@lshift.net>

Mark,

Mark Westling wrote:
> I'm using RabbitMQ for background processing in a Ruby on Rails 
> environment.
> [...]
> Everything works perfectly on two different deployments of this system 
> but on the third, the clients are getting occasional errors, "Connection 
> closed unexpectedly by peer".  At the same time, I'm not seeing any 
> errors at all in the RabbitMQ log on the other server.  
> 
> When the client gets an error sending a message, it creates a new 
> connection and tries passing the message again.  I do see the new 
> connection in rabbit.log but nothing corresponding to the error reported 
> by the client.  The result is a slow but steadily growing number of 
> sockets in use by RabbitMQ; lsof shows an increase of about 150-200 of 
> these sockets per day with state "established".  I haven't watched 
> carefully but it appears these sockets aren't dying, even though they 
> refer to ports that aren't open any more on the client machine.

Did you check with lsof/netstat on the *client* machine whether the 
sockets are really dead there?

Also, are these connections going via some kind of firewall or 
loadbalancer? If so, perhaps the connections to the server are kept open 
there.

> If that fails, is there a configuration option that lets 
> RabbitMQ close broken connections?

AMQP's heartbeat mechanism is designed precisely for this situation. The 
heartbeat frequency is negotiated between the client and the server at 
connection establishment. I don't know anything about the Ruby client, 
but I am assuming from the above that it disables heartbeats. If so, try 
to find a way to enable them.

Regards,

Matthias.



From westling at perceptech.com  Wed Aug 12 06:46:14 2009
From: westling at perceptech.com (Mark Westling)
Date: Wed, 12 Aug 2009 13:46:14 +0800
Subject: [rabbitmq-discuss] Socket errors and connections not closing
In-Reply-To: <4A824911.2070906@lshift.net>
References: <3de9aeb50908111942j1521cc11o323cf9eadac068e0@mail.gmail.com>
	<4A824911.2070906@lshift.net>
Message-ID: <3de9aeb50908112246u32f2d664u7e0331b2f3453305@mail.gmail.com>

Hi Mattias,
Many thanks for the reply.

Did you check with lsof/netstat on the *client* machine whether the sockets
> are really dead there?
>

Yes -- the client ports that lsof reports open on the RabbtMQ server machine
aren't listed in the client machine; for example, on the server I can see:

beam.smp 22933 rabbitmq   23u  IPv4 44493222       TCP 10.2.7.11:5672->
10.2.2.11:33748 (ESTABLISHED)

but on the client machine (10.2.2.11) I don't see a socket from port 33748.
 Right now, if I count the total number of sockets with port 5672 and grep
for the address of the other machine, I see 28 connections on the client and
49 on the server (including the one I listed above).


> Also, are these connections going via some kind of firewall or
> loadbalancer? If so, perhaps the connections to the server are kept open
> there.
>

I started to type "no" but then decided to confirm this and turns out that
the connection does indeed go through a firewall.  I tend to think of
firewalls as just blocking ports, but you're right -- perhaps there's more
going on.  I've asked a network engineer to check the configuration.


>
>  If that fails, is there a configuration option that lets RabbitMQ close
>> broken connections?
>>
>
> AMQP's heartbeat mechanism is designed precisely for this situation. The
> heartbeat frequency is negotiated between the client and the server at
> connection establishment. I don't know anything about the Ruby client, but I
> am assuming from the above that it disables heartbeats. If so, try to find a
> way to enable them.


 Coincidentally, the developer of the interface library I'm using announced
this morning that the latest version includes a heartbeat parameter.  I'll
try that as soon as possible.

Thanks again,
Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090812/62b75557/attachment.htm 

From celldee at gmail.com  Wed Aug 12 06:54:45 2009
From: celldee at gmail.com (Chris Duncan)
Date: Wed, 12 Aug 2009 06:54:45 +0100
Subject: [rabbitmq-discuss] Socket errors and connections not closing
In-Reply-To: <4A824911.2070906@lshift.net>
References: <3de9aeb50908111942j1521cc11o323cf9eadac068e0@mail.gmail.com>
	<4A824911.2070906@lshift.net>
Message-ID: <F63CB8D0-6403-4717-B61A-444B4BA3A6DA@gmail.com>

Hi Mark and Matthias

On 12 Aug 2009, at 05:46, Matthias Radestock wrote:

> Mark,
>
> Mark Westling wrote:
>> I'm using RabbitMQ for background processing in a Ruby on Rails
>> environment.
>> [...]
>> Everything works perfectly on two different deployments of this  
>> system
>> but on the third, the clients are getting occasional errors,  
>> "Connection
>> closed unexpectedly by peer".  At the same time, I'm not seeing any
>> errors at all in the RabbitMQ log on the other server.
>>
>> When the client gets an error sending a message, it creates a new
>> connection and tries passing the message again.  I do see the new
>> connection in rabbit.log but nothing corresponding to the error  
>> reported
>> by the client.  The result is a slow but steadily growing number of
>> sockets in use by RabbitMQ; lsof shows an increase of about  
>> 150-200 of
>> these sockets per day with state "established".  I haven't watched
>> carefully but it appears these sockets aren't dying, even though they
>> refer to ports that aren't open any more on the client machine.
>
> Did you check with lsof/netstat on the *client* machine whether the
> sockets are really dead there?
>
> Also, are these connections going via some kind of firewall or
> loadbalancer? If so, perhaps the connections to the server are kept  
> open
> there.
>
>> If that fails, is there a configuration option that lets
>> RabbitMQ close broken connections?
>
> AMQP's heartbeat mechanism is designed precisely for this  
> situation. The
> heartbeat frequency is negotiated between the client and the server at
> connection establishment. I don't know anything about the Ruby client,
> but I am assuming from the above that it disables heartbeats. If  
> so, try
> to find a way to enable them.
>
> Regards,
>
> Matthias.
>

Mark, I have recently added a heartbeat parameter to the Client#new  
method in Bunny on GitHub (master branch) in preparation for the next  
release.  As I understand it (correct me if I'm wrong Matthias), when  
the client specifies a heartbeat interval in the Connection::TuneOk  
method, the server sends heartbeat frames to the client and the  
client has to either send a heartbeat or other type of frame back to  
the server within 2 or so heartbeat intervals. If the client fails to  
respond in time then the server closes the connection and socket.

I don't know how this would fit in with your retry strategy Mark, but  
the functionality is there if you want to try it out.

Regards,

Chris



From matthias at lshift.net  Wed Aug 12 08:17:06 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Wed, 12 Aug 2009 08:17:06 +0100
Subject: [rabbitmq-discuss] Socket errors and connections not closing
In-Reply-To: <F63CB8D0-6403-4717-B61A-444B4BA3A6DA@gmail.com>
References: <3de9aeb50908111942j1521cc11o323cf9eadac068e0@mail.gmail.com>	<4A824911.2070906@lshift.net>
	<F63CB8D0-6403-4717-B61A-444B4BA3A6DA@gmail.com>
Message-ID: <4A826C72.3030606@lshift.net>

Chris,

Chris Duncan wrote:
> Mark, I have recently added a heartbeat parameter to the Client#new 
> method in Bunny on GitHub (master branch) in preparation for the next 
> release.  As I understand it (correct me if I'm wrong Matthias), when 
> the client specifies a heartbeat interval in the Connection::TuneOk 
> method, the server sends heartbeat frames to the client and the client 
> has to either send a heartbeat or other type of frame back to the server 
> within 2 or so heartbeat intervals. If the client fails to respond in 
> time then the server closes the connection and socket.

Yes, that's right. Note that the heartbeat logic is completely symmetric 
- if the client doesn't receive a frame (heartbeat or ordinary) within 
the heartbeat interval (* 2, to be safe) then it too should close the 
connection.


Matthias.



From alexis at rabbitmq.com  Wed Aug 12 11:50:09 2009
From: alexis at rabbitmq.com (Alexis Richardson)
Date: Wed, 12 Aug 2009 11:50:09 +0100
Subject: [rabbitmq-discuss] AMQP talk at London Ruby User Gp this evening
Message-ID: <167204d20908120350m68989eedv9d0e4e4fde81a1a3@mail.gmail.com>

Folks,

This may be of interest to Londoners and such:
http://lrug.org/meetings/2009/07/20/august-2009-meeting/

alexis



From tonyg at lshift.net  Wed Aug 12 13:50:59 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Wed, 12 Aug 2009 13:50:59 +0100
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
Message-ID: <4A82BAB3.9050906@lshift.net>

Hi Darien,

Darien Kindlund wrote:
> No problem; glad to help.  When you're ready to test the fix on real
> data, let me know.  I'd be willing to do some testing, so long as the
> patch only requires recompiling the STOMP adapter (as I'm using the
> pre-packaged v1.6.0 of RabbitMQ).

A fix has been QA'd and merged into the 'default' branch of the
rabbitmq-stomp adapter. You won't need to recompile anything other than
the STOMP adapter.

Regards,
  Tony



From irrer at umich.edu  Wed Aug 12 14:26:41 2009
From: irrer at umich.edu (Jim Irrer)
Date: Wed, 12 Aug 2009 09:26:41 -0400
Subject: [rabbitmq-discuss] RPC compatibility of RabbitMQ with OpenAMQ
Message-ID: <3b6ef0790908120626l7570f0c9o6ad728c0fd27bdc6@mail.gmail.com>

Greetings -

Our group wants to make RPC-like calls from RabbitMQ to OpenAMQ.
Asynchronous
direct calls work, and the RabbitMQ com.rabbitmq.client.RpcClient class can
send a
message to the OpenAMQ server, but the OpenAMQ server's response is never
received
by the RabbitMQ client.

Do you have any advice on making the RabbitMQ client get responses from an
OpenAMQ
server?

Is the handling of response messages supposed to be done in a standard way,
or is
there some leeway in the AMQP specification for implementation deviations?

Thanks for any information,

- Jim
Jim Irrer     irrer at umich.edu       (734) 647-4409
University of Michigan Hospital Radiation Oncology
519 W. William St.             Ann Arbor, MI 48103
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090812/78865824/attachment.htm 

From celldee at gmail.com  Wed Aug 12 14:43:19 2009
From: celldee at gmail.com (celldee)
Date: Wed, 12 Aug 2009 06:43:19 -0700 (PDT)
Subject: [rabbitmq-discuss] Socket errors and connections not closing
In-Reply-To: <4A826C72.3030606@lshift.net>
References: <3de9aeb50908111942j1521cc11o323cf9eadac068e0@mail.gmail.com> 
	<4A824911.2070906@lshift.net>
	<F63CB8D0-6403-4717-B61A-444B4BA3A6DA@gmail.com> 
	<4A826C72.3030606@lshift.net>
Message-ID: <00806889-35a4-4d95-8c1a-0f312404d046@f37g2000yqn.googlegroups.com>

Thanks for reminding me about the symmetric nature of the heartbeat
logic. It seems I have more work to do :)

Regards,

Chris

On Aug 12, 8:17?am, Matthias Radestock <matth... at lshift.net> wrote:
> Chris,
>
> Chris Duncan wrote:
> > Mark, I have recently added a heartbeat parameter to the Client#new
> > method in Bunny on GitHub (master branch) in preparation for the next
> > release. ?As I understand it (correct me if I'm wrong Matthias), when
> > the client specifies a heartbeat interval in the Connection::TuneOk
> > method, the server sends heartbeat frames to the client and the client
> > has to either send a heartbeat or other type of frame back to the server
> > within 2 or so heartbeat intervals. If the client fails to respond in
> > time then the server closes the connection and socket.
>
> Yes, that's right. Note that the heartbeat logic is completely symmetric
> - if the client doesn't receive a frame (heartbeat or ordinary) within
> the heartbeat interval (* 2, to be safe) then it too should close the
> connection.
>
> Matthias.
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-disc... at lists.rabbitmq.comhttp://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss



From tonyg at lshift.net  Wed Aug 12 16:15:13 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Wed, 12 Aug 2009 16:15:13 +0100
Subject: [rabbitmq-discuss] Fwd: about the Frame of amqp
In-Reply-To: <91170ee40908111834h57a92aa5nd4e1e7f8336dc488@mail.gmail.com>
References: <91170ee40908101821o24121d8drbc6e7a44114b3dad@mail.gmail.com>	<29598b610908110607we36b9b8ifb2f449ef7c8957a@mail.gmail.com>	<29598b610908110608r5738314dg57fdd193b20dcc29@mail.gmail.com>	<91170ee40908110831i9244190v50815db425c58b3b@mail.gmail.com>
	<91170ee40908111834h57a92aa5nd4e1e7f8336dc488@mail.gmail.com>
Message-ID: <4A82DC81.7030006@lshift.net>

femto Zheng wrote:
> but now I'm puzzled, why do we need segment?Why do we need assembly?
> a segment comprises of many frames, an assembly comprises of many segments.

It's mostly to permit interleaving/multiplexing of many channels over a
single connection, but also can help keep memory bounds down. In theory
it permits "streaming" of messages through the server in some situations
(though RabbitMQ doesn't do that yet).

Regards,
  Tony




From darien at kindlund.com  Wed Aug 12 16:24:12 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Wed, 12 Aug 2009 11:24:12 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <4A82BAB3.9050906@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com> 
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com> 
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com> 
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com> 
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com> 
	<4A82BAB3.9050906@lshift.net>
Message-ID: <50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com>

>> No problem; glad to help. ?When you're ready to test the fix on real
>> data, let me know. ?I'd be willing to do some testing, so long as the
>> patch only requires recompiling the STOMP adapter (as I'm using the
>> pre-packaged v1.6.0 of RabbitMQ).
>
> A fix has been QA'd and merged into the 'default' branch of the
> rabbitmq-stomp adapter. You won't need to recompile anything other than
> the STOMP adapter.

Great!  So the fix addresses all three issues that Matthias described earlier?

> 1) attempting to deliver messages recovered from the persister via STOMP
> causes an error
> 2) STOMP client disconnects can result in huge error messages being logged
> 3) sending large messages via STOMP causes rabbit to die

Additionally, when RabbitMQ attempts to recover from a crash and loads
persistent messages back into durable queues, the STOMP adapter will
now see those messages and replay them back to STOMP consumers?

-- Darien



From irrer at umich.edu  Wed Aug 12 16:59:11 2009
From: irrer at umich.edu (Jim Irrer)
Date: Wed, 12 Aug 2009 11:59:11 -0400
Subject: [rabbitmq-discuss] Use case for durable exchange?
Message-ID: <3b6ef0790908120859n3e5ff0a6q7a4e35e40050ccdb@mail.gmail.com>

I am creating a strategy for using AMQP in our organization
and am trying to understand the technology.  One thing that
confuses me is the idea of making a durable exchange.  Durable
queues make sense, but is there a real world scenario that
benefits from a durable exchange?

Thanks,

- Jim

Jim Irrer     irrer at umich.edu       (734) 647-4409
University of Michigan Hospital Radiation Oncology
519 W. William St.             Ann Arbor, MI 48103
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090812/7e8b8d96/attachment.htm 

From alexis.richardson at gmail.com  Wed Aug 12 17:03:25 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Wed, 12 Aug 2009 17:03:25 +0100
Subject: [rabbitmq-discuss] Use case for durable exchange?
In-Reply-To: <3b6ef0790908120859n3e5ff0a6q7a4e35e40050ccdb@mail.gmail.com>
References: <3b6ef0790908120859n3e5ff0a6q7a4e35e40050ccdb@mail.gmail.com>
Message-ID: <167204d20908120903y1c690162nad9035fb55bcffd7@mail.gmail.com>

Jim,

Exchanges contain routing information which you may not want to lose
in a crash.  Queues contain messages, for eventual delivery.
Persistent messages plus durable queues gives you eventual delivery
even if the queue crashes.  But you also want durable exchanges if you
plan to send more messages down the same path even after a crash.

Does this help?

alexis


On Wed, Aug 12, 2009 at 4:59 PM, Jim Irrer<irrer at umich.edu> wrote:
> I am creating a strategy for using AMQP in our organization
> and am trying to understand the technology.? One thing that
> confuses me is the idea of making a durable exchange.? Durable
> queues make sense, but is there a real world scenario that
> benefits from a durable exchange?
>
> Thanks,
>
> - Jim
>
> Jim Irrer ? ? irrer at umich.edu ? ? ? (734) 647-4409
> University of Michigan Hospital Radiation Oncology
> 519 W. William St. ? ? ? ? ? ? Ann Arbor, MI 48103
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From irrer at umich.edu  Wed Aug 12 22:10:16 2009
From: irrer at umich.edu (Jim Irrer)
Date: Wed, 12 Aug 2009 17:10:16 -0400
Subject: [rabbitmq-discuss] Use case for durable exchange?
In-Reply-To: <167204d20908120903y1c690162nad9035fb55bcffd7@mail.gmail.com>
References: <3b6ef0790908120859n3e5ff0a6q7a4e35e40050ccdb@mail.gmail.com>
	<167204d20908120903y1c690162nad9035fb55bcffd7@mail.gmail.com>
Message-ID: <3b6ef0790908121410u4a6ee03i8f2dbd4dae81ecce@mail.gmail.com>

Ok... so a consumer application might set up one or more durable queues, and
also a durable exchange that routes messages to those queues.  A producer
can be "dumb", and simply send a message to that exchange, and be ignorant
of who receives it.

That makes sense.

Thanks,

- Jim

Jim Irrer     irrer at umich.edu       (734) 647-4409
University of Michigan Hospital Radiation Oncology
519 W. William St.             Ann Arbor, MI 48103


On Wed, Aug 12, 2009 at 12:03 PM, Alexis Richardson <
alexis.richardson at gmail.com> wrote:

> Jim,
>
> Exchanges contain routing information which you may not want to lose
> in a crash.  Queues contain messages, for eventual delivery.
> Persistent messages plus durable queues gives you eventual delivery
> even if the queue crashes.  But you also want durable exchanges if you
> plan to send more messages down the same path even after a crash.
>
> Does this help?
>
> alexis
>
>
> On Wed, Aug 12, 2009 at 4:59 PM, Jim Irrer<irrer at umich.edu> wrote:
> > I am creating a strategy for using AMQP in our organization
> > and am trying to understand the technology.  One thing that
> > confuses me is the idea of making a durable exchange.  Durable
> > queues make sense, but is there a real world scenario that
> > benefits from a durable exchange?
> >
> > Thanks,
> >
> > - Jim
> >
> > Jim Irrer     irrer at umich.edu       (734) 647-4409
> > University of Michigan Hospital Radiation Oncology
> > 519 W. William St.             Ann Arbor, MI 48103
> >
> > _______________________________________________
> > rabbitmq-discuss mailing list
> > rabbitmq-discuss at lists.rabbitmq.com
> > http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
> >
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090812/1e589a08/attachment.htm 

From tonyg at lshift.net  Thu Aug 13 00:28:17 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Thu, 13 Aug 2009 00:28:17 +0100
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<4A7D2CD0.9020305@lshift.net>
	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com>
Message-ID: <4A835011.2060800@lshift.net>

Darien Kindlund wrote:
>> 1) attempting to deliver messages recovered from the persister via STOMP
>> causes an error
>> 2) STOMP client disconnects can result in huge error messages being logged
>> 3) sending large messages via STOMP causes rabbit to die

Whoops. Just number three. Sorry, I'll get on to it.




From darien at kindlund.com  Thu Aug 13 00:53:46 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Wed, 12 Aug 2009 19:53:46 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <4A835011.2060800@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com> 
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com> 
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com> 
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com> 
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com> 
	<4A835011.2060800@lshift.net>
Message-ID: <50c8ffe90908121653m7a490247k4844df4b664f6380@mail.gmail.com>

Okay, no problem; thanks for the ACK.
I'm currently testing the fix for #3 -- will let you know if I run
into any problems.
-- Darien

On Wed, Aug 12, 2009 at 7:28 PM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Darien Kindlund wrote:
>>> 1) attempting to deliver messages recovered from the persister via STOMP
>>> causes an error
>>> 2) STOMP client disconnects can result in huge error messages being logged
>>> 3) sending large messages via STOMP causes rabbit to die
>
> Whoops. Just number three. Sorry, I'll get on to it.
>
>



From dale.obrien at iinet.net.au  Thu Aug 13 01:47:26 2009
From: dale.obrien at iinet.net.au (Dale)
Date: Thu, 13 Aug 2009 10:47:26 +1000
Subject: [rabbitmq-discuss] One queue and several subscribers,
	load balancing (using ... rabbitmq + txamqp + python)
Message-ID: <F52DC5EE-AB98-4FC5-A2B5-5BD44E1DDE4C@iinet.net.au>

Is it possible to load balance messages, using one queue and several  
consumers ?

So, for example, given 1 queue and 2 consumers;
	1) a publisher sends 10 messages to the queue
	2) for each consumer;
		a) receive just 1 message at time
		b)  processes it, which takes an arbitrary amount of time (say,  
between a few seconds and a few minutes)
		c)  once processed, repeat from (a)
	
	Thus, if 1 consumer is tens time slower than the other, it will  
process only 1 message while the other consumer will have processed  
the remaining 9 messages.

I guess this scenario is like a queue of jobs which are processed by  
the next available worker (consumer).

However,  it appears that txamqp will cache the messages, e.g. each  
consumer will always get 5 messages each.
So, to get the kind of the behavior I want, for each consumer I do;
	a) send a basic_ack(...) on the first msg, so acknowledge just the  
first message txamqp yields
	b) ignore any other messages tzamqp may have queued up
	b) send a basic_recover(True), so that rabbitmq will redistributing  
the remaining messages to all consumers

However, this method doesn't seem right to me.  I'm worried it will;
	a) create a lot of unwanted AMQP traffic
	b) will occasionally allow the one message to be received by two or  
more consumers,
		e.g. one consumer might send a basic_recover(...) just before  
another consumer is about to acknowledge it's received message.

So is there a way to only get one message at a time for a given queue  
for a given consumer ?

Any help is much appreciated.
Thanks
Dale



From darien at kindlund.com  Thu Aug 13 02:47:03 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Wed, 12 Aug 2009 21:47:03 -0400
Subject: [rabbitmq-discuss] One queue and several subscribers,
	load 	balancing (using ... rabbitmq + txamqp + python)
In-Reply-To: <F52DC5EE-AB98-4FC5-A2B5-5BD44E1DDE4C@iinet.net.au>
References: <F52DC5EE-AB98-4FC5-A2B5-5BD44E1DDE4C@iinet.net.au>
Message-ID: <50c8ffe90908121847n771c81d4lce0758386b58bc05@mail.gmail.com>

Dale,
RabbitMQ v1.6.0 rolled out a "prefetch" (or window size?) option,
which allows you to specify how many messages should be cached per
consumer upon subscribe.  To accomplish your goal, simply set that
attribute to 1, when declaring and subscribing to the queue.  I'm not
familiar with txAMQP, but it should support this feature.  Others more
knowledgeable in txAMQP can provide example code; all I can tell you
is that the feature exists on the server.
-- Darien

On Wed, Aug 12, 2009 at 8:47 PM, Dale<dale.obrien at iinet.net.au> wrote:
> Is it possible to load balance messages, using one queue and several
> consumers ?
>
> So, for example, given 1 queue and 2 consumers;
> ? ? ? ?1) a publisher sends 10 messages to the queue
> ? ? ? ?2) for each consumer;
> ? ? ? ? ? ? ? ?a) receive just 1 message at time
> ? ? ? ? ? ? ? ?b) ?processes it, which takes an arbitrary amount of time (say,
> between a few seconds and a few minutes)
> ? ? ? ? ? ? ? ?c) ?once processed, repeat from (a)
>
> ? ? ? ?Thus, if 1 consumer is tens time slower than the other, it will
> process only 1 message while the other consumer will have processed
> the remaining 9 messages.
>
> I guess this scenario is like a queue of jobs which are processed by
> the next available worker (consumer).
>
> However, ?it appears that txamqp will cache the messages, e.g. each
> consumer will always get 5 messages each.
> So, to get the kind of the behavior I want, for each consumer I do;
> ? ? ? ?a) send a basic_ack(...) on the first msg, so acknowledge just the
> first message txamqp yields
> ? ? ? ?b) ignore any other messages tzamqp may have queued up
> ? ? ? ?b) send a basic_recover(True), so that rabbitmq will redistributing
> the remaining messages to all consumers
>
> However, this method doesn't seem right to me. ?I'm worried it will;
> ? ? ? ?a) create a lot of unwanted AMQP traffic
> ? ? ? ?b) will occasionally allow the one message to be received by two or
> more consumers,
> ? ? ? ? ? ? ? ?e.g. one consumer might send a basic_recover(...) just before
> another consumer is about to acknowledge it's received message.
>
> So is there a way to only get one message at a time for a given queue
> for a given consumer ?
>
> Any help is much appreciated.
> Thanks
> Dale
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>



From dale.obrien at iinet.net.au  Thu Aug 13 04:48:09 2009
From: dale.obrien at iinet.net.au (Dale)
Date: Thu, 13 Aug 2009 13:48:09 +1000
Subject: [rabbitmq-discuss] One queue and several subscribers,
	load  balancing (using ... rabbitmq + txamqp + python)
In-Reply-To: <50c8ffe90908121847n771c81d4lce0758386b58bc05@mail.gmail.com>
References: <F52DC5EE-AB98-4FC5-A2B5-5BD44E1DDE4C@iinet.net.au>
	<50c8ffe90908121847n771c81d4lce0758386b58bc05@mail.gmail.com>
Message-ID: <9AF1AE71-3FAC-4CE9-869A-0611FEF46292@iinet.net.au>

Thank you, that's awesome!  I'll upgrade to RabbitMQ 1.6.0 and try  
using "prefetch".

On 13/08/2009, at 11:47 AM, Darien Kindlund wrote:

> Dale,
> RabbitMQ v1.6.0 rolled out a "prefetch" (or window size?) option,
> which allows you to specify how many messages should be cached per
> consumer upon subscribe.  To accomplish your goal, simply set that
> attribute to 1, when declaring and subscribing to the queue.  I'm not
> familiar with txAMQP, but it should support this feature.  Others more
> knowledgeable in txAMQP can provide example code; all I can tell you
> is that the feature exists on the server.
> -- Darien
>
> On Wed, Aug 12, 2009 at 8:47 PM, Dale<dale.obrien at iinet.net.au> wrote:
>> Is it possible to load balance messages, using one queue and several
>> consumers ?
>>
>> So, for example, given 1 queue and 2 consumers;
>>        1) a publisher sends 10 messages to the queue
>>        2) for each consumer;
>>                a) receive just 1 message at time
>>                b)  processes it, which takes an arbitrary amount of  
>> time (say,
>> between a few seconds and a few minutes)
>>                c)  once processed, repeat from (a)
>>
>>        Thus, if 1 consumer is tens time slower than the other, it  
>> will
>> process only 1 message while the other consumer will have processed
>> the remaining 9 messages.
>>
>> I guess this scenario is like a queue of jobs which are processed by
>> the next available worker (consumer).
>>
>> However,  it appears that txamqp will cache the messages, e.g. each
>> consumer will always get 5 messages each.
>> So, to get the kind of the behavior I want, for each consumer I do;
>>        a) send a basic_ack(...) on the first msg, so acknowledge  
>> just the
>> first message txamqp yields
>>        b) ignore any other messages tzamqp may have queued up
>>        b) send a basic_recover(True), so that rabbitmq will  
>> redistributing
>> the remaining messages to all consumers
>>
>> However, this method doesn't seem right to me.  I'm worried it will;
>>        a) create a lot of unwanted AMQP traffic
>>        b) will occasionally allow the one message to be received by  
>> two or
>> more consumers,
>>                e.g. one consumer might send a basic_recover(...)  
>> just before
>> another consumer is about to acknowledge it's received message.
>>
>> So is there a way to only get one message at a time for a given queue
>> for a given consumer ?
>>
>> Any help is much appreciated.
>> Thanks
>> Dale
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>




From pekenney at gmail.com  Thu Aug 13 05:57:53 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Wed, 12 Aug 2009 21:57:53 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<4A798D03.4020801@imatix.com>
	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>
	<4A79C398.8060101@lshift.net>
	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
	<4A7A3276.9030002@lshift.net>
	<3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>
	<3a5f03340908091016s42e48d79s6111e8002cd2433@mail.gmail.com>
	<3a5f03340908101658m71e8bcd7k89c930c2f400b650@mail.gmail.com>
	<3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>
Message-ID: <3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>

Still looking for further help on this one...

thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090812/a8159813/attachment.htm 
-------------- next part --------------
8/10/2009 4:50:06 PM
btnSubscribe_Click: 


 Message: The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391


 Source: RabbitMQ.Client


 Stack Trace:    at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SimpleBlockingRpcContinuation.cs:line 22
   at RabbitMQ.Client.Impl.ModelBase.BasicCancel(String consumerTag) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ModelBase.cs:line 131
   at RabbitMQ.ServiceModel.RabbitMQInputChannel.Close(TimeSpan timeout) in C:\Patrick\Development\Queue Stuff\RabbitMQ.ServiceModel\RabbitMQ\ServiceModel\RabbitMQInputChannel.cs:line 37
   at RabbitMQ.ServiceModel.RabbitMQChannelBase.Close() in C:\Patrick\Development\Queue Stuff\RabbitMQ.ServiceModel\RabbitMQ\ServiceModel\RabbitMQChannelBase.cs:line 64
   at RabbitMQ.ServiceModel.RabbitMQChannelBase.Abort() in C:\Patrick\Development\Queue Stuff\RabbitMQ.ServiceModel\RabbitMQ\ServiceModel\RabbitMQChannelBase.cs:line 39
   at System.ServiceModel.Channels.DatagramChannelDemuxer`2.AbortState()
   at System.ServiceModel.Channels.DatagramChannelDemuxer`2.OnOuterListenerAbort(ChannelDemuxerFilter filter)
   at System.ServiceModel.Channels.SingletonChannelListener`3.OnAbort()
   at System.ServiceModel.Channels.CommunicationObject.Abort()
   at System.ServiceModel.Channels.InternalDuplexChannelFactory.OnAbort()
   at System.ServiceModel.Channels.CommunicationObject.Abort()
   at System.ServiceModel.Channels.ReliableChannelFactory`2.OnAbort()
   at System.ServiceModel.Channels.CommunicationObject.Abort()
   at System.ServiceModel.Channels.LayeredChannelFactory`1.OnAbort()
   at System.ServiceModel.Channels.CommunicationObject.Abort()
   at System.ServiceModel.Channels.ServiceChannelFactory.TypedServiceChannelFactory`1.OnAbort()
   at System.ServiceModel.Channels.CommunicationObject.Abort()
   at System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan timeout)
   at System.ServiceModel.ChannelFactory.OnClose(TimeSpan timeout)
   at System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan timeout)
   at System.ServiceModel.ChannelFactory.System.IDisposable.Dispose()
   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 198


 Target Site: RabbitMQ.Client.Impl.Command GetReply()


 Data: System.Collections.ListDictionaryInternal
-------------- next part --------------
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089\mscorlib.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities\9.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.HostingProcess.Utilities.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Windows.Forms\2.0.0.0__b77a5c561934e089\System.Windows.Forms.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities.Sync\9.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.HostingProcess.Utilities.Sync.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.Runtime\9.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Debugger.Runtime.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\bin\Debug\RabbitMqPubSub1.vshost.exe'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Messaging\2.0.0.0__b03f5f7f11d50a3a\System.Messaging.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Deployment\2.0.0.0__b03f5f7f11d50a3a\System.Deployment.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll'
The thread 0x97c has exited with code 0 (0x0).
The thread 0x980 has exited with code 0 (0x0).
The thread 0x94c has exited with code 0 (0x0).
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\bin\Debug\RabbitMqPubSub1.exe', Symbols loaded.
C:\WINDOWS\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089\mscorlib.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities\9.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.HostingProcess.Utilities.dll: Cannot find or open the PDB file.
C:\WINDOWS\assembly\GAC_MSIL\System.Windows.Forms\2.0.0.0__b77a5c561934e089\System.Windows.Forms.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities.Sync\9.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.HostingProcess.Utilities.Sync.dll: Cannot find or open the PDB file.
C:\WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.Runtime\9.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Debugger.Runtime.dll: Cannot find or open the PDB file.
C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\bin\Debug\RabbitMqPubSub1.vshost.exe: Cannot find or open the PDB file.
C:\WINDOWS\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.Messaging\2.0.0.0__b03f5f7f11d50a3a\System.Messaging.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.Deployment\2.0.0.0__b03f5f7f11d50a3a\System.Deployment.dll: Symbols loaded.
C:\WINDOWS\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll: Symbols loaded.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\bin\Debug\RabbitMQ.Client.dll', Symbols loaded.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\bin\Debug\RabbitMQ.ServiceModel.dll', Symbols loaded.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\SMDiagnostics\3.0.0.0__b77a5c561934e089\SMDiagnostics.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\Microsoft.VisualStudio.Diagnostics.ServiceModelSink\3.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Diagnostics.ServiceModelSink.dll'
A first chance exception of type 'System.Configuration.ConfigurationErrorsException' occurred in System.Configuration.dll
A first chance exception of type 'System.Configuration.ConfigurationErrorsException' occurred in System.Configuration.dll
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll'
A first chance exception of type 'System.Xml.XmlException' occurred in System.Xml.dll
A first chance exception of type 'System.Xml.XmlException' occurred in System.Xml.dll
A first chance exception of type 'System.Xml.XmlException' occurred in System.Xml.dll
A first chance exception of type 'System.Xml.XmlException' occurred in System.Xml.dll
A first chance exception of type 'System.Xml.XmlException' occurred in System.Xml.dll
A first chance exception of type 'System.Xml.XmlException' occurred in System.Xml.dll
The thread 0x948 has exited with code 0 (0x0).
System.Net.Sockets Verbose: 0 : [2448] TcpClient#7588182::TcpClient(InterNetwork#2)
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Socket(InterNetwork#2)
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Socket() 
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#7588182::TcpClient() 
System.Net.Sockets Verbose: 0 : [2448] TcpClient#7588182::TcpClient()
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#7588182::TcpClient() 
System.Net.Sockets Verbose: 0 : [2448] TcpClient#7588182::Connect(trlvwks027)
System.Net.Sockets Verbose: 0 : [2448] DNS::GetHostAddresses(trlvwks027)
System.Net.Sockets Verbose: 0 : [2448] DNS::GetHostByName(trlvwks027)
System.Net.Sockets Verbose: 0 : [2448] Exiting DNS::GetHostByName() 	-> IPHostEntry#65248697
System.Net.Sockets Verbose: 0 : [2448] Exiting DNS::GetHostAddresses() 	-> IPAddress[]#50510248
System.Net.Sockets Verbose: 0 : [2448] TcpClient#7588182::Connect(36:5672#610582248)
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Connect(36:5672#610582248)
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Connect() 
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#7588182::Connect() 
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#7588182::Connect() 
System.Net.Sockets Verbose: 0 : [2448] TcpClient#7588182::GetStream()
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#7588182::GetStream() 	-> NetworkStream#58368655
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 41 4D 51 50                                     : AMQP
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 08                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 01 20                                     : ... 
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 0A 00 0A 08 00 00 00-00 FB 07 70 72 6F 64 75 : ...........produ
System.Net.Sockets Verbose: 0 : [2564] 00000010 : 63 74 53 00 00 00 08 52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
System.Net.Sockets Verbose: 0 : [2564] 00000020 : 76 65 72 73 69 6F 6E 53-00 00 00 05 31 2E 35 2E : versionS....1.5.
System.Net.Sockets Verbose: 0 : [2564] 00000030 : 35 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 0A 45 : 5.platformS....E
System.Net.Sockets Verbose: 0 : [2564] 00000040 : 72 6C 61 6E 67 2F 4F 54-50 09 63 6F 70 79 72 69 : rlang/OTP.copyri
System.Net.Sockets Verbose: 0 : [2564] 00000050 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
System.Net.Sockets Verbose: 0 : [2564] 00000060 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 39 20 : t (C) 2007-2009 
System.Net.Sockets Verbose: 0 : [2564] 00000070 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
System.Net.Sockets Verbose: 0 : [2564] 00000080 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
System.Net.Sockets Verbose: 0 : [2564] 00000090 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
System.Net.Sockets Verbose: 0 : [2564] 000000A0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
System.Net.Sockets Verbose: 0 : [2564] 000000B0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 0B : chnologies Ltd..
System.Net.Sockets Verbose: 0 : [2564] 000000C0 : 69 6E 66 6F 72 6D 61 74-69 6F 6E 53 00 00 00 35 : informationS...5
System.Net.Sockets Verbose: 0 : [2564] 000000D0 : 4C 69 63 65 6E 73 65 64-20 75 6E 64 65 72 20 74 : Licensed under t
System.Net.Sockets Verbose: 0 : [2564] 000000E0 : 68 65 20 4D 50 4C 2E 20-20 53 65 65 20 68 74 74 : he MPL.  See htt
System.Net.Sockets Verbose: 0 : [2564] 000000F0 : 70 3A 2F 2F 77 77 77 2E-72 61 62 62 69 74 6D 71 : p://www.rabbitmq
System.Net.Sockets Verbose: 0 : [2564] 00000100 : 2E 63 6F 6D 2F 00 00 00-0E 50 4C 41 49 4E 20 41 : .com/....PLAIN A
System.Net.Sockets Verbose: 0 : [2564] 00000110 : 4D 51 50 4C 41 49 4E 00-00 00 05 65 6E 5F 55 53 : MQPLAIN....en_US
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 288#288
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 1B                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 0A 00 0B 00 00 00 F7-07 70 72 6F 64 75 63 74 : .........product
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 53 00 00 00 08 52 61 62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
System.Net.Sockets Verbose: 0 : [2448] 00000020 : 72 73 69 6F 6E 53 00 00-00 07 31 2E 35 2E 33 2E : rsionS....1.5.3.
System.Net.Sockets Verbose: 0 : [2448] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
System.Net.Sockets Verbose: 0 : [2448] 00000040 : 4E 45 54 0B 69 6E 66 6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
System.Net.Sockets Verbose: 0 : [2448] 00000050 : 00 00 00 35 4C 69 63 65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
System.Net.Sockets Verbose: 0 : [2448] 00000060 : 65 72 20 74 68 65 20 4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
System.Net.Sockets Verbose: 0 : [2448] 00000070 : 20 68 74 74 70 3A 2F 2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
System.Net.Sockets Verbose: 0 : [2448] 00000080 : 69 74 6D 71 2E 63 6F 6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
System.Net.Sockets Verbose: 0 : [2448] 00000090 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
System.Net.Sockets Verbose: 0 : [2448] 000000A0 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008 
System.Net.Sockets Verbose: 0 : [2448] 000000B0 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
System.Net.Sockets Verbose: 0 : [2448] 000000C0 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
System.Net.Sockets Verbose: 0 : [2448] 000000D0 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
System.Net.Sockets Verbose: 0 : [2448] 000000E0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
System.Net.Sockets Verbose: 0 : [2448] 000000F0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
System.Net.Sockets Verbose: 0 : [2448] 00000100 : 50 4C 41 49 4E 00 00 00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
System.Net.Sockets Verbose: 0 : [2448] 00000110 : 67 75 65 73 74 05 65 6E-5F 55 53                : guest.en_US
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 283#283
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 0C                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 0A 00 1E 00 00 00 02-00 00 00 00             : ............
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 12#12
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 0C                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 0A 00 1F 00 00 00 02-00 00 00 00             : ............
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 12#12
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 08                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 0A 00 28 01 2F 00 01-                        : ...(./..
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 8#8
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 27                                     : ...'
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 0A 00 29 22 54 52 4C-56 57 4B 53 30 32 37 2E : ...)"TRLVWKS027.
System.Net.Sockets Verbose: 0 : [2564] 00000010 : 54 65 63 68 52 65 73 75-6C 74 73 2D 4E 56 2E 63 : TechResults-NV.c
System.Net.Sockets Verbose: 0 : [2564] 00000020 : 6F 6D 3A 35 36 37 32                            : om:5672
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 39#39
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 05                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 14 00 0A 00                                  : .....
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 5#5
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 14 00 0B                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 05                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 14 00 0A 00                                  : .....
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 5#5
System.Net.Sockets Verbose: 0 : [2448] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 02                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 14 00 0B                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 0C                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00 32 00 0A 00 00 00 0C-00 00 00 00             : .2..........
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 12#12
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 2D                                     : ...-
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 32 00 0B 20 61 6D 71-2E 67 65 6E 2D 30 77 4C : .2.. amq.gen-0wL
System.Net.Sockets Verbose: 0 : [2564] 00000010 : 58 44 38 76 65 4A 36 37-74 68 79 2B 4B 39 2B 35 : XD8veJ67thy+K9+5
System.Net.Sockets Verbose: 0 : [2564] 00000020 : 48 37 67 3D 3D 00 00 00-00 00 00 00 00          : H7g==........
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 45#45
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 39                                              : 9
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00 32 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 30 : .2.... amq.gen-0
System.Net.Sockets Verbose: 0 : [3968] 00000010 : 77 4C 58 44 38 76 65 4A-36 37 74 68 79 2B 4B 39 : wLXD8veJ67thy+K9
System.Net.Sockets Verbose: 0 : [3968] 00000020 : 2B 35 48 37 67 3D 3D 00-0B 2F 64 69 73 70 61 74 : +5H7g==../dispat
System.Net.Sockets Verbose: 0 : [3968] 00000030 : 63 68 65 72 00 00 00 00-00                      : cher.....
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 57#57
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 32 00 15                                     : .2..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 29                                              : )
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00 3C 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 30 : .<.... amq.gen-0
System.Net.Sockets Verbose: 0 : [3968] 00000010 : 77 4C 58 44 38 76 65 4A-36 37 74 68 79 2B 4B 39 : wLXD8veJ67thy+K9
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll'
System.Net.Sockets Verbose: 0 : [3968] 00000020 : 2B 35 48 37 67 3D 3D 00-00                      : +5H7g==..
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 41#41
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 26                                     : ...&
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 3C 00 15 21 61 6D 71-2E 63 74 61 67 2D 47 64 : .<..!amq.ctag-Gd
System.Net.Sockets Verbose: 0 : [2564] 00000010 : 37 5A 46 37 6C 71 46 44-64 57 49 6B 6B 30 65 6E : 7ZF7lqFDdWIkk0en
System.Net.Sockets Verbose: 0 : [2564] 00000020 : 33 47 6C 51 3D 3D                               : 3GlQ==
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 38#38
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2448] TcpClient#17818390::TcpClient(InterNetwork#2)
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Socket(InterNetwork#2)
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Socket() 
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#17818390::TcpClient() 
System.Net.Sockets Verbose: 0 : [2448] TcpClient#17818390::TcpClient()
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#17818390::TcpClient() 
System.Net.Sockets Verbose: 0 : [2448] TcpClient#17818390::Connect(trlvwks027)
System.Net.Sockets Verbose: 0 : [2448] DNS::GetHostAddresses(trlvwks027)
System.Net.Sockets Verbose: 0 : [2448] DNS::GetHostByName(trlvwks027)
System.Net.Sockets Verbose: 0 : [2448] Exiting DNS::GetHostByName() 	-> IPHostEntry#44780731
System.Net.Sockets Verbose: 0 : [2448] Exiting DNS::GetHostAddresses() 	-> IPAddress[]#1867017
System.Net.Sockets Verbose: 0 : [2448] TcpClient#17818390::Connect(36:5672#610582248)
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Connect(36:5672#610582248)
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Connect() 
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#17818390::Connect() 
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#17818390::Connect() 
System.Net.Sockets Verbose: 0 : [2448] TcpClient#17818390::GetStream()
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#17818390::GetStream() 	-> NetworkStream#16906910
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 41 4D 51 50                                     : AMQP
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 08                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00 01 20                                     : ... 
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 0A 00 0A 08 00 00 00-00 FB 07 70 72 6F 64 75 : ...........produ
System.Net.Sockets Verbose: 0 : [2600] 00000010 : 63 74 53 00 00 00 08 52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
System.Net.Sockets Verbose: 0 : [2600] 00000020 : 76 65 72 73 69 6F 6E 53-00 00 00 05 31 2E 35 2E : versionS....1.5.
System.Net.Sockets Verbose: 0 : [2600] 00000030 : 35 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 0A 45 : 5.platformS....E
System.Net.Sockets Verbose: 0 : [2600] 00000040 : 72 6C 61 6E 67 2F 4F 54-50 09 63 6F 70 79 72 69 : rlang/OTP.copyri
System.Net.Sockets Verbose: 0 : [2600] 00000050 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
System.Net.Sockets Verbose: 0 : [2600] 00000060 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 39 20 : t (C) 2007-2009 
System.Net.Sockets Verbose: 0 : [2600] 00000070 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
System.Net.Sockets Verbose: 0 : [2600] 00000080 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
System.Net.Sockets Verbose: 0 : [2600] 00000090 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
System.Net.Sockets Verbose: 0 : [2600] 000000A0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
System.Net.Sockets Verbose: 0 : [2600] 000000B0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 0B : chnologies Ltd..
System.Net.Sockets Verbose: 0 : [2600] 000000C0 : 69 6E 66 6F 72 6D 61 74-69 6F 6E 53 00 00 00 35 : informationS...5
System.Net.Sockets Verbose: 0 : [2600] 000000D0 : 4C 69 63 65 6E 73 65 64-20 75 6E 64 65 72 20 74 : Licensed under t
System.Net.Sockets Verbose: 0 : [2600] 000000E0 : 68 65 20 4D 50 4C 2E 20-20 53 65 65 20 68 74 74 : he MPL.  See htt
System.Net.Sockets Verbose: 0 : [2600] 000000F0 : 70 3A 2F 2F 77 77 77 2E-72 61 62 62 69 74 6D 71 : p://www.rabbitmq
System.Net.Sockets Verbose: 0 : [2600] 00000100 : 2E 63 6F 6D 2F 00 00 00-0E 50 4C 41 49 4E 20 41 : .com/....PLAIN A
System.Net.Sockets Verbose: 0 : [2600] 00000110 : 4D 51 50 4C 41 49 4E 00-00 00 05 65 6E 5F 55 53 : MQPLAIN....en_US
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 288#288
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 1B                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 0A 00 0B 00 00 00 F7-07 70 72 6F 64 75 63 74 : .........product
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 53 00 00 00 08 52 61 62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
System.Net.Sockets Verbose: 0 : [2448] 00000020 : 72 73 69 6F 6E 53 00 00-00 07 31 2E 35 2E 33 2E : rsionS....1.5.3.
System.Net.Sockets Verbose: 0 : [2448] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
System.Net.Sockets Verbose: 0 : [2448] 00000040 : 4E 45 54 0B 69 6E 66 6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
System.Net.Sockets Verbose: 0 : [2448] 00000050 : 00 00 00 35 4C 69 63 65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
System.Net.Sockets Verbose: 0 : [2448] 00000060 : 65 72 20 74 68 65 20 4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
System.Net.Sockets Verbose: 0 : [2448] 00000070 : 20 68 74 74 70 3A 2F 2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
System.Net.Sockets Verbose: 0 : [2448] 00000080 : 69 74 6D 71 2E 63 6F 6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
System.Net.Sockets Verbose: 0 : [2448] 00000090 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
System.Net.Sockets Verbose: 0 : [2448] 000000A0 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008 
System.Net.Sockets Verbose: 0 : [2448] 000000B0 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
System.Net.Sockets Verbose: 0 : [2448] 000000C0 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
System.Net.Sockets Verbose: 0 : [2448] 000000D0 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
System.Net.Sockets Verbose: 0 : [2448] 000000E0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
System.Net.Sockets Verbose: 0 : [2448] 000000F0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
System.Net.Sockets Verbose: 0 : [2448] 00000100 : 50 4C 41 49 4E 00 00 00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
System.Net.Sockets Verbose: 0 : [2448] 00000110 : 67 75 65 73 74 05 65 6E-5F 55 53                : guest.en_US
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 283#283
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00 00 0C                                     : ....
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 0A 00 1E 00 00 00 02-00 00 00 00             : ............
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 12#12
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 0C                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 0A 00 1F 00 00 00 02-00 00 00 00             : ............
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 12#12
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 08                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 0A 00 28 01 2F 00 01-                        : ...(./..
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 8#8
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00 00 27                                     : ...'
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 0A 00 29 22 54 52 4C-56 57 4B 53 30 32 37 2E : ...)"TRLVWKS027.
System.Net.Sockets Verbose: 0 : [2600] 00000010 : 54 65 63 68 52 65 73 75-6C 74 73 2D 4E 56 2E 63 : TechResults-NV.c
System.Net.Sockets Verbose: 0 : [2600] 00000020 : 6F 6D 3A 35 36 37 32                            : om:5672
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 39#39
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 05                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 14 00 0A 00                                  : .....
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 5#5
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 14 00 0B                                     : ....
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 05                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 14 00 0A 00                                  : .....
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 5#5
System.Net.Sockets Verbose: 0 : [2448] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 02                                           : ..
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 14 00 0B                                     : ....
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 0C                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00 32 00 0A 00 00 00 0C-00 00 00 00             : .2..........
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 12#12
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00 00 2D                                     : ...-
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 32 00 0B 20 61 6D 71-2E 67 65 6E 2D 49 2F 4E : .2.. amq.gen-I/N
System.Net.Sockets Verbose: 0 : [2600] 00000010 : 4E 51 37 2F 38 62 4C 65-72 58 37 31 32 47 45 51 : NQ7/8bLerX712GEQ
System.Net.Sockets Verbose: 0 : [2600] 00000020 : 61 66 77 3D 3D 00 00 00-00 00 00 00 00          : afw==........
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 45#45
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 39                                              : 9
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00 32 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 49 : .2.... amq.gen-I
System.Net.Sockets Verbose: 0 : [2980] 00000010 : 2F 4E 4E 51 37 2F 38 62-4C 65 72 58 37 31 32 47 : /NNQ7/8bLerX712G
System.Net.Sockets Verbose: 0 : [2980] 00000020 : 45 51 61 66 77 3D 3D 00-0B 2F 73 75 62 73 63 72 : EQafw==../subscr
System.Net.Sockets Verbose: 0 : [2980] 00000030 : 69 62 65 72 00 00 00 00-00                      : iber.....
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 57#57
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 32 00 15                                     : .2..
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 29                                              : )
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00 3C 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 49 : .<.... amq.gen-I
System.Net.Sockets Verbose: 0 : [2980] 00000010 : 2F 4E 4E 51 37 2F 38 62-4C 65 72 58 37 31 32 47 : /NNQ7/8bLerX712G
System.Net.Sockets Verbose: 0 : [2980] 00000020 : 45 51 61 66 77 3D 3D 00-00                      : EQafw==..
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 41#41
System.Net.Sockets Verbose: 0 : [2980] Socket#63630067::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#63630067::Send
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2980] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#63630067::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 00 00 26                                     : ...&
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : 00 3C 00 15 21 61 6D 71-2E 63 74 61 67 2D 52 44 : .<..!amq.ctag-RD
System.Net.Sockets Verbose: 0 : [2600] 00000010 : 78 66 37 75 33 55 46 75-6F 63 62 32 6C 2B 4D 59 : xf7u3UFuocb2l+MY
System.Net.Sockets Verbose: 0 : [2600] 00000020 : 6E 65 4A 77 3D 3D                               : neJw==
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 38#38
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2600] Data from Socket#63630067::Receive
System.Net.Sockets Verbose: 0 : [2600] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Receive()
System.Net.Sockets Verbose: 0 : [2448] TcpClient#10972427::TcpClient(InterNetwork#2)
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Socket(InterNetwork#2)
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Socket() 
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#10972427::TcpClient() 
System.Net.Sockets Verbose: 0 : [2448] TcpClient#10972427::TcpClient()
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#10972427::TcpClient() 
System.Net.Sockets Verbose: 0 : [2448] TcpClient#10972427::Connect(trlvwks027)
System.Net.Sockets Verbose: 0 : [2448] DNS::GetHostAddresses(trlvwks027)
System.Net.Sockets Verbose: 0 : [2448] DNS::GetHostByName(trlvwks027)
System.Net.Sockets Verbose: 0 : [2448] Exiting DNS::GetHostByName() 	-> IPHostEntry#6130944
System.Net.Sockets Verbose: 0 : [2448] Exiting DNS::GetHostAddresses() 	-> IPAddress[]#7457061
System.Net.Sockets Verbose: 0 : [2448] TcpClient#10972427::Connect(36:5672#610582248)
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Connect(36:5672#610582248)
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Connect() 
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#10972427::Connect() 
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#10972427::Connect() 
System.Net.Sockets Verbose: 0 : [2448] TcpClient#10972427::GetStream()
System.Net.Sockets Verbose: 0 : [2448] Exiting TcpClient#10972427::GetStream() 	-> NetworkStream#23469
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 41 4D 51 50                                     : AMQP
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 08                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 01 20                                     : ... 
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 0A 00 0A 08 00 00 00-00 FB 07 70 72 6F 64 75 : ...........produ
System.Net.Sockets Verbose: 0 : [3064] 00000010 : 63 74 53 00 00 00 08 52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
System.Net.Sockets Verbose: 0 : [3064] 00000020 : 76 65 72 73 69 6F 6E 53-00 00 00 05 31 2E 35 2E : versionS....1.5.
System.Net.Sockets Verbose: 0 : [3064] 00000030 : 35 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 0A 45 : 5.platformS....E
System.Net.Sockets Verbose: 0 : [3064] 00000040 : 72 6C 61 6E 67 2F 4F 54-50 09 63 6F 70 79 72 69 : rlang/OTP.copyri
System.Net.Sockets Verbose: 0 : [3064] 00000050 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
System.Net.Sockets Verbose: 0 : [3064] 00000060 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 39 20 : t (C) 2007-2009 
System.Net.Sockets Verbose: 0 : [3064] 00000070 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
System.Net.Sockets Verbose: 0 : [3064] 00000080 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
System.Net.Sockets Verbose: 0 : [3064] 00000090 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
System.Net.Sockets Verbose: 0 : [3064] 000000A0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
System.Net.Sockets Verbose: 0 : [3064] 000000B0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 0B : chnologies Ltd..
System.Net.Sockets Verbose: 0 : [3064] 000000C0 : 69 6E 66 6F 72 6D 61 74-69 6F 6E 53 00 00 00 35 : informationS...5
System.Net.Sockets Verbose: 0 : [3064] 000000D0 : 4C 69 63 65 6E 73 65 64-20 75 6E 64 65 72 20 74 : Licensed under t
System.Net.Sockets Verbose: 0 : [3064] 000000E0 : 68 65 20 4D 50 4C 2E 20-20 53 65 65 20 68 74 74 : he MPL.  See htt
System.Net.Sockets Verbose: 0 : [3064] 000000F0 : 70 3A 2F 2F 77 77 77 2E-72 61 62 62 69 74 6D 71 : p://www.rabbitmq
System.Net.Sockets Verbose: 0 : [3064] 00000100 : 2E 63 6F 6D 2F 00 00 00-0E 50 4C 41 49 4E 20 41 : .com/....PLAIN A
System.Net.Sockets Verbose: 0 : [3064] 00000110 : 4D 51 50 4C 41 49 4E 00-00 00 05 65 6E 5F 55 53 : MQPLAIN....en_US
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 288#288
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 1B                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 0A 00 0B 00 00 00 F7-07 70 72 6F 64 75 63 74 : .........product
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 53 00 00 00 08 52 61 62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
System.Net.Sockets Verbose: 0 : [2448] 00000020 : 72 73 69 6F 6E 53 00 00-00 07 31 2E 35 2E 33 2E : rsionS....1.5.3.
System.Net.Sockets Verbose: 0 : [2448] 00000030 : 30 08 70 6C 61 74 66 6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
System.Net.Sockets Verbose: 0 : [2448] 00000040 : 4E 45 54 0B 69 6E 66 6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
System.Net.Sockets Verbose: 0 : [2448] 00000050 : 00 00 00 35 4C 69 63 65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
System.Net.Sockets Verbose: 0 : [2448] 00000060 : 65 72 20 74 68 65 20 4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
System.Net.Sockets Verbose: 0 : [2448] 00000070 : 20 68 74 74 70 3A 2F 2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
System.Net.Sockets Verbose: 0 : [2448] 00000080 : 69 74 6D 71 2E 63 6F 6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
System.Net.Sockets Verbose: 0 : [2448] 00000090 : 67 68 74 53 00 00 00 67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
System.Net.Sockets Verbose: 0 : [2448] 000000A0 : 74 20 28 43 29 20 32 30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008 
System.Net.Sockets Verbose: 0 : [2448] 000000B0 : 4C 53 68 69 66 74 20 4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
System.Net.Sockets Verbose: 0 : [2448] 000000C0 : 65 73 69 76 65 20 46 69-6E 61 6E 63 69 61 6C 20 : esive Financial 
System.Net.Sockets Verbose: 0 : [2448] 000000D0 : 54 65 63 68 6E 6F 6C 6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
System.Net.Sockets Verbose: 0 : [2448] 000000E0 : 2E 2C 20 61 6E 64 20 52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
System.Net.Sockets Verbose: 0 : [2448] 000000F0 : 63 68 6E 6F 6C 6F 67 69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
System.Net.Sockets Verbose: 0 : [2448] 00000100 : 50 4C 41 49 4E 00 00 00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
System.Net.Sockets Verbose: 0 : [2448] 00000110 : 67 75 65 73 74 05 65 6E-5F 55 53                : guest.en_US
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 283#283
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 00 0C                                     : ....
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 0A 00 1E 00 00 00 02-00 00 00 00             : ............
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 12#12
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 0C                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 0A 00 1F 00 00 00 02-00 00 00 00             : ............
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 12#12
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 08                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 0A 00 28 01 2F 00 01-                        : ...(./..
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 8#8
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 00 27                                     : ...'
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 0A 00 29 22 54 52 4C-56 57 4B 53 30 32 37 2E : ...)"TRLVWKS027.
System.Net.Sockets Verbose: 0 : [3064] 00000010 : 54 65 63 68 52 65 73 75-6C 74 73 2D 4E 56 2E 63 : TechResults-NV.c
System.Net.Sockets Verbose: 0 : [3064] 00000020 : 6F 6D 3A 35 36 37 32                            : om:5672
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 39#39
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 05                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 14 00 0A 00                                  : .....
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 5#5
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 14 00 0B                                     : ....
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 05                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 14 00 0A 00                                  : .....
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 5#5
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 02                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 14 00 0B                                     : ....
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 0C                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 32 00 0A 00 00 00 0C-00 00 00 00             : .2..........
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 12#12
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 02                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 00 2D                                     : ...-
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 32 00 0B 20 61 6D 71-2E 67 65 6E 2D 5A 66 49 : .2.. amq.gen-ZfI
System.Net.Sockets Verbose: 0 : [3064] 00000010 : 70 77 33 72 37 41 68 46-2B 52 6C 62 62 71 30 44 : pw3r7AhF+Rlbbq0D
System.Net.Sockets Verbose: 0 : [3064] 00000020 : 79 57 51 3D 3D 00 00 00-00 00 00 00 00          : yWQ==........
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 45#45
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 53                                              : S
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 32 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 5A : .2.... amq.gen-Z
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 66 49 70 77 33 72 37 41-68 46 2B 52 6C 62 62 71 : fIpw3r7AhF+Rlbbq
System.Net.Sockets Verbose: 0 : [2448] 00000020 : 30 44 79 57 51 3D 3D 00-25 2F 31 31 39 38 34 63 : 0DyWQ==.%/11984c
System.Net.Sockets Verbose: 0 : [2448] 00000030 : 64 63 2D 36 64 61 38 2D-34 64 62 37 2D 38 63 34 : dc-6da8-4db7-8c4
System.Net.Sockets Verbose: 0 : [2448] 00000040 : 36 2D 62 65 32 63 34 61-66 65 37 61 39 61 00 00 : 6-be2c4afe7a9a..
System.Net.Sockets Verbose: 0 : [2448] 00000050 : 00 00 00                                        : ...
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 83#83
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 02                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 32 00 15                                     : .2..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 29                                              : )
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 3C 00 14 00 00 20 61-6D 71 2E 67 65 6E 2D 5A : .<.... amq.gen-Z
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 66 49 70 77 33 72 37 41-68 46 2B 52 6C 62 62 71 : fIpw3r7AhF+Rlbbq
System.Net.Sockets Verbose: 0 : [2448] 00000020 : 30 44 79 57 51 3D 3D 00-00                      : 0DyWQ==..
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 41#41
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 02                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 00 26                                     : ...&
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 3C 00 15 21 61 6D 71-2E 63 74 61 67 2D 6F 71 : .<..!amq.ctag-oq
System.Net.Sockets Verbose: 0 : [3064] 00000010 : 77 47 4F 39 77 69 62 30-76 79 38 52 45 6A 51 43 : wGO9wib0vy8REjQC
System.Net.Sockets Verbose: 0 : [3064] 00000020 : 59 6E 52 67 3D 3D                               : YnRg==
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 38#38
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 'C:\WINDOWS\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll'
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 14                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 68 65 72 00                                     : her.
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 20#20
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 0E                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 14#14
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 53                                              : S
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [2448] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [2448] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [2448] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [2448] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [2448] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [2448] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [2448] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [2448] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [2448] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [2448] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [2448] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [2448] 000000D0 : 3A 41 63 74 69 6F 6E 3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [2448] 000000E0 : 67 65 49 44 3E 75 72 6E-3A 75 75 69 64 3A 34 36 : geID>urn:uuid:46
System.Net.Sockets Verbose: 0 : [2448] 000000F0 : 62 61 63 38 65 64 2D 66-30 35 62 2D 34 31 39 39 : bac8ed-f05b-4199
System.Net.Sockets Verbose: 0 : [2448] 00000100 : 2D 61 36 65 37 2D 63 38-62 61 64 36 64 38 63 35 : -a6e7-c8bad6d8c5
System.Net.Sockets Verbose: 0 : [2448] 00000110 : 66 38 3C 2F 61 3A 4D 65-73 73 61 67 65 49 44 3E : f8</a:MessageID>
System.Net.Sockets Verbose: 0 : [2448] 00000120 : 3C 61 3A 52 65 70 6C 79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [2448] 00000130 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [2448] 00000140 : 2F 2F 2F 31 31 39 38 34-63 64 63 2D 36 64 61 38 : ///11984cdc-6da8
System.Net.Sockets Verbose: 0 : [2448] 00000150 : 2D 34 64 62 37 2D 38 63-34 36 2D 62 65 32 63 34 : -4db7-8c46-be2c4
System.Net.Sockets Verbose: 0 : [2448] 00000160 : 61 66 65 37 61 39 61 3C-2F 61 3A 41 64 64 72 65 : afe7a9a</a:Addre
System.Net.Sockets Verbose: 0 : [2448] 00000170 : 73 73 3E 3C 2F 61 3A 52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [2448] 00000180 : 2F 73 3A 48 65 61 64 65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [2448] 00000190 : 79 3E 3C 43 72 65 61 74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [2448] 000001A0 : 65 20 78 6D 6C 6E 73 3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [2448] 000001B0 : 73 63 68 65 6D 61 73 2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [2448] 000001C0 : 6F 72 67 2F 77 73 2F 32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [2448] 000001D0 : 6D 22 3E 3C 41 63 6B 73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [2448] 000001E0 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [2448] 000001F0 : 2F 2F 2F 31 31 39 38 34-63 64 63 2D 36 64 61 38 : ///11984cdc-6da8
System.Net.Sockets Verbose: 0 : [2448] 00000200 : 2D 34 64 62 37 2D 38 63-34 36 2D 62 65 32 63 34 : -4db7-8c46-be2c4
System.Net.Sockets Verbose: 0 : [2448] 00000210 : 61 66 65 37 61 39 61 3C-2F 61 3A 41 64 64 72 65 : afe7a9a</a:Addre
System.Net.Sockets Verbose: 0 : [2448] 00000220 : 73 73 3E 3C 2F 41 63 6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [2448] 00000230 : 65 61 74 65 53 65 71 75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [2448] 00000240 : 3A 42 6F 64 79 3E 3C 2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [2448] 00000250 : 70 65 3E                                        : pe>
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 595#595
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 3C                                     : ...<
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 3C 00 3C 21 61 6D 71-2E 63 74 61 67 2D 47 64 : .<.<!amq.ctag-Gd
System.Net.Sockets Verbose: 0 : [2564] 00000010 : 37 5A 46 37 6C 71 46 44-64 57 49 6B 6B 30 65 6E : 7ZF7lqFDdWIkk0en
System.Net.Sockets Verbose: 0 : [2564] 00000020 : 33 47 6C 51 3D 3D 00 00-00 00 00 00 00 01 00 00 : 3GlQ==..........
System.Net.Sockets Verbose: 0 : [2564] 00000030 : 0B 2F 64 69 73 70 61 74-63 68 65 72             : ./dispatcher
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 60#60
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 0E                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 14#14
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 02 53                                     : ...S
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [2564] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [2564] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [2564] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [2564] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [2564] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [2564] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [2564] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [2564] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [2564] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [2564] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [2564] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [2564] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [2564] 000000D0 : 3A 41 63 74 69 6F 6E 3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [2564] 000000E0 : 67 65 49 44 3E 75 72 6E-3A 75 75 69 64 3A 34 36 : geID>urn:uuid:46
System.Net.Sockets Verbose: 0 : [2564] 000000F0 : 62 61 63 38 65 64 2D 66-30 35 62 2D 34 31 39 39 : bac8ed-f05b-4199
System.Net.Sockets Verbose: 0 : [2564] 00000100 : 2D 61 36 65 37 2D 63 38-62 61 64 36 64 38 63 35 : -a6e7-c8bad6d8c5
System.Net.Sockets Verbose: 0 : [2564] 00000110 : 66 38 3C 2F 61 3A 4D 65-73 73 61 67 65 49 44 3E : f8</a:MessageID>
System.Net.Sockets Verbose: 0 : [2564] 00000120 : 3C 61 3A 52 65 70 6C 79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [2564] 00000130 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [2564] 00000140 : 2F 2F 2F 31 31 39 38 34-63 64 63 2D 36 64 61 38 : ///11984cdc-6da8
System.Net.Sockets Verbose: 0 : [2564] 00000150 : 2D 34 64 62 37 2D 38 63-34 36 2D 62 65 32 63 34 : -4db7-8c46-be2c4
System.Net.Sockets Verbose: 0 : [2564] 00000160 : 61 66 65 37 61 39 61 3C-2F 61 3A 41 64 64 72 65 : afe7a9a</a:Addre
System.Net.Sockets Verbose: 0 : [2564] 00000170 : 73 73 3E 3C 2F 61 3A 52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [2564] 00000180 : 2F 73 3A 48 65 61 64 65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [2564] 00000190 : 79 3E 3C 43 72 65 61 74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [2564] 000001A0 : 65 20 78 6D 6C 6E 73 3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [2564] 000001B0 : 73 63 68 65 6D 61 73 2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [2564] 000001C0 : 6F 72 67 2F 77 73 2F 32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [2564] 000001D0 : 6D 22 3E 3C 41 63 6B 73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [2564] 000001E0 : 64 72 65 73 73 3E 73 6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [2564] 000001F0 : 2F 2F 2F 31 31 39 38 34-63 64 63 2D 36 64 61 38 : ///11984cdc-6da8
System.Net.Sockets Verbose: 0 : [2564] 00000200 : 2D 34 64 62 37 2D 38 63-34 36 2D 62 65 32 63 34 : -4db7-8c46-be2c4
System.Net.Sockets Verbose: 0 : [2564] 00000210 : 61 66 65 37 61 39 61 3C-2F 61 3A 41 64 64 72 65 : afe7a9a</a:Addre
System.Net.Sockets Verbose: 0 : [2564] 00000220 : 73 73 3E 3C 2F 41 63 6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [2564] 00000230 : 65 61 74 65 53 65 71 75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [2564] 00000240 : 3A 42 6F 64 79 3E 3C 2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [2564] 00000250 : 70 65 3E                                        : pe>
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 595#595
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 0D                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00 3C 00 50 00 00 00 00-00 00 00 01 00          : .<.P.........
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 13#13
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 2E                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00 3C 00 28 00 00 00 25-2F 31 31 39 38 34 63 64 : .<.(...%/11984cd
System.Net.Sockets Verbose: 0 : [3968] 00000010 : 63 2D 36 64 61 38 2D 34-64 62 37 2D 38 63 34 36 : c-6da8-4db7-8c46
System.Net.Sockets Verbose: 0 : [3968] 00000020 : 2D 62 65 32 63 34 61 66-65 37 61 39 61 00       : -be2c4afe7a9a.
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 46#46
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 0E                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 4C 00 00       : .<.........L..
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 14#14
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 4C                                              : L
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3968] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3968] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3968] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3968] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3968] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3968] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3968] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3968] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3968] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3968] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3968] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3968] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
System.Net.Sockets Verbose: 0 : [3968] 000000D0 : 70 6F 6E 73 65 3C 2F 61-3A 41 63 74 69 6F 6E 3E : ponse</a:Action>
System.Net.Sockets Verbose: 0 : [3968] 000000E0 : 3C 61 3A 52 65 6C 61 74-65 73 54 6F 3E 75 72 6E : <a:RelatesTo>urn
System.Net.Sockets Verbose: 0 : [3968] 000000F0 : 3A 75 75 69 64 3A 34 36-62 61 63 38 65 64 2D 66 : :uuid:46bac8ed-f
System.Net.Sockets Verbose: 0 : [3968] 00000100 : 30 35 62 2D 34 31 39 39-2D 61 36 65 37 2D 63 38 : 05b-4199-a6e7-c8
System.Net.Sockets Verbose: 0 : [3968] 00000110 : 62 61 64 36 64 38 63 35-66 38 3C 2F 61 3A 52 65 : bad6d8c5f8</a:Re
System.Net.Sockets Verbose: 0 : [3968] 00000120 : 6C 61 74 65 73 54 6F 3E-3C 61 3A 54 6F 20 73 3A : latesTo><a:To s:
System.Net.Sockets Verbose: 0 : [3968] 00000130 : 6D 75 73 74 55 6E 64 65-72 73 74 61 6E 64 3D 22 : mustUnderstand="
System.Net.Sockets Verbose: 0 : [3968] 00000140 : 31 22 3E 73 6F 61 70 2E-61 6D 71 70 3A 2F 2F 2F : 1">soap.amqp:///
System.Net.Sockets Verbose: 0 : [3968] 00000150 : 31 31 39 38 34 63 64 63-2D 36 64 61 38 2D 34 64 : 11984cdc-6da8-4d
System.Net.Sockets Verbose: 0 : [3968] 00000160 : 62 37 2D 38 63 34 36 2D-62 65 32 63 34 61 66 65 : b7-8c46-be2c4afe
System.Net.Sockets Verbose: 0 : [3968] 00000170 : 37 61 39 61 3C 2F 61 3A-54 6F 3E 3C 2F 73 3A 48 : 7a9a</a:To></s:H
System.Net.Sockets Verbose: 0 : [3968] 00000180 : 65 61 64 65 72 3E 3C 73-3A 42 6F 64 79 3E 3C 43 : eader><s:Body><C
System.Net.Sockets Verbose: 0 : [3968] 00000190 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
System.Net.Sockets Verbose: 0 : [3968] 000001A0 : 70 6F 6E 73 65 20 78 6D-6C 6E 73 3D 22 68 74 74 : ponse xmlns="htt
System.Net.Sockets Verbose: 0 : [3968] 000001B0 : 70 3A 2F 2F 73 63 68 65-6D 61 73 2E 78 6D 6C 73 : p://schemas.xmls
System.Net.Sockets Verbose: 0 : [3968] 000001C0 : 6F 61 70 2E 6F 72 67 2F-77 73 2F 32 30 30 35 2F : oap.org/ws/2005/
System.Net.Sockets Verbose: 0 : [3968] 000001D0 : 30 32 2F 72 6D 22 3E 3C-49 64 65 6E 74 69 66 69 : 02/rm"><Identifi
System.Net.Sockets Verbose: 0 : [3968] 000001E0 : 65 72 3E 75 72 6E 3A 75-75 69 64 3A 63 34 33 39 : er>urn:uuid:c439
System.Net.Sockets Verbose: 0 : [3968] 000001F0 : 66 30 39 61 2D 63 36 38-37 2D 34 64 30 33 2D 62 : f09a-c687-4d03-b
System.Net.Sockets Verbose: 0 : [3968] 00000200 : 63 65 63 2D 31 66 61 62-38 63 33 63 34 36 32 34 : cec-1fab8c3c4624
System.Net.Sockets Verbose: 0 : [3968] 00000210 : 3C 2F 49 64 65 6E 74 69-66 69 65 72 3E 3C 2F 43 : </Identifier></C
System.Net.Sockets Verbose: 0 : [3968] 00000220 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
System.Net.Sockets Verbose: 0 : [3968] 00000230 : 70 6F 6E 73 65 3E 3C 2F-73 3A 42 6F 64 79 3E 3C : ponse></s:Body><
System.Net.Sockets Verbose: 0 : [3968] 00000240 : 2F 73 3A 45 6E 76 65 6C-6F 70 65 3E             : /s:Envelope>
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 588#588
System.Net.Sockets Verbose: 0 : [3968] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [3968] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [3968] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3968] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 02                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 00 56                                     : ...V
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 3C 00 3C 21 61 6D 71-2E 63 74 61 67 2D 6F 71 : .<.<!amq.ctag-oq
System.Net.Sockets Verbose: 0 : [3064] 00000010 : 77 47 4F 39 77 69 62 30-76 79 38 52 45 6A 51 43 : wGO9wib0vy8REjQC
System.Net.Sockets Verbose: 0 : [3064] 00000020 : 59 6E 52 67 3D 3D 00 00-00 00 00 00 00 01 00 00 : YnRg==..........
System.Net.Sockets Verbose: 0 : [3064] 00000030 : 25 2F 31 31 39 38 34 63-64 63 2D 36 64 61 38 2D : %/11984cdc-6da8-
System.Net.Sockets Verbose: 0 : [3064] 00000040 : 34 64 62 37 2D 38 63 34-36 2D 62 65 32 63 34 61 : 4db7-8c46-be2c4a
System.Net.Sockets Verbose: 0 : [3064] 00000050 : 66 65 37 61 39 61                               : fe7a9a
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 86#86
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 02                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 00 0E                                     : ....
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 4C 00 00       : .<.........L..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 14#14
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 02                                           : ..
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 00 00 02 4C                                     : ...L
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3064] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3064] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3064] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3064] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3064] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3064] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3064] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3064] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3064] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3064] 000000A0 : 65 6D 61 73 2E 78 6D 6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3064] 000000B0 : 2F 77 73 2F 32 30 30 35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3064] 000000C0 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
System.Net.Sockets Verbose: 0 : [3064] 000000D0 : 70 6F 6E 73 65 3C 2F 61-3A 41 63 74 69 6F 6E 3E : ponse</a:Action>
System.Net.Sockets Verbose: 0 : [3064] 000000E0 : 3C 61 3A 52 65 6C 61 74-65 73 54 6F 3E 75 72 6E : <a:RelatesTo>urn
System.Net.Sockets Verbose: 0 : [3064] 000000F0 : 3A 75 75 69 64 3A 34 36-62 61 63 38 65 64 2D 66 : :uuid:46bac8ed-f
System.Net.Sockets Verbose: 0 : [3064] 00000100 : 30 35 62 2D 34 31 39 39-2D 61 36 65 37 2D 63 38 : 05b-4199-a6e7-c8
System.Net.Sockets Verbose: 0 : [3064] 00000110 : 62 61 64 36 64 38 63 35-66 38 3C 2F 61 3A 52 65 : bad6d8c5f8</a:Re
System.Net.Sockets Verbose: 0 : [3064] 00000120 : 6C 61 74 65 73 54 6F 3E-3C 61 3A 54 6F 20 73 3A : latesTo><a:To s:
System.Net.Sockets Verbose: 0 : [3064] 00000130 : 6D 75 73 74 55 6E 64 65-72 73 74 61 6E 64 3D 22 : mustUnderstand="
System.Net.Sockets Verbose: 0 : [3064] 00000140 : 31 22 3E 73 6F 61 70 2E-61 6D 71 70 3A 2F 2F 2F : 1">soap.amqp:///
System.Net.Sockets Verbose: 0 : [3064] 00000150 : 31 31 39 38 34 63 64 63-2D 36 64 61 38 2D 34 64 : 11984cdc-6da8-4d
System.Net.Sockets Verbose: 0 : [3064] 00000160 : 62 37 2D 38 63 34 36 2D-62 65 32 63 34 61 66 65 : b7-8c46-be2c4afe
System.Net.Sockets Verbose: 0 : [3064] 00000170 : 37 61 39 61 3C 2F 61 3A-54 6F 3E 3C 2F 73 3A 48 : 7a9a</a:To></s:H
System.Net.Sockets Verbose: 0 : [3064] 00000180 : 65 61 64 65 72 3E 3C 73-3A 42 6F 64 79 3E 3C 43 : eader><s:Body><C
System.Net.Sockets Verbose: 0 : [3064] 00000190 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
System.Net.Sockets Verbose: 0 : [3064] 000001A0 : 70 6F 6E 73 65 20 78 6D-6C 6E 73 3D 22 68 74 74 : ponse xmlns="htt
System.Net.Sockets Verbose: 0 : [3064] 000001B0 : 70 3A 2F 2F 73 63 68 65-6D 61 73 2E 78 6D 6C 73 : p://schemas.xmls
System.Net.Sockets Verbose: 0 : [3064] 000001C0 : 6F 61 70 2E 6F 72 67 2F-77 73 2F 32 30 30 35 2F : oap.org/ws/2005/
System.Net.Sockets Verbose: 0 : [3064] 000001D0 : 30 32 2F 72 6D 22 3E 3C-49 64 65 6E 74 69 66 69 : 02/rm"><Identifi
System.Net.Sockets Verbose: 0 : [3064] 000001E0 : 65 72 3E 75 72 6E 3A 75-75 69 64 3A 63 34 33 39 : er>urn:uuid:c439
System.Net.Sockets Verbose: 0 : [3064] 000001F0 : 66 30 39 61 2D 63 36 38-37 2D 34 64 30 33 2D 62 : f09a-c687-4d03-b
System.Net.Sockets Verbose: 0 : [3064] 00000200 : 63 65 63 2D 31 66 61 62-38 63 33 63 34 36 32 34 : cec-1fab8c3c4624
System.Net.Sockets Verbose: 0 : [3064] 00000210 : 3C 2F 49 64 65 6E 74 69-66 69 65 72 3E 3C 2F 43 : </Identifier></C
System.Net.Sockets Verbose: 0 : [3064] 00000220 : 72 65 61 74 65 53 65 71-75 65 6E 63 65 52 65 73 : reateSequenceRes
System.Net.Sockets Verbose: 0 : [3064] 00000230 : 70 6F 6E 73 65 3E 3C 2F-73 3A 42 6F 64 79 3E 3C : ponse></s:Body><
System.Net.Sockets Verbose: 0 : [3064] 00000240 : 2F 73 3A 45 6E 76 65 6C-6F 70 65 3E             : /s:Envelope>
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 588#588
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [3064] Data from Socket#23997172::Receive
System.Net.Sockets Verbose: 0 : [3064] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [3064] Socket#23997172::Receive()
System.Net.Sockets Verbose: 0 : [2980] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 0D                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2980] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : 00 3C 00 50 00 00 00 00-00 00 00 01 00          : .<.P.........
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#23997172::Send() 	-> 13#13
System.Net.Sockets Verbose: 0 : [2980] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2980] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2980] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2980] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 14                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 68 65 72 00                                     : her.
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 20#20
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 0E                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 14#14
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 04                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CD                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] (printing 1024 out of 1229)
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [2448] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [2448] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [2448] 00000040 : 6C 6E 73 3A 72 3D 22 68-74 74 70 3A 2F 2F 73 63 : lns:r="http://sc
System.Net.Sockets Verbose: 0 : [2448] 00000050 : 68 65 6D 61 73 2E 78 6D-6C 73 6F 61 70 2E 6F 72 : hemas.xmlsoap.or
System.Net.Sockets Verbose: 0 : [2448] 00000060 : 67 2F 77 73 2F 32 30 30-35 2F 30 32 2F 72 6D 22 : g/ws/2005/02/rm"
System.Net.Sockets Verbose: 0 : [2448] 00000070 : 20 78 6D 6C 6E 73 3A 61-3D 22 68 74 74 70 3A 2F :  xmlns:a="http:/
System.Net.Sockets Verbose: 0 : [2448] 00000080 : 2F 77 77 77 2E 77 33 2E-6F 72 67 2F 32 30 30 35 : /www.w3.org/2005
System.Net.Sockets Verbose: 0 : [2448] 00000090 : 2F 30 38 2F 61 64 64 72-65 73 73 69 6E 67 22 3E : /08/addressing">
System.Net.Sockets Verbose: 0 : [2448] 000000A0 : 3C 73 3A 48 65 61 64 65-72 3E 3C 72 3A 41 63 6B : <s:Header><r:Ack
System.Net.Sockets Verbose: 0 : [2448] 000000B0 : 52 65 71 75 65 73 74 65-64 3E 3C 72 3A 49 64 65 : Requested><r:Ide
System.Net.Sockets Verbose: 0 : [2448] 000000C0 : 6E 74 69 66 69 65 72 3E-75 72 6E 3A 75 75 69 64 : ntifier>urn:uuid
System.Net.Sockets Verbose: 0 : [2448] 000000D0 : 3A 63 34 33 39 66 30 39-61 2D 63 36 38 37 2D 34 : :c439f09a-c687-4
System.Net.Sockets Verbose: 0 : [2448] 000000E0 : 64 30 33 2D 62 63 65 63-2D 31 66 61 62 38 63 33 : d03-bcec-1fab8c3
System.Net.Sockets Verbose: 0 : [2448] 000000F0 : 63 34 36 32 34 3C 2F 72-3A 49 64 65 6E 74 69 66 : c4624</r:Identif
System.Net.Sockets Verbose: 0 : [2448] 00000100 : 69 65 72 3E 3C 2F 72 3A-41 63 6B 52 65 71 75 65 : ier></r:AckReque
System.Net.Sockets Verbose: 0 : [2448] 00000110 : 73 74 65 64 3E 3C 72 3A-53 65 71 75 65 6E 63 65 : sted><r:Sequence
System.Net.Sockets Verbose: 0 : [2448] 00000120 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [2448] 00000130 : 64 3D 22 31 22 3E 3C 72-3A 49 64 65 6E 74 69 66 : d="1"><r:Identif
System.Net.Sockets Verbose: 0 : [2448] 00000140 : 69 65 72 3E 75 72 6E 3A-75 75 69 64 3A 63 34 33 : ier>urn:uuid:c43
System.Net.Sockets Verbose: 0 : [2448] 00000150 : 39 66 30 39 61 2D 63 36-38 37 2D 34 64 30 33 2D : 9f09a-c687-4d03-
System.Net.Sockets Verbose: 0 : [2448] 00000160 : 62 63 65 63 2D 31 66 61-62 38 63 33 63 34 36 32 : bcec-1fab8c3c462
System.Net.Sockets Verbose: 0 : [2448] 00000170 : 34 3C 2F 72 3A 49 64 65-6E 74 69 66 69 65 72 3E : 4</r:Identifier>
System.Net.Sockets Verbose: 0 : [2448] 00000180 : 3C 72 3A 4D 65 73 73 61-67 65 4E 75 6D 62 65 72 : <r:MessageNumber
System.Net.Sockets Verbose: 0 : [2448] 00000190 : 3E 31 3C 2F 72 3A 4D 65-73 73 61 67 65 4E 75 6D : >1</r:MessageNum
System.Net.Sockets Verbose: 0 : [2448] 000001A0 : 62 65 72 3E 3C 2F 72 3A-53 65 71 75 65 6E 63 65 : ber></r:Sequence
System.Net.Sockets Verbose: 0 : [2448] 000001B0 : 3E 3C 61 3A 41 63 74 69-6F 6E 20 73 3A 6D 75 73 : ><a:Action s:mus
System.Net.Sockets Verbose: 0 : [2448] 000001C0 : 74 55 6E 64 65 72 73 74-61 6E 64 3D 22 31 22 3E : tUnderstand="1">
System.Net.Sockets Verbose: 0 : [2448] 000001D0 : 68 74 74 70 3A 2F 2F 74-65 6D 70 75 72 69 2E 6F : http://tempuri.o
System.Net.Sockets Verbose: 0 : [2448] 000001E0 : 72 67 2F 49 44 69 73 70-61 74 63 68 65 72 53 65 : rg/IDispatcherSe
System.Net.Sockets Verbose: 0 : [2448] 000001F0 : 72 76 69 63 65 2F 53 75-62 73 63 72 69 62 65 3C : rvice/Subscribe<
System.Net.Sockets Verbose: 0 : [2448] 00000200 : 2F 61 3A 41 63 74 69 6F-6E 3E 3C 56 73 44 65 62 : /a:Action><VsDeb
System.Net.Sockets Verbose: 0 : [2448] 00000210 : 75 67 67 65 72 43 61 75-73 61 6C 69 74 79 44 61 : uggerCausalityDa
System.Net.Sockets Verbose: 0 : [2448] 00000220 : 74 61 20 78 6D 6C 6E 73-3D 22 68 74 74 70 3A 2F : ta xmlns="http:/
System.Net.Sockets Verbose: 0 : [2448] 00000230 : 2F 73 63 68 65 6D 61 73-2E 6D 69 63 72 6F 73 6F : /schemas.microso
System.Net.Sockets Verbose: 0 : [2448] 00000240 : 66 74 2E 63 6F 6D 2F 76-73 74 75 64 69 6F 2F 64 : ft.com/vstudio/d
System.Net.Sockets Verbose: 0 : [2448] 00000250 : 69 61 67 6E 6F 73 74 69-63 73 2F 73 65 72 76 69 : iagnostics/servi
System.Net.Sockets Verbose: 0 : [2448] 00000260 : 63 65 6D 6F 64 65 6C 73-69 6E 6B 22 3E 75 49 44 : cemodelsink">uID
System.Net.Sockets Verbose: 0 : [2448] 00000270 : 50 6F 35 56 51 49 5A 66-71 58 59 39 4C 6E 4E 44 : Po5VQIZfqXY9LnND
System.Net.Sockets Verbose: 0 : [2448] 00000280 : 42 5A 37 2B 53 57 39 34-41 41 41 41 41 46 36 48 : BZ7+SW94AAAAAF6H
System.Net.Sockets Verbose: 0 : [2448] 00000290 : 76 62 63 5A 72 71 6B 36-52 46 72 5A 42 6B 66 57 : vbcZrqk6RFrZBkfW
System.Net.Sockets Verbose: 0 : [2448] 000002A0 : 57 49 4F 55 54 50 6F 49-67 63 45 39 4C 6D 6B 54 : WIOUTPoIgcE9LmkT
System.Net.Sockets Verbose: 0 : [2448] 000002B0 : 69 6B 43 53 38 63 31 73-41 43 51 41 41 3C 2F 56 : ikCS8c1sACQAA</V
System.Net.Sockets Verbose: 0 : [2448] 000002C0 : 73 44 65 62 75 67 67 65-72 43 61 75 73 61 6C 69 : sDebuggerCausali
System.Net.Sockets Verbose: 0 : [2448] 000002D0 : 74 79 44 61 74 61 3E 3C-2F 73 3A 48 65 61 64 65 : tyData></s:Heade
System.Net.Sockets Verbose: 0 : [2448] 000002E0 : 72 3E 3C 73 3A 42 6F 64-79 3E 3C 53 75 62 73 63 : r><s:Body><Subsc
System.Net.Sockets Verbose: 0 : [2448] 000002F0 : 72 69 62 65 20 78 6D 6C-6E 73 3D 22 68 74 74 70 : ribe xmlns="http
System.Net.Sockets Verbose: 0 : [2448] 00000300 : 3A 2F 2F 74 65 6D 70 75-72 69 2E 6F 72 67 2F 22 : ://tempuri.org/"
System.Net.Sockets Verbose: 0 : [2448] 00000310 : 3E 3C 73 75 62 73 63 72-69 62 65 72 20 78 6D 6C : ><subscriber xml
System.Net.Sockets Verbose: 0 : [2448] 00000320 : 6E 73 3A 62 3D 22 68 74-74 70 3A 2F 2F 73 63 68 : ns:b="http://sch
System.Net.Sockets Verbose: 0 : [2448] 00000330 : 65 6D 61 73 2E 64 61 74-61 63 6F 6E 74 72 61 63 : emas.datacontrac
System.Net.Sockets Verbose: 0 : [2448] 00000340 : 74 2E 6F 72 67 2F 32 30-30 34 2F 30 37 2F 54 65 : t.org/2004/07/Te
System.Net.Sockets Verbose: 0 : [2448] 00000350 : 73 74 2E 42 61 73 65 22-20 78 6D 6C 6E 73 3A 69 : st.Base" xmlns:i
System.Net.Sockets Verbose: 0 : [2448] 00000360 : 3D 22 68 74 74 70 3A 2F-2F 77 77 77 2E 77 33 2E : ="http://www.w3.
System.Net.Sockets Verbose: 0 : [2448] 00000370 : 6F 72 67 2F 32 30 30 31-2F 58 4D 4C 53 63 68 65 : org/2001/XMLSche
System.Net.Sockets Verbose: 0 : [2448] 00000380 : 6D 61 2D 69 6E 73 74 61-6E 63 65 22 3E 3C 62 3A : ma-instance"><b:
System.Net.Sockets Verbose: 0 : [2448] 00000390 : 5F 41 64 64 72 65 73 73-3E 61 6D 71 70 3A 2F 2F : _Address>amqp://
System.Net.Sockets Verbose: 0 : [2448] 000003A0 : 2F 73 75 62 73 63 72 69-62 65 72 3C 2F 62 3A 5F : /subscriber</b:_
System.Net.Sockets Verbose: 0 : [2448] 000003B0 : 41 64 64 72 65 73 73 3E-3C 62 3A 5F 43 6F 6E 74 : Address><b:_Cont
System.Net.Sockets Verbose: 0 : [2448] 000003C0 : 65 78 74 73 20 78 6D 6C-6E 73 3A 63 3D 22 68 74 : exts xmlns:c="ht
System.Net.Sockets Verbose: 0 : [2448] 000003D0 : 74 70 3A 2F 2F 73 63 68-65 6D 61 73 2E 64 61 74 : tp://schemas.dat
System.Net.Sockets Verbose: 0 : [2448] 000003E0 : 61 63 6F 6E 74 72 61 63-74 2E 6F 72 67 2F 32 30 : acontract.org/20
System.Net.Sockets Verbose: 0 : [2448] 000003F0 : 30 34 2F 30 37 2F 54 65-73 74 2E 45 6E 74 69 74 : 04/07/Test.Entit
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1229#1229
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 3C                                     : ...<
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 3C 00 3C 21 61 6D 71-2E 63 74 61 67 2D 47 64 : .<.<!amq.ctag-Gd
System.Net.Sockets Verbose: 0 : [2564] 00000010 : 37 5A 46 37 6C 71 46 44-64 57 49 6B 6B 30 65 6E : 7ZF7lqFDdWIkk0en
System.Net.Sockets Verbose: 0 : [2564] 00000020 : 33 47 6C 51 3D 3D 00 00-00 00 00 00 00 02 00 00 : 3GlQ==..........
System.Net.Sockets Verbose: 0 : [2564] 00000030 : 0B 2F 64 69 73 70 61 74-63 68 65 72             : ./dispatcher
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 60#60
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 0E                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 14#14
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
A first chance exception of type 'RabbitMQ.Client.Impl.BodyTooLongException' occurred in RabbitMQ.Client.dll
A first chance exception of type 'System.IO.EndOfStreamException' occurred in RabbitMQ.Client.dll
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00                                              : .
A first chance exception of type 'RabbitMQ.Client.Exceptions.AlreadyClosedException' occurred in RabbitMQ.Client.dll
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Send
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in RabbitMQ.Client.dll
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 4B                                              : K
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 14 00 28 01 37 40 54-68 65 20 62 6F 64 79 20 : ...(.7 at The body 
System.Net.Sockets Verbose: 0 : [2564] 00000010 : 6F 66 20 61 20 6D 65 73-73 61 67 65 20 28 31 38 : of a message (18
System.Net.Sockets Verbose: 0 : [2564] 00000020 : 34 34 36 37 34 34 30 37-33 37 30 39 35 35 31 35 : 4467440737095515
System.Net.Sockets Verbose: 0 : [2564] 00000030 : 36 35 20 62 79 74 65 73-29 20 77 61 73 20 74 6F : 65 bytes) was to
System.Net.Sockets Verbose: 0 : [2564] 00000040 : 6F 20 6C 6F 6E 67 2E 00-00 00 00                : o long.....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Send() 	-> 75#75
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Send()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Send
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 04 CD                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] (printing 1024 out of 1229)
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [2564] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [2564] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [2564] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [2564] 00000040 : 6C 6E 73 3A 72 3D 22 68-74 74 70 3A 2F 2F 73 63 : lns:r="http://sc
System.Net.Sockets Verbose: 0 : [2564] 00000050 : 68 65 6D 61 73 2E 78 6D-6C 73 6F 61 70 2E 6F 72 : hemas.xmlsoap.or
System.Net.Sockets Verbose: 0 : [2564] 00000060 : 67 2F 77 73 2F 32 30 30-35 2F 30 32 2F 72 6D 22 : g/ws/2005/02/rm"
System.Net.Sockets Verbose: 0 : [2564] 00000070 : 20 78 6D 6C 6E 73 3A 61-3D 22 68 74 74 70 3A 2F :  xmlns:a="http:/
System.Net.Sockets Verbose: 0 : [2564] 00000080 : 2F 77 77 77 2E 77 33 2E-6F 72 67 2F 32 30 30 35 : /www.w3.org/2005
System.Net.Sockets Verbose: 0 : [2564] 00000090 : 2F 30 38 2F 61 64 64 72-65 73 73 69 6E 67 22 3E : /08/addressing">
System.Net.Sockets Verbose: 0 : [2564] 000000A0 : 3C 73 3A 48 65 61 64 65-72 3E 3C 72 3A 41 63 6B : <s:Header><r:Ack
System.Net.Sockets Verbose: 0 : [2564] 000000B0 : 52 65 71 75 65 73 74 65-64 3E 3C 72 3A 49 64 65 : Requested><r:Ide
System.Net.Sockets Verbose: 0 : [2564] 000000C0 : 6E 74 69 66 69 65 72 3E-75 72 6E 3A 75 75 69 64 : ntifier>urn:uuid
System.Net.Sockets Verbose: 0 : [2564] 000000D0 : 3A 63 34 33 39 66 30 39-61 2D 63 36 38 37 2D 34 : :c439f09a-c687-4
System.Net.Sockets Verbose: 0 : [2564] 000000E0 : 64 30 33 2D 62 63 65 63-2D 31 66 61 62 38 63 33 : d03-bcec-1fab8c3
System.Net.Sockets Verbose: 0 : [2564] 000000F0 : 63 34 36 32 34 3C 2F 72-3A 49 64 65 6E 74 69 66 : c4624</r:Identif
System.Net.Sockets Verbose: 0 : [2564] 00000100 : 69 65 72 3E 3C 2F 72 3A-41 63 6B 52 65 71 75 65 : ier></r:AckReque
System.Net.Sockets Verbose: 0 : [2564] 00000110 : 73 74 65 64 3E 3C 72 3A-53 65 71 75 65 6E 63 65 : sted><r:Sequence
System.Net.Sockets Verbose: 0 : [2564] 00000120 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [2564] 00000130 : 64 3D 22 31 22 3E 3C 72-3A 49 64 65 6E 74 69 66 : d="1"><r:Identif
System.Net.Sockets Verbose: 0 : [2564] 00000140 : 69 65 72 3E 75 72 6E 3A-75 75 69 64 3A 63 34 33 : ier>urn:uuid:c43
System.Net.Sockets Verbose: 0 : [2564] 00000150 : 39 66 30 39 61 2D 63 36-38 37 2D 34 64 30 33 2D : 9f09a-c687-4d03-
System.Net.Sockets Verbose: 0 : [2564] 00000160 : 62 63 65 63 2D 31 66 61-62 38 63 33 63 34 36 32 : bcec-1fab8c3c462
System.Net.Sockets Verbose: 0 : [2564] 00000170 : 34 3C 2F 72 3A 49 64 65-6E 74 69 66 69 65 72 3E : 4</r:Identifier>
System.Net.Sockets Verbose: 0 : [2564] 00000180 : 3C 72 3A 4D 65 73 73 61-67 65 4E 75 6D 62 65 72 : <r:MessageNumber
System.Net.Sockets Verbose: 0 : [2564] 00000190 : 3E 31 3C 2F 72 3A 4D 65-73 73 61 67 65 4E 75 6D : >1</r:MessageNum
System.Net.Sockets Verbose: 0 : [2564] 000001A0 : 62 65 72 3E 3C 2F 72 3A-53 65 71 75 65 6E 63 65 : ber></r:Sequence
System.Net.Sockets Verbose: 0 : [2564] 000001B0 : 3E 3C 61 3A 41 63 74 69-6F 6E 20 73 3A 6D 75 73 : ><a:Action s:mus
System.Net.Sockets Verbose: 0 : [2564] 000001C0 : 74 55 6E 64 65 72 73 74-61 6E 64 3D 22 31 22 3E : tUnderstand="1">
System.Net.Sockets Verbose: 0 : [2564] 000001D0 : 68 74 74 70 3A 2F 2F 74-65 6D 70 75 72 69 2E 6F : http://tempuri.o
System.Net.Sockets Verbose: 0 : [2564] 000001E0 : 72 67 2F 49 44 69 73 70-61 74 63 68 65 72 53 65 : rg/IDispatcherSe
System.Net.Sockets Verbose: 0 : [2564] 000001F0 : 72 76 69 63 65 2F 53 75-62 73 63 72 69 62 65 3C : rvice/Subscribe<
System.Net.Sockets Verbose: 0 : [2564] 00000200 : 2F 61 3A 41 63 74 69 6F-6E 3E 3C 56 73 44 65 62 : /a:Action><VsDeb
System.Net.Sockets Verbose: 0 : [2564] 00000210 : 75 67 67 65 72 43 61 75-73 61 6C 69 74 79 44 61 : uggerCausalityDa
System.Net.Sockets Verbose: 0 : [2564] 00000220 : 74 61 20 78 6D 6C 6E 73-3D 22 68 74 74 70 3A 2F : ta xmlns="http:/
System.Net.Sockets Verbose: 0 : [2564] 00000230 : 2F 73 63 68 65 6D 61 73-2E 6D 69 63 72 6F 73 6F : /schemas.microso
System.Net.Sockets Verbose: 0 : [2564] 00000240 : 66 74 2E 63 6F 6D 2F 76-73 74 75 64 69 6F 2F 64 : ft.com/vstudio/d
System.Net.Sockets Verbose: 0 : [2564] 00000250 : 69 61 67 6E 6F 73 74 69-63 73 2F 73 65 72 76 69 : iagnostics/servi
System.Net.Sockets Verbose: 0 : [2564] 00000260 : 63 65 6D 6F 64 65 6C 73-69 6E 6B 22 3E 75 49 44 : cemodelsink">uID
System.Net.Sockets Verbose: 0 : [2564] 00000270 : 50 6F 35 56 51 49 5A 66-71 58 59 39 4C 6E 4E 44 : Po5VQIZfqXY9LnND
System.Net.Sockets Verbose: 0 : [2564] 00000280 : 42 5A 37 2B 53 57 39 34-41 41 41 41 41 46 36 48 : BZ7+SW94AAAAAF6H
System.Net.Sockets Verbose: 0 : [2564] 00000290 : 76 62 63 5A 72 71 6B 36-52 46 72 5A 42 6B 66 57 : vbcZrqk6RFrZBkfW
System.Net.Sockets Verbose: 0 : [2564] 000002A0 : 57 49 4F 55 54 50 6F 49-67 63 45 39 4C 6D 6B 54 : WIOUTPoIgcE9LmkT
System.Net.Sockets Verbose: 0 : [2564] 000002B0 : 69 6B 43 53 38 63 31 73-41 43 51 41 41 3C 2F 56 : ikCS8c1sACQAA</V
System.Net.Sockets Verbose: 0 : [2564] 000002C0 : 73 44 65 62 75 67 67 65-72 43 61 75 73 61 6C 69 : sDebuggerCausali
System.Net.Sockets Verbose: 0 : [2564] 000002D0 : 74 79 44 61 74 61 3E 3C-2F 73 3A 48 65 61 64 65 : tyData></s:Heade
System.Net.Sockets Verbose: 0 : [2564] 000002E0 : 72 3E 3C 73 3A 42 6F 64-79 3E 3C 53 75 62 73 63 : r><s:Body><Subsc
System.Net.Sockets Verbose: 0 : [2564] 000002F0 : 72 69 62 65 20 78 6D 6C-6E 73 3D 22 68 74 74 70 : ribe xmlns="http
System.Net.Sockets Verbose: 0 : [2564] 00000300 : 3A 2F 2F 74 65 6D 70 75-72 69 2E 6F 72 67 2F 22 : ://tempuri.org/"
System.Net.Sockets Verbose: 0 : [2564] 00000310 : 3E 3C 73 75 62 73 63 72-69 62 65 72 20 78 6D 6C : ><subscriber xml
System.Net.Sockets Verbose: 0 : [2564] 00000320 : 6E 73 3A 62 3D 22 68 74-74 70 3A 2F 2F 73 63 68 : ns:b="http://sch
System.Net.Sockets Verbose: 0 : [2564] 00000330 : 65 6D 61 73 2E 64 61 74-61 63 6F 6E 74 72 61 63 : emas.datacontrac
System.Net.Sockets Verbose: 0 : [2564] 00000340 : 74 2E 6F 72 67 2F 32 30-30 34 2F 30 37 2F 54 65 : t.org/2004/07/Te
System.Net.Sockets Verbose: 0 : [2564] 00000350 : 73 74 2E 42 61 73 65 22-20 78 6D 6C 6E 73 3A 69 : st.Base" xmlns:i
System.Net.Sockets Verbose: 0 : [2564] 00000360 : 3D 22 68 74 74 70 3A 2F-2F 77 77 77 2E 77 33 2E : ="http://www.w3.
System.Net.Sockets Verbose: 0 : [2564] 00000370 : 6F 72 67 2F 32 30 30 31-2F 58 4D 4C 53 63 68 65 : org/2001/XMLSche
System.Net.Sockets Verbose: 0 : [2564] 00000380 : 6D 61 2D 69 6E 73 74 61-6E 63 65 22 3E 3C 62 3A : ma-instance"><b:
System.Net.Sockets Verbose: 0 : [2564] 00000390 : 5F 41 64 64 72 65 73 73-3E 61 6D 71 70 3A 2F 2F : _Address>amqp://
System.Net.Sockets Verbose: 0 : [2564] 000003A0 : 2F 73 75 62 73 63 72 69-62 65 72 3C 2F 62 3A 5F : /subscriber</b:_
System.Net.Sockets Verbose: 0 : [2564] 000003B0 : 41 64 64 72 65 73 73 3E-3C 62 3A 5F 43 6F 6E 74 : Address><b:_Cont
System.Net.Sockets Verbose: 0 : [2564] 000003C0 : 65 78 74 73 20 78 6D 6C-6E 73 3A 63 3D 22 68 74 : exts xmlns:c="ht
System.Net.Sockets Verbose: 0 : [2564] 000003D0 : 74 70 3A 2F 2F 73 63 68-65 6D 61 73 2E 64 61 74 : tp://schemas.dat
System.Net.Sockets Verbose: 0 : [2564] 000003E0 : 61 63 6F 6E 74 72 61 63-74 2E 6F 72 67 2F 32 30 : acontract.org/20
System.Net.Sockets Verbose: 0 : [2564] 000003F0 : 30 34 2F 30 37 2F 54 65-73 74 2E 45 6E 74 69 74 : 04/07/Test.Entit
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1229#1229
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in mscorlib.dll
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 01                                           : ..
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 2#2
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 00 00 04                                     : ....
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : 00 14 00 29                                     : ...)
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 4#4
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2564] Data from Socket#5923895::Receive
System.Net.Sockets Verbose: 0 : [2564] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Receive()
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 14                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 68 65 72 00                                     : her.
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 20#20
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 0E                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 14#14
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 04                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CD                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] (printing 1024 out of 1229)
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [2552] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [2552] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [2552] 00000040 : 6C 6E 73 3A 72 3D 22 68-74 74 70 3A 2F 2F 73 63 : lns:r="http://sc
System.Net.Sockets Verbose: 0 : [2552] 00000050 : 68 65 6D 61 73 2E 78 6D-6C 73 6F 61 70 2E 6F 72 : hemas.xmlsoap.or
System.Net.Sockets Verbose: 0 : [2552] 00000060 : 67 2F 77 73 2F 32 30 30-35 2F 30 32 2F 72 6D 22 : g/ws/2005/02/rm"
System.Net.Sockets Verbose: 0 : [2552] 00000070 : 20 78 6D 6C 6E 73 3A 61-3D 22 68 74 74 70 3A 2F :  xmlns:a="http:/
System.Net.Sockets Verbose: 0 : [2552] 00000080 : 2F 77 77 77 2E 77 33 2E-6F 72 67 2F 32 30 30 35 : /www.w3.org/2005
System.Net.Sockets Verbose: 0 : [2552] 00000090 : 2F 30 38 2F 61 64 64 72-65 73 73 69 6E 67 22 3E : /08/addressing">
System.Net.Sockets Verbose: 0 : [2552] 000000A0 : 3C 73 3A 48 65 61 64 65-72 3E 3C 72 3A 41 63 6B : <s:Header><r:Ack
System.Net.Sockets Verbose: 0 : [2552] 000000B0 : 52 65 71 75 65 73 74 65-64 3E 3C 72 3A 49 64 65 : Requested><r:Ide
System.Net.Sockets Verbose: 0 : [2552] 000000C0 : 6E 74 69 66 69 65 72 3E-75 72 6E 3A 75 75 69 64 : ntifier>urn:uuid
System.Net.Sockets Verbose: 0 : [2552] 000000D0 : 3A 63 34 33 39 66 30 39-61 2D 63 36 38 37 2D 34 : :c439f09a-c687-4
System.Net.Sockets Verbose: 0 : [2552] 000000E0 : 64 30 33 2D 62 63 65 63-2D 31 66 61 62 38 63 33 : d03-bcec-1fab8c3
System.Net.Sockets Verbose: 0 : [2552] 000000F0 : 63 34 36 32 34 3C 2F 72-3A 49 64 65 6E 74 69 66 : c4624</r:Identif
System.Net.Sockets Verbose: 0 : [2552] 00000100 : 69 65 72 3E 3C 2F 72 3A-41 63 6B 52 65 71 75 65 : ier></r:AckReque
System.Net.Sockets Verbose: 0 : [2552] 00000110 : 73 74 65 64 3E 3C 72 3A-53 65 71 75 65 6E 63 65 : sted><r:Sequence
System.Net.Sockets Verbose: 0 : [2552] 00000120 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [2552] 00000130 : 64 3D 22 31 22 3E 3C 72-3A 49 64 65 6E 74 69 66 : d="1"><r:Identif
System.Net.Sockets Verbose: 0 : [2552] 00000140 : 69 65 72 3E 75 72 6E 3A-75 75 69 64 3A 63 34 33 : ier>urn:uuid:c43
System.Net.Sockets Verbose: 0 : [2552] 00000150 : 39 66 30 39 61 2D 63 36-38 37 2D 34 64 30 33 2D : 9f09a-c687-4d03-
System.Net.Sockets Verbose: 0 : [2552] 00000160 : 62 63 65 63 2D 31 66 61-62 38 63 33 63 34 36 32 : bcec-1fab8c3c462
System.Net.Sockets Verbose: 0 : [2552] 00000170 : 34 3C 2F 72 3A 49 64 65-6E 74 69 66 69 65 72 3E : 4</r:Identifier>
System.Net.Sockets Verbose: 0 : [2552] 00000180 : 3C 72 3A 4D 65 73 73 61-67 65 4E 75 6D 62 65 72 : <r:MessageNumber
System.Net.Sockets Verbose: 0 : [2552] 00000190 : 3E 31 3C 2F 72 3A 4D 65-73 73 61 67 65 4E 75 6D : >1</r:MessageNum
System.Net.Sockets Verbose: 0 : [2552] 000001A0 : 62 65 72 3E 3C 2F 72 3A-53 65 71 75 65 6E 63 65 : ber></r:Sequence
System.Net.Sockets Verbose: 0 : [2552] 000001B0 : 3E 3C 61 3A 41 63 74 69-6F 6E 20 73 3A 6D 75 73 : ><a:Action s:mus
System.Net.Sockets Verbose: 0 : [2552] 000001C0 : 74 55 6E 64 65 72 73 74-61 6E 64 3D 22 31 22 3E : tUnderstand="1">
System.Net.Sockets Verbose: 0 : [2552] 000001D0 : 68 74 74 70 3A 2F 2F 74-65 6D 70 75 72 69 2E 6F : http://tempuri.o
System.Net.Sockets Verbose: 0 : [2552] 000001E0 : 72 67 2F 49 44 69 73 70-61 74 63 68 65 72 53 65 : rg/IDispatcherSe
System.Net.Sockets Verbose: 0 : [2552] 000001F0 : 72 76 69 63 65 2F 53 75-62 73 63 72 69 62 65 3C : rvice/Subscribe<
System.Net.Sockets Verbose: 0 : [2552] 00000200 : 2F 61 3A 41 63 74 69 6F-6E 3E 3C 56 73 44 65 62 : /a:Action><VsDeb
System.Net.Sockets Verbose: 0 : [2552] 00000210 : 75 67 67 65 72 43 61 75-73 61 6C 69 74 79 44 61 : uggerCausalityDa
System.Net.Sockets Verbose: 0 : [2552] 00000220 : 74 61 20 78 6D 6C 6E 73-3D 22 68 74 74 70 3A 2F : ta xmlns="http:/
System.Net.Sockets Verbose: 0 : [2552] 00000230 : 2F 73 63 68 65 6D 61 73-2E 6D 69 63 72 6F 73 6F : /schemas.microso
System.Net.Sockets Verbose: 0 : [2552] 00000240 : 66 74 2E 63 6F 6D 2F 76-73 74 75 64 69 6F 2F 64 : ft.com/vstudio/d
System.Net.Sockets Verbose: 0 : [2552] 00000250 : 69 61 67 6E 6F 73 74 69-63 73 2F 73 65 72 76 69 : iagnostics/servi
System.Net.Sockets Verbose: 0 : [2552] 00000260 : 63 65 6D 6F 64 65 6C 73-69 6E 6B 22 3E 75 49 44 : cemodelsink">uID
System.Net.Sockets Verbose: 0 : [2552] 00000270 : 50 6F 35 56 51 49 5A 66-71 58 59 39 4C 6E 4E 44 : Po5VQIZfqXY9LnND
System.Net.Sockets Verbose: 0 : [2552] 00000280 : 42 5A 37 2B 53 57 39 34-41 41 41 41 41 46 36 48 : BZ7+SW94AAAAAF6H
System.Net.Sockets Verbose: 0 : [2552] 00000290 : 76 62 63 5A 72 71 6B 36-52 46 72 5A 42 6B 66 57 : vbcZrqk6RFrZBkfW
System.Net.Sockets Verbose: 0 : [2552] 000002A0 : 57 49 4F 55 54 50 6F 49-67 63 45 39 4C 6D 6B 54 : WIOUTPoIgcE9LmkT
System.Net.Sockets Verbose: 0 : [2552] 000002B0 : 69 6B 43 53 38 63 31 73-41 43 51 41 41 3C 2F 56 : ikCS8c1sACQAA</V
System.Net.Sockets Verbose: 0 : [2552] 000002C0 : 73 44 65 62 75 67 67 65-72 43 61 75 73 61 6C 69 : sDebuggerCausali
System.Net.Sockets Verbose: 0 : [2552] 000002D0 : 74 79 44 61 74 61 3E 3C-2F 73 3A 48 65 61 64 65 : tyData></s:Heade
System.Net.Sockets Verbose: 0 : [2552] 000002E0 : 72 3E 3C 73 3A 42 6F 64-79 3E 3C 53 75 62 73 63 : r><s:Body><Subsc
System.Net.Sockets Verbose: 0 : [2552] 000002F0 : 72 69 62 65 20 78 6D 6C-6E 73 3D 22 68 74 74 70 : ribe xmlns="http
System.Net.Sockets Verbose: 0 : [2552] 00000300 : 3A 2F 2F 74 65 6D 70 75-72 69 2E 6F 72 67 2F 22 : ://tempuri.org/"
System.Net.Sockets Verbose: 0 : [2552] 00000310 : 3E 3C 73 75 62 73 63 72-69 62 65 72 20 78 6D 6C : ><subscriber xml
System.Net.Sockets Verbose: 0 : [2552] 00000320 : 6E 73 3A 62 3D 22 68 74-74 70 3A 2F 2F 73 63 68 : ns:b="http://sch
System.Net.Sockets Verbose: 0 : [2552] 00000330 : 65 6D 61 73 2E 64 61 74-61 63 6F 6E 74 72 61 63 : emas.datacontrac
System.Net.Sockets Verbose: 0 : [2552] 00000340 : 74 2E 6F 72 67 2F 32 30-30 34 2F 30 37 2F 54 65 : t.org/2004/07/Te
System.Net.Sockets Verbose: 0 : [2552] 00000350 : 73 74 2E 42 61 73 65 22-20 78 6D 6C 6E 73 3A 69 : st.Base" xmlns:i
System.Net.Sockets Verbose: 0 : [2552] 00000360 : 3D 22 68 74 74 70 3A 2F-2F 77 77 77 2E 77 33 2E : ="http://www.w3.
System.Net.Sockets Verbose: 0 : [2552] 00000370 : 6F 72 67 2F 32 30 30 31-2F 58 4D 4C 53 63 68 65 : org/2001/XMLSche
System.Net.Sockets Verbose: 0 : [2552] 00000380 : 6D 61 2D 69 6E 73 74 61-6E 63 65 22 3E 3C 62 3A : ma-instance"><b:
System.Net.Sockets Verbose: 0 : [2552] 00000390 : 5F 41 64 64 72 65 73 73-3E 61 6D 71 70 3A 2F 2F : _Address>amqp://
System.Net.Sockets Verbose: 0 : [2552] 000003A0 : 2F 73 75 62 73 63 72 69-62 65 72 3C 2F 62 3A 5F : /subscriber</b:_
System.Net.Sockets Verbose: 0 : [2552] 000003B0 : 41 64 64 72 65 73 73 3E-3C 62 3A 5F 43 6F 6E 74 : Address><b:_Cont
System.Net.Sockets Verbose: 0 : [2552] 000003C0 : 65 78 74 73 20 78 6D 6C-6E 73 3A 63 3D 22 68 74 : exts xmlns:c="ht
System.Net.Sockets Verbose: 0 : [2552] 000003D0 : 74 70 3A 2F 2F 73 63 68-65 6D 61 73 2E 64 61 74 : tp://schemas.dat
System.Net.Sockets Verbose: 0 : [2552] 000003E0 : 61 63 6F 6E 74 72 61 63-74 2E 6F 72 67 2F 32 30 : acontract.org/20
System.Net.Sockets Verbose: 0 : [2552] 000003F0 : 30 34 2F 30 37 2F 54 65-73 74 2E 45 6E 74 69 74 : 04/07/Test.Entit
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1229#1229
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 14                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 68 65 72 00                                     : her.
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 20#20
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 0E                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 14#14
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 04                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CD                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] (printing 1024 out of 1229)
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [2552] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [2552] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [2552] 00000040 : 6C 6E 73 3A 72 3D 22 68-74 74 70 3A 2F 2F 73 63 : lns:r="http://sc
System.Net.Sockets Verbose: 0 : [2552] 00000050 : 68 65 6D 61 73 2E 78 6D-6C 73 6F 61 70 2E 6F 72 : hemas.xmlsoap.or
System.Net.Sockets Verbose: 0 : [2552] 00000060 : 67 2F 77 73 2F 32 30 30-35 2F 30 32 2F 72 6D 22 : g/ws/2005/02/rm"
System.Net.Sockets Verbose: 0 : [2552] 00000070 : 20 78 6D 6C 6E 73 3A 61-3D 22 68 74 74 70 3A 2F :  xmlns:a="http:/
System.Net.Sockets Verbose: 0 : [2552] 00000080 : 2F 77 77 77 2E 77 33 2E-6F 72 67 2F 32 30 30 35 : /www.w3.org/2005
System.Net.Sockets Verbose: 0 : [2552] 00000090 : 2F 30 38 2F 61 64 64 72-65 73 73 69 6E 67 22 3E : /08/addressing">
System.Net.Sockets Verbose: 0 : [2552] 000000A0 : 3C 73 3A 48 65 61 64 65-72 3E 3C 72 3A 41 63 6B : <s:Header><r:Ack
System.Net.Sockets Verbose: 0 : [2552] 000000B0 : 52 65 71 75 65 73 74 65-64 3E 3C 72 3A 49 64 65 : Requested><r:Ide
System.Net.Sockets Verbose: 0 : [2552] 000000C0 : 6E 74 69 66 69 65 72 3E-75 72 6E 3A 75 75 69 64 : ntifier>urn:uuid
System.Net.Sockets Verbose: 0 : [2552] 000000D0 : 3A 63 34 33 39 66 30 39-61 2D 63 36 38 37 2D 34 : :c439f09a-c687-4
System.Net.Sockets Verbose: 0 : [2552] 000000E0 : 64 30 33 2D 62 63 65 63-2D 31 66 61 62 38 63 33 : d03-bcec-1fab8c3
System.Net.Sockets Verbose: 0 : [2552] 000000F0 : 63 34 36 32 34 3C 2F 72-3A 49 64 65 6E 74 69 66 : c4624</r:Identif
System.Net.Sockets Verbose: 0 : [2552] 00000100 : 69 65 72 3E 3C 2F 72 3A-41 63 6B 52 65 71 75 65 : ier></r:AckReque
System.Net.Sockets Verbose: 0 : [2552] 00000110 : 73 74 65 64 3E 3C 72 3A-53 65 71 75 65 6E 63 65 : sted><r:Sequence
System.Net.Sockets Verbose: 0 : [2552] 00000120 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [2552] 00000130 : 64 3D 22 31 22 3E 3C 72-3A 49 64 65 6E 74 69 66 : d="1"><r:Identif
System.Net.Sockets Verbose: 0 : [2552] 00000140 : 69 65 72 3E 75 72 6E 3A-75 75 69 64 3A 63 34 33 : ier>urn:uuid:c43
System.Net.Sockets Verbose: 0 : [2552] 00000150 : 39 66 30 39 61 2D 63 36-38 37 2D 34 64 30 33 2D : 9f09a-c687-4d03-
System.Net.Sockets Verbose: 0 : [2552] 00000160 : 62 63 65 63 2D 31 66 61-62 38 63 33 63 34 36 32 : bcec-1fab8c3c462
System.Net.Sockets Verbose: 0 : [2552] 00000170 : 34 3C 2F 72 3A 49 64 65-6E 74 69 66 69 65 72 3E : 4</r:Identifier>
System.Net.Sockets Verbose: 0 : [2552] 00000180 : 3C 72 3A 4D 65 73 73 61-67 65 4E 75 6D 62 65 72 : <r:MessageNumber
System.Net.Sockets Verbose: 0 : [2552] 00000190 : 3E 31 3C 2F 72 3A 4D 65-73 73 61 67 65 4E 75 6D : >1</r:MessageNum
System.Net.Sockets Verbose: 0 : [2552] 000001A0 : 62 65 72 3E 3C 2F 72 3A-53 65 71 75 65 6E 63 65 : ber></r:Sequence
System.Net.Sockets Verbose: 0 : [2552] 000001B0 : 3E 3C 61 3A 41 63 74 69-6F 6E 20 73 3A 6D 75 73 : ><a:Action s:mus
System.Net.Sockets Verbose: 0 : [2552] 000001C0 : 74 55 6E 64 65 72 73 74-61 6E 64 3D 22 31 22 3E : tUnderstand="1">
System.Net.Sockets Verbose: 0 : [2552] 000001D0 : 68 74 74 70 3A 2F 2F 74-65 6D 70 75 72 69 2E 6F : http://tempuri.o
System.Net.Sockets Verbose: 0 : [2552] 000001E0 : 72 67 2F 49 44 69 73 70-61 74 63 68 65 72 53 65 : rg/IDispatcherSe
System.Net.Sockets Verbose: 0 : [2552] 000001F0 : 72 76 69 63 65 2F 53 75-62 73 63 72 69 62 65 3C : rvice/Subscribe<
System.Net.Sockets Verbose: 0 : [2552] 00000200 : 2F 61 3A 41 63 74 69 6F-6E 3E 3C 56 73 44 65 62 : /a:Action><VsDeb
System.Net.Sockets Verbose: 0 : [2552] 00000210 : 75 67 67 65 72 43 61 75-73 61 6C 69 74 79 44 61 : uggerCausalityDa
System.Net.Sockets Verbose: 0 : [2552] 00000220 : 74 61 20 78 6D 6C 6E 73-3D 22 68 74 74 70 3A 2F : ta xmlns="http:/
System.Net.Sockets Verbose: 0 : [2552] 00000230 : 2F 73 63 68 65 6D 61 73-2E 6D 69 63 72 6F 73 6F : /schemas.microso
System.Net.Sockets Verbose: 0 : [2552] 00000240 : 66 74 2E 63 6F 6D 2F 76-73 74 75 64 69 6F 2F 64 : ft.com/vstudio/d
System.Net.Sockets Verbose: 0 : [2552] 00000250 : 69 61 67 6E 6F 73 74 69-63 73 2F 73 65 72 76 69 : iagnostics/servi
System.Net.Sockets Verbose: 0 : [2552] 00000260 : 63 65 6D 6F 64 65 6C 73-69 6E 6B 22 3E 75 49 44 : cemodelsink">uID
System.Net.Sockets Verbose: 0 : [2552] 00000270 : 50 6F 35 56 51 49 5A 66-71 58 59 39 4C 6E 4E 44 : Po5VQIZfqXY9LnND
System.Net.Sockets Verbose: 0 : [2552] 00000280 : 42 5A 37 2B 53 57 39 34-41 41 41 41 41 46 36 48 : BZ7+SW94AAAAAF6H
System.Net.Sockets Verbose: 0 : [2552] 00000290 : 76 62 63 5A 72 71 6B 36-52 46 72 5A 42 6B 66 57 : vbcZrqk6RFrZBkfW
System.Net.Sockets Verbose: 0 : [2552] 000002A0 : 57 49 4F 55 54 50 6F 49-67 63 45 39 4C 6D 6B 54 : WIOUTPoIgcE9LmkT
System.Net.Sockets Verbose: 0 : [2552] 000002B0 : 69 6B 43 53 38 63 31 73-41 43 51 41 41 3C 2F 56 : ikCS8c1sACQAA</V
System.Net.Sockets Verbose: 0 : [2552] 000002C0 : 73 44 65 62 75 67 67 65-72 43 61 75 73 61 6C 69 : sDebuggerCausali
System.Net.Sockets Verbose: 0 : [2552] 000002D0 : 74 79 44 61 74 61 3E 3C-2F 73 3A 48 65 61 64 65 : tyData></s:Heade
System.Net.Sockets Verbose: 0 : [2552] 000002E0 : 72 3E 3C 73 3A 42 6F 64-79 3E 3C 53 75 62 73 63 : r><s:Body><Subsc
System.Net.Sockets Verbose: 0 : [2552] 000002F0 : 72 69 62 65 20 78 6D 6C-6E 73 3D 22 68 74 74 70 : ribe xmlns="http
System.Net.Sockets Verbose: 0 : [2552] 00000300 : 3A 2F 2F 74 65 6D 70 75-72 69 2E 6F 72 67 2F 22 : ://tempuri.org/"
System.Net.Sockets Verbose: 0 : [2552] 00000310 : 3E 3C 73 75 62 73 63 72-69 62 65 72 20 78 6D 6C : ><subscriber xml
System.Net.Sockets Verbose: 0 : [2552] 00000320 : 6E 73 3A 62 3D 22 68 74-74 70 3A 2F 2F 73 63 68 : ns:b="http://sch
System.Net.Sockets Verbose: 0 : [2552] 00000330 : 65 6D 61 73 2E 64 61 74-61 63 6F 6E 74 72 61 63 : emas.datacontrac
System.Net.Sockets Verbose: 0 : [2552] 00000340 : 74 2E 6F 72 67 2F 32 30-30 34 2F 30 37 2F 54 65 : t.org/2004/07/Te
System.Net.Sockets Verbose: 0 : [2552] 00000350 : 73 74 2E 42 61 73 65 22-20 78 6D 6C 6E 73 3A 69 : st.Base" xmlns:i
System.Net.Sockets Verbose: 0 : [2552] 00000360 : 3D 22 68 74 74 70 3A 2F-2F 77 77 77 2E 77 33 2E : ="http://www.w3.
System.Net.Sockets Verbose: 0 : [2552] 00000370 : 6F 72 67 2F 32 30 30 31-2F 58 4D 4C 53 63 68 65 : org/2001/XMLSche
System.Net.Sockets Verbose: 0 : [2552] 00000380 : 6D 61 2D 69 6E 73 74 61-6E 63 65 22 3E 3C 62 3A : ma-instance"><b:
System.Net.Sockets Verbose: 0 : [2552] 00000390 : 5F 41 64 64 72 65 73 73-3E 61 6D 71 70 3A 2F 2F : _Address>amqp://
System.Net.Sockets Verbose: 0 : [2552] 000003A0 : 2F 73 75 62 73 63 72 69-62 65 72 3C 2F 62 3A 5F : /subscriber</b:_
System.Net.Sockets Verbose: 0 : [2552] 000003B0 : 41 64 64 72 65 73 73 3E-3C 62 3A 5F 43 6F 6E 74 : Address><b:_Cont
System.Net.Sockets Verbose: 0 : [2552] 000003C0 : 65 78 74 73 20 78 6D 6C-6E 73 3A 63 3D 22 68 74 : exts xmlns:c="ht
System.Net.Sockets Verbose: 0 : [2552] 000003D0 : 74 70 3A 2F 2F 73 63 68-65 6D 61 73 2E 64 61 74 : tp://schemas.dat
System.Net.Sockets Verbose: 0 : [2552] 000003E0 : 61 63 6F 6E 74 72 61 63-74 2E 6F 72 67 2F 32 30 : acontract.org/20
System.Net.Sockets Verbose: 0 : [2552] 000003F0 : 30 34 2F 30 37 2F 54 65-73 74 2E 45 6E 74 69 74 : 04/07/Test.Entit
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1229#1229
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 14                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 68 65 72 00                                     : her.
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 20#20
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 0E                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 14#14
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 04                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CD                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] (printing 1024 out of 1229)
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [2552] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [2552] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [2552] 00000040 : 6C 6E 73 3A 72 3D 22 68-74 74 70 3A 2F 2F 73 63 : lns:r="http://sc
System.Net.Sockets Verbose: 0 : [2552] 00000050 : 68 65 6D 61 73 2E 78 6D-6C 73 6F 61 70 2E 6F 72 : hemas.xmlsoap.or
System.Net.Sockets Verbose: 0 : [2552] 00000060 : 67 2F 77 73 2F 32 30 30-35 2F 30 32 2F 72 6D 22 : g/ws/2005/02/rm"
System.Net.Sockets Verbose: 0 : [2552] 00000070 : 20 78 6D 6C 6E 73 3A 61-3D 22 68 74 74 70 3A 2F :  xmlns:a="http:/
System.Net.Sockets Verbose: 0 : [2552] 00000080 : 2F 77 77 77 2E 77 33 2E-6F 72 67 2F 32 30 30 35 : /www.w3.org/2005
System.Net.Sockets Verbose: 0 : [2552] 00000090 : 2F 30 38 2F 61 64 64 72-65 73 73 69 6E 67 22 3E : /08/addressing">
System.Net.Sockets Verbose: 0 : [2552] 000000A0 : 3C 73 3A 48 65 61 64 65-72 3E 3C 72 3A 41 63 6B : <s:Header><r:Ack
System.Net.Sockets Verbose: 0 : [2552] 000000B0 : 52 65 71 75 65 73 74 65-64 3E 3C 72 3A 49 64 65 : Requested><r:Ide
System.Net.Sockets Verbose: 0 : [2552] 000000C0 : 6E 74 69 66 69 65 72 3E-75 72 6E 3A 75 75 69 64 : ntifier>urn:uuid
System.Net.Sockets Verbose: 0 : [2552] 000000D0 : 3A 63 34 33 39 66 30 39-61 2D 63 36 38 37 2D 34 : :c439f09a-c687-4
System.Net.Sockets Verbose: 0 : [2552] 000000E0 : 64 30 33 2D 62 63 65 63-2D 31 66 61 62 38 63 33 : d03-bcec-1fab8c3
System.Net.Sockets Verbose: 0 : [2552] 000000F0 : 63 34 36 32 34 3C 2F 72-3A 49 64 65 6E 74 69 66 : c4624</r:Identif
System.Net.Sockets Verbose: 0 : [2552] 00000100 : 69 65 72 3E 3C 2F 72 3A-41 63 6B 52 65 71 75 65 : ier></r:AckReque
System.Net.Sockets Verbose: 0 : [2552] 00000110 : 73 74 65 64 3E 3C 72 3A-53 65 71 75 65 6E 63 65 : sted><r:Sequence
System.Net.Sockets Verbose: 0 : [2552] 00000120 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [2552] 00000130 : 64 3D 22 31 22 3E 3C 72-3A 49 64 65 6E 74 69 66 : d="1"><r:Identif
System.Net.Sockets Verbose: 0 : [2552] 00000140 : 69 65 72 3E 75 72 6E 3A-75 75 69 64 3A 63 34 33 : ier>urn:uuid:c43
System.Net.Sockets Verbose: 0 : [2552] 00000150 : 39 66 30 39 61 2D 63 36-38 37 2D 34 64 30 33 2D : 9f09a-c687-4d03-
System.Net.Sockets Verbose: 0 : [2552] 00000160 : 62 63 65 63 2D 31 66 61-62 38 63 33 63 34 36 32 : bcec-1fab8c3c462
System.Net.Sockets Verbose: 0 : [2552] 00000170 : 34 3C 2F 72 3A 49 64 65-6E 74 69 66 69 65 72 3E : 4</r:Identifier>
System.Net.Sockets Verbose: 0 : [2552] 00000180 : 3C 72 3A 4D 65 73 73 61-67 65 4E 75 6D 62 65 72 : <r:MessageNumber
System.Net.Sockets Verbose: 0 : [2552] 00000190 : 3E 31 3C 2F 72 3A 4D 65-73 73 61 67 65 4E 75 6D : >1</r:MessageNum
System.Net.Sockets Verbose: 0 : [2552] 000001A0 : 62 65 72 3E 3C 2F 72 3A-53 65 71 75 65 6E 63 65 : ber></r:Sequence
System.Net.Sockets Verbose: 0 : [2552] 000001B0 : 3E 3C 61 3A 41 63 74 69-6F 6E 20 73 3A 6D 75 73 : ><a:Action s:mus
System.Net.Sockets Verbose: 0 : [2552] 000001C0 : 74 55 6E 64 65 72 73 74-61 6E 64 3D 22 31 22 3E : tUnderstand="1">
System.Net.Sockets Verbose: 0 : [2552] 000001D0 : 68 74 74 70 3A 2F 2F 74-65 6D 70 75 72 69 2E 6F : http://tempuri.o
System.Net.Sockets Verbose: 0 : [2552] 000001E0 : 72 67 2F 49 44 69 73 70-61 74 63 68 65 72 53 65 : rg/IDispatcherSe
System.Net.Sockets Verbose: 0 : [2552] 000001F0 : 72 76 69 63 65 2F 53 75-62 73 63 72 69 62 65 3C : rvice/Subscribe<
System.Net.Sockets Verbose: 0 : [2552] 00000200 : 2F 61 3A 41 63 74 69 6F-6E 3E 3C 56 73 44 65 62 : /a:Action><VsDeb
System.Net.Sockets Verbose: 0 : [2552] 00000210 : 75 67 67 65 72 43 61 75-73 61 6C 69 74 79 44 61 : uggerCausalityDa
System.Net.Sockets Verbose: 0 : [2552] 00000220 : 74 61 20 78 6D 6C 6E 73-3D 22 68 74 74 70 3A 2F : ta xmlns="http:/
System.Net.Sockets Verbose: 0 : [2552] 00000230 : 2F 73 63 68 65 6D 61 73-2E 6D 69 63 72 6F 73 6F : /schemas.microso
System.Net.Sockets Verbose: 0 : [2552] 00000240 : 66 74 2E 63 6F 6D 2F 76-73 74 75 64 69 6F 2F 64 : ft.com/vstudio/d
System.Net.Sockets Verbose: 0 : [2552] 00000250 : 69 61 67 6E 6F 73 74 69-63 73 2F 73 65 72 76 69 : iagnostics/servi
System.Net.Sockets Verbose: 0 : [2552] 00000260 : 63 65 6D 6F 64 65 6C 73-69 6E 6B 22 3E 75 49 44 : cemodelsink">uID
System.Net.Sockets Verbose: 0 : [2552] 00000270 : 50 6F 35 56 51 49 5A 66-71 58 59 39 4C 6E 4E 44 : Po5VQIZfqXY9LnND
System.Net.Sockets Verbose: 0 : [2552] 00000280 : 42 5A 37 2B 53 57 39 34-41 41 41 41 41 46 36 48 : BZ7+SW94AAAAAF6H
System.Net.Sockets Verbose: 0 : [2552] 00000290 : 76 62 63 5A 72 71 6B 36-52 46 72 5A 42 6B 66 57 : vbcZrqk6RFrZBkfW
System.Net.Sockets Verbose: 0 : [2552] 000002A0 : 57 49 4F 55 54 50 6F 49-67 63 45 39 4C 6D 6B 54 : WIOUTPoIgcE9LmkT
System.Net.Sockets Verbose: 0 : [2552] 000002B0 : 69 6B 43 53 38 63 31 73-41 43 51 41 41 3C 2F 56 : ikCS8c1sACQAA</V
System.Net.Sockets Verbose: 0 : [2552] 000002C0 : 73 44 65 62 75 67 67 65-72 43 61 75 73 61 6C 69 : sDebuggerCausali
System.Net.Sockets Verbose: 0 : [2552] 000002D0 : 74 79 44 61 74 61 3E 3C-2F 73 3A 48 65 61 64 65 : tyData></s:Heade
System.Net.Sockets Verbose: 0 : [2552] 000002E0 : 72 3E 3C 73 3A 42 6F 64-79 3E 3C 53 75 62 73 63 : r><s:Body><Subsc
System.Net.Sockets Verbose: 0 : [2552] 000002F0 : 72 69 62 65 20 78 6D 6C-6E 73 3D 22 68 74 74 70 : ribe xmlns="http
System.Net.Sockets Verbose: 0 : [2552] 00000300 : 3A 2F 2F 74 65 6D 70 75-72 69 2E 6F 72 67 2F 22 : ://tempuri.org/"
System.Net.Sockets Verbose: 0 : [2552] 00000310 : 3E 3C 73 75 62 73 63 72-69 62 65 72 20 78 6D 6C : ><subscriber xml
System.Net.Sockets Verbose: 0 : [2552] 00000320 : 6E 73 3A 62 3D 22 68 74-74 70 3A 2F 2F 73 63 68 : ns:b="http://sch
System.Net.Sockets Verbose: 0 : [2552] 00000330 : 65 6D 61 73 2E 64 61 74-61 63 6F 6E 74 72 61 63 : emas.datacontrac
System.Net.Sockets Verbose: 0 : [2552] 00000340 : 74 2E 6F 72 67 2F 32 30-30 34 2F 30 37 2F 54 65 : t.org/2004/07/Te
System.Net.Sockets Verbose: 0 : [2552] 00000350 : 73 74 2E 42 61 73 65 22-20 78 6D 6C 6E 73 3A 69 : st.Base" xmlns:i
System.Net.Sockets Verbose: 0 : [2552] 00000360 : 3D 22 68 74 74 70 3A 2F-2F 77 77 77 2E 77 33 2E : ="http://www.w3.
System.Net.Sockets Verbose: 0 : [2552] 00000370 : 6F 72 67 2F 32 30 30 31-2F 58 4D 4C 53 63 68 65 : org/2001/XMLSche
System.Net.Sockets Verbose: 0 : [2552] 00000380 : 6D 61 2D 69 6E 73 74 61-6E 63 65 22 3E 3C 62 3A : ma-instance"><b:
System.Net.Sockets Verbose: 0 : [2552] 00000390 : 5F 41 64 64 72 65 73 73-3E 61 6D 71 70 3A 2F 2F : _Address>amqp://
System.Net.Sockets Verbose: 0 : [2552] 000003A0 : 2F 73 75 62 73 63 72 69-62 65 72 3C 2F 62 3A 5F : /subscriber</b:_
System.Net.Sockets Verbose: 0 : [2552] 000003B0 : 41 64 64 72 65 73 73 3E-3C 62 3A 5F 43 6F 6E 74 : Address><b:_Cont
System.Net.Sockets Verbose: 0 : [2552] 000003C0 : 65 78 74 73 20 78 6D 6C-6E 73 3A 63 3D 22 68 74 : exts xmlns:c="ht
System.Net.Sockets Verbose: 0 : [2552] 000003D0 : 74 70 3A 2F 2F 73 63 68-65 6D 61 73 2E 64 61 74 : tp://schemas.dat
System.Net.Sockets Verbose: 0 : [2552] 000003E0 : 61 63 6F 6E 74 72 61 63-74 2E 6F 72 67 2F 32 30 : acontract.org/20
System.Net.Sockets Verbose: 0 : [2552] 000003F0 : 30 34 2F 30 37 2F 54 65-73 74 2E 45 6E 74 69 74 : 04/07/Test.Entit
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1229#1229
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
The thread 0x904 has exited with code 0 (0x0).
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 14                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 68 65 72 00                                     : her.
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 20#20
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 0E                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 00 00 00 00 00-00 00 04 CD 00 00       : .<............
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 14#14
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 04                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CD                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] (printing 1024 out of 1229)
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [2552] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [2552] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [2552] 00000040 : 6C 6E 73 3A 72 3D 22 68-74 74 70 3A 2F 2F 73 63 : lns:r="http://sc
System.Net.Sockets Verbose: 0 : [2552] 00000050 : 68 65 6D 61 73 2E 78 6D-6C 73 6F 61 70 2E 6F 72 : hemas.xmlsoap.or
System.Net.Sockets Verbose: 0 : [2552] 00000060 : 67 2F 77 73 2F 32 30 30-35 2F 30 32 2F 72 6D 22 : g/ws/2005/02/rm"
System.Net.Sockets Verbose: 0 : [2552] 00000070 : 20 78 6D 6C 6E 73 3A 61-3D 22 68 74 74 70 3A 2F :  xmlns:a="http:/
System.Net.Sockets Verbose: 0 : [2552] 00000080 : 2F 77 77 77 2E 77 33 2E-6F 72 67 2F 32 30 30 35 : /www.w3.org/2005
System.Net.Sockets Verbose: 0 : [2552] 00000090 : 2F 30 38 2F 61 64 64 72-65 73 73 69 6E 67 22 3E : /08/addressing">
System.Net.Sockets Verbose: 0 : [2552] 000000A0 : 3C 73 3A 48 65 61 64 65-72 3E 3C 72 3A 41 63 6B : <s:Header><r:Ack
System.Net.Sockets Verbose: 0 : [2552] 000000B0 : 52 65 71 75 65 73 74 65-64 3E 3C 72 3A 49 64 65 : Requested><r:Ide
System.Net.Sockets Verbose: 0 : [2552] 000000C0 : 6E 74 69 66 69 65 72 3E-75 72 6E 3A 75 75 69 64 : ntifier>urn:uuid
System.Net.Sockets Verbose: 0 : [2552] 000000D0 : 3A 63 34 33 39 66 30 39-61 2D 63 36 38 37 2D 34 : :c439f09a-c687-4
System.Net.Sockets Verbose: 0 : [2552] 000000E0 : 64 30 33 2D 62 63 65 63-2D 31 66 61 62 38 63 33 : d03-bcec-1fab8c3
System.Net.Sockets Verbose: 0 : [2552] 000000F0 : 63 34 36 32 34 3C 2F 72-3A 49 64 65 6E 74 69 66 : c4624</r:Identif
System.Net.Sockets Verbose: 0 : [2552] 00000100 : 69 65 72 3E 3C 2F 72 3A-41 63 6B 52 65 71 75 65 : ier></r:AckReque
System.Net.Sockets Verbose: 0 : [2552] 00000110 : 73 74 65 64 3E 3C 72 3A-53 65 71 75 65 6E 63 65 : sted><r:Sequence
System.Net.Sockets Verbose: 0 : [2552] 00000120 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [2552] 00000130 : 64 3D 22 31 22 3E 3C 72-3A 49 64 65 6E 74 69 66 : d="1"><r:Identif
System.Net.Sockets Verbose: 0 : [2552] 00000140 : 69 65 72 3E 75 72 6E 3A-75 75 69 64 3A 63 34 33 : ier>urn:uuid:c43
System.Net.Sockets Verbose: 0 : [2552] 00000150 : 39 66 30 39 61 2D 63 36-38 37 2D 34 64 30 33 2D : 9f09a-c687-4d03-
System.Net.Sockets Verbose: 0 : [2552] 00000160 : 62 63 65 63 2D 31 66 61-62 38 63 33 63 34 36 32 : bcec-1fab8c3c462
System.Net.Sockets Verbose: 0 : [2552] 00000170 : 34 3C 2F 72 3A 49 64 65-6E 74 69 66 69 65 72 3E : 4</r:Identifier>
System.Net.Sockets Verbose: 0 : [2552] 00000180 : 3C 72 3A 4D 65 73 73 61-67 65 4E 75 6D 62 65 72 : <r:MessageNumber
System.Net.Sockets Verbose: 0 : [2552] 00000190 : 3E 31 3C 2F 72 3A 4D 65-73 73 61 67 65 4E 75 6D : >1</r:MessageNum
System.Net.Sockets Verbose: 0 : [2552] 000001A0 : 62 65 72 3E 3C 2F 72 3A-53 65 71 75 65 6E 63 65 : ber></r:Sequence
System.Net.Sockets Verbose: 0 : [2552] 000001B0 : 3E 3C 61 3A 41 63 74 69-6F 6E 20 73 3A 6D 75 73 : ><a:Action s:mus
System.Net.Sockets Verbose: 0 : [2552] 000001C0 : 74 55 6E 64 65 72 73 74-61 6E 64 3D 22 31 22 3E : tUnderstand="1">
System.Net.Sockets Verbose: 0 : [2552] 000001D0 : 68 74 74 70 3A 2F 2F 74-65 6D 70 75 72 69 2E 6F : http://tempuri.o
System.Net.Sockets Verbose: 0 : [2552] 000001E0 : 72 67 2F 49 44 69 73 70-61 74 63 68 65 72 53 65 : rg/IDispatcherSe
System.Net.Sockets Verbose: 0 : [2552] 000001F0 : 72 76 69 63 65 2F 53 75-62 73 63 72 69 62 65 3C : rvice/Subscribe<
System.Net.Sockets Verbose: 0 : [2552] 00000200 : 2F 61 3A 41 63 74 69 6F-6E 3E 3C 56 73 44 65 62 : /a:Action><VsDeb
System.Net.Sockets Verbose: 0 : [2552] 00000210 : 75 67 67 65 72 43 61 75-73 61 6C 69 74 79 44 61 : uggerCausalityDa
System.Net.Sockets Verbose: 0 : [2552] 00000220 : 74 61 20 78 6D 6C 6E 73-3D 22 68 74 74 70 3A 2F : ta xmlns="http:/
System.Net.Sockets Verbose: 0 : [2552] 00000230 : 2F 73 63 68 65 6D 61 73-2E 6D 69 63 72 6F 73 6F : /schemas.microso
System.Net.Sockets Verbose: 0 : [2552] 00000240 : 66 74 2E 63 6F 6D 2F 76-73 74 75 64 69 6F 2F 64 : ft.com/vstudio/d
System.Net.Sockets Verbose: 0 : [2552] 00000250 : 69 61 67 6E 6F 73 74 69-63 73 2F 73 65 72 76 69 : iagnostics/servi
System.Net.Sockets Verbose: 0 : [2552] 00000260 : 63 65 6D 6F 64 65 6C 73-69 6E 6B 22 3E 75 49 44 : cemodelsink">uID
System.Net.Sockets Verbose: 0 : [2552] 00000270 : 50 6F 35 56 51 49 5A 66-71 58 59 39 4C 6E 4E 44 : Po5VQIZfqXY9LnND
System.Net.Sockets Verbose: 0 : [2552] 00000280 : 42 5A 37 2B 53 57 39 34-41 41 41 41 41 46 36 48 : BZ7+SW94AAAAAF6H
System.Net.Sockets Verbose: 0 : [2552] 00000290 : 76 62 63 5A 72 71 6B 36-52 46 72 5A 42 6B 66 57 : vbcZrqk6RFrZBkfW
System.Net.Sockets Verbose: 0 : [2552] 000002A0 : 57 49 4F 55 54 50 6F 49-67 63 45 39 4C 6D 6B 54 : WIOUTPoIgcE9LmkT
System.Net.Sockets Verbose: 0 : [2552] 000002B0 : 69 6B 43 53 38 63 31 73-41 43 51 41 41 3C 2F 56 : ikCS8c1sACQAA</V
System.Net.Sockets Verbose: 0 : [2552] 000002C0 : 73 44 65 62 75 67 67 65-72 43 61 75 73 61 6C 69 : sDebuggerCausali
System.Net.Sockets Verbose: 0 : [2552] 000002D0 : 74 79 44 61 74 61 3E 3C-2F 73 3A 48 65 61 64 65 : tyData></s:Heade
System.Net.Sockets Verbose: 0 : [2552] 000002E0 : 72 3E 3C 73 3A 42 6F 64-79 3E 3C 53 75 62 73 63 : r><s:Body><Subsc
System.Net.Sockets Verbose: 0 : [2552] 000002F0 : 72 69 62 65 20 78 6D 6C-6E 73 3D 22 68 74 74 70 : ribe xmlns="http
System.Net.Sockets Verbose: 0 : [2552] 00000300 : 3A 2F 2F 74 65 6D 70 75-72 69 2E 6F 72 67 2F 22 : ://tempuri.org/"
System.Net.Sockets Verbose: 0 : [2552] 00000310 : 3E 3C 73 75 62 73 63 72-69 62 65 72 20 78 6D 6C : ><subscriber xml
System.Net.Sockets Verbose: 0 : [2552] 00000320 : 6E 73 3A 62 3D 22 68 74-74 70 3A 2F 2F 73 63 68 : ns:b="http://sch
System.Net.Sockets Verbose: 0 : [2552] 00000330 : 65 6D 61 73 2E 64 61 74-61 63 6F 6E 74 72 61 63 : emas.datacontrac
System.Net.Sockets Verbose: 0 : [2552] 00000340 : 74 2E 6F 72 67 2F 32 30-30 34 2F 30 37 2F 54 65 : t.org/2004/07/Te
System.Net.Sockets Verbose: 0 : [2552] 00000350 : 73 74 2E 42 61 73 65 22-20 78 6D 6C 6E 73 3A 69 : st.Base" xmlns:i
System.Net.Sockets Verbose: 0 : [2552] 00000360 : 3D 22 68 74 74 70 3A 2F-2F 77 77 77 2E 77 33 2E : ="http://www.w3.
System.Net.Sockets Verbose: 0 : [2552] 00000370 : 6F 72 67 2F 32 30 30 31-2F 58 4D 4C 53 63 68 65 : org/2001/XMLSche
System.Net.Sockets Verbose: 0 : [2552] 00000380 : 6D 61 2D 69 6E 73 74 61-6E 63 65 22 3E 3C 62 3A : ma-instance"><b:
System.Net.Sockets Verbose: 0 : [2552] 00000390 : 5F 41 64 64 72 65 73 73-3E 61 6D 71 70 3A 2F 2F : _Address>amqp://
System.Net.Sockets Verbose: 0 : [2552] 000003A0 : 2F 73 75 62 73 63 72 69-62 65 72 3C 2F 62 3A 5F : /subscriber</b:_
System.Net.Sockets Verbose: 0 : [2552] 000003B0 : 41 64 64 72 65 73 73 3E-3C 62 3A 5F 43 6F 6E 74 : Address><b:_Cont
System.Net.Sockets Verbose: 0 : [2552] 000003C0 : 65 78 74 73 20 78 6D 6C-6E 73 3A 63 3D 22 68 74 : exts xmlns:c="ht
System.Net.Sockets Verbose: 0 : [2552] 000003D0 : 74 70 3A 2F 2F 73 63 68-65 6D 61 73 2E 64 61 74 : tp://schemas.dat
System.Net.Sockets Verbose: 0 : [2552] 000003E0 : 61 63 6F 6E 74 72 61 63-74 2E 6F 72 67 2F 32 30 : acontract.org/20
System.Net.Sockets Verbose: 0 : [2552] 000003F0 : 30 34 2F 30 37 2F 54 65-73 74 2E 45 6E 74 69 74 : 04/07/Test.Entit
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1229#1229
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
A first chance exception of type 'System.TimeoutException' occurred in System.ServiceModel.dll
A first chance exception of type 'System.TimeoutException' occurred in System.ServiceModel.dll
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 14                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 28 00 00 00 0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 68 65 72 00                                     : her.
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 20#20
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
The thread '<No Name>' (0xf80) has exited with code 0 (0x0).
System.Net.Sockets Verbose: 0 : The thread 0xb54 has exited with code 0 (0x0).
The thread 0xc38 has exited with code 0 (0x0).
[2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Error: 0 : [3064] Exception in the Socket#23997172::Receive - A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
System.Net.Sockets Error: 0 : [2564] Exception in the Socket#5923895::Receive - A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
System.Net.Sockets Error: 0 : [2600] Exception in the Socket#63630067::Receive - A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
System.Net.Sockets Verbose: 0 : [2600] Exiting Socket#63630067::Receive() 	-> 0#0
System.Net.Sockets Verbose: 0 : A first chance exception of type 'System.Net.Sockets.SocketException' occurred in System.dll
[2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [3064] Exiting Socket#23997172::Receive() 	-> 0#0
A first chance exception of type 'System.Net.Sockets.SocketException' occurred in System.dll
System.Net.Sockets Verbose: 0 : [2564] Exiting Socket#5923895::Receive() 	-> 0#0
A first chance exception of type 'System.Net.Sockets.SocketException' occurred in System.dll
System.Net.Sockets Verbose: 0 : A first chance exception of type 'System.IO.IOException' occurred in System.dll
[2552] Data from Socket#23997172::Send
A first chance exception of type 'System.IO.IOException' occurred in System.dll
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : A first chance exception of type 'System.IO.IOException' occurred in System.dll
[2552] Socket#23997172::Send()
A first chance exception of type 'System.IO.EndOfStreamException' occurred in RabbitMQ.Client.dll
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : A first chance exception of type 'RabbitMQ.Client.Exceptions.AlreadyClosedException' occurred in RabbitMQ.Client.dll
[2600] TcpClient#17818390::Close()
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in RabbitMQ.Client.dll
[2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2564] TcpClient#7588182::Close()
System.Net.Sockets Verbose: 0 : [2564] TcpClient#7588182::Dispose()
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in mscorlib.dll
System.Net.Sockets Verbose: 0 : [2600] TcpClient#17818390::Dispose()
System.Net.Sockets Verbose: 0 : [2600] Socket#63630067::Dispose()
System.Net.Sockets Verbose: 0 : [2600] Exiting TcpClient#17818390::Dispose() 
System.Net.Sockets Verbose: 0 : [2564] Socket#5923895::Dispose()
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2600] Exiting TcpClient#17818390::Close() 
System.Net.Sockets Verbose: 0 : [2564] Exiting TcpClient#7588182::Dispose() 
System.Net.Sockets Verbose: 0 : [2564] Exiting TcpClient#7588182::Close() 
The thread 'AMQP Connection amqp-0-8://trlvwks027:5672' (0xa04) has exited with code 0 (0x0).
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
The thread 0x1a4 has exited with code 0 (0x0).
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 0E                                              : .
The thread 0x400 has exited with code 0 (0x0).
The thread 'AMQP Connection amqp-0-8://trlvwks027:5672' (0xa28) has exited with code 0 (0x0).
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00 3C 00 00 00 00 00 00-00 00 02 CC 00 00       : .<............
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 14#14
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 03                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 02                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CC                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : 3C 73 3A 45 6E 76 65 6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [2552] 00000010 : 73 3A 73 3D 22 68 74 74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [2552] 00000020 : 77 33 2E 6F 72 67 2F 32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [2552] 00000030 : 6F 61 70 2D 65 6E 76 65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [2552] 00000040 : 6C 6E 73 3A 61 3D 22 68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [2552] 00000050 : 77 2E 77 33 2E 6F 72 67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [2552] 00000060 : 2F 61 64 64 72 65 73 73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [2552] 00000070 : 48 65 61 64 65 72 3E 3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [2552] 00000080 : 20 73 3A 6D 75 73 74 55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [2552] 00000090 : 64 3D 22 31 22 3E 68 74-74 70 3A 2F 2F 77 77 77 : d="1">http://www
System.Net.Sockets Verbose: 0 : [2552] 000000A0 : 2E 77 33 2E 6F 72 67 2F-32 30 30 35 2F 30 38 2F : .w3.org/2005/08/
System.Net.Sockets Verbose: 0 : [2552] 000000B0 : 61 64 64 72 65 73 73 69-6E 67 2F 73 6F 61 70 2F : addressing/soap/
System.Net.Sockets Verbose: 0 : [2552] 000000C0 : 66 61 75 6C 74 3C 2F 61-3A 41 63 74 69 6F 6E 3E : fault</a:Action>
System.Net.Sockets Verbose: 0 : [2552] 000000D0 : 3C 2F 73 3A 48 65 61 64-65 72 3E 3C 73 3A 42 6F : </s:Header><s:Bo
System.Net.Sockets Verbose: 0 : [2552] 000000E0 : 64 79 3E 3C 73 3A 46 61-75 6C 74 3E 3C 73 3A 43 : dy><s:Fault><s:C
System.Net.Sockets Verbose: 0 : [2552] 000000F0 : 6F 64 65 3E 3C 73 3A 56-61 6C 75 65 3E 73 3A 52 : ode><s:Value>s:R
System.Net.Sockets Verbose: 0 : [2552] 00000100 : 65 63 65 69 76 65 72 3C-2F 73 3A 56 61 6C 75 65 : eceiver</s:Value
System.Net.Sockets Verbose: 0 : [2552] 00000110 : 3E 3C 73 3A 53 75 62 63-6F 64 65 3E 3C 73 3A 56 : ><s:Subcode><s:V
System.Net.Sockets Verbose: 0 : [2552] 00000120 : 61 6C 75 65 20 78 6D 6C-6E 73 3A 61 3D 22 68 74 : alue xmlns:a="ht
System.Net.Sockets Verbose: 0 : [2552] 00000130 : 74 70 3A 2F 2F 73 63 68-65 6D 61 73 2E 78 6D 6C : tp://schemas.xml
System.Net.Sockets Verbose: 0 : [2552] 00000140 : 73 6F 61 70 2E 6F 72 67-2F 77 73 2F 32 30 30 35 : soap.org/ws/2005
System.Net.Sockets Verbose: 0 : [2552] 00000150 : 2F 30 32 2F 72 6D 22 3E-61 3A 53 65 71 75 65 6E : /02/rm">a:Sequen
System.Net.Sockets Verbose: 0 : [2552] 00000160 : 63 65 54 65 72 6D 69 6E-61 74 65 64 3C 2F 73 3A : ceTerminated</s:
System.Net.Sockets Verbose: 0 : [2552] 00000170 : 56 61 6C 75 65 3E 3C 2F-73 3A 53 75 62 63 6F 64 : Value></s:Subcod
System.Net.Sockets Verbose: 0 : [2552] 00000180 : 65 3E 3C 2F 73 3A 43 6F-64 65 3E 3C 73 3A 52 65 : e></s:Code><s:Re
System.Net.Sockets Verbose: 0 : [2552] 00000190 : 61 73 6F 6E 3E 3C 73 3A-54 65 78 74 20 78 6D 6C : ason><s:Text xml
System.Net.Sockets Verbose: 0 : [2552] 000001A0 : 3A 6C 61 6E 67 3D 22 65-6E 2D 55 53 22 3E 54 68 : :lang="en-US">Th
System.Net.Sockets Verbose: 0 : [2552] 000001B0 : 65 20 52 4D 20 53 6F 75-72 63 65 20 63 6F 75 6C : e RM Source coul
System.Net.Sockets Verbose: 0 : [2552] 000001C0 : 64 20 6E 6F 74 20 74 72-61 6E 73 66 65 72 20 74 : d not transfer t
System.Net.Sockets Verbose: 0 : [2552] 000001D0 : 68 65 20 6C 61 73 74 20-6D 65 73 73 61 67 65 20 : he last message 
System.Net.Sockets Verbose: 0 : [2552] 000001E0 : 77 69 74 68 69 6E 20 74-68 65 20 74 69 6D 65 6F : within the timeo
System.Net.Sockets Verbose: 0 : [2552] 000001F0 : 75 74 20 74 68 65 20 75-73 65 72 20 73 70 65 63 : ut the user spec
System.Net.Sockets Verbose: 0 : [2552] 00000200 : 69 66 69 65 64 2E 3C 2F-73 3A 54 65 78 74 3E 3C : ified.</s:Text><
System.Net.Sockets Verbose: 0 : [2552] 00000210 : 2F 73 3A 52 65 61 73 6F-6E 3E 3C 73 3A 44 65 74 : /s:Reason><s:Det
System.Net.Sockets Verbose: 0 : [2552] 00000220 : 61 69 6C 3E 3C 72 3A 49-64 65 6E 74 69 66 69 65 : ail><r:Identifie
System.Net.Sockets Verbose: 0 : [2552] 00000230 : 72 20 78 6D 6C 6E 73 3A-72 3D 22 68 74 74 70 3A : r xmlns:r="http:
System.Net.Sockets Verbose: 0 : [2552] 00000240 : 2F 2F 73 63 68 65 6D 61-73 2E 78 6D 6C 73 6F 61 : //schemas.xmlsoa
System.Net.Sockets Verbose: 0 : [2552] 00000250 : 70 2E 6F 72 67 2F 77 73-2F 32 30 30 35 2F 30 32 : p.org/ws/2005/02
System.Net.Sockets Verbose: 0 : [2552] 00000260 : 2F 72 6D 22 3E 75 72 6E-3A 75 75 69 64 3A 63 34 : /rm">urn:uuid:c4
System.Net.Sockets Verbose: 0 : [2552] 00000270 : 33 39 66 30 39 61 2D 63-36 38 37 2D 34 64 30 33 : 39f09a-c687-4d03
System.Net.Sockets Verbose: 0 : [2552] 00000280 : 2D 62 63 65 63 2D 31 66-61 62 38 63 33 63 34 36 : -bcec-1fab8c3c46
System.Net.Sockets Verbose: 0 : [2552] 00000290 : 32 34 3C 2F 72 3A 49 64-65 6E 74 69 66 69 65 72 : 24</r:Identifier
System.Net.Sockets Verbose: 0 : [2552] 000002A0 : 3E 3C 2F 73 3A 44 65 74-61 69 6C 3E 3C 2F 73 3A : ></s:Detail></s:
System.Net.Sockets Verbose: 0 : [2552] 000002B0 : 46 61 75 6C 74 3E 3C 2F-73 3A 42 6F 64 79 3E 3C : Fault></s:Body><
System.Net.Sockets Verbose: 0 : [2552] 000002C0 : 2F 73 3A 45 6E 76 65 6C-6F 70 65 3E             : /s:Envelope>
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 716#716
System.Net.Sockets Verbose: 0 : [2552] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2552] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2552] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2552] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 01                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 12                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : 00 14 00 28 00 C8 07 47-6F 6F 64 62 79 65 00 00 : ...(...Goodbye..
System.Net.Sockets Verbose: 0 : [2448] 00000010 : 00 00                                           : ..
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 18#18
System.Net.Sockets Verbose: 0 : [2448] Socket#23997172::Send()
System.Net.Sockets Verbose: 0 : [2448] Data from Socket#23997172::Send
System.Net.Sockets Verbose: 0 : [2448] 00000000 : CE                                              : .
System.Net.Sockets Verbose: 0 : [2448] Exiting Socket#23997172::Send() 	-> 1#1
A first chance exception of type 'System.IO.EndOfStreamException' occurred in RabbitMQ.Client.dll
A first chance exception of type 'RabbitMQ.Client.Exceptions.AlreadyClosedException' occurred in RabbitMQ.Client.dll
System.Net.Sockets Verbose: 0 : [3064] TcpClient#10972427::Close()
System.Net.Sockets Verbose: 0 : [3064] TcpClient#10972427::Dispose()
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in RabbitMQ.Client.dll
System.Net.Sockets Verbose: 0 : A first chance exception of type 'RabbitMQ.Client.Exceptions.AlreadyClosedException' occurred in RabbitMQ.Client.dll
[3064] Socket#23997172::Dispose()
System.Net.Sockets Verbose: 0 : [3064] Exiting TcpClient#10972427::Dispose() 
System.Net.Sockets Verbose: 0 : [3064] Exiting TcpClient#10972427::Close() 
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in RabbitMQ.Client.dll
The thread 'AMQP Connection amqp-0-8://trlvwks027:5672' (0xbf8) has exited with code 0 (0x0).
The thread 0x658 has exited with code 0 (0x0).
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in mscorlib.dll
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in RabbitMqPubSub1.exe
System.Net Error: 0 : [2448] Exception in the 
#22008501::UnhandledExceptionHandler - The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391
System.Net Error: 0 : [2448]    at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message& m)
   at System.Windows.Forms.ButtonBase.WndProc(Message& m)
   at System.Windows.Forms.Button.WndProc(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()
System.Transactions Critical: 0 : <TraceRecord xmlns="http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord" Severity="Critical"><TraceIdentifier>http://msdn.microsoft.com/TraceCodes/System/ActivityTracing/2004/07/Reliability/Exception/Unhandled</TraceIdentifier><Description>Unhandled exception</Description><AppDomain>RabbitMqPubSub1.vshost.exe</AppDomain><Exception><ExceptionType>RabbitMQ.Client.Exceptions.OperationInterruptedException, RabbitMQ.Client, Version=1.5.3.0, Culture=neutral, PublicKeyToken=null</ExceptionType><Message>The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---&amp;gt; System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391</Message><StackTrace>   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()</StackTrace><ExceptionString>RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---&amp;gt; System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391
   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()</ExceptionString></Exception></TraceRecord>
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in RabbitMqPubSub1.exe
System.Net Error: 0 : [2448] Exception in the 
#22008501::UnhandledExceptionHandler - The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391
System.Net Error: 0 : [2448]    at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message& m)
   at System.Windows.Forms.ButtonBase.WndProc(Message& m)
   at System.Windows.Forms.Button.WndProc(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()
System.Transactions Critical: 0 : <TraceRecord xmlns="http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord" Severity="Critical"><TraceIdentifier>http://msdn.microsoft.com/TraceCodes/System/ActivityTracing/2004/07/Reliability/Exception/Unhandled</TraceIdentifier><Description>Unhandled exception</Description><AppDomain>RabbitMqPubSub1.vshost.exe</AppDomain><Exception><ExceptionType>RabbitMQ.Client.Exceptions.OperationInterruptedException, RabbitMQ.Client, Version=1.5.3.0, Culture=neutral, PublicKeyToken=null</ExceptionType><Message>The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---&amp;gt; System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391</Message><StackTrace>   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()</StackTrace><ExceptionString>RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---&amp;gt; System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391
   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()</ExceptionString></Exception></TraceRecord>
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in RabbitMqPubSub1.exe
System.Net Error: 0 : [2448] Exception in the 
#22008501::UnhandledExceptionHandler - The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391
System.Net Error: 0 : [2448]    at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message& m)
   at System.Windows.Forms.ButtonBase.WndProc(Message& m)
   at System.Windows.Forms.Button.WndProc(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()
System.Transactions Critical: 0 : <TraceRecord xmlns="http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord" Severity="Critical"><TraceIdentifier>http://msdn.microsoft.com/TraceCodes/System/ActivityTracing/2004/07/Reliability/Exception/Unhandled</TraceIdentifier><Description>Unhandled exception</Description><AppDomain>RabbitMqPubSub1.vshost.exe</AppDomain><Exception><ExceptionType>RabbitMQ.Client.Exceptions.OperationInterruptedException, RabbitMQ.Client, Version=1.5.3.0, Culture=neutral, PublicKeyToken=null</ExceptionType><Message>The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---&amp;gt; System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391</Message><StackTrace>   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()</StackTrace><ExceptionString>RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---&amp;gt; System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391
   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()</ExceptionString></Exception></TraceRecord>
A first chance exception of type 'RabbitMQ.Client.Exceptions.OperationInterruptedException' occurred in RabbitMqPubSub1.exe
System.Net Error: 0 : [2448] Exception in the 
#22008501::UnhandledExceptionHandler - The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---> System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391
System.Net Error: 0 : [2448]    at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message& m)
   at System.Windows.Forms.ButtonBase.WndProc(Message& m)
   at System.Windows.Forms.Button.WndProc(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()
System.Transactions Critical: 0 : <TraceRecord xmlns="http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord" Severity="Critical"><TraceIdentifier>http://msdn.microsoft.com/TraceCodes/System/ActivityTracing/2004/07/Reliability/Exception/Unhandled</TraceIdentifier><Description>Unhandled exception</Description><AppDomain>RabbitMqPubSub1.vshost.exe</AppDomain><Exception><ExceptionType>RabbitMQ.Client.Exceptions.OperationInterruptedException, RabbitMQ.Client, Version=1.5.3.0, Culture=neutral, PublicKeyToken=null</ExceptionType><Message>The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---&amp;gt; System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391</Message><StackTrace>   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()</StackTrace><ExceptionString>RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=541, text="Unexpected Exception", classId=0, methodId=0, cause=System.IO.IOException: Unable to read data from the transport connection: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. ---&amp;gt; System.Net.Sockets.SocketException: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
   at System.Net.Sockets.Socket.Receive(Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags)
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.IO.Stream.ReadByte()
   at System.IO.BinaryReader.ReadByte()
   at RabbitMQ.Client.Impl.Frame.ReadFrom(NetworkBinaryReader reader) in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\Frame.cs:line 79
   at RabbitMQ.Client.Impl.SocketFrameHandler_0_9.ReadFrame() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\SocketFrameHandler_0_9.cs:line 38
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 422
   at RabbitMQ.Client.Impl.ConnectionBase.MainLoop() in C:\Patrick\Development\Queue Stuff\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line 391
   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 204
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 dwComponentID, Int32 reason, Int32 pvLoopData)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()</ExceptionString></Exception></TraceRecord>
The program '[2336] RabbitMqPubSub1.vshost.exe: Managed' has exited with code 0 (0x0).

From matthias at lshift.net  Thu Aug 13 06:37:36 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 13 Aug 2009 06:37:36 +0100
Subject: [rabbitmq-discuss] One queue and several subscribers,
 load  balancing (using ... rabbitmq + txamqp + python)
In-Reply-To: <9AF1AE71-3FAC-4CE9-869A-0611FEF46292@iinet.net.au>
References: <F52DC5EE-AB98-4FC5-A2B5-5BD44E1DDE4C@iinet.net.au>	<50c8ffe90908121847n771c81d4lce0758386b58bc05@mail.gmail.com>
	<9AF1AE71-3FAC-4CE9-869A-0611FEF46292@iinet.net.au>
Message-ID: <4A83A6A0.8000609@lshift.net>

Dale,

Dale wrote:
> Thank you, that's awesome!  I'll upgrade to RabbitMQ 1.6.0 and try  
> using "prefetch".

Just to follow up on what Darien said, the feature in question is AMQP's 
obscurely named "'basic.qos' prefetch-count".


Regards,

Matthias.



From sustrik at imatix.com  Thu Aug 13 08:39:26 2009
From: sustrik at imatix.com (Martin Sustrik)
Date: Thu, 13 Aug 2009 09:39:26 +0200
Subject: [rabbitmq-discuss] [openamq-dev] RPC compatibility of RabbitMQ
	with OpenAMQ
In-Reply-To: <3b6ef0790908111348y28571d9dn1ce4a5b075256965@mail.gmail.com>
References: <3b6ef0790908111348y28571d9dn1ce4a5b075256965@mail.gmail.com>
Message-ID: <4A83C32E.6030207@imatix.com>

Jim,

> Our group wants to make RPC-like calls from RabbitMQ to OpenAMQ.  
> Asynchronous
> direct calls work, and the RabbitMQ com.rabbitmq.client.RpcClient class 
> can send a
> message to the OpenAMQ server, but the OpenAMQ server's response is 
> never received
> by the RabbitMQ client.
> 
> Do you have any advice on making the RabbitMQ client get responses from 
> an OpenAMQ
> server?  Are RPC-like calls suppose to be compatible between 
> implementations, or is
> the standard flexible on that point?

The implementations are using different versions of AMQP protocol (0-8 
vs. 0-9-1) - that may be the cause of the problem.

Anyway, to see what's happening run amq_server with "-t 1 --debug_route 
1 --debug_queue 1" options and send us the resulting trace.

Martin



From dale.obrien at iinet.net.au  Thu Aug 13 09:24:23 2009
From: dale.obrien at iinet.net.au (Dale)
Date: Thu, 13 Aug 2009 18:24:23 +1000
Subject: [rabbitmq-discuss] One queue and several subscribers,
	load  balancing (using ... rabbitmq + txamqp + python)
In-Reply-To: <4A83A6A0.8000609@lshift.net>
References: <F52DC5EE-AB98-4FC5-A2B5-5BD44E1DDE4C@iinet.net.au>	<50c8ffe90908121847n771c81d4lce0758386b58bc05@mail.gmail.com>
	<9AF1AE71-3FAC-4CE9-869A-0611FEF46292@iinet.net.au>
	<4A83A6A0.8000609@lshift.net>
Message-ID: <3DE3B0CA-3D36-481E-A149-DC4E1BBF471E@iinet.net.au>

I finally got a chance to try it out , in a nutshell,

	channel.basic_qos(prefetch_count=1)

It works !

Thanks Darien and Matthias

On 13/08/2009, at 3:37 PM, Matthias Radestock wrote:

> Dale,
>
> Dale wrote:
>> Thank you, that's awesome!  I'll upgrade to RabbitMQ 1.6.0 and try   
>> using "prefetch".
>
> Just to follow up on what Darien said, the feature in question is  
> AMQP's obscurely named "'basic.qos' prefetch-count".
>
>
> Regards,
>
> Matthias.




From pauljones23 at gmail.com  Thu Aug 13 10:54:12 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Thu, 13 Aug 2009 10:54:12 +0100
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
Message-ID: <29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>

Hi Nathan,

Would it be possible to detail a bit more about your use case, and thus why
you don't know when exchanges will come and go? In most scenarios, we'd
recommend that you just declare the exchanges in a non-passive manner - but
I take it that there is something special about your use case that prevents
this.

If your requirement definitely does stand, there isn't really a cleaner way
to do this from the queue-binding end. Speculating a bit on your use case,
if you're trying to bind every exchange in your system to a single queue,
would it be possible to perform the binding at the point of exchange
creation (ie, instead of a queue binding to a well-known exchange, bind the
exchange to a well-known queue).

Exchange-to-exchange bindings are still just a proposal at the moment I'm
afraid.

Thanks,
Paul.

On Tue, Aug 11, 2009 at 8:20 PM, Nathan Gray <n8gray at n8gray.org> wrote:

> Hi folks,
>
> I'm using rabbitmq as an event notification system.  In my application
> each client will subscribe to a number of exchanges.  Exchanges may
> come and go.  The client cannot be expected to know in advance which
> exchanges no longer exist, so they will use exchange.declare(...,
> passive=True,...) to find out which ones exist.  However,
> exchange.declare in passive mode raises a channel exception and kills
> the channel if the exchange doesn't exist.  Assuming I want to use one
> channel per client I'm stuck with ugly, racy code to subscribe to
> multiple exchanges.  (See the end of the post for the python code to
> do it.)  And if something goes wrong and kills the channel I have to
> go through the whole dance again.  This seems crazy.
>
> My question is, what's the right way for one client to get messages
> from multiple exchanges?  Can one auto-delete queue be bound in
> multiple channels, and if so is that the proper approach?  Should I be
> making N queues & channels to subscribe to N exchanges?
>
> Also, exchange-exchange binding [1] would solve a lot of problems for
> me -- does it work or is it just a proposal?
>
> Thanks,
> -n8
>
> --
> http://n8gray.org
>
> [1]: https://dev.rabbitmq.com/wiki/ExchangeToExchangeBindings
>
> while True:
>    chan = connection.channel()
>    found = []
>    for xc in exchanges:
>        try:
>            chan.exchange_declare(exchange=xc, passive=True, ...)
>            found.append(xc)
>        except amqp.exceptions.AMQPChannelException, e:
>            if e.amqp_reply_code == 404:
>                # Channel got closed.  Open a new channel.
>                chan = connection.channel()
>            else:
>                raise e
>    # Sure hope nothing gets deleted at this point!
>    qname, _, _ = chan.queue_declare(exclusive=True)
>    try:
>        for xc in found:
>            chan.queue_bind(queue=qname, exchange=xc)
>    except amqp.exceptions.AMQPChannelException, e:
>        if e.amqp_reply_code == 404:
>            # Oops, an exchange got deleted.  Start over.
>            continue
>        else:
>            raise e
>    # No exception raised, so we're done (until something
>    # else goes wrong & kills the channel...)
>    break
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090813/6e7d2c05/attachment.htm 

From matthias at lshift.net  Thu Aug 13 11:33:03 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 13 Aug 2009 11:33:03 +0100
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908111246o13e01f64n853fb94bee526dc@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<4A7D2CD0.9020305@lshift.net>	<50c8ffe90908080053h6f60e7fp3129db2c2f63b4ad@mail.gmail.com>
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
	<4A7D462F.3020401@lshift.net>	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
	<4A7E8FAA.3030202@lshift.net>	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
	<4A7F541D.4050701@lshift.net>
	<50c8ffe90908111246o13e01f64n853fb94bee526dc@mail.gmail.com>
Message-ID: <4A83EBDF.2090201@lshift.net>

Darien,

Darien Kindlund wrote:
>> RabbitMQ doesn't implement anything fancy here; if a message doesn't fit
>> into available virtual memory then the broker will die.
> 
> Just as a sanity check... when the broker "dies" in this instance, I
> assume the supervisory code will restart the broker -- correct?

Erlang/OTP's supervisors take care of restarting Erlang processes.
Restarting of the broker as a whole is best left to "standard" tools
like http://cr.yp.to/daemontools.html

Regards,

Matthias.



From alexis.richardson at gmail.com  Thu Aug 13 12:31:59 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Thu, 13 Aug 2009 12:31:59 +0100
Subject: [rabbitmq-discuss] Use case for durable exchange?
In-Reply-To: <3b6ef0790908121410u4a6ee03i8f2dbd4dae81ecce@mail.gmail.com>
References: <3b6ef0790908120859n3e5ff0a6q7a4e35e40050ccdb@mail.gmail.com>
	<167204d20908120903y1c690162nad9035fb55bcffd7@mail.gmail.com>
	<3b6ef0790908121410u4a6ee03i8f2dbd4dae81ecce@mail.gmail.com>
Message-ID: <167204d20908130431o16b49e7dw9f7d8497a5b49d60@mail.gmail.com>

Jim,

That's right - the decoupling between producer and ultimate consumer
is important for making the AMQP-type messaging models valuable.

alexis


On Wed, Aug 12, 2009 at 10:10 PM, Jim Irrer<irrer at umich.edu> wrote:
> Ok... so a consumer application might set up one or more durable queues, and
> also a durable exchange that routes messages to those queues.? A producer
> can be "dumb", and simply send a message to that exchange, and be ignorant
> of who receives it.
>
> That makes sense.
>
> Thanks,
>
> - Jim
>
> Jim Irrer ? ? irrer at umich.edu ? ? ? (734) 647-4409
> University of Michigan Hospital Radiation Oncology
> 519 W. William St. ? ? ? ? ? ? Ann Arbor, MI 48103
>
>
> On Wed, Aug 12, 2009 at 12:03 PM, Alexis Richardson
> <alexis.richardson at gmail.com> wrote:
>>
>> Jim,
>>
>> Exchanges contain routing information which you may not want to lose
>> in a crash. ?Queues contain messages, for eventual delivery.
>> Persistent messages plus durable queues gives you eventual delivery
>> even if the queue crashes. ?But you also want durable exchanges if you
>> plan to send more messages down the same path even after a crash.
>>
>> Does this help?
>>
>> alexis
>>
>>
>> On Wed, Aug 12, 2009 at 4:59 PM, Jim Irrer<irrer at umich.edu> wrote:
>> > I am creating a strategy for using AMQP in our organization
>> > and am trying to understand the technology.? One thing that
>> > confuses me is the idea of making a durable exchange.? Durable
>> > queues make sense, but is there a real world scenario that
>> > benefits from a durable exchange?
>> >
>> > Thanks,
>> >
>> > - Jim
>> >
>> > Jim Irrer ? ? irrer at umich.edu ? ? ? (734) 647-4409
>> > University of Michigan Hospital Radiation Oncology
>> > 519 W. William St. ? ? ? ? ? ? Ann Arbor, MI 48103
>> >
>> > _______________________________________________
>> > rabbitmq-discuss mailing list
>> > rabbitmq-discuss at lists.rabbitmq.com
>> > http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>> >
>> >
>
>



From alexis.richardson at gmail.com  Thu Aug 13 12:58:29 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Thu, 13 Aug 2009 12:58:29 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>
	<4A79C398.8060101@lshift.net>
	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>
	<4A7A3276.9030002@lshift.net>
	<3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>
	<3a5f03340908091016s42e48d79s6111e8002cd2433@mail.gmail.com>
	<3a5f03340908101658m71e8bcd7k89c930c2f400b650@mail.gmail.com>
	<3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>
	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>
Message-ID: <167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>

Patrick

People have not been able to reproduce your error.  It would really
help if you could describe the exact steps you carried out, on what
environment, to create the error.  Have you run the standard tests
provided with the broker?  If you are getting 'message too long'
errors, have you tried sending 'hello world' strings?

alexis


On Thu, Aug 13, 2009 at 5:57 AM, Patrick Kenney<pekenney at gmail.com> wrote:
> Still looking for further help on this one...
>
> thanks in advance.
>
>



From vlad at lshift.net  Thu Aug 13 13:05:47 2009
From: vlad at lshift.net (Vlad Alexandru Ionescu)
Date: Thu, 13 Aug 2009 13:05:47 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<3a5f03340908050931s57a98bbbg1f97ad7a17ee79d7@mail.gmail.com>	<4A79C398.8060101@lshift.net>	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>	<4A7A3276.9030002@lshift.net>	<3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>	<3a5f03340908091016s42e48d79s6111e8002cd2433@mail.gmail.com>	<3a5f03340908101658m71e8bcd7k89c930c2f400b650@mail.gmail.com>	<3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>
	<167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>
Message-ID: <4A84019B.4000304@lshift.net>


Patrick,


I get the following errors when trying to compile your code:

C:\Users\vlad\Documents\Visual Studio 
2008\Projects\rabbitmq-dotnet-client-bug21220\bug21379-test\bug21379-test\test.cs(16,12): 
error CS0234: The type or namespace name 'Entity' does not exist in the 
namespace 'Test' (are you missing an assembly reference?)
C:\Users\vlad\Documents\Visual Studio 
2008\Projects\rabbitmq-dotnet-client-bug21220\bug21379-test\bug21379-test\CodeFile1.cs(2,12): 
error CS0234: The type or namespace name 'Entity' does not exist in the 
namespace 'Test' (are you missing an assembly reference?)
C:\Users\vlad\Documents\Visual Studio 
2008\Projects\rabbitmq-dotnet-client-bug21220\bug21379-test\bug21379-test\CodeFile1.cs(16,24): 
error CS0246: The type or namespace name 'SubscriberInfo' could not be 
found (are you missing a using directive or an assembly reference?)
C:\Users\vlad\Documents\Visual Studio 
2008\Projects\rabbitmq-dotnet-client-bug21220\bug21379-test\bug21379-test\CodeFile1.cs(18,26): 
error CS0246: The type or namespace name 'SubscriberInfo' could not be 
found (are you missing a using directive or an assembly reference?)

Could you send a code snip of the Test.Entity namespace? That should help.


Vlad.




From m.nacos at gmail.com  Thu Aug 13 15:58:35 2009
From: m.nacos at gmail.com (Michael Nacos)
Date: Thu, 13 Aug 2009 15:58:35 +0100
Subject: [rabbitmq-discuss] rabbitmq-c versus MSYS
Message-ID: <407fa4640908130758s72e18361kdc43621ae6a1b85e@mail.gmail.com>

Hi all,

I have been trying to compile the rabbitmq-c client on Windows using mingw
and msys and I am wondering if anyone else has tried this before.
I have managed to compile several things into DLLs in this way, the
rabbitmq-c library should be a possibility, too.
autoreconf -i worked (after upgrading autoconf) and the configure step was
ok. Then I get:

make  all-recursive
make[1]: Entering directory `/c/Projects/rabbitmq-c'
Making all in librabbitmq
make[2]: Entering directory `/c/Projects/rabbitmq-c/librabbitmq'
make[2]: *** No rule to make target `codegen/amqp-0.8.json', needed by
`amqp_framing.h'.  Stop.
make[2]: Leaving directory `/c/Projects/rabbitmq-c/librabbitmq'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/c/Projects/rabbitmq-c'
make: *** [all] Error 2

then again, there is no python support in MSYS. IYO, what would be the best
way forward?

regards,

Michael
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090813/b78bbf00/attachment.htm 

From vlad at lshift.net  Thu Aug 13 17:38:48 2009
From: vlad at lshift.net (Vlad Alexandru Ionescu)
Date: Thu, 13 Aug 2009 17:38:48 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	
	<3a5f03340908051213q5856c281y5678a07ba49e0cbc@mail.gmail.com>	
	<4A7A3276.9030002@lshift.net>	
	<3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>	
	<3a5f03340908091016s42e48d79s6111e8002cd2433@mail.gmail.com>	
	<3a5f03340908101658m71e8bcd7k89c930c2f400b650@mail.gmail.com>	
	<3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>	
	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>	
	<167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>	
	<4A84019B.4000304@lshift.net>
	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>
Message-ID: <4A844198.7030209@lshift.net>


Patrick,


Patrick Kenney wrote:
> try the attached solution, rename, taking the .txt off the end and you 
> will have a *.zip file of the entire test solution that should allow 
> you or anybody to reproduce the errors...
I've been trying to get your app to produce the same error, but I'm 
getting some other exception instead.
In RabbitMqErrors.txt I get:


8/13/2009 5:28:55 PM
btnSubscribe_Click:

 Message: The communication object, 
System.ServiceModel.Channels.ServiceChannel, cannot be used for 
communication because it is in the Faulted state.

 Source: System.ServiceModel

 Stack Trace:    at 
System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan timeout)
   at 
System.ServiceModel.Channels.ServiceChannelFactory.OnClose(TimeSpan timeout)
   at 
System.ServiceModel.Channels.ServiceChannelFactory.TypedServiceChannelFactory`1.OnClose(TimeSpan 
timeout)
   at System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan 
timeout)
   at System.ServiceModel.ChannelFactory.OnClose(TimeSpan timeout)
   at System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan 
timeout)
   at System.ServiceModel.ChannelFactory.System.IDisposable.Dispose()
   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, 
EventArgs e) in C:\Users\vlad\Documents\Visual Studio 
2008\Projects\RabbitMqPubSub1\frmMain.cs:line 162

 Target Site: Void Close(System.TimeSpan)

 Data: System.Collections.ListDictionaryInternal



.. and the program output is:



'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_32\mscorlib\2.0.0.0__b77a5c561934e089\mscorlib.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities\9.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.HostingProcess.Utilities.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Windows.Forms\2.0.0.0__b77a5c561934e089\System.Windows.Forms.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.HostingProcess.Utilities.Sync\9.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.HostingProcess.Utilities.Sync.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Debugger.Runtime\9.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Debugger.Runtime.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Users\vlad\Documents\Visual Studio 
2008\Projects\RabbitMqPubSub1\bin\Debug\RabbitMqPubSub1.vshost.exe', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Messaging\2.0.0.0__b03f5f7f11d50a3a\System.Messaging.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Deployment\2.0.0.0__b03f5f7f11d50a3a\System.Deployment.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
The thread '<No Name>' (0x1a4) has exited with code 0 (0x0).
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Users\vlad\Documents\Visual Studio 
2008\Projects\RabbitMqPubSub1\bin\Debug\RabbitMqPubSub1.exe', Symbols 
loaded.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Users\vlad\Documents\Visual Studio 
2008\Projects\RabbitMqPubSub1\bin\Debug\RabbitMQ.Client.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Users\vlad\Documents\Visual Studio 
2008\Projects\RabbitMqPubSub1\bin\Debug\RabbitMQ.ServiceModel.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\SMDiagnostics\3.0.0.0__b77a5c561934e089\SMDiagnostics.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\Microsoft.VisualStudio.Diagnostics.ServiceModelSink\3.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualStudio.Diagnostics.ServiceModelSink.dll'
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
System.Net.Sockets Verbose: 0 : [3780] 
TcpClient#44624228::TcpClient(InterNetwork#2)
System.Net.Sockets Verbose: 0 : [3780] 
Socket#17654054::Socket(InterNetwork#2)
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Socket()
System.Net.Sockets Verbose: 0 : [3780] Exiting 
TcpClient#44624228::TcpClient()
System.Net.Sockets Verbose: 0 : [3780] TcpClient#44624228::TcpClient()
System.Net.Sockets Verbose: 0 : [3780] Exiting 
TcpClient#44624228::TcpClient()
System.Net.Sockets Verbose: 0 : [3780] 
TcpClient#44624228::Connect(dev.rabbitmq.com)
System.Net.Sockets Verbose: 0 : [3780] 
DNS::GetHostAddresses(dev.rabbitmq.com)
System.Net.Sockets Verbose: 0 : [3780] DNS::GetHostByName(dev.rabbitmq.com)
System.Net.Sockets Verbose: 0 : [3780] Exiting DNS::GetHostByName()     
-> IPHostEntry#52727599
System.Net.Sockets Verbose: 0 : [3780] Exiting DNS::GetHostAddresses() 
    -> IPAddress[]#14347911
System.Net.Sockets Verbose: 0 : [3780] 
TcpClient#44624228::Connect(21:5672#353826338)
System.Net.Sockets Verbose: 0 : [3780] 
Socket#17654054::Connect(21:5672#353826338)
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Connect()
System.Net.Sockets Verbose: 0 : [3780] Exiting 
TcpClient#44624228::Connect()
System.Net.Sockets Verbose: 0 : [3780] Exiting 
TcpClient#44624228::Connect()
System.Net.Sockets Verbose: 0 : [3780] TcpClient#44624228::GetStream()
System.Net.Sockets Verbose: 0 : [3780] Exiting 
TcpClient#44624228::GetStream()     -> NetworkStream#51393439
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 41 4D 51 
50                                     : AMQP
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 4#4
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
08                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 
00                                           : ..
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 2#2
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 00 01 
26                                     : ...&
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 0A 00 0A 08 00 00 
00-01 01 07 70 72 6F 64 75 : ...........produ
System.Net.Sockets Verbose: 0 : [4016] 00000010 : 63 74 53 00 00 00 08 
52-61 62 62 69 74 4D 51 07 : ctS....RabbitMQ.
System.Net.Sockets Verbose: 0 : [4016] 00000020 : 76 65 72 73 69 6F 6E 
53-00 00 00 0B 25 25 56 45 : versionS....%%VE
System.Net.Sockets Verbose: 0 : [4016] 00000030 : 52 53 49 4F 4E 25 25 
08-70 6C 61 74 66 6F 72 6D : RSION%%.platform
System.Net.Sockets Verbose: 0 : [4016] 00000040 : 53 00 00 00 0A 45 72 
6C-61 6E 67 2F 4F 54 50 09 : S....Erlang/OTP.
System.Net.Sockets Verbose: 0 : [4016] 00000050 : 63 6F 70 79 72 69 67 
68-74 53 00 00 00 67 43 6F : copyrightS...gCo
System.Net.Sockets Verbose: 0 : [4016] 00000060 : 70 79 72 69 67 68 74 
20-28 43 29 20 32 30 30 37 : pyright (C) 2007
System.Net.Sockets Verbose: 0 : [4016] 00000070 : 2D 32 30 30 39 20 4C 
53-68 69 66 74 20 4C 74 64 : -2009 LShift Ltd
System.Net.Sockets Verbose: 0 : [4016] 00000080 : 2E 2C 20 43 6F 68 65 
73-69 76 65 20 46 69 6E 61 : ., Cohesive Fina
System.Net.Sockets Verbose: 0 : [4016] 00000090 : 6E 63 69 61 6C 20 54 
65-63 68 6E 6F 6C 6F 67 69 : ncial Technologi
System.Net.Sockets Verbose: 0 : [4016] 000000A0 : 65 73 20 4C 4C 43 2E 
2C-20 61 6E 64 20 52 61 62 : es LLC., and Rab
System.Net.Sockets Verbose: 0 : [4016] 000000B0 : 62 69 74 20 54 65 63 
68-6E 6F 6C 6F 67 69 65 73 : bit Technologies
System.Net.Sockets Verbose: 0 : [4016] 000000C0 : 20 4C 74 64 2E 0B 69 
6E-66 6F 72 6D 61 74 69 6F :  Ltd..informatio
System.Net.Sockets Verbose: 0 : [4016] 000000D0 : 6E 53 00 00 00 35 4C 
69-63 65 6E 73 65 64 20 75 : nS...5Licensed u
System.Net.Sockets Verbose: 0 : [4016] 000000E0 : 6E 64 65 72 20 74 68 
65-20 4D 50 4C 2E 20 20 53 : nder the MPL.  S
System.Net.Sockets Verbose: 0 : [4016] 000000F0 : 65 65 20 68 74 74 70 
3A-2F 2F 77 77 77 2E 72 61 : ee http://www.ra
System.Net.Sockets Verbose: 0 : [4016] 00000100 : 62 62 69 74 6D 71 2E 
63-6F 6D 2F 00 00 00 0E 50 : bbitmq.com/....P
System.Net.Sockets Verbose: 0 : [4016] 00000110 : 4C 41 49 4E 20 41 4D 
51-50 4C 41 49 4E 00 00 00 : LAIN AMQPLAIN...
System.Net.Sockets Verbose: 0 : [4016] 00000120 : 05 65 6E 5F 55 
53                               : .en_US
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 294#294
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
1B                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 0A 00 0B 00 00 00 
F7-07 70 72 6F 64 75 63 74 : .........product
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 53 00 00 00 08 52 61 
62-62 69 74 4D 51 07 76 65 : S....RabbitMQ.ve
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 72 73 69 6F 6E 53 00 
00-00 07 31 2E 35 2E 33 2E : rsionS....1.5.3.
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 30 08 70 6C 61 74 66 
6F-72 6D 53 00 00 00 04 2E : 0.platformS.....
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 4E 45 54 0B 69 6E 66 
6F-72 6D 61 74 69 6F 6E 53 : NET.informationS
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 00 00 00 35 4C 69 63 
65-6E 73 65 64 20 75 6E 64 : ...5Licensed und
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 65 72 20 74 68 65 20 
4D-50 4C 2E 20 20 53 65 65 : er the MPL.  See
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 20 68 74 74 70 3A 2F 
2F-77 77 77 2E 72 61 62 62 :  http://www.rabb
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 69 74 6D 71 2E 63 6F 
6D-2F 09 63 6F 70 79 72 69 : itmq.com/.copyri
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 67 68 74 53 00 00 00 
67-43 6F 70 79 72 69 67 68 : ghtS...gCopyrigh
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 74 20 28 43 29 20 32 
30-30 37 2D 32 30 30 38 20 : t (C) 2007-2008
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 4C 53 68 69 66 74 20 
4C-74 64 2E 2C 20 43 6F 68 : LShift Ltd., Coh
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 65 73 69 76 65 20 46 
69-6E 61 6E 63 69 61 6C 20 : esive Financial
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 54 65 63 68 6E 6F 6C 
6F-67 69 65 73 20 4C 4C 43 : Technologies LLC
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 2E 2C 20 61 6E 64 20 
52-61 62 62 69 74 20 54 65 : ., and Rabbit Te
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 63 68 6E 6F 6C 6F 67 
69-65 73 20 4C 74 64 2E 05 : chnologies Ltd..
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 50 4C 41 49 4E 00 00 
00-0C 00 67 75 65 73 74 00 : PLAIN.....guest.
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 67 75 65 73 74 05 65 
6E-5F 55 53                : guest.en_US
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 283#283
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 
00                                           : ..
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 2#2
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 00 00 
0C                                     : ....
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 0A 00 1E 00 00 00 
02-00 00 00 00             : ............
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 12#12
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0C                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 0A 00 1F 00 00 00 
02-00 00 00 00             : ............
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 12#12
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
08                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 0A 00 28 01 2F 00 
01-                        : ...(./..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 8#8
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 
00                                           : ..
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 2#2
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 00 00 
1D                                     : ....
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 0A 00 29 18 72 61 
62-62 69 74 6D 71 2E 6C 73 : ...).rabbitmq.ls
System.Net.Sockets Verbose: 0 : [4016] 00000010 : 68 69 66 74 2E 6E 65 
74-3A 35 36 37 32          : hift.net:5672
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 29#29
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
05                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 14 00 0A 
00                                  : .....
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 5#5
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 
01                                           : ..
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 2#2
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 00 00 
04                                     : ....
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 14 00 
0B                                     : ....
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
05                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 14 00 0A 
00                                  : .....
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 5#5
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 
02                                           : ..
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 2#2
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 00 00 
04                                     : ....
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 14 00 
0B                                     : ....
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0C                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 32 00 0A 00 00 00 
0C-00 00 00 00             : .2..........
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 12#12
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 
02                                           : ..
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 2#2
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 00 00 
2D                                     : ...-
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 32 00 0B 20 61 6D 
71-2E 67 65 6E 2D 49 68 35 : .2.. amq.gen-Ih5
System.Net.Sockets Verbose: 0 : [4016] 00000010 : 62 4A 4F 54 4A 79 35 
48-34 76 77 76 70 6F 4B 62 : bJOTJy5H4vwvpoKb
System.Net.Sockets Verbose: 0 : [4016] 00000020 : 39 48 77 3D 3D 00 00 
00-00 00 00 00 00          : 9Hw==........
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 45#45
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 32 00 14 00 00 20 
61-6D 71 2E 67 65 6E 2D 49 : .2.... amq.gen-I
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 35 62 4A 4F 54 4A 
79-35 48 34 76 77 76 70 6F : h5bJOTJy5H4vwvpo
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 4B 62 39 48 77 3D 3D 
00-25 2F 30 33 39 64 33 32 : Kb9Hw==.%/039d32
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 32 34 2D 31 61 36 30 
2D-34 35 32 62 2D 39 35 31 : 24-1a60-452b-951
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 31 2D 61 37 37 39 39 
31-30 63 36 30 66 61 00 00 : 1-a779910c60fa..
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 00 00 
00                                        : ...
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 83#83
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 
02                                           : ..
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 2#2
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 00 00 
04                                     : ....
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 32 00 
15                                     : .2..
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
29                                              : )
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 14 00 00 20 
61-6D 71 2E 67 65 6E 2D 49 : .<.... amq.gen-I
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 35 62 4A 4F 54 4A 
79-35 48 34 76 77 76 70 6F : h5bJOTJy5H4vwvpo
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 4B 62 39 48 77 3D 3D 
00-00                      : Kb9Hw==..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 41#41
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 
02                                           : ..
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 2#2
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 00 00 
26                                     : ...&
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 4#4
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 00 3C 00 15 21 61 6D 
71-2E 63 74 61 67 2D 4A 4F : .<..!amq.ctag-JO
System.Net.Sockets Verbose: 0 : [4016] 00000010 : 46 66 68 5A 78 2F 33 
51-69 4D 73 6B 62 4A 68 32 : FfhZx/3QiMskbJh2
System.Net.Sockets Verbose: 0 : [4016] 00000020 : 64 45 6E 41 3D 
3D                               : dEnA==
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 38#38
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
System.Net.Sockets Verbose: 0 : [4016] Data from Socket#17654054::Receive
System.Net.Sockets Verbose: 0 : [4016] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 1#1
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_32\System.Transactions\2.0.0.0__b77a5c561934e089\System.Transactions.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Receive()
'RabbitMqPubSub1.vshost.exe' (Managed): Loaded 
'C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll', 
Skipped loading symbols. Module is optimized and the debugger option 
'Just My Code' is enabled.
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
14                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 28 00 00 00 
0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 65 72 
00                                     : her.
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 20#20
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0E                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 00 00 00 00 
00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 14#14
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
03                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 3C 73 3A 45 6E 76 65 
6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 73 3A 73 3D 22 68 74 
74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 77 33 2E 6F 72 67 2F 
32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 6F 61 70 2D 65 6E 76 
65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 6C 6E 73 3A 61 3D 22 
68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 77 2E 77 33 2E 6F 72 
67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 2F 61 64 64 72 65 73 
73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 48 65 61 64 65 72 3E 
3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 20 73 3A 6D 75 73 74 
55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 64 3D 22 31 22 3E 68 
74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 65 6D 61 73 2E 78 6D 
6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 2F 77 73 2F 32 30 30 
35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 72 65 61 74 65 53 65 
71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 3A 41 63 74 69 6F 6E 
3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 67 65 49 44 3E 75 72 
6E-3A 75 75 69 64 3A 62 64 : geID>urn:uuid:bd
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 62 61 32 30 35 64 2D 
63-62 35 64 2D 34 36 61 32 : ba205d-cb5d-46a2
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 2D 38 66 36 31 2D 30 
61-64 38 64 62 64 39 34 33 : -8f61-0ad8dbd943
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 39 61 3C 2F 61 3A 4D 
65-73 73 61 67 65 49 44 3E : 9a</a:MessageID>
System.Net.Sockets Verbose: 0 : [3780] 00000120 : 3C 61 3A 52 65 70 6C 
79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 00000130 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 00000140 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000150 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000160 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000170 : 73 73 3E 3C 2F 61 3A 
52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [3780] 00000180 : 2F 73 3A 48 65 61 64 
65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [3780] 00000190 : 79 3E 3C 43 72 65 61 
74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [3780] 000001A0 : 65 20 78 6D 6C 6E 73 
3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [3780] 000001B0 : 73 63 68 65 6D 61 73 
2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [3780] 000001C0 : 6F 72 67 2F 77 73 2F 
32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [3780] 000001D0 : 6D 22 3E 3C 41 63 6B 
73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 000001E0 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 000001F0 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000200 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000210 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000220 : 73 73 3E 3C 2F 41 63 
6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [3780] 00000230 : 65 61 74 65 53 65 71 
75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [3780] 00000240 : 3A 42 6F 64 79 3E 3C 
2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [3780] 00000250 : 70 65 
3E                                        : pe>
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 595#595
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
14                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 28 00 00 00 
0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 65 72 
00                                     : her.
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 20#20
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0E                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 00 00 00 00 
00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 14#14
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
03                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 3C 73 3A 45 6E 76 65 
6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 73 3A 73 3D 22 68 74 
74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 77 33 2E 6F 72 67 2F 
32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 6F 61 70 2D 65 6E 76 
65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 6C 6E 73 3A 61 3D 22 
68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 77 2E 77 33 2E 6F 72 
67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 2F 61 64 64 72 65 73 
73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 48 65 61 64 65 72 3E 
3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 20 73 3A 6D 75 73 74 
55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 64 3D 22 31 22 3E 68 
74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 65 6D 61 73 2E 78 6D 
6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 2F 77 73 2F 32 30 30 
35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 72 65 61 74 65 53 65 
71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 3A 41 63 74 69 6F 6E 
3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 67 65 49 44 3E 75 72 
6E-3A 75 75 69 64 3A 62 64 : geID>urn:uuid:bd
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 62 61 32 30 35 64 2D 
63-62 35 64 2D 34 36 61 32 : ba205d-cb5d-46a2
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 2D 38 66 36 31 2D 30 
61-64 38 64 62 64 39 34 33 : -8f61-0ad8dbd943
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 39 61 3C 2F 61 3A 4D 
65-73 73 61 67 65 49 44 3E : 9a</a:MessageID>
System.Net.Sockets Verbose: 0 : [3780] 00000120 : 3C 61 3A 52 65 70 6C 
79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 00000130 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 00000140 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000150 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000160 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000170 : 73 73 3E 3C 2F 61 3A 
52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [3780] 00000180 : 2F 73 3A 48 65 61 64 
65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [3780] 00000190 : 79 3E 3C 43 72 65 61 
74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [3780] 000001A0 : 65 20 78 6D 6C 6E 73 
3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [3780] 000001B0 : 73 63 68 65 6D 61 73 
2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [3780] 000001C0 : 6F 72 67 2F 77 73 2F 
32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [3780] 000001D0 : 6D 22 3E 3C 41 63 6B 
73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 000001E0 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 000001F0 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000200 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000210 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000220 : 73 73 3E 3C 2F 41 63 
6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [3780] 00000230 : 65 61 74 65 53 65 71 
75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [3780] 00000240 : 3A 42 6F 64 79 3E 3C 
2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [3780] 00000250 : 70 65 
3E                                        : pe>
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 595#595
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
14                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 28 00 00 00 
0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 65 72 
00                                     : her.
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 20#20
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0E                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 00 00 00 00 
00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 14#14
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
03                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 3C 73 3A 45 6E 76 65 
6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 73 3A 73 3D 22 68 74 
74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 77 33 2E 6F 72 67 2F 
32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 6F 61 70 2D 65 6E 76 
65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 6C 6E 73 3A 61 3D 22 
68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 77 2E 77 33 2E 6F 72 
67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 2F 61 64 64 72 65 73 
73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 48 65 61 64 65 72 3E 
3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 20 73 3A 6D 75 73 74 
55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 64 3D 22 31 22 3E 68 
74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 65 6D 61 73 2E 78 6D 
6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 2F 77 73 2F 32 30 30 
35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 72 65 61 74 65 53 65 
71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 3A 41 63 74 69 6F 6E 
3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 67 65 49 44 3E 75 72 
6E-3A 75 75 69 64 3A 62 64 : geID>urn:uuid:bd
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 62 61 32 30 35 64 2D 
63-62 35 64 2D 34 36 61 32 : ba205d-cb5d-46a2
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 2D 38 66 36 31 2D 30 
61-64 38 64 62 64 39 34 33 : -8f61-0ad8dbd943
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 39 61 3C 2F 61 3A 4D 
65-73 73 61 67 65 49 44 3E : 9a</a:MessageID>
System.Net.Sockets Verbose: 0 : [3780] 00000120 : 3C 61 3A 52 65 70 6C 
79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 00000130 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 00000140 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000150 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000160 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000170 : 73 73 3E 3C 2F 61 3A 
52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [3780] 00000180 : 2F 73 3A 48 65 61 64 
65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [3780] 00000190 : 79 3E 3C 43 72 65 61 
74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [3780] 000001A0 : 65 20 78 6D 6C 6E 73 
3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [3780] 000001B0 : 73 63 68 65 6D 61 73 
2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [3780] 000001C0 : 6F 72 67 2F 77 73 2F 
32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [3780] 000001D0 : 6D 22 3E 3C 41 63 6B 
73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 000001E0 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 000001F0 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000200 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000210 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000220 : 73 73 3E 3C 2F 41 63 
6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [3780] 00000230 : 65 61 74 65 53 65 71 
75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [3780] 00000240 : 3A 42 6F 64 79 3E 3C 
2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [3780] 00000250 : 70 65 
3E                                        : pe>
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 595#595
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
14                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 28 00 00 00 
0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 65 72 
00                                     : her.
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 20#20
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0E                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 00 00 00 00 
00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 14#14
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
03                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 3C 73 3A 45 6E 76 65 
6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 73 3A 73 3D 22 68 74 
74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 77 33 2E 6F 72 67 2F 
32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 6F 61 70 2D 65 6E 76 
65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 6C 6E 73 3A 61 3D 22 
68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 77 2E 77 33 2E 6F 72 
67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 2F 61 64 64 72 65 73 
73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 48 65 61 64 65 72 3E 
3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 20 73 3A 6D 75 73 74 
55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 64 3D 22 31 22 3E 68 
74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 65 6D 61 73 2E 78 6D 
6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 2F 77 73 2F 32 30 30 
35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 72 65 61 74 65 53 65 
71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 3A 41 63 74 69 6F 6E 
3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 67 65 49 44 3E 75 72 
6E-3A 75 75 69 64 3A 62 64 : geID>urn:uuid:bd
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 62 61 32 30 35 64 2D 
63-62 35 64 2D 34 36 61 32 : ba205d-cb5d-46a2
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 2D 38 66 36 31 2D 30 
61-64 38 64 62 64 39 34 33 : -8f61-0ad8dbd943
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 39 61 3C 2F 61 3A 4D 
65-73 73 61 67 65 49 44 3E : 9a</a:MessageID>
System.Net.Sockets Verbose: 0 : [3780] 00000120 : 3C 61 3A 52 65 70 6C 
79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 00000130 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 00000140 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000150 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000160 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000170 : 73 73 3E 3C 2F 61 3A 
52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [3780] 00000180 : 2F 73 3A 48 65 61 64 
65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [3780] 00000190 : 79 3E 3C 43 72 65 61 
74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [3780] 000001A0 : 65 20 78 6D 6C 6E 73 
3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [3780] 000001B0 : 73 63 68 65 6D 61 73 
2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [3780] 000001C0 : 6F 72 67 2F 77 73 2F 
32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [3780] 000001D0 : 6D 22 3E 3C 41 63 6B 
73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 000001E0 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 000001F0 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000200 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000210 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000220 : 73 73 3E 3C 2F 41 63 
6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [3780] 00000230 : 65 61 74 65 53 65 71 
75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [3780] 00000240 : 3A 42 6F 64 79 3E 3C 
2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [3780] 00000250 : 70 65 
3E                                        : pe>
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 595#595
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
14                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 28 00 00 00 
0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 65 72 
00                                     : her.
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 20#20
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0E                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 00 00 00 00 
00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 14#14
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
03                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 3C 73 3A 45 6E 76 65 
6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 73 3A 73 3D 22 68 74 
74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 77 33 2E 6F 72 67 2F 
32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 6F 61 70 2D 65 6E 76 
65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 6C 6E 73 3A 61 3D 22 
68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 77 2E 77 33 2E 6F 72 
67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 2F 61 64 64 72 65 73 
73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 48 65 61 64 65 72 3E 
3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 20 73 3A 6D 75 73 74 
55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 64 3D 22 31 22 3E 68 
74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 65 6D 61 73 2E 78 6D 
6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 2F 77 73 2F 32 30 30 
35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 72 65 61 74 65 53 65 
71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 3A 41 63 74 69 6F 6E 
3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 67 65 49 44 3E 75 72 
6E-3A 75 75 69 64 3A 62 64 : geID>urn:uuid:bd
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 62 61 32 30 35 64 2D 
63-62 35 64 2D 34 36 61 32 : ba205d-cb5d-46a2
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 2D 38 66 36 31 2D 30 
61-64 38 64 62 64 39 34 33 : -8f61-0ad8dbd943
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 39 61 3C 2F 61 3A 4D 
65-73 73 61 67 65 49 44 3E : 9a</a:MessageID>
System.Net.Sockets Verbose: 0 : [3780] 00000120 : 3C 61 3A 52 65 70 6C 
79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 00000130 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 00000140 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000150 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000160 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000170 : 73 73 3E 3C 2F 61 3A 
52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [3780] 00000180 : 2F 73 3A 48 65 61 64 
65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [3780] 00000190 : 79 3E 3C 43 72 65 61 
74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [3780] 000001A0 : 65 20 78 6D 6C 6E 73 
3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [3780] 000001B0 : 73 63 68 65 6D 61 73 
2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [3780] 000001C0 : 6F 72 67 2F 77 73 2F 
32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [3780] 000001D0 : 6D 22 3E 3C 41 63 6B 
73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 000001E0 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 000001F0 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000200 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000210 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000220 : 73 73 3E 3C 2F 41 63 
6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [3780] 00000230 : 65 61 74 65 53 65 71 
75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [3780] 00000240 : 3A 42 6F 64 79 3E 3C 
2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [3780] 00000250 : 70 65 
3E                                        : pe>
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 595#595
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
The thread 0x940 has exited with code 0 (0x0).
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
14                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 28 00 00 00 
0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 65 72 
00                                     : her.
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 20#20
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0E                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 00 00 00 00 
00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 14#14
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
03                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 3C 73 3A 45 6E 76 65 
6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 73 3A 73 3D 22 68 74 
74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 77 33 2E 6F 72 67 2F 
32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 6F 61 70 2D 65 6E 76 
65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 6C 6E 73 3A 61 3D 22 
68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 77 2E 77 33 2E 6F 72 
67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 2F 61 64 64 72 65 73 
73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 48 65 61 64 65 72 3E 
3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 20 73 3A 6D 75 73 74 
55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 64 3D 22 31 22 3E 68 
74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 65 6D 61 73 2E 78 6D 
6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 2F 77 73 2F 32 30 30 
35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 72 65 61 74 65 53 65 
71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 3A 41 63 74 69 6F 6E 
3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 67 65 49 44 3E 75 72 
6E-3A 75 75 69 64 3A 62 64 : geID>urn:uuid:bd
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 62 61 32 30 35 64 2D 
63-62 35 64 2D 34 36 61 32 : ba205d-cb5d-46a2
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 2D 38 66 36 31 2D 30 
61-64 38 64 62 64 39 34 33 : -8f61-0ad8dbd943
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 39 61 3C 2F 61 3A 4D 
65-73 73 61 67 65 49 44 3E : 9a</a:MessageID>
System.Net.Sockets Verbose: 0 : [3780] 00000120 : 3C 61 3A 52 65 70 6C 
79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 00000130 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 00000140 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000150 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000160 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000170 : 73 73 3E 3C 2F 61 3A 
52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [3780] 00000180 : 2F 73 3A 48 65 61 64 
65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [3780] 00000190 : 79 3E 3C 43 72 65 61 
74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [3780] 000001A0 : 65 20 78 6D 6C 6E 73 
3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [3780] 000001B0 : 73 63 68 65 6D 61 73 
2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [3780] 000001C0 : 6F 72 67 2F 77 73 2F 
32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [3780] 000001D0 : 6D 22 3E 3C 41 63 6B 
73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 000001E0 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 000001F0 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000200 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000210 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000220 : 73 73 3E 3C 2F 41 63 
6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [3780] 00000230 : 65 61 74 65 53 65 71 
75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [3780] 00000240 : 3A 42 6F 64 79 3E 3C 
2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [3780] 00000250 : 70 65 
3E                                        : pe>
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 595#595
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
14                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 28 00 00 00 
0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 65 72 
00                                     : her.
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 20#20
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0E                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 00 00 00 00 
00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 14#14
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
03                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 3C 73 3A 45 6E 76 65 
6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 73 3A 73 3D 22 68 74 
74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 77 33 2E 6F 72 67 2F 
32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 6F 61 70 2D 65 6E 76 
65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 6C 6E 73 3A 61 3D 22 
68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 77 2E 77 33 2E 6F 72 
67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 2F 61 64 64 72 65 73 
73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 48 65 61 64 65 72 3E 
3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 20 73 3A 6D 75 73 74 
55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 64 3D 22 31 22 3E 68 
74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 65 6D 61 73 2E 78 6D 
6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 2F 77 73 2F 32 30 30 
35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 72 65 61 74 65 53 65 
71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 3A 41 63 74 69 6F 6E 
3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 67 65 49 44 3E 75 72 
6E-3A 75 75 69 64 3A 62 64 : geID>urn:uuid:bd
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 62 61 32 30 35 64 2D 
63-62 35 64 2D 34 36 61 32 : ba205d-cb5d-46a2
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 2D 38 66 36 31 2D 30 
61-64 38 64 62 64 39 34 33 : -8f61-0ad8dbd943
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 39 61 3C 2F 61 3A 4D 
65-73 73 61 67 65 49 44 3E : 9a</a:MessageID>
System.Net.Sockets Verbose: 0 : [3780] 00000120 : 3C 61 3A 52 65 70 6C 
79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 00000130 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 00000140 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000150 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000160 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000170 : 73 73 3E 3C 2F 61 3A 
52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [3780] 00000180 : 2F 73 3A 48 65 61 64 
65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [3780] 00000190 : 79 3E 3C 43 72 65 61 
74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [3780] 000001A0 : 65 20 78 6D 6C 6E 73 
3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [3780] 000001B0 : 73 63 68 65 6D 61 73 
2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [3780] 000001C0 : 6F 72 67 2F 77 73 2F 
32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [3780] 000001D0 : 6D 22 3E 3C 41 63 6B 
73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 000001E0 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 000001F0 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000200 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000210 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000220 : 73 73 3E 3C 2F 41 63 
6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [3780] 00000230 : 65 61 74 65 53 65 71 
75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [3780] 00000240 : 3A 42 6F 64 79 3E 3C 
2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [3780] 00000250 : 70 65 
3E                                        : pe>
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 595#595
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
14                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 28 00 00 00 
0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 65 72 
00                                     : her.
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 20#20
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0E                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 00 00 00 00 
00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 14#14
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
03                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 3C 73 3A 45 6E 76 65 
6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 73 3A 73 3D 22 68 74 
74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 77 33 2E 6F 72 67 2F 
32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 6F 61 70 2D 65 6E 76 
65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 6C 6E 73 3A 61 3D 22 
68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 77 2E 77 33 2E 6F 72 
67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 2F 61 64 64 72 65 73 
73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 48 65 61 64 65 72 3E 
3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 20 73 3A 6D 75 73 74 
55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 64 3D 22 31 22 3E 68 
74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 65 6D 61 73 2E 78 6D 
6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 2F 77 73 2F 32 30 30 
35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 72 65 61 74 65 53 65 
71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 3A 41 63 74 69 6F 6E 
3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 67 65 49 44 3E 75 72 
6E-3A 75 75 69 64 3A 62 64 : geID>urn:uuid:bd
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 62 61 32 30 35 64 2D 
63-62 35 64 2D 34 36 61 32 : ba205d-cb5d-46a2
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 2D 38 66 36 31 2D 30 
61-64 38 64 62 64 39 34 33 : -8f61-0ad8dbd943
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 39 61 3C 2F 61 3A 4D 
65-73 73 61 67 65 49 44 3E : 9a</a:MessageID>
System.Net.Sockets Verbose: 0 : [3780] 00000120 : 3C 61 3A 52 65 70 6C 
79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 00000130 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 00000140 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000150 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000160 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000170 : 73 73 3E 3C 2F 61 3A 
52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [3780] 00000180 : 2F 73 3A 48 65 61 64 
65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [3780] 00000190 : 79 3E 3C 43 72 65 61 
74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [3780] 000001A0 : 65 20 78 6D 6C 6E 73 
3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [3780] 000001B0 : 73 63 68 65 6D 61 73 
2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [3780] 000001C0 : 6F 72 67 2F 77 73 2F 
32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [3780] 000001D0 : 6D 22 3E 3C 41 63 6B 
73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 000001E0 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 000001F0 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000200 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000210 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000220 : 73 73 3E 3C 2F 41 63 
6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [3780] 00000230 : 65 61 74 65 53 65 71 
75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [3780] 00000240 : 3A 42 6F 64 79 3E 3C 
2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [3780] 00000250 : 70 65 
3E                                        : pe>
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 595#595
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
14                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 28 00 00 00 
0B-2F 64 69 73 70 61 74 63 : .<.(..../dispatc
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 68 65 72 
00                                     : her.
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 20#20
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
0E                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 00 3C 00 00 00 00 00 
00-00 00 02 53 00 00       : .<.........S..
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 14#14
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
03                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
01                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
00                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
02                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
53                                              : S
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 3C 73 3A 45 6E 76 65 
6C-6F 70 65 20 78 6D 6C 6E : <s:Envelope xmln
System.Net.Sockets Verbose: 0 : [3780] 00000010 : 73 3A 73 3D 22 68 74 
74-70 3A 2F 2F 77 77 77 2E : s:s="http://www.
System.Net.Sockets Verbose: 0 : [3780] 00000020 : 77 33 2E 6F 72 67 2F 
32-30 30 33 2F 30 35 2F 73 : w3.org/2003/05/s
System.Net.Sockets Verbose: 0 : [3780] 00000030 : 6F 61 70 2D 65 6E 76 
65-6C 6F 70 65 22 20 78 6D : oap-envelope" xm
System.Net.Sockets Verbose: 0 : [3780] 00000040 : 6C 6E 73 3A 61 3D 22 
68-74 74 70 3A 2F 2F 77 77 : lns:a="http://ww
System.Net.Sockets Verbose: 0 : [3780] 00000050 : 77 2E 77 33 2E 6F 72 
67-2F 32 30 30 35 2F 30 38 : w.w3.org/2005/08
System.Net.Sockets Verbose: 0 : [3780] 00000060 : 2F 61 64 64 72 65 73 
73-69 6E 67 22 3E 3C 73 3A : /addressing"><s:
System.Net.Sockets Verbose: 0 : [3780] 00000070 : 48 65 61 64 65 72 3E 
3C-61 3A 41 63 74 69 6F 6E : Header><a:Action
System.Net.Sockets Verbose: 0 : [3780] 00000080 : 20 73 3A 6D 75 73 74 
55-6E 64 65 72 73 74 61 6E :  s:mustUnderstan
System.Net.Sockets Verbose: 0 : [3780] 00000090 : 64 3D 22 31 22 3E 68 
74-74 70 3A 2F 2F 73 63 68 : d="1">http://sch
System.Net.Sockets Verbose: 0 : [3780] 000000A0 : 65 6D 61 73 2E 78 6D 
6C-73 6F 61 70 2E 6F 72 67 : emas.xmlsoap.org
System.Net.Sockets Verbose: 0 : [3780] 000000B0 : 2F 77 73 2F 32 30 30 
35-2F 30 32 2F 72 6D 2F 43 : /ws/2005/02/rm/C
System.Net.Sockets Verbose: 0 : [3780] 000000C0 : 72 65 61 74 65 53 65 
71-75 65 6E 63 65 3C 2F 61 : reateSequence</a
System.Net.Sockets Verbose: 0 : [3780] 000000D0 : 3A 41 63 74 69 6F 6E 
3E-3C 61 3A 4D 65 73 73 61 : :Action><a:Messa
System.Net.Sockets Verbose: 0 : [3780] 000000E0 : 67 65 49 44 3E 75 72 
6E-3A 75 75 69 64 3A 62 64 : geID>urn:uuid:bd
System.Net.Sockets Verbose: 0 : [3780] 000000F0 : 62 61 32 30 35 64 2D 
63-62 35 64 2D 34 36 61 32 : ba205d-cb5d-46a2
System.Net.Sockets Verbose: 0 : [3780] 00000100 : 2D 38 66 36 31 2D 30 
61-64 38 64 62 64 39 34 33 : -8f61-0ad8dbd943
System.Net.Sockets Verbose: 0 : [3780] 00000110 : 39 61 3C 2F 61 3A 4D 
65-73 73 61 67 65 49 44 3E : 9a</a:MessageID>
System.Net.Sockets Verbose: 0 : [3780] 00000120 : 3C 61 3A 52 65 70 6C 
79-54 6F 3E 3C 61 3A 41 64 : <a:ReplyTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 00000130 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 00000140 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000150 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000160 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000170 : 73 73 3E 3C 2F 61 3A 
52-65 70 6C 79 54 6F 3E 3C : ss></a:ReplyTo><
System.Net.Sockets Verbose: 0 : [3780] 00000180 : 2F 73 3A 48 65 61 64 
65-72 3E 3C 73 3A 42 6F 64 : /s:Header><s:Bod
System.Net.Sockets Verbose: 0 : [3780] 00000190 : 79 3E 3C 43 72 65 61 
74-65 53 65 71 75 65 6E 63 : y><CreateSequenc
System.Net.Sockets Verbose: 0 : [3780] 000001A0 : 65 20 78 6D 6C 6E 73 
3D-22 68 74 74 70 3A 2F 2F : e xmlns="http://
System.Net.Sockets Verbose: 0 : [3780] 000001B0 : 73 63 68 65 6D 61 73 
2E-78 6D 6C 73 6F 61 70 2E : schemas.xmlsoap.
System.Net.Sockets Verbose: 0 : [3780] 000001C0 : 6F 72 67 2F 77 73 2F 
32-30 30 35 2F 30 32 2F 72 : org/ws/2005/02/r
System.Net.Sockets Verbose: 0 : [3780] 000001D0 : 6D 22 3E 3C 41 63 6B 
73-54 6F 3E 3C 61 3A 41 64 : m"><AcksTo><a:Ad
System.Net.Sockets Verbose: 0 : [3780] 000001E0 : 64 72 65 73 73 3E 73 
6F-61 70 2E 61 6D 71 70 3A : dress>soap.amqp:
System.Net.Sockets Verbose: 0 : [3780] 000001F0 : 2F 2F 2F 30 33 39 64 
33-32 32 34 2D 31 61 36 30 : ///039d3224-1a60
System.Net.Sockets Verbose: 0 : [3780] 00000200 : 2D 34 35 32 62 2D 39 
35-31 31 2D 61 37 37 39 39 : -452b-9511-a7799
System.Net.Sockets Verbose: 0 : [3780] 00000210 : 31 30 63 36 30 66 61 
3C-2F 61 3A 41 64 64 72 65 : 10c60fa</a:Addre
System.Net.Sockets Verbose: 0 : [3780] 00000220 : 73 73 3E 3C 2F 41 63 
6B-73 54 6F 3E 3C 2F 43 72 : ss></AcksTo></Cr
System.Net.Sockets Verbose: 0 : [3780] 00000230 : 65 61 74 65 53 65 71 
75-65 6E 63 65 3E 3C 2F 73 : eateSequence></s
System.Net.Sockets Verbose: 0 : [3780] 00000240 : 3A 42 6F 64 79 3E 3C 
2F-73 3A 45 6E 76 65 6C 6F : :Body></s:Envelo
System.Net.Sockets Verbose: 0 : [3780] 00000250 : 70 65 
3E                                        : pe>
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 595#595
System.Net.Sockets Verbose: 0 : [3780] Socket#17654054::Send()
System.Net.Sockets Verbose: 0 : [3780] Data from Socket#17654054::Send
System.Net.Sockets Verbose: 0 : [3780] 00000000 : 
CE                                              : .
System.Net.Sockets Verbose: 0 : [3780] Exiting Socket#17654054::Send() 
    -> 1#1
System.Net.Sockets Error: 0 : [4016] Exception in the 
Socket#17654054::Receive - A connection attempt failed because the 
connected party did not properly respond after a period of time, or 
established connection failed because connected host has failed to respond
System.Net.Sockets Verbose: 0 : [4016] Exiting 
Socket#17654054::Receive()     -> 0#0
System.Net.Sockets Verbose: 0 : [4016] TcpClient#44624228::Close()
System.Net.Sockets Verbose: 0 : [4016] TcpClient#44624228::Dispose()
System.Net.Sockets Verbose: 0 : [4016] Socket#17654054::Dispose()
System.Net.Sockets Verbose: 0 : [4016] Exiting 
TcpClient#44624228::Dispose()
System.Net.Sockets Verbose: 0 : [4016] Exiting TcpClient#44624228::Close()
The thread 0xd3c has exited with code 0 (0x0).
The thread 0xfb0 has exited with code 0 (0x0).
A first chance exception of type 
'RabbitMQ.Client.Exceptions.AlreadyClosedException' occurred in mscorlib.dll
A first chance exception of type 
'System.ServiceModel.CommunicationObjectFaultedException' occurred in 
System.ServiceModel.dll
A first chance exception of type 
'System.ServiceModel.CommunicationObjectFaultedException' occurred in 
RabbitMqPubSub1.exe
System.Net Error: 0 : [3780] Exception in the
#12547953::UnhandledExceptionHandler - The communication object, 
System.ServiceModel.Channels.ServiceChannel, cannot be used for 
communication because it is in the Faulted state.
System.Net Error: 0 : [3780]    at 
RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) 
in C:\Users\vlad\Documents\Visual Studio 
2008\Projects\RabbitMqPubSub1\frmMain.cs:line 168
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons 
button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message& m)
   at System.Windows.Forms.ButtonBase.WndProc(Message& m)
   at System.Windows.Forms.Button.WndProc(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)
   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, 
Int32 msg, IntPtr wparam, IntPtr lparam)
   at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)
   at 
System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 
dwComponentID, Int32 reason, Int32 pvLoopData)
   at 
System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 
reason, ApplicationContext context)
   at 
System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 
reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Users\vlad\Documents\Visual 
Studio 2008\Projects\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence 
assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext 
executionContext, ContextCallback callback, Object state)
   at System.Threading.ThreadHelper.ThreadStart()
System.Transactions Critical: 0 : <TraceRecord 
xmlns="http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord" 
Severity="Critical"><TraceIdentifier>http://msdn.microsoft.com/TraceCodes/System/ActivityTracing/2004/07/Reliability/Exception/Unhandled</TraceIdentifier><Description>Unhandled 
exception</Description><AppDomain>RabbitMqPubSub1.vshost.exe</AppDomain><Exception><ExceptionType>System.ServiceModel.CommunicationObjectFaultedException, 
System.ServiceModel, Version=3.0.0.0, Culture=neutral, 
PublicKeyToken=b77a5c561934e089</ExceptionType><Message>The 
communication object, System.ServiceModel.Channels.ServiceChannel, 
cannot be used for communication because it is in the Faulted 
state.</Message><StackTrace>   at 
RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) 
in C:\Users\vlad\Documents\Visual Studio 
2008\Projects\RabbitMqPubSub1\frmMain.cs:line 168
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, 
MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at 
System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; 
m)
   at 
System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, 
Int32 msg, IntPtr wparam, IntPtr lparam)
   at 
System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at 
System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 
dwComponentID, Int32 reason, Int32 pvLoopData)
   at 
System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 
reason, ApplicationContext context)
   at 
System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 
reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Users\vlad\Documents\Visual 
Studio 2008\Projects\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence 
assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext 
executionContext, ContextCallback callback, Object state)
   at 
System.Threading.ThreadHelper.ThreadStart()</StackTrace><ExceptionString>System.ServiceModel.CommunicationObjectFaultedException: 
The communication object, System.ServiceModel.Channels.ServiceChannel, 
cannot be used for communication because it is in the Faulted state.
   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, 
EventArgs e) in C:\Users\vlad\Documents\Visual Studio 
2008\Projects\RabbitMqPubSub1\frmMain.cs:line 168
   at System.Windows.Forms.Control.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnClick(EventArgs e)
   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)
   at System.Windows.Forms.Control.WmMouseUp(Message&amp;amp; m, 
MouseButtons button, Int32 clicks)
   at System.Windows.Forms.Control.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.ButtonBase.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.Button.WndProc(Message&amp;amp; m)
   at 
System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp;amp; 
m)
   at 
System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp;amp; m)
   at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, 
Int32 msg, IntPtr wparam, IntPtr lparam)
   at 
System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp;amp; msg)
   at 
System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(Int32 
dwComponentID, Int32 reason, Int32 pvLoopData)
   at 
System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 
reason, ApplicationContext context)
   at 
System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 
reason, ApplicationContext context)
   at System.Windows.Forms.Application.Run(Form mainForm)
   at RabbitMqPubSub1.Program.Main() in C:\Users\vlad\Documents\Visual 
Studio 2008\Projects\RabbitMqPubSub1\Program.cs:line 18
   at System.AppDomain._nExecuteAssembly(Assembly assembly, String[] args)
   at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence 
assemblySecurity, String[] args)
   at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()
   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)
   at System.Threading.ExecutionContext.Run(ExecutionContext 
executionContext, ContextCallback callback, Object state)
   at 
System.Threading.ThreadHelper.ThreadStart()</ExceptionString></Exception></TraceRecord>


I'm using Windows Vista, in a virtual machine.

I've tried this on a local broker and on the test broker at 
dev.rabbitmq.com, with the same result . Perhaps you could try 
dev.rabbitmq.com too and see what happens.


Vlad.


-- 

 [][][] Vlad Alexandru Ionescu | Developer
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] www.lshift.net         | Email: vlad at lshift.net





From pekenney at gmail.com  Thu Aug 13 17:45:28 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Thu, 13 Aug 2009 09:45:28 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A844198.7030209@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>
	<3a5f03340908091016s42e48d79s6111e8002cd2433@mail.gmail.com>
	<3a5f03340908101658m71e8bcd7k89c930c2f400b650@mail.gmail.com>
	<3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>
	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>
	<167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>
	<4A84019B.4000304@lshift.net>
	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>
	<4A844198.7030209@lshift.net>
Message-ID: <3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>

I get that message too depending on timeouts and whether or not I am
debugging and where the breakpoints are...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090813/5f151f45/attachment.htm 

From alexis.richardson at gmail.com  Thu Aug 13 17:58:07 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Thu, 13 Aug 2009 17:58:07 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340908091016s42e48d79s6111e8002cd2433@mail.gmail.com>
	<3a5f03340908101658m71e8bcd7k89c930c2f400b650@mail.gmail.com>
	<3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>
	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>
	<167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>
	<4A84019B.4000304@lshift.net>
	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>
	<4A844198.7030209@lshift.net>
	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>
Message-ID: <167204d20908130958j5ce21af2vfd4dab59f68c473b@mail.gmail.com>

my god.  you mean you guys now get the same error message?

;-0


On Thu, Aug 13, 2009 at 5:45 PM, Patrick Kenney<pekenney at gmail.com> wrote:
> I get that message too depending on timeouts and whether or not I am
> debugging and where the breakpoints are...
>
>
>



From matthias at lshift.net  Thu Aug 13 17:58:29 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 13 Aug 2009 17:58:29 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>	<3a5f03340908091016s42e48d79s6111e8002cd2433@mail.gmail.com>	<3a5f03340908101658m71e8bcd7k89c930c2f400b650@mail.gmail.com>	<3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>	<167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>	<4A84019B.4000304@lshift.net>	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>	<4A844198.7030209@lshift.net>
	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>
Message-ID: <4A844635.7090806@lshift.net>

Patrick,

Patrick Kenney wrote:
> I get that message too depending on timeouts and whether or not I am
> debugging and where the breakpoints are...

I see. But as Vlad mentioned, we don't see the "message body too long"
errors. So, basically, we cannot reproduce the problem :(

As Vlad mentioned, you may want to try running your test against our
public RabbitMQ server at dev.rabbitmq.com. Would be interesting to know
whether you still get the errors there.


Regards,

Matthias.



From vlad at lshift.net  Thu Aug 13 18:02:56 2009
From: vlad at lshift.net (Vlad Alexandru Ionescu)
Date: Thu, 13 Aug 2009 18:02:56 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	
	<3a5f03340908051951m65575603wc8010799feb8cc7b@mail.gmail.com>	
	<3a5f03340908091016s42e48d79s6111e8002cd2433@mail.gmail.com>	
	<3a5f03340908101658m71e8bcd7k89c930c2f400b650@mail.gmail.com>	
	<3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>	
	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>	
	<167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>	
	<4A84019B.4000304@lshift.net>	
	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>	
	<4A844198.7030209@lshift.net>
	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>
Message-ID: <4A844740.7060606@lshift.net>


Patrick,


Patrick Kenney wrote:
> I get that message too depending on timeouts and whether or not I am 
> debugging and where the breakpoints are...

I've tripled all the timeout parameters I found in App.config, built the 
app with Release configuration and ran it unattached and I still get the 
same thing.


Vlad.

-- 

 [][][] Vlad Alexandru Ionescu | Developer
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] www.lshift.net         | Email: vlad at lshift.net





From g at rre.tt  Thu Aug 13 18:43:28 2009
From: g at rre.tt (Garrett Smith)
Date: Thu, 13 Aug 2009 12:43:28 -0500
Subject: [rabbitmq-discuss] Message expiration
Message-ID: <ce2570e20908131043x7c7b4a09lc139f2559517bef3@mail.gmail.com>

I seem to recall reading once that RabbitMQ doesn't support message
expiration. My apologies if this has been covered before, but I'm
curious as to the status of this behavior.

In reading the 0.8 spec, I'm a bit perplexed that the basic class has
an 'expiration' property, but makes no other reference to it. Of
course, in 0.10, messages have a 'ttl' and the spec has something to
say about (e.g. dead lettering, etc.)

Assuming rabbitmq doesn't discard expired messages and that the
application has the responsibility to check for expired messages
itself, is there any word on what the 'expiration' string value should
be (e.g. a string value timestamp, iso-8601 format, etc.)? Or is this
value simply treated as a pass-through and the producer/consumer chain
needs to coordinate on the format?

Garrett



From digitalwarfare at gmail.com  Thu Aug 13 20:25:53 2009
From: digitalwarfare at gmail.com (Suhail Doshi)
Date: Thu, 13 Aug 2009 12:25:53 -0700
Subject: [rabbitmq-discuss] RabbitMQ + MySQL
Message-ID: <376f3e6f0908131225p2181c637ib33865f4033fcad5@mail.gmail.com>

Anyone using rabbitmq with lots of consumers along with MySQL and hitting
dead locks if you run too many consumers, any smart way to deal with that?
My theory was sharding on some distinct id and sending only some data to
specific consumers based on an id...

Ideas? Suggestions?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090813/9150773d/attachment.htm 

From askh at opera.com  Thu Aug 13 20:38:21 2009
From: askh at opera.com (Ask Solem)
Date: Thu, 13 Aug 2009 21:38:21 +0200
Subject: [rabbitmq-discuss] RabbitMQ + MySQL
In-Reply-To: <376f3e6f0908131225p2181c637ib33865f4033fcad5@mail.gmail.com>
References: <376f3e6f0908131225p2181c637ib33865f4033fcad5@mail.gmail.com>
Message-ID: <8D80B670-BAA4-4C0C-9FBD-D43EE4DB6145@opera.com>


On Aug 13, 2009, at 9:25 PM, Suhail Doshi wrote:

> Anyone using rabbitmq with lots of consumers along with MySQL and  
> hitting dead locks if you run too many consumers, any smart way to  
> deal with that?
>
> My theory was sharding on some distinct id and sending only some  
> data to specific consumers based on an id...
>
> Ideas? Suggestions?
>

If you're using InnoDB you can try to set transaction isolation
level to READ COMMITTED, as described here:

http://celeryproject.org/faq.html#mysql-is-throwing-deadlock-errors-what-can-i-do


-- 
Ask Solem
Developer, Web Team, Opera Software
askh at opera.com




From jasonjwwilliams at gmail.com  Thu Aug 13 20:46:24 2009
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 13 Aug 2009 13:46:24 -0600
Subject: [rabbitmq-discuss] RabbitMQ + MySQL
In-Reply-To: <376f3e6f0908131225p2181c637ib33865f4033fcad5@mail.gmail.com>
References: <376f3e6f0908131225p2181c637ib33865f4033fcad5@mail.gmail.com>
Message-ID: <3b949f090908131246tbb4e3cah52848fe1e6f52dbe@mail.gmail.com>

Depending on your requirements MyISAM can be a better choice. The
table-wide locks are lightning fast, and can work better in a high
concurrency insert environment than InnoDB. But you lose ACID so you
have to make sure you're replicating to another box for data
integrity.

-J

On Thu, Aug 13, 2009 at 1:25 PM, Suhail Doshi<digitalwarfare at gmail.com> wrote:
> Anyone using rabbitmq with lots of consumers along with MySQL and hitting
> dead locks if you run too many consumers, any smart way to deal with that?
> My theory was sharding on some distinct id and sending only some data to
> specific consumers based on an id...
> Ideas? Suggestions?
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From 0x6e6562 at gmail.com  Thu Aug 13 21:21:14 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 13 Aug 2009 21:21:14 +0100
Subject: [rabbitmq-discuss] Message expiration
In-Reply-To: <ce2570e20908131043x7c7b4a09lc139f2559517bef3@mail.gmail.com>
References: <ce2570e20908131043x7c7b4a09lc139f2559517bef3@mail.gmail.com>
Message-ID: <269388e30908131321m6a59f520xdec691a87931bbee@mail.gmail.com>

Garrett,

On Thu, Aug 13, 2009 at 6:43 PM, Garrett Smith<g at rre.tt> wrote:
> Assuming rabbitmq doesn't discard expired messages and that the
> application has the responsibility to check for expired messages
> itself, is there any word on what the 'expiration' string value should
> be (e.g. a string value timestamp, iso-8601 format, etc.)? Or is this
> value simply treated as a pass-through and the producer/consumer chain
> needs to coordinate on the format?

The value is opaque to the broker.

Actually doing something with the message expiry field on the broker
side is on the todo list, but it's not very high up ATM.

Ben



From g at rre.tt  Thu Aug 13 21:28:48 2009
From: g at rre.tt (Garrett Smith)
Date: Thu, 13 Aug 2009 15:28:48 -0500
Subject: [rabbitmq-discuss] Message expiration
In-Reply-To: <269388e30908131321m6a59f520xdec691a87931bbee@mail.gmail.com>
References: <ce2570e20908131043x7c7b4a09lc139f2559517bef3@mail.gmail.com>
	<269388e30908131321m6a59f520xdec691a87931bbee@mail.gmail.com>
Message-ID: <ce2570e20908131328x1a043648y96eb02e3b41a6b40@mail.gmail.com>

On Thu, Aug 13, 2009 at 3:21 PM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Garrett,
>
> On Thu, Aug 13, 2009 at 6:43 PM, Garrett Smith<g at rre.tt> wrote:
>> Assuming rabbitmq doesn't discard expired messages and that the
>> application has the responsibility to check for expired messages
>> itself, is there any word on what the 'expiration' string value should
>> be (e.g. a string value timestamp, iso-8601 format, etc.)? Or is this
>> value simply treated as a pass-through and the producer/consumer chain
>> needs to coordinate on the format?
>
> The value is opaque to the broker.
>
> Actually doing something with the message expiry field on the broker
> side is on the todo list, but it's not very high up ATM.

This is a bit off topic per this thread, but are there plans to move
off of 0.8 at some point (fork?), in which case the AMQP spec itself
would drive the use of TTL.

Garrett



From matthew at lshift.net  Thu Aug 13 21:42:21 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Thu, 13 Aug 2009 21:42:21 +0100
Subject: [rabbitmq-discuss] Message expiration
In-Reply-To: <ce2570e20908131328x1a043648y96eb02e3b41a6b40@mail.gmail.com>
References: <ce2570e20908131043x7c7b4a09lc139f2559517bef3@mail.gmail.com>
	<269388e30908131321m6a59f520xdec691a87931bbee@mail.gmail.com>
	<ce2570e20908131328x1a043648y96eb02e3b41a6b40@mail.gmail.com>
Message-ID: <20090813204220.GA28386@wellquite.org>

Hi Garrett,

On Thu, Aug 13, 2009 at 03:28:48PM -0500, Garrett Smith wrote:
> This is a bit off topic per this thread, but are there plans to move
> off of 0.8 at some point (fork?), in which case the AMQP spec itself
> would drive the use of TTL.

Yes, there are plans for both of those things. However, they are likely
some way off just now.

Matthew



From matthias at lshift.net  Thu Aug 13 22:01:47 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 13 Aug 2009 22:01:47 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<3a5f03340908101658m71e8bcd7k89c930c2f400b650@mail.gmail.com>	<3a5f03340908110756x1e1dec5ew48cc65084deb6347@mail.gmail.com>	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>	<167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>	<4A84019B.4000304@lshift.net>	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>	<4A844198.7030209@lshift.net>	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>	<4A844740.7060606@lshift.net>
	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>
Message-ID: <4A847F3B.1080103@lshift.net>

Patrick,

Patrick Kenney wrote:
> try this one again with the attached...
> 
> from vs2005/2008 IDE...
> open solution...
> 
> F5/debug...
> 
> set no break points...
> 
> frmMain comes up...
> 
> enter "amqp:///dispatcher" in text box above btnHostDispatcher...
> click "Host Dis" ...
> 
> enter "amqp:///subscriber" in text box above btnHostSubscriber...
> 
> Click "Host Sub"...
> 
> enter "amqp:///subscriber" in text box above
> 
> Click "Subscribe"...
> 
> after about a minute or so code breaks at "Trace.Fail("Illegal 
> EitherAlternative " + either.Alternative);" in 
> SimpleBlockingRpcContinuation.GetReply()...

We don't see that, but ...

> after you hit f5 it breaks in a few other places and ultimately ends up 
> in the catch in btnSubscribe_Click...
> 
> if you check your output window you will see the message too long error 
> at this time...
> 
> kill the ide via the vcr button...
> 
> go to "C:\System.Net.TraceRabbitMq.log"...
> 
> open it up and execute ctrl+F...
> 
> enter "long"...
> 
> you will come to the message too long error...

we do see that error.

So, finally, we can reproduce the problem you reported.


Vlad and I have started some experimenting to narrow down the list of 
possible causes. Here's where we got to so far:

1) We ran the program through our java AMQP Tracer tool. This didn't 
show anything unusual, except for the connections getting dropped by the 
client.

2) If we only go as far as the "Host Dis" step above, and let the 
program run for a few minutes, then the .Net socket trace eventually 
shows the "An established connection was aborted by the software in your 
host machine" error.

3) We then disabled the Windows Firewall, and, probably more 
importantly, the "Windows Defender". Then we tried "Host Dis" (and no 
further) again. We waited for quite a while without seeing an error.

If you could check whether you get the same results for 2 & 3 in your 
setup that would be great.


Regards,

Matthias.



From pekenney at gmail.com  Thu Aug 13 22:21:03 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Thu, 13 Aug 2009 14:21:03 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A847F3B.1080103@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>
	<167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>
	<4A84019B.4000304@lshift.net>
	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>
	<4A844198.7030209@lshift.net>
	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>
	<4A844740.7060606@lshift.net>
	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>
	<4A847F3B.1080103@lshift.net>
Message-ID: <3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>

although I am not familiar with the java amqp tracer tool you mentioned and
have not used it thus far...

yes, my results are consistent with yours...

and have disabled anything that i know of that could be blocking sockets
etc...

i do not see anything showing up in any of the windows event logs either...

I am also running the wireshark packet sniffer and have the following filter
applied...

(ip.dst == 192.168.100.36) || (amqp)

and am not seeing anything anomalous thus far...

I am also, looking at the locals, output, threads and call stack windows
pretty close as well...
nothing jumping out there either...

i have also enabled .NET Framework source stepping and have not found
anything additional that route either yet...

the socket trace connection aborts seem to be some kind of timeouts, and
while i have been adding configurable ridiculously long timeouts everywhere
i can find just to get it to work once, these timeout errors seem to be a
secondary issue, from what i can tell at the moment...

thanks in advance.

re:
On Thu, Aug 13, 2009 at 2:01 PM, Matthias Radestock <matthias at lshift.net>wrote:

> Patrick,
>
> Patrick Kenney wrote:
>
>> try this one again with the attached...
>>
>> from vs2005/2008 IDE...
>> open solution...
>>
>> F5/debug...
>>
>> set no break points...
>>
>> frmMain comes up...
>>
>> enter "amqp:///dispatcher" in text box above btnHostDispatcher...
>> click "Host Dis" ...
>>
>> enter "amqp:///subscriber" in text box above btnHostSubscriber...
>>
>> Click "Host Sub"...
>>
>> enter "amqp:///subscriber" in text box above
>>
>> Click "Subscribe"...
>>
>> after about a minute or so code breaks at "Trace.Fail("Illegal
>> EitherAlternative " + either.Alternative);" in
>> SimpleBlockingRpcContinuation.GetReply()...
>>
>
> We don't see that, but ...
>
>  after you hit f5 it breaks in a few other places and ultimately ends up in
>> the catch in btnSubscribe_Click...
>>
>> if you check your output window you will see the message too long error at
>> this time...
>>
>> kill the ide via the vcr button...
>>
>> go to "C:\System.Net.TraceRabbitMq.log"...
>>
>> open it up and execute ctrl+F...
>>
>> enter "long"...
>>
>> you will come to the message too long error...
>>
>
> we do see that error.
>
> So, finally, we can reproduce the problem you reported.
>
>
> Vlad and I have started some experimenting to narrow down the list of
> possible causes. Here's where we got to so far:
>
> 1) We ran the program through our java AMQP Tracer tool. This didn't show
> anything unusual, except for the connections getting dropped by the client.
>
> 2) If we only go as far as the "Host Dis" step above, and let the program
> run for a few minutes, then the .Net socket trace eventually shows the "An
> established connection was aborted by the software in your host machine"
> error.
>
> 3) We then disabled the Windows Firewall, and, probably more importantly,
> the "Windows Defender". Then we tried "Host Dis" (and no further) again. We
> waited for quite a while without seeing an error.
>
> If you could check whether you get the same results for 2 & 3 in your setup
> that would be great.
>
>
> Regards,
>
> Matthias.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090813/571d4041/attachment.htm 

From matthias at lshift.net  Thu Aug 13 22:30:11 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 13 Aug 2009 22:30:11 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	
	<3a5f03340908122157k4745804u2dfb37b765a6be60@mail.gmail.com>	
	<167204d20908130458s10d4700dg3c66bdde3d41913f@mail.gmail.com>	
	<4A84019B.4000304@lshift.net>	
	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>	
	<4A844198.7030209@lshift.net>	
	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>	
	<4A844740.7060606@lshift.net>	
	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>	
	<4A847F3B.1080103@lshift.net>
	<3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>
Message-ID: <4A8485E3.7050501@lshift.net>

Patrick,

Patrick Kenney wrote:
> yes, my results are consistent with yours...

So, just to be confirm, after entering "amqp:///dispatcher", clicking on 
"Host Dis" and waiting for a few minutes,  ...

a) if the test was run while the Windows Firewall and Windows Defender 
are activated, then an error occurs

b) if the test was run with neither the Windows Firewall or Windows 
Defender activated, then no error occurs

That's what we saw. Are you saying that you are seeing the same?


Matthias.



From pekenney at gmail.com  Thu Aug 13 22:49:25 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Thu, 13 Aug 2009 14:49:25 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A8485E3.7050501@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<4A84019B.4000304@lshift.net>
	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>
	<4A844198.7030209@lshift.net>
	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>
	<4A844740.7060606@lshift.net>
	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>
	<4A847F3B.1080103@lshift.net>
	<3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>
	<4A8485E3.7050501@lshift.net>
Message-ID: <3a5f03340908131449y3f13a8cehb5199f2420317ee2@mail.gmail.com>

I do not have windows defender, and when I have windows firewall and my
anti-virus software disabled things look good as far as the host
dispatcher/host subscriber calls go ...

but the subscribe call raises the message too long error followed by
connection aborts regardless of what i have done so far...

having anti-virus and or windows firewall without exceptions will cause
blocking/software aborted messages here too...

thanks in advance.

re:
On Thu, Aug 13, 2009 at 2:30 PM, Matthias Radestock <matthias at lshift.net>wrote:

> Patrick,
>
> Patrick Kenney wrote:
>
>> yes, my results are consistent with yours...
>>
>
> So, just to be confirm, after entering "amqp:///dispatcher", clicking on
> "Host Dis" and waiting for a few minutes,  ...
>
> a) if the test was run while the Windows Firewall and Windows Defender are
> activated, then an error occurs
>
> b) if the test was run with neither the Windows Firewall or Windows
> Defender activated, then no error occurs
>
> That's what we saw. Are you saying that you are seeing the same?
>
>
> Matthias.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090813/f0be6ab7/attachment.htm 

From matthias at lshift.net  Thu Aug 13 23:04:09 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Thu, 13 Aug 2009 23:04:09 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908131449y3f13a8cehb5199f2420317ee2@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<4A84019B.4000304@lshift.net>	<3a5f03340908130748m5d6a5832pfcca4842cc19e320@mail.gmail.com>	<4A844198.7030209@lshift.net>	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>	<4A844740.7060606@lshift.net>	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>	<4A847F3B.1080103@lshift.net>	<3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>	<4A8485E3.7050501@lshift.net>
	<3a5f03340908131449y3f13a8cehb5199f2420317ee2@mail.gmail.com>
Message-ID: <4A848DD9.4070905@lshift.net>

Patrick,

Patrick Kenney wrote:
> I do not have windows defender, and when I have windows firewall and my 
> anti-virus software disabled things look good as far as the host 
> dispatcher/host subscriber calls go ...
> 
> but the subscribe call raises the message too long error followed by 
> connection aborts regardless of what i have done so far...
> 
> having anti-virus and or windows firewall without exceptions will cause 
> blocking/software aborted messages here too...

ok. One thing worth trying is disabling heartbeats. I don't know whether 
that is possible in the RabbitMQ WCF bindings, but if it isn't then 
simply change the code in ConnectionParameters.cs, setting the 
DefaultHeartbeat to 0. You can check whether that worked by looking at 
the socket trace (or wireshark) for activity after the "Host Dis" button 
click - with heartbeats there will be some traffic every few seconds, 
without there will just be some traffic initially and then silence.

With heartbeats disabled Vlad and I were no longer able to reproduce the 
"message body too long" error.


Regards,

Matthias.



From pekenney at gmail.com  Fri Aug 14 01:07:33 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Thu, 13 Aug 2009 17:07:33 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A848DD9.4070905@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<4A844198.7030209@lshift.net>
	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>
	<4A844740.7060606@lshift.net>
	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>
	<4A847F3B.1080103@lshift.net>
	<3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>
	<4A8485E3.7050501@lshift.net>
	<3a5f03340908131449y3f13a8cehb5199f2420317ee2@mail.gmail.com>
	<4A848DD9.4070905@lshift.net>
Message-ID: <3a5f03340908131707i7ab968fewe6dd121500b26f79@mail.gmail.com>

k, so I added a config file entry to disable defaultheartbeat in
ConnectionParameters.cs...

doing a subscribe no longer returns message too long error but it is still
failing...

host subscriber and host dispatcher still work...

I am attaching my trace and error files I am writing out...

thanks in advance.

re:
On Thu, Aug 13, 2009 at 3:04 PM, Matthias Radestock <matthias at lshift.net>wrote:

> Patrick,
>
> Patrick Kenney wrote:
>
>> I do not have windows defender, and when I have windows firewall and my
>> anti-virus software disabled things look good as far as the host
>> dispatcher/host subscriber calls go ...
>>
>> but the subscribe call raises the message too long error followed by
>> connection aborts regardless of what i have done so far...
>>
>> having anti-virus and or windows firewall without exceptions will cause
>> blocking/software aborted messages here too...
>>
>
> ok. One thing worth trying is disabling heartbeats. I don't know whether
> that is possible in the RabbitMQ WCF bindings, but if it isn't then simply
> change the code in ConnectionParameters.cs, setting the DefaultHeartbeat to
> 0. You can check whether that worked by looking at the socket trace (or
> wireshark) for activity after the "Host Dis" button click - with heartbeats
> there will be some traffic every few seconds, without there will just be
> some traffic initially and then silence.
>
> With heartbeats disabled Vlad and I were no longer able to reproduce the
> "message body too long" error.
>
>
> Regards,
>
> Matthias.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090813/7847ad46/attachment.htm 
-------------- next part --------------
8/13/2009 5:01:24 PM
btnSubscribe_Click: 


 Message: The message could not be transferred within the allotted timeout of 00:01:00. There was no space available in the reliable channel's transfer window. The time allotted to this operation may have been a portion of a longer timeout.


 Source: System.ServiceModel


 Stack Trace:    at System.ServiceModel.Channels.TransmissionStrategy.WaitQueueAdder.Wait(TimeSpan timeout)
   at System.ServiceModel.Channels.TransmissionStrategy.InternalAdd(Message message, Boolean isLast, TimeSpan timeout, Object state, MessageAttemptInfo& attemptInfo)
   at System.ServiceModel.Channels.TransmissionStrategy.AddLast(Message message, TimeSpan timeout, Object state)
   at System.ServiceModel.Channels.ReliableOutputConnection.InternalAddMessage(Message message, TimeSpan timeout, Object state, Boolean isLast)
   at System.ServiceModel.Channels.ReliableOutputConnection.CompleteTransfer(TimeSpan timeout)
   at System.ServiceModel.Channels.ReliableOutputConnection.Close(TimeSpan timeout)
   at System.ServiceModel.Channels.ReliableOutputSessionChannel.OnClose(TimeSpan timeout)
   at System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan timeout)
   at System.ServiceModel.Channels.LayeredChannel`1.OnClose(TimeSpan timeout)
   at System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan timeout)
   at System.ServiceModel.Channels.ServiceChannel.OnClose(TimeSpan timeout)
   at System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan timeout)
   at System.ServiceModel.Channels.ServiceChannelFactory.OnClose(TimeSpan timeout)
   at System.ServiceModel.Channels.ServiceChannelFactory.TypedServiceChannelFactory`1.OnClose(TimeSpan timeout)
   at System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan timeout)
   at System.ServiceModel.ChannelFactory.OnClose(TimeSpan timeout)
   at System.ServiceModel.Channels.CommunicationObject.Close(TimeSpan timeout)
   at System.ServiceModel.ChannelFactory.System.IDisposable.Dispose()
   at RabbitMqPubSub1.frmMain.btnSubscribe_Click(Object sender, EventArgs e) in C:\Patrick\Development\Queue Stuff\RabbitMqPubSub1\frmMain.cs:line 254


 Target Site: System.ServiceModel.Channels.MessageAttemptInfo Wait(System.TimeSpan)


 Data: System.Collections.ListDictionaryInternal
-------------- next part --------------
A non-text attachment was scrubbed...
Name: System.Net.TraceRabbitMq.log
Type: application/octet-stream
Size: 465265 bytes
Desc: not available
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090813/7847ad46/attachment.obj 

From matthias at lshift.net  Fri Aug 14 14:13:00 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 14 Aug 2009 14:13:00 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908131707i7ab968fewe6dd121500b26f79@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<4A844198.7030209@lshift.net>	<3a5f03340908130945r6adddabegf6f0b0a4895ed755@mail.gmail.com>	<4A844740.7060606@lshift.net>	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>	<4A847F3B.1080103@lshift.net>	<3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>	<4A8485E3.7050501@lshift.net>	<3a5f03340908131449y3f13a8cehb5199f2420317ee2@mail.gmail.com>	<4A848DD9.4070905@lshift.net>
	<3a5f03340908131707i7ab968fewe6dd121500b26f79@mail.gmail.com>
Message-ID: <4A8562DC.4050303@lshift.net>

Patrick,

Patrick Kenney wrote:
> k, so I added a config file entry to disable defaultheartbeat in
> ConnectionParameters.cs...
> 
> doing a subscribe no longer returns message too long error but it is
> still failing...
> 
> host subscriber and host dispatcher still work...
> 
> I am attaching my trace and error files I am writing out...

Thanks. We are seeing the same here.

In trying to track down the cause of these errors it would save us a lot
of time if the code was stripped to the bare minimum:

- instead of using WCF, call into the RabbitMQ .net client API directly.
This eliminates a whole layer of complexity.

- instead of a winforms based app, construct a command line app. This
too eliminates a whole layer of complexity.

- instead of reproducing the problems while running in the VS debugger,
get to a point where the problem is reproducible by simply invoking a
command line app from the shell.

Do you think that is something you could do?


Regards,

Matthias.



From terry at jon.es  Fri Aug 14 16:10:49 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 14 Aug 2009 17:10:49 +0200
Subject: [rabbitmq-discuss] high resolution timerAborted
Message-ID: <19077.32377.180875.606840@jon.es>

I'm seeing this in /var/log/rabbitmq/startup_err on startup of RabbitMQ on
an Amazon image I built.  I've run RabbitMQ on this image before several
times without a problem.

    /var/log/rabbitmq# cat startup_err

    Crash dump was written to: erl_crash.dump
    Unexpected behaviour from operating system high resolution timerAborted

I don't see a erl_crash.dump file anywhere. /var/log/rabbitmq/startup_log
is empty.

The process which starts rabbit is running as root. It execs

    /usr/bin/sudo /etc/init.d/rabbitmq-server start

When I ssh in to the machine and run that command manually, it succeeds:

    # /usr/bin/sudo /etc/init.d/rabbitmq-server start
    Starting rabbitmq-server: SUCCESS
    rabbitmq-server.


Thanks for any help,
Terry



From terry at jon.es  Fri Aug 14 16:16:54 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 14 Aug 2009 17:16:54 +0200
Subject: [rabbitmq-discuss] high resolution timerAborted
In-Reply-To: Your message at 17:10:49 on Friday, 14 August 2009
References: <19077.32377.180875.606840@jon.es>
Message-ID: <19077.32742.929834.332178@jon.es>

A little bit more info, the RabbitMQ running on the machine is 1.6.0-1
installed via apt-get with source:

   deb http://www.rabbitmq.com/debian/ testing main

And it's running on Ubuntu Hardy 8.04.

Terry



From matthias at lshift.net  Fri Aug 14 16:30:42 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 14 Aug 2009 16:30:42 +0100
Subject: [rabbitmq-discuss] high resolution timerAborted
In-Reply-To: <19077.32377.180875.606840@jon.es>
References: <19077.32377.180875.606840@jon.es>
Message-ID: <4A858322.5020500@lshift.net>

Terry,

Terry Jones wrote:
> I'm seeing this in /var/log/rabbitmq/startup_err on startup of RabbitMQ on
> an Amazon image I built.  I've run RabbitMQ on this image before several
> times without a problem.
> 
>     /var/log/rabbitmq# cat startup_err
> 
>     Crash dump was written to: erl_crash.dump
>     Unexpected behaviour from operating system high resolution timer

Googling for the error brings up a handful of posts in the Erlang
discussion mailing list, including this one with a possible workaround:

http://erlang.org/pipermail/erlang-questions/2007-August/028577.html


Regards,

Matthias.



From terry at jon.es  Fri Aug 14 16:32:36 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 14 Aug 2009 17:32:36 +0200
Subject: [rabbitmq-discuss] high resolution timerAborted
In-Reply-To: Your message at 17:16:54 on Friday, 14 August 2009
References: <19077.32377.180875.606840@jon.es>
	<19077.32742.929834.332178@jon.es>
Message-ID: <19077.33684.511557.512146@jon.es>

I found the erl_crash.dump file (in /var/lib/rabbitmq). It's 25K and just
from a quick scan doesn't seem to show anything too suspicious, apart from
the first lines:

=erl_crash_dump:0.1
Fri Aug 14 15:22:23 2009
Slogan: Unexpected behaviour from operating system high resolution timerSystem version: Erlang (BEAM) emulator version 5.5.5 [source] [64-bit] [async-threads:0] [kernel-poll:false]
Compiled: Tue Dec 11 01:12:11 2007

and maybe 

Program counter: 0x00000000007b2dd0 (unknown function)

I'm happy to email it if it might help.

Terry



From terry at jon.es  Fri Aug 14 16:36:39 2009
From: terry at jon.es (Terry Jones)
Date: Fri, 14 Aug 2009 17:36:39 +0200
Subject: [rabbitmq-discuss] high resolution timerAborted
In-Reply-To: Your message at 16:30:42 on Friday, 14 August 2009
References: <19077.32377.180875.606840@jon.es>
	<4A858322.5020500@lshift.net>
Message-ID: <19077.33927.710642.666412@jon.es>

Hi Matthias

> Googling for the error brings up a handful of posts in the Erlang
> discussion mailing list, including this one with a possible workaround:
> 
> http://erlang.org/pipermail/erlang-questions/2007-August/028577.html

Thanks a lot. I actually did a couple of searches (including on the Rabbit
archives) but I guess I was putting in too much text as I got no hits.

I'll try a sleep. It's odd because something else has also just (this
afternoon) started failing for me on EC2: installing Python modules (via
setup.py) and then failing to be able to import them right away. I used a
sleep on that one too, and it still failed. Maybe a 30 second nap will
help. Power-napping in the clouds.

I guess something has changed on EC2  (I'm not using EBS in case anyone's interested.)

Thanks again!

Terry



From pekenney at gmail.com  Fri Aug 14 16:47:17 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Fri, 14 Aug 2009 08:47:17 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A8562DC.4050303@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<4A844740.7060606@lshift.net>
	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>
	<4A847F3B.1080103@lshift.net>
	<3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>
	<4A8485E3.7050501@lshift.net>
	<3a5f03340908131449y3f13a8cehb5199f2420317ee2@mail.gmail.com>
	<4A848DD9.4070905@lshift.net>
	<3a5f03340908131707i7ab968fewe6dd121500b26f79@mail.gmail.com>
	<4A8562DC.4050303@lshift.net>
Message-ID: <3a5f03340908140847i74b829d3u3d0c978056b3c994@mail.gmail.com>

If I can not use RabbitMQ with WCF it is of no use to me...

I have run as the logtail, sendstring, addserver and the other C# based
console apps samples and can not reproduce the errors that way...

I found a similar error condition occurring in this thread...
http://social.msdn.microsoft.com/Forums/en-US/wcf/thread/302f159e-dec6-4ed5-aefb-54a1b95c3ac6

<snip>
System.Net.Sockets Verbose: 0 : [6120] Exiting Socket#35287174::Send()
-> 1#1
System.Net.Sockets Error: 0 : [4508] Exception in the
Socket#35287174::Receive - A connection attempt failed because the connected
party did not properly respond after a period of time, or established
connection failed because connected host has failed to respond
</snip>

comments, suggestions?

thanks in advance.

re:
On Fri, Aug 14, 2009 at 6:13 AM, Matthias Radestock <matthias at lshift.net>wrote:

> Patrick,
>
> Patrick Kenney wrote:
> > k, so I added a config file entry to disable defaultheartbeat in
> > ConnectionParameters.cs...
> >
> > doing a subscribe no longer returns message too long error but it is
> > still failing...
> >
> > host subscriber and host dispatcher still work...
> >
> > I am attaching my trace and error files I am writing out...
>
> Thanks. We are seeing the same here.
>
> In trying to track down the cause of these errors it would save us a lot
> of time if the code was stripped to the bare minimum:
>
> - instead of using WCF, call into the RabbitMQ .net client API directly.
> This eliminates a whole layer of complexity.
>
> - instead of a winforms based app, construct a command line app. This
> too eliminates a whole layer of complexity.
>
> - instead of reproducing the problems while running in the VS debugger,
> get to a point where the problem is reproducible by simply invoking a
> command line app from the shell.
>
> Do you think that is something you could do?
>
>
> Regards,
>
> Matthias.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090814/a9f5382c/attachment.htm 

From n8gray at n8gray.org  Fri Aug 14 18:29:10 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Fri, 14 Aug 2009 10:29:10 -0700
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
	<29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>
Message-ID: <65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>

Hi Paul,

On Thu, Aug 13, 2009 at 2:54 AM, Paul Jones<pauljones23 at gmail.com> wrote:
> Hi Nathan,
>
> Would it be possible to detail a bit more about your use case, and thus why
> you don't know when exchanges will come and go? In most scenarios, we'd
> recommend that you just declare the exchanges in a non-passive manner - but
> I take it that there is something special about your use case that prevents
> this.

Maybe, maybe not.  I've written a multiplayer boardgame.  I used
Google App Engine for the server, which works fine but requires that
the client poll the server to detect when someone has made a move,
sent a chat, or otherwise generated an event.  (GAE doesn't allow
long-lived connections or raw socket access.)  I'm hoping to use
rabbitmq as an "event server" to get real-time updates to clients
without pounding GAE with HTTP requests.  When an event is generated
for a game, GAE publishes to the event server, which tells any
connected clients of the game to ask GAE for an update.

There will be many games running, and each game has 2-4 players.  The
natural mapping (IMHO) to AMQP is to have one fanout exchange per
game.  The server on GAE creates this (durable) exchange when a new
game starts.  When the game ends there will be no more events from it,
so the exchange is deleted.  It's possible for a game to end before
the client connects (the last player can play while the client is
offline).  Each player can play multiple games, thus the requirement
to connect to multiple exchanges.  Clients connect with auto-delete
queues, since message content is uninteresting -- it's only the timing
they care about.

If there's a better way to do this I'm happy to hear it.  I could use
one big direct exchange with player names as routing keys, but that
would require my publisher to send multiple messages for each game
event, one for each player in the game.  I could use one big topic
exchange with routing keys like "joe.sally.bob" and subscribe with
patterns like "#.bob.#", but putting all the messages through one
topic exchange doesn't seem like it would scale well.

Declaring exchanges non-passively could probably be made to work, but
my intention was to do my best to disallow creation of exchanges by
users in order to prevent abuse.  (I'll save my rant about rabbitmq's
permissions system for another time...)

> If your requirement definitely does stand, there isn't really a cleaner way
> to do this from the queue-binding end. Speculating a bit on your use case,
> if you're trying to bind every exchange in your system to a single queue,
> would it be possible to perform the binding at the point of exchange
> creation (ie, instead of a queue binding to a well-known exchange, bind the
> exchange to a well-known queue).
>
> Exchange-to-exchange bindings are still just a proposal at the moment I'm
> afraid.

That's a shame.  They're a perfect fit for many-to-many relationships
like mine.  I need one fan-out exchange per game and one fan-in
exchange per user.

Thanks,
-n8

-- 
http://n8gray.org

> On Tue, Aug 11, 2009 at 8:20 PM, Nathan Gray <n8gray at n8gray.org> wrote:
>>
>> Hi folks,
>>
>> I'm using rabbitmq as an event notification system. ?In my application
>> each client will subscribe to a number of exchanges. ?Exchanges may
>> come and go. ?The client cannot be expected to know in advance which
>> exchanges no longer exist, so they will use exchange.declare(...,
>> passive=True,...) to find out which ones exist. ?However,
>> exchange.declare in passive mode raises a channel exception and kills
>> the channel if the exchange doesn't exist. ?Assuming I want to use one
>> channel per client I'm stuck with ugly, racy code to subscribe to
>> multiple exchanges. ?(See the end of the post for the python code to
>> do it.) ?And if something goes wrong and kills the channel I have to
>> go through the whole dance again. ?This seems crazy.
>>
>> My question is, what's the right way for one client to get messages
>> from multiple exchanges? ?Can one auto-delete queue be bound in
>> multiple channels, and if so is that the proper approach? ?Should I be
>> making N queues & channels to subscribe to N exchanges?
>>
>> Also, exchange-exchange binding [1] would solve a lot of problems for
>> me -- does it work or is it just a proposal?
>>
>> Thanks,
>> -n8
>>
>> --
>> http://n8gray.org
>>
>> [1]: https://dev.rabbitmq.com/wiki/ExchangeToExchangeBindings
>>
>> while True:
>> ? ?chan = connection.channel()
>> ? ?found = []
>> ? ?for xc in exchanges:
>> ? ? ? ?try:
>> ? ? ? ? ? ?chan.exchange_declare(exchange=xc, passive=True, ...)
>> ? ? ? ? ? ?found.append(xc)
>> ? ? ? ?except amqp.exceptions.AMQPChannelException, e:
>> ? ? ? ? ? ?if e.amqp_reply_code == 404:
>> ? ? ? ? ? ? ? ?# Channel got closed. ?Open a new channel.
>> ? ? ? ? ? ? ? ?chan = connection.channel()
>> ? ? ? ? ? ?else:
>> ? ? ? ? ? ? ? ?raise e
>> ? ?# Sure hope nothing gets deleted at this point!
>> ? ?qname, _, _ = chan.queue_declare(exclusive=True)
>> ? ?try:
>> ? ? ? ?for xc in found:
>> ? ? ? ? ? ?chan.queue_bind(queue=qname, exchange=xc)
>> ? ?except amqp.exceptions.AMQPChannelException, e:
>> ? ? ? ?if e.amqp_reply_code == 404:
>> ? ? ? ? ? ?# Oops, an exchange got deleted. ?Start over.
>> ? ? ? ? ? ?continue
>> ? ? ? ?else:
>> ? ? ? ? ? ?raise e
>> ? ?# No exception raised, so we're done (until something
>> ? ?# else goes wrong & kills the channel...)
>> ? ?break
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From n8gray at n8gray.org  Fri Aug 14 18:35:54 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Fri, 14 Aug 2009 10:35:54 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <4A823F45.5000307@lshift.net>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>
	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>
	<65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>
	<65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>
	<4A8057CD.9070004@lshift.net>
	<65a6e3960908101411y14d8bbabnf7d3557bc06fedff@mail.gmail.com>
	<4A8153C3.4070103@lshift.net>
	<65a6e3960908111122l24ee30d8n9ee2301cd62a07de@mail.gmail.com>
	<4A823F45.5000307@lshift.net>
Message-ID: <65a6e3960908141035l12c03799o7c8b275f98cbdb9c@mail.gmail.com>

Hi Tony,

On Tue, Aug 11, 2009 at 9:04 PM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Nathan Gray wrote:
>> It seems to me that there's no one-size-fits-all timeout for poll.
>> Some apps will want non-blocking polling and others will want it to
>> block indefinitely until there's work to do. ?Wouldn't it be better to
>> just have an explicit timeout parameter to poll()?
>
> Yes, but that makes the timeout-maintaining code in the channel object
> much more complex. Generally, channel *instances* are not shared between
> applications, so each app is still free to set sessionTimeout according
> to its needs. One app could set it to half an hour (and get
> corresponding 15-minute poll() cycles), another to 30s. The current
> setup lets all parallel poll()s on a single instance (if there's more
> than one) be treated identically; a timeout parameter to each poll()
> would require a separate timer on the server-side for each. Ultimately
> though, if the way it's currently being done is shown to be a problem,
> it's totally changeable.

Fair enough.  I'll wait to see if this causes any real trouble in my
app before I call it a problem.

> Adding a *non*-blocking variant of poll() is an interesting idea. I
> hadn't thought anyone would want that! Is it something you would use?

I haven't actually implemented my system yet, so I can't say if I'd
use it or not.  Probably not in this system, but it seems like a
natural thing to have.  But look, I'm just an application programmer.
I'm not much of a network programmer, much less an enterprise
messaging connoisseur.  My design advice should definitely be taken
with a grain of salt.  ;^)

Cheers,
-n8

-- 
http://n8gray.org



From pauljones23 at gmail.com  Fri Aug 14 18:53:36 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Fri, 14 Aug 2009 18:53:36 +0100
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
	<29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>
	<65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>
Message-ID: <29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>

Hi Nathan,


On Fri, Aug 14, 2009 at 6:29 PM, Nathan Gray <n8gray at n8gray.org> wrote:

>
> Maybe, maybe not.  I've written a multiplayer boardgame.  I used
> Google App Engine for the server, which works fine but requires that
> the client poll the server to detect when someone has made a move,
> sent a chat, or otherwise generated an event.  (GAE doesn't allow
> long-lived connections or raw socket access.)  I'm hoping to use
> rabbitmq as an "event server" to get real-time updates to clients
> without pounding GAE with HTTP requests.  When an event is generated
> for a game, GAE publishes to the event server, which tells any
> connected clients of the game to ask GAE for an update.
>
> There will be many games running, and each game has 2-4 players.  The
> natural mapping (IMHO) to AMQP is to have one fanout exchange per
> game.  The server on GAE creates this (durable) exchange when a new
> game starts.  When the game ends there will be no more events from it,
> so the exchange is deleted.  It's possible for a game to end before
> the client connects (the last player can play while the client is
> offline).  Each player can play multiple games, thus the requirement
> to connect to multiple exchanges.  Clients connect with auto-delete
> queues, since message content is uninteresting -- it's only the timing
> they care about.
>
> If there's a better way to do this I'm happy to hear it.  I could use
> one big direct exchange with player names as routing keys, but that
> would require my publisher to send multiple messages for each game
> event, one for each player in the game.  I could use one big topic
> exchange with routing keys like "joe.sally.bob" and subscribe with
> patterns like "#.bob.#", but putting all the messages through one
> topic exchange doesn't seem like it would scale well.
>

Assuming that there is a known identifier for each game (database id, guid,
or equivalent), what about using a single direct exchange, with the routing
key being set to the game id each time. When a player connects, they
subscribe to the exchange with all of the routing keys for the games that
they are interested in.

As far as scalability is concerned, using a direct exchange with many
routing keys should hopefully be no worse than many fanout exchanges with no
routing keys. If you're considering the clustering scenario, exchange
information is replicated to all nodes - so it isn't like there is a single
point that all messages need to go through.

Thanks,
Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090814/0d729d01/attachment.htm 

From n8gray at n8gray.org  Fri Aug 14 19:17:50 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Fri, 14 Aug 2009 11:17:50 -0700
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
	<29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>
	<65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>
	<29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>
Message-ID: <65a6e3960908141117v8551da3q2d2eb32c931c9f13@mail.gmail.com>

On Fri, Aug 14, 2009 at 10:53 AM, Paul Jones<pauljones23 at gmail.com> wrote:
> Hi Nathan,
>
>
> On Fri, Aug 14, 2009 at 6:29 PM, Nathan Gray <n8gray at n8gray.org> wrote:
>>
>> Maybe, maybe not. ?I've written a multiplayer boardgame. ?I used
>> Google App Engine for the server, which works fine but requires that
>> the client poll the server to detect when someone has made a move,
>> sent a chat, or otherwise generated an event. ?(GAE doesn't allow
>> long-lived connections or raw socket access.) ?I'm hoping to use
>> rabbitmq as an "event server" to get real-time updates to clients
>> without pounding GAE with HTTP requests. ?When an event is generated
>> for a game, GAE publishes to the event server, which tells any
>> connected clients of the game to ask GAE for an update.
>>
>> There will be many games running, and each game has 2-4 players. ?The
>> natural mapping (IMHO) to AMQP is to have one fanout exchange per
>> game. ?The server on GAE creates this (durable) exchange when a new
>> game starts. ?When the game ends there will be no more events from it,
>> so the exchange is deleted. ?It's possible for a game to end before
>> the client connects (the last player can play while the client is
>> offline). ?Each player can play multiple games, thus the requirement
>> to connect to multiple exchanges. ?Clients connect with auto-delete
>> queues, since message content is uninteresting -- it's only the timing
>> they care about.
>>
>> If there's a better way to do this I'm happy to hear it. ?I could use
>> one big direct exchange with player names as routing keys, but that
>> would require my publisher to send multiple messages for each game
>> event, one for each player in the game. ?I could use one big topic
>> exchange with routing keys like "joe.sally.bob" and subscribe with
>> patterns like "#.bob.#", but putting all the messages through one
>> topic exchange doesn't seem like it would scale well.
>
> Assuming that there is a known identifier for each game (database id, guid,
> or equivalent), what about using a single direct exchange, with the routing
> key being set to the game id each time. When a player connects, they
> subscribe to the exchange with all of the routing keys for the games that
> they are interested in.

Can you subscribe one queue to one exchange with multiple keys, or is
the idea that each player would use one queue per game?

> As far as scalability is concerned, using a direct exchange with many
> routing keys should hopefully be no worse than many fanout exchanges with no
> routing keys. If you're considering the clustering scenario, exchange
> information is replicated to all nodes - so it isn't like there is a single
> point that all messages need to go through.

Good to know.  I wasn't too worried about using one direct exchange,
but using one topic exchange seemed like a bad idea.

Thanks,
-n8

-- 
http://n8gray.org



From alexis.richardson at gmail.com  Fri Aug 14 19:18:59 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Fri, 14 Aug 2009 19:18:59 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908140847i74b829d3u3d0c978056b3c994@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>
	<4A847F3B.1080103@lshift.net>
	<3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>
	<4A8485E3.7050501@lshift.net>
	<3a5f03340908131449y3f13a8cehb5199f2420317ee2@mail.gmail.com>
	<4A848DD9.4070905@lshift.net>
	<3a5f03340908131707i7ab968fewe6dd121500b26f79@mail.gmail.com>
	<4A8562DC.4050303@lshift.net>
	<3a5f03340908140847i74b829d3u3d0c978056b3c994@mail.gmail.com>
Message-ID: <167204d20908141118m7228c122k40481904211d36e5@mail.gmail.com>

On Fri, Aug 14, 2009 at 4:47 PM, Patrick Kenney<pekenney at gmail.com> wrote:
> If I can not use RabbitMQ with WCF it is of no use to me...

Patrick, we want you to be able to use RabbitMQ with WCF but need your
help isolating the bug.  I know this is a bore.

alexis



> I have run as the logtail, sendstring, addserver and the other C# based
> console apps samples and can not reproduce the errors that way...
>
> I found a similar error condition occurring in this thread...
> http://social.msdn.microsoft.com/Forums/en-US/wcf/thread/302f159e-dec6-4ed5-aefb-54a1b95c3ac6
>
> <snip>
> System.Net.Sockets Verbose: 0 : [6120] Exiting Socket#35287174::Send()
> -> 1#1
> System.Net.Sockets Error: 0 : [4508] Exception in the
> Socket#35287174::Receive - A connection attempt failed because the connected
> party did not properly respond after a period of time, or established
> connection failed because connected host has failed to respond
> </snip>
>
> comments, suggestions?
>
> thanks in advance.
>
> re:
> On Fri, Aug 14, 2009 at 6:13 AM, Matthias Radestock <matthias at lshift.net>
> wrote:
>>
>> Patrick,
>>
>> Patrick Kenney wrote:
>> > k, so I added a config file entry to disable defaultheartbeat in
>> > ConnectionParameters.cs...
>> >
>> > doing a subscribe no longer returns message too long error but it is
>> > still failing...
>> >
>> > host subscriber and host dispatcher still work...
>> >
>> > I am attaching my trace and error files I am writing out...
>>
>> Thanks. We are seeing the same here.
>>
>> In trying to track down the cause of these errors it would save us a lot
>> of time if the code was stripped to the bare minimum:
>>
>> - instead of using WCF, call into the RabbitMQ .net client API directly.
>> This eliminates a whole layer of complexity.
>>
>> - instead of a winforms based app, construct a command line app. This
>> too eliminates a whole layer of complexity.
>>
>> - instead of reproducing the problems while running in the VS debugger,
>> get to a point where the problem is reproducible by simply invoking a
>> command line app from the shell.
>>
>> Do you think that is something you could do?
>>
>>
>> Regards,
>>
>> Matthias.
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From pauljones23 at gmail.com  Fri Aug 14 19:52:45 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Fri, 14 Aug 2009 19:52:45 +0100
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <65a6e3960908141117v8551da3q2d2eb32c931c9f13@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
	<29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>
	<65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>
	<29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>
	<65a6e3960908141117v8551da3q2d2eb32c931c9f13@mail.gmail.com>
Message-ID: <29598b610908141152m70f04a44g84925b261860ccc6@mail.gmail.com>

> > Assuming that there is a known identifier for each game (database id,
> guid,
> > or equivalent), what about using a single direct exchange, with the
> routing
> > key being set to the game id each time. When a player connects, they
> > subscribe to the exchange with all of the routing keys for the games that
> > they are interested in.
>
> Can you subscribe one queue to one exchange with multiple keys, or is
> the idea that each player would use one queue per game?
>

The one queue can be bound to a single exchange with multiple routing keys;
so each player would only need to have a single queue. Depending on how you
access Rabbit, it might also be worth putting the routing key into the
message body, just to make it a bit more accessible (since some apis don't
provide the easiest access to the routing key).


>
> > As far as scalability is concerned, using a direct exchange with many
> > routing keys should hopefully be no worse than many fanout exchanges with
> no
> > routing keys. If you're considering the clustering scenario, exchange
> > information is replicated to all nodes - so it isn't like there is a
> single
> > point that all messages need to go through.
>
> Good to know.  I wasn't too worried about using one direct exchange,
> but using one topic exchange seemed like a bad idea.
>

Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090814/f7819b25/attachment.htm 

From n8gray at n8gray.org  Fri Aug 14 20:41:33 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Fri, 14 Aug 2009 12:41:33 -0700
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <29598b610908141152m70f04a44g84925b261860ccc6@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
	<29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>
	<65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>
	<29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>
	<65a6e3960908141117v8551da3q2d2eb32c931c9f13@mail.gmail.com>
	<29598b610908141152m70f04a44g84925b261860ccc6@mail.gmail.com>
Message-ID: <65a6e3960908141241m5468ce6p9d55a1d37c9bdedc@mail.gmail.com>

On Fri, Aug 14, 2009 at 11:52 AM, Paul Jones<pauljones23 at gmail.com> wrote:
>
>> > Assuming that there is a known identifier for each game (database id,
>> > guid,
>> > or equivalent), what about using a single direct exchange, with the
>> > routing
>> > key being set to the game id each time. When a player connects, they
>> > subscribe to the exchange with all of the routing keys for the games
>> > that
>> > they are interested in.
>>
>> Can you subscribe one queue to one exchange with multiple keys, or is
>> the idea that each player would use one queue per game?
>
> The one queue can be bound to a single exchange with multiple routing keys;
> so each player would only need to have a single queue. Depending on how you
> access Rabbit, it might also be worth putting the routing key into the
> message body, just to make it a bit more accessible (since some apis don't
> provide the easiest access to the routing key).

Cool!  That should solve my problem.  I think I'm ready to write a bit
of code.  BTW, I'd appreciate any pointers on using the C client code
from anybody who's had experience with it.

Thanks Paul, you've been very helpful.  :)
Cheers,
-n8

-- 
http://n8gray.org



From darien at kindlund.com  Fri Aug 14 21:35:08 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Fri, 14 Aug 2009 16:35:08 -0400
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <4A835011.2060800@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com> 
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com> 
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com> 
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com> 
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com> 
	<4A835011.2060800@lshift.net>
Message-ID: <50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com>

Hi Tony & Matthias,
Just wanted to let you know that I've finished testing your patch for
issue #3 and it works perfectly... the 91+MB messages are now getting
processed and delivered properly by RabbitMQ.  Let me know when you
get #1 and #2 fixed, and I'll be happy to test those accordingly, as
well.
-- Darien

On Wed, Aug 12, 2009 at 7:28 PM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Darien Kindlund wrote:
>>> 1) attempting to deliver messages recovered from the persister via STOMP
>>> causes an error
>>> 2) STOMP client disconnects can result in huge error messages being logged
>>> 3) sending large messages via STOMP causes rabbit to die
>
> Whoops. Just number three. Sorry, I'll get on to it.
>
>



From n8gray at n8gray.org  Sat Aug 15 06:33:56 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Fri, 14 Aug 2009 22:33:56 -0700
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <65a6e3960908141241m5468ce6p9d55a1d37c9bdedc@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
	<29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>
	<65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>
	<29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>
	<65a6e3960908141117v8551da3q2d2eb32c931c9f13@mail.gmail.com>
	<29598b610908141152m70f04a44g84925b261860ccc6@mail.gmail.com>
	<65a6e3960908141241m5468ce6p9d55a1d37c9bdedc@mail.gmail.com>
Message-ID: <65a6e3960908142233s326ca1av39f05f3709e3c6cb@mail.gmail.com>

On Fri, Aug 14, 2009 at 12:41 PM, Nathan Gray<n8gray at n8gray.org> wrote:
> On Fri, Aug 14, 2009 at 11:52 AM, Paul Jones<pauljones23 at gmail.com> wrote:
>>
>> The one queue can be bound to a single exchange with multiple routing keys;
>> so each player would only need to have a single queue. Depending on how you
>> access Rabbit, it might also be worth putting the routing key into the
>> message body, just to make it a bit more accessible (since some apis don't
>> provide the easiest access to the routing key).
>
> Cool! ?That should solve my problem. ?I think I'm ready to write a bit
> of code. ?BTW, I'd appreciate any pointers on using the C client code
> from anybody who's had experience with it.

Oops, more questions.  Assume I've created a queue, bound it to an
exchange with some keys, and started a consumer on it.  If I want to
bind on yet another key do I need to cancel the consumer first, or can
I just keep issuing queue_bind at arbitrary times?

Also, is there a nicely-formatted non-xml version of amqp0-8.xml somewhere?

Thanks,
-n8
-- 
http://n8gray.org



From pauljones23 at gmail.com  Sat Aug 15 08:28:08 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Sat, 15 Aug 2009 08:28:08 +0100
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <65a6e3960908142233s326ca1av39f05f3709e3c6cb@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
	<29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>
	<65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>
	<29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>
	<65a6e3960908141117v8551da3q2d2eb32c931c9f13@mail.gmail.com>
	<29598b610908141152m70f04a44g84925b261860ccc6@mail.gmail.com>
	<65a6e3960908141241m5468ce6p9d55a1d37c9bdedc@mail.gmail.com>
	<65a6e3960908142233s326ca1av39f05f3709e3c6cb@mail.gmail.com>
Message-ID: <29598b610908150028k61d09a1cncc59e4f622404c84@mail.gmail.com>

On Sat, Aug 15, 2009 at 6:33 AM, Nathan Gray <n8gray at n8gray.org> wrote:

>
> Oops, more questions.  Assume I've created a queue, bound it to an
> exchange with some keys, and started a consumer on it.  If I want to
> bind on yet another key do I need to cancel the consumer first, or can
> I just keep issuing queue_bind at arbitrary times?
>

No, you can just bind whenever you like.


> Also, is there a nicely-formatted non-xml version of amqp0-8.xml somewhere?
>

The AMQP website has a PDF'ed version at
http://jira.amqp.org/confluence/download/attachments/720900/amqp-xml-doc0-8.pdf?version=1

Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090815/0d260422/attachment.htm 

From digitalwarfare at gmail.com  Sat Aug 15 16:56:26 2009
From: digitalwarfare at gmail.com (Suhail Doshi)
Date: Sat, 15 Aug 2009 08:56:26 -0700
Subject: [rabbitmq-discuss] Rabbitmq failing to start
Message-ID: <376f3e6f0908150856i46fda14ekfa339fe305895595@mail.gmail.com>

Anyone know why this may not let you start rabbitmq?

=INFO REPORT==== 15-Aug-2009::15:54:31 ===
    application: rabbit
    exited: {bad_return,
                {{rabbit,start,[normal,[]]},
                 {'EXIT',
                     {{badmatch,
                          {error,
                              {{{badmatch,eof},

 [{rabbit_persister,internal_load_snapshot,2},
                                 {rabbit_persister,init,1},
                                 {gen_server,init_it,6},
                                 {proc_lib,init_p_do_apply,3}]},
                               {child,undefined,rabbit_persister,
                                   {rabbit_persister,start_link,[]},
                                   transient,100,worker,
                                   [rabbit_persister]}}}},
                      [{rabbit,start_child,1},
                       {rabbit,'-start/2-fun-4-',0},
                       {rabbit,'-start/2-fun-0-',1},
                       {lists,foreach,2},
                       {rabbit,start,2},
                       {application_master,start_it_old,4}]}}}}
    type: temporary

=INFO REPORT==== 15-Aug-2009::15:54:31 ===
    application: mnesia
    exited: stopped
    type: temporary

=INFO REPORT==== 15-Aug-2009::15:54:31 ===
    application: os_mon
    exited: stopped
    type: temporary
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090815/e41c25c3/attachment.htm 

From mtodd at highgroove.com  Sat Aug 15 17:03:21 2009
From: mtodd at highgroove.com (Matt Todd)
Date: Sat, 15 Aug 2009 12:03:21 -0400
Subject: [rabbitmq-discuss] Rabbitmq failing to start
In-Reply-To: <376f3e6f0908150856i46fda14ekfa339fe305895595@mail.gmail.com>
References: <376f3e6f0908150856i46fda14ekfa339fe305895595@mail.gmail.com>
Message-ID: <2a8d4a710908150903h53a63dfep6ec935373c591fc9@mail.gmail.com>

http://www.nabble.com/Diagnosing-a-problem-td24607945.html
HTH,

Matt


On Sat, Aug 15, 2009 at 11:56 AM, Suhail Doshi <digitalwarfare at gmail.com>wrote:

> Anyone know why this may not let you start rabbitmq?
>
> =INFO REPORT==== 15-Aug-2009::15:54:31 ===
>     application: rabbit
>     exited: {bad_return,
>                 {{rabbit,start,[normal,[]]},
>                  {'EXIT',
>                      {{badmatch,
>                           {error,
>                               {{{badmatch,eof},
>
>  [{rabbit_persister,internal_load_snapshot,2},
>                                  {rabbit_persister,init,1},
>                                  {gen_server,init_it,6},
>                                  {proc_lib,init_p_do_apply,3}]},
>                                {child,undefined,rabbit_persister,
>                                    {rabbit_persister,start_link,[]},
>                                    transient,100,worker,
>                                    [rabbit_persister]}}}},
>                       [{rabbit,start_child,1},
>                        {rabbit,'-start/2-fun-4-',0},
>                        {rabbit,'-start/2-fun-0-',1},
>                        {lists,foreach,2},
>                        {rabbit,start,2},
>                        {application_master,start_it_old,4}]}}}}
>     type: temporary
>
> =INFO REPORT==== 15-Aug-2009::15:54:31 ===
>     application: mnesia
>     exited: stopped
>     type: temporary
>
> =INFO REPORT==== 15-Aug-2009::15:54:31 ===
>     application: os_mon
>     exited: stopped
>     type: temporary
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>


-- 
Matt Todd
Highgroove Studios
www.highgroove.com
cell: 404-314-2612
blog: maraby.org

Scout - Web Monitoring and Reporting Software
www.scoutapp.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090815/b60b0bf2/attachment.htm 

From n8gray at n8gray.org  Sat Aug 15 17:09:05 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Sat, 15 Aug 2009 09:09:05 -0700
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <29598b610908150028k61d09a1cncc59e4f622404c84@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
	<29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>
	<65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>
	<29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>
	<65a6e3960908141117v8551da3q2d2eb32c931c9f13@mail.gmail.com>
	<29598b610908141152m70f04a44g84925b261860ccc6@mail.gmail.com>
	<65a6e3960908141241m5468ce6p9d55a1d37c9bdedc@mail.gmail.com>
	<65a6e3960908142233s326ca1av39f05f3709e3c6cb@mail.gmail.com>
	<29598b610908150028k61d09a1cncc59e4f622404c84@mail.gmail.com>
Message-ID: <65a6e3960908150909g7ff8f256v1b352c780a8f0fbc@mail.gmail.com>

On Sat, Aug 15, 2009 at 12:28 AM, Paul Jones<pauljones23 at gmail.com> wrote:
>
> On Sat, Aug 15, 2009 at 6:33 AM, Nathan Gray <n8gray at n8gray.org> wrote:
>>
>> Oops, more questions. ?Assume I've created a queue, bound it to an
>> exchange with some keys, and started a consumer on it. ?If I want to
>> bind on yet another key do I need to cancel the consumer first, or can
>> I just keep issuing queue_bind at arbitrary times?
>
> No, you can just bind whenever you like.

Ok, good.

>> Also, is there a nicely-formatted non-xml version of amqp0-8.xml
>> somewhere?
>
> The AMQP website has a PDF'ed version at
> http://jira.amqp.org/confluence/download/attachments/720900/amqp-xml-doc0-8.pdf?version=1

That document seems to be missing most of the interesting information.
 For example here is the complete documentation for simple.get:

====
This method provides a direct access to the messages in a queue using
a synchronous dialogue that is designed for ? specific types of
application where synchronous functionality is more important than
performance.

The?Get?method?has?the?following?specific?fields:

This?is?the?Get?pseudo?structure:
====

That's it.  No description of the fields or pseudostructure.

Thanks,
-n8

-- 
http://n8gray.org



From matthias at lshift.net  Sat Aug 15 17:23:46 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Sat, 15 Aug 2009 17:23:46 +0100
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <65a6e3960908150909g7ff8f256v1b352c780a8f0fbc@mail.gmail.com>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>	<29598b610908130254v3cd9b133od7a2fa3ecde2bf7@mail.gmail.com>	<65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>	<29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>	<65a6e3960908141117v8551da3q2d2eb32c931c9f13@mail.gmail.com>	<29598b610908141152m70f04a44g84925b261860ccc6@mail.gmail.com>	<65a6e3960908141241m5468ce6p9d55a1d37c9bdedc@mail.gmail.com>	<65a6e3960908142233s326ca1av39f05f3709e3c6cb@mail.gmail.com>	<29598b610908150028k61d09a1cncc59e4f622404c84@mail.gmail.com>
	<65a6e3960908150909g7ff8f256v1b352c780a8f0fbc@mail.gmail.com>
Message-ID: <4A86E112.5080609@lshift.net>

Nathan,

Nathan Gray wrote:
> On Sat, Aug 15, 2009 at 12:28 AM, Paul Jones<pauljones23 at gmail.com> wrote:
>> On Sat, Aug 15, 2009 at 6:33 AM, Nathan Gray <n8gray at n8gray.org> wrote:
>>> Also, is there a nicely-formatted non-xml version of amqp0-8.xml
>>> somewhere?
>> The AMQP website has a PDF'ed version at
>> http://jira.amqp.org/confluence/download/attachments/720900/amqp-xml-doc0-8.pdf?version=1
> 
> That document seems to be missing most of the interesting information.

Try the 0-9-1 version instead:

http://jira.amqp.org/confluence/download/attachments/720900/amqp-xml-doc0-9-1.pdf

That, together with the 0-9-1 spec at

http://jira.amqp.org/confluence/download/attachments/720900/amqp0-9-1.pdf

is more readable than the 0-8 version. There are of course differences 
between 0-8 and 0-9-1, but the two version are very close indeed.


Regards,

Matthias.



From digitalwarfare at gmail.com  Sat Aug 15 17:39:04 2009
From: digitalwarfare at gmail.com (Suhail Doshi)
Date: Sat, 15 Aug 2009 09:39:04 -0700
Subject: [rabbitmq-discuss] Rabbitmq failing to start
In-Reply-To: <2a8d4a710908150903h53a63dfep6ec935373c591fc9@mail.gmail.com>
References: <376f3e6f0908150856i46fda14ekfa339fe305895595@mail.gmail.com> 
	<2a8d4a710908150903h53a63dfep6ec935373c591fc9@mail.gmail.com>
Message-ID: <376f3e6f0908150939x7f0affa7re4878321ae7dd13c@mail.gmail.com>

I moved the corrupted persister somewhere and then restarted rabbitmq but
all the messages seemed to have disappeared, any idea if i can recover them
or where they might be? Seems odd they all go poof just by moving a
corrupted persistor.
suhail

On Sat, Aug 15, 2009 at 9:03 AM, Matt Todd <mtodd at highgroove.com> wrote:

> http://www.nabble.com/Diagnosing-a-problem-td24607945.html
> HTH,
>
> Matt
>
>
> On Sat, Aug 15, 2009 at 11:56 AM, Suhail Doshi <digitalwarfare at gmail.com>wrote:
>
>>  Anyone know why this may not let you start rabbitmq?
>>
>> =INFO REPORT==== 15-Aug-2009::15:54:31 ===
>>     application: rabbit
>>     exited: {bad_return,
>>                 {{rabbit,start,[normal,[]]},
>>                  {'EXIT',
>>                      {{badmatch,
>>                           {error,
>>                               {{{badmatch,eof},
>>
>>  [{rabbit_persister,internal_load_snapshot,2},
>>                                  {rabbit_persister,init,1},
>>                                  {gen_server,init_it,6},
>>                                  {proc_lib,init_p_do_apply,3}]},
>>                                {child,undefined,rabbit_persister,
>>                                    {rabbit_persister,start_link,[]},
>>                                    transient,100,worker,
>>                                    [rabbit_persister]}}}},
>>                       [{rabbit,start_child,1},
>>                        {rabbit,'-start/2-fun-4-',0},
>>                        {rabbit,'-start/2-fun-0-',1},
>>                        {lists,foreach,2},
>>                        {rabbit,start,2},
>>                        {application_master,start_it_old,4}]}}}}
>>     type: temporary
>>
>> =INFO REPORT==== 15-Aug-2009::15:54:31 ===
>>     application: mnesia
>>     exited: stopped
>>     type: temporary
>>
>> =INFO REPORT==== 15-Aug-2009::15:54:31 ===
>>     application: os_mon
>>     exited: stopped
>>     type: temporary
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
>>
>
>
> --
> Matt Todd
> Highgroove Studios
> www.highgroove.com
> cell: 404-314-2612
> blog: maraby.org
>
> Scout - Web Monitoring and Reporting Software
> www.scoutapp.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090815/3191c980/attachment.htm 

From digitalwarfare at gmail.com  Sat Aug 15 17:44:51 2009
From: digitalwarfare at gmail.com (Suhail Doshi)
Date: Sat, 15 Aug 2009 09:44:51 -0700
Subject: [rabbitmq-discuss] Rabbitmq failing to start
In-Reply-To: <376f3e6f0908150939x7f0affa7re4878321ae7dd13c@mail.gmail.com>
References: <376f3e6f0908150856i46fda14ekfa339fe305895595@mail.gmail.com> 
	<2a8d4a710908150903h53a63dfep6ec935373c591fc9@mail.gmail.com> 
	<376f3e6f0908150939x7f0affa7re4878321ae7dd13c@mail.gmail.com>
Message-ID: <376f3e6f0908150944j165b5f14hd21570c56d777ec5@mail.gmail.com>

also is there any reason why rabbitmq would consume 98% mem when the queue
gets very large? I thought this was all written to disk, seems like it's all
sitting in memory even when durable/persistent
suhail

On Sat, Aug 15, 2009 at 9:39 AM, Suhail Doshi <digitalwarfare at gmail.com>wrote:

> I moved the corrupted persister somewhere and then restarted rabbitmq but
> all the messages seemed to have disappeared, any idea if i can recover them
> or where they might be? Seems odd they all go poof just by moving a
> corrupted persistor.
> suhail
>
>
> On Sat, Aug 15, 2009 at 9:03 AM, Matt Todd <mtodd at highgroove.com> wrote:
>
>> http://www.nabble.com/Diagnosing-a-problem-td24607945.html
>> HTH,
>>
>> Matt
>>
>>
>> On Sat, Aug 15, 2009 at 11:56 AM, Suhail Doshi <digitalwarfare at gmail.com>wrote:
>>
>>>  Anyone know why this may not let you start rabbitmq?
>>>
>>> =INFO REPORT==== 15-Aug-2009::15:54:31 ===
>>>     application: rabbit
>>>     exited: {bad_return,
>>>                 {{rabbit,start,[normal,[]]},
>>>                  {'EXIT',
>>>                      {{badmatch,
>>>                           {error,
>>>                               {{{badmatch,eof},
>>>
>>>  [{rabbit_persister,internal_load_snapshot,2},
>>>                                  {rabbit_persister,init,1},
>>>                                  {gen_server,init_it,6},
>>>                                  {proc_lib,init_p_do_apply,3}]},
>>>                                {child,undefined,rabbit_persister,
>>>                                    {rabbit_persister,start_link,[]},
>>>                                    transient,100,worker,
>>>                                    [rabbit_persister]}}}},
>>>                       [{rabbit,start_child,1},
>>>                        {rabbit,'-start/2-fun-4-',0},
>>>                        {rabbit,'-start/2-fun-0-',1},
>>>                        {lists,foreach,2},
>>>                        {rabbit,start,2},
>>>                        {application_master,start_it_old,4}]}}}}
>>>     type: temporary
>>>
>>> =INFO REPORT==== 15-Aug-2009::15:54:31 ===
>>>     application: mnesia
>>>     exited: stopped
>>>     type: temporary
>>>
>>> =INFO REPORT==== 15-Aug-2009::15:54:31 ===
>>>     application: os_mon
>>>     exited: stopped
>>>     type: temporary
>>>
>>> _______________________________________________
>>> rabbitmq-discuss mailing list
>>> rabbitmq-discuss at lists.rabbitmq.com
>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>
>>>
>>
>>
>> --
>> Matt Todd
>> Highgroove Studios
>> www.highgroove.com
>> cell: 404-314-2612
>> blog: maraby.org
>>
>> Scout - Web Monitoring and Reporting Software
>> www.scoutapp.com
>>
>
>


-- 
http://mixpanel.com
Blog: http://blog.mixpanel.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090815/b7989f9d/attachment.htm 

From bp at barryp.org  Sat Aug 15 17:51:47 2009
From: bp at barryp.org (Barry Pederson)
Date: Sat, 15 Aug 2009 11:51:47 -0500
Subject: [rabbitmq-discuss] Python library (py-amqplib)
In-Reply-To: <3bb0d9710908060252t7a20e5b4i36b972a222915e5e@mail.gmail.com>
References: <ce2570e20908051108o3382ed2ke23e9fdd28bd2045@mail.gmail.com>
	<3bb0d9710908060252t7a20e5b4i36b972a222915e5e@mail.gmail.com>
Message-ID: <4A86E7A3.2040309@barryp.org>

majek04 wrote:
> On Wed, Aug 5, 2009 at 19:08, Garrett Smith<g at rre.tt> wrote:
>> I've got some feedback (purely constructive :) I'd like to provide the
>> author of py-amqplib, but I can't locate an appropriate list/forum.
>>
>> Does feedback for that library belong here? Else, any suggestions?
> 
> The author of py-amqplib is Barry Pederson, you can find his email at the
> bottom of the page:
> http://barryp.org/software/py-amqplib/
> 
> He used to read this list, but we haven't heard anything from him
> during last few months.

I'm sorry I've been AWOL on this over the summer and before - been doing 
some traveling and lots of non-AMQP work.

There seem to be quite a few messages about py-amqplib in my mail 
folder, especially in the last week or so, with questions, patches and 
issues.  To get a better handle on this and get access to an issue 
tracker, I've created a Google Code project at

     http://code.google.com/p/py-amqplib/

and uploaded the mercurial repository.

Thanks for your patience, I'm going to take a stab and responding to 
individual messages this weekend.

	Barry







From matthias at lshift.net  Sun Aug 16 10:17:07 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Sun, 16 Aug 2009 10:17:07 +0100
Subject: [rabbitmq-discuss] Rabbitmq failing to start
In-Reply-To: <376f3e6f0908150939x7f0affa7re4878321ae7dd13c@mail.gmail.com>
References: <376f3e6f0908150856i46fda14ekfa339fe305895595@mail.gmail.com>
	<2a8d4a710908150903h53a63dfep6ec935373c591fc9@mail.gmail.com>
	<376f3e6f0908150939x7f0affa7re4878321ae7dd13c@mail.gmail.com>
Message-ID: <4A87CE93.6040605@lshift.net>

Suhail,

Suhail Doshi wrote:
> I moved the corrupted persister somewhere and then restarted rabbitmq
>  but all the messages seemed to have disappeared, any idea if i can 
> recover them or where they might be?

As mentioned in the thread that Matt referenced, if there is a 
rabbit_persister.LOG.previous file in the same dir then replacing the 
corrupted file with the .previous file would probably allow you to 
recover the messages.

Unfortunately, if there was a .previous file but you didn't rename it /
move it out of the way before restarting rabbit then it will have been
overwritten by now.

> also is there any reason why rabbitmq would consume 98% mem when the
> queue gets very large? I thought this was all written to disk, seems
> like it's all sitting in memory even when durable/persistent

The current persister keeps all messages in RAM as well as on disk. That 
limitation has been discussed on the list on numerous occasions and will 
be addressed by the new persister in the next RabbitMQ release.


Regards,

Matthias.



From esteve at fluidinfo.com  Sun Aug 16 18:33:20 2009
From: esteve at fluidinfo.com (Esteve Fernandez)
Date: Sun, 16 Aug 2009 19:33:20 +0200
Subject: [rabbitmq-discuss] txAMQP 0.3 released, better late than never
Message-ID: <200908161933.20398.esteve@fluidinfo.com>

Hi all,

with great joy and a little sweat, we're happy to announce txAMQP 0.3 
(https://launchpad.net/txamqp), a Python library for communicating with AMQP 
peers and brokers using Twisted.

This marks an important milestone, as it's the first release made with the 
help of two new committers not directly involved with Fluidinfo 
(http://fluidinfo.com): Dan Di Spaltro from Cloudkick 
(https://www.cloudkick.com) and Thomas Herv? from Canonical 
(http://www.canonical.com)

On the technical side, this release includes important features such as
heartbeat frames (contributed by Anthony Lenton), support for setuptools
(contributed by Zooko Wilcox-O'Hearn), support for basic_return, and improved
support for Thrift - among many other features and fixes.

As a side note, patching Thrift (http://incubator.apache.org/thrift/) is no
longer needed, as support for Twisted is now integrated in the official Thrift
distribution.

BTW, if you're curious to see what we wrote txAMQP to support, watch the 
Fluidinfo home page for the alpha launch of FluidDB on Monday :-)




From paul at pauldix.net  Mon Aug 17 14:07:50 2009
From: paul at pauldix.net (Paul Dix)
Date: Mon, 17 Aug 2009 09:07:50 -0400
Subject: [rabbitmq-discuss] questions about distributed queue
Message-ID: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>

Hey all,
I'm new to RabbitMQ and am evaluating it for my needs. One thing that
has me concerned is the lack of a distributed queue. They reside on a
single node. For me this represents a problem in terms of scalability
and throughput. Having a queue on only one node means it's a single
point of failure. Also, queues aren't scalable beyond a single
machine. Once you've hit the limit of a queue on a single box you're
stuck.

I've heard that there are workable solutions to these problems, but I
wasn't able to dig up anything that made sense. Also, it's noted in
the FAQ and a few discussions that work is being done on distributed
queues. How close is this?

Thanks,
Paul



From tonyg at lshift.net  Mon Aug 17 14:32:00 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Mon, 17 Aug 2009 14:32:00 +0100
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
Message-ID: <4A895BD0.6000005@lshift.net>

Hi Paul,

Paul Dix wrote:
> I've heard that there are workable solutions to these problems, but I
> wasn't able to dig up anything that made sense. Also, it's noted in
> the FAQ and a few discussions that work is being done on distributed
> queues. How close is this?

The main solution is to separate the problem into two pieces: service
availability and data availability. Then, for data availability (i.e.
effectively replicating the contents of queues) use normal
high-availability network file systems to share the data directories
between nodes. For service availability, Linux-HA or similar can handle
failover and locking.

 - the network filesystem ensures the data is replicated appropriately

 - Linux-HA takes care of locking

 - Linux-HA takes care of starting the standby service when the
   primary goes down

This assumes that you can deal with a nonzero (but arbitrarily small)
failover window. If you absolutely must have 100% uptime (!) then there
are a bunch of other solutions that can be explored, involving redundant
data-paths, replication of message streams, and deduplication at the
client. We find that very few applications really need this.

We do have some plans for simplifying that "100%" uptime solution and
embedding it into the server without need for as much client-side
support, but we're concentrating right now on the new scalable persister
QA. We're likely to address issues of HA once that's done.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From paul at pauldix.net  Mon Aug 17 15:06:28 2009
From: paul at pauldix.net (Paul Dix)
Date: Mon, 17 Aug 2009 10:06:28 -0400
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <4A895BD0.6000005@lshift.net>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
Message-ID: <c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>

I guess Linux-HA takes care of the failover requirement. The 1s or
more of downtime isn't really a big concern for me. The truth is that
my bigger concern is scalability. I'm glad to hear that it's what your
priority is right now. Do you have a roadmap for when a scalable queue
will be available?

Just to give you a little more information on what I'm doing, I'm
building a live search/aggregation system. I'm hoping to push updates
of a constant internet crawl through the messaging system so workers
can analyze the content and build indexes as everything comes in.
That's why 1s or so of downtime isn't that big of a concern while
scalability is.

Thanks,
Paul

On Mon, Aug 17, 2009 at 9:32 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Hi Paul,
>
> Paul Dix wrote:
>> I've heard that there are workable solutions to these problems, but I
>> wasn't able to dig up anything that made sense. Also, it's noted in
>> the FAQ and a few discussions that work is being done on distributed
>> queues. How close is this?
>
> The main solution is to separate the problem into two pieces: service
> availability and data availability. Then, for data availability (i.e.
> effectively replicating the contents of queues) use normal
> high-availability network file systems to share the data directories
> between nodes. For service availability, Linux-HA or similar can handle
> failover and locking.
>
> ?- the network filesystem ensures the data is replicated appropriately
>
> ?- Linux-HA takes care of locking
>
> ?- Linux-HA takes care of starting the standby service when the
> ? primary goes down
>
> This assumes that you can deal with a nonzero (but arbitrarily small)
> failover window. If you absolutely must have 100% uptime (!) then there
> are a bunch of other solutions that can be explored, involving redundant
> data-paths, replication of message streams, and deduplication at the
> client. We find that very few applications really need this.
>
> We do have some plans for simplifying that "100%" uptime solution and
> embedding it into the server without need for as much client-side
> support, but we're concentrating right now on the new scalable persister
> QA. We're likely to address issues of HA once that's done.
>
> Regards,
> ?Tony
> --
> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>



From pekenney at gmail.com  Mon Aug 17 15:16:16 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Mon, 17 Aug 2009 07:16:16 -0700
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
	message too long error... (RabbitMq.Net)
In-Reply-To: <4A8562DC.4050303@lshift.net>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>
	<4A844740.7060606@lshift.net>
	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>
	<4A847F3B.1080103@lshift.net>
	<3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>
	<4A8485E3.7050501@lshift.net>
	<3a5f03340908131449y3f13a8cehb5199f2420317ee2@mail.gmail.com>
	<4A848DD9.4070905@lshift.net>
	<3a5f03340908131707i7ab968fewe6dd121500b26f79@mail.gmail.com>
	<4A8562DC.4050303@lshift.net>
Message-ID: <3a5f03340908170716v3c5484d4i478e69a33959f5f5@mail.gmail.com>

so going to the api instead of using wcf does not repeat the errors...

i can not repeat the errors in a console app that does not use wcf...

there is no difference in the results when i use wcf in a console app or a
winform app

next steps?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090817/b3f7d9ea/attachment.htm 

From alexis.richardson at gmail.com  Mon Aug 17 15:23:48 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Mon, 17 Aug 2009 15:23:48 +0100
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
Message-ID: <167204d20908170723g17c6e769g4190c48c36604085@mail.gmail.com>

Paul

Can you explain what your scalability metric is please?

If you mean 'able to be more available' then RabbitMQ has been able to
cluster for some time.  Want more capacity?  Add more nodes.

If you mean the slow consumer problem, i.e. you have N queues, don't
want to add more, and don't want to buy more boxes, then the 'page to
disk' feature is currently in QA for RabbitMQ 1.7 which is due quite
soon.

alexis


On Mon, Aug 17, 2009 at 3:06 PM, Paul Dix<paul at pauldix.net> wrote:
> I guess Linux-HA takes care of the failover requirement. The 1s or
> more of downtime isn't really a big concern for me. The truth is that
> my bigger concern is scalability. I'm glad to hear that it's what your
> priority is right now. Do you have a roadmap for when a scalable queue
> will be available?
>
> Just to give you a little more information on what I'm doing, I'm
> building a live search/aggregation system. I'm hoping to push updates
> of a constant internet crawl through the messaging system so workers
> can analyze the content and build indexes as everything comes in.
> That's why 1s or so of downtime isn't that big of a concern while
> scalability is.
>
> Thanks,
> Paul
>
> On Mon, Aug 17, 2009 at 9:32 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>> Hi Paul,
>>
>> Paul Dix wrote:
>>> I've heard that there are workable solutions to these problems, but I
>>> wasn't able to dig up anything that made sense. Also, it's noted in
>>> the FAQ and a few discussions that work is being done on distributed
>>> queues. How close is this?
>>
>> The main solution is to separate the problem into two pieces: service
>> availability and data availability. Then, for data availability (i.e.
>> effectively replicating the contents of queues) use normal
>> high-availability network file systems to share the data directories
>> between nodes. For service availability, Linux-HA or similar can handle
>> failover and locking.
>>
>> ?- the network filesystem ensures the data is replicated appropriately
>>
>> ?- Linux-HA takes care of locking
>>
>> ?- Linux-HA takes care of starting the standby service when the
>> ? primary goes down
>>
>> This assumes that you can deal with a nonzero (but arbitrarily small)
>> failover window. If you absolutely must have 100% uptime (!) then there
>> are a bunch of other solutions that can be explored, involving redundant
>> data-paths, replication of message streams, and deduplication at the
>> client. We find that very few applications really need this.
>>
>> We do have some plans for simplifying that "100%" uptime solution and
>> embedding it into the server without need for as much client-side
>> support, but we're concentrating right now on the new scalable persister
>> QA. We're likely to address issues of HA once that's done.
>>
>> Regards,
>> ?Tony
>> --
>> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>



From tonyg at lshift.net  Mon Aug 17 15:24:18 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Mon, 17 Aug 2009 15:24:18 +0100
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>	
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
Message-ID: <4A896812.9030802@lshift.net>

Paul Dix wrote:
> Do you have a roadmap for when a scalable queue
> will be available?

If by "scalable" you mean "replicated", then that's available now, by
configuration along the lines I hinted at in my previous message. Adding
clustering into the mix can help increase capacity, on top of that (at a
certain cost in configuration complexity).

If instead you mean "exceeding RAM+swap size", we're hoping to have that
for the 1.7 release -- which ought to be out within a month or so.

> Just to give you a little more information on what I'm doing, I'm
> building a live search/aggregation system. I'm hoping to push updates
> of a constant internet crawl through the messaging system so workers
> can analyze the content and build indexes as everything comes in.

Sounds pretty cool!

Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From paul at pauldix.net  Mon Aug 17 15:34:53 2009
From: paul at pauldix.net (Paul Dix)
Date: Mon, 17 Aug 2009 10:34:53 -0400
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <4A896812.9030802@lshift.net>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
Message-ID: <c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>

Sorry for the confusion. I mean scalability on a single queue. Say I
want to push 20k messages per second through a single queue. If a
single node can't handle that it seems I'm out of luck. That is, if
I'm understanding how things work.

So I guess I'm not worried about total queue size, but queue
throughput (although size may become an issue, I'm not sure). It seems
the solution is to split out across multiple queues, but I was hoping
to avoid that since it will add a layer of complexity to my producers
and consumers.

I don't think I understand how using Linux-HA with clustering would
lead to a splitting a single queue across multiple nodes. I'm not
familiar with HA, but it looked like it was a solution to provide a
replicated failover.

Thanks again,
Paul

On Mon, Aug 17, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Paul Dix wrote:
>> Do you have a roadmap for when a scalable queue
>> will be available?
>
> If by "scalable" you mean "replicated", then that's available now, by
> configuration along the lines I hinted at in my previous message. Adding
> clustering into the mix can help increase capacity, on top of that (at a
> certain cost in configuration complexity).
>
> If instead you mean "exceeding RAM+swap size", we're hoping to have that
> for the 1.7 release -- which ought to be out within a month or so.
>
>> Just to give you a little more information on what I'm doing, I'm
>> building a live search/aggregation system. I'm hoping to push updates
>> of a constant internet crawl through the messaging system so workers
>> can analyze the content and build indexes as everything comes in.
>
> Sounds pretty cool!
>
> Tony
> --
> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>



From alexis.richardson at gmail.com  Mon Aug 17 15:55:16 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Mon, 17 Aug 2009 15:55:16 +0100
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
Message-ID: <167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>

Paul

On Mon, Aug 17, 2009 at 3:34 PM, Paul Dix<paul at pauldix.net> wrote:
> Sorry for the confusion. I mean scalability on a single queue. Say I
> want to push 20k messages per second through a single queue. If a
> single node can't handle that it seems I'm out of luck. That is, if
> I'm understanding how things work.

You can in principle just add more nodes to the cluster.  More details below.




> So I guess I'm not worried about total queue size, but queue
> throughput (although size may become an issue, I'm not sure). It seems
> the solution is to split out across multiple queues, but I was hoping
> to avoid that since it will add a layer of complexity to my producers
> and consumers.

1. To maximise throughput, don't use persistence.  To make it bigger,
forget about ordering.  So for example, you can easily have two
queues, one per node, subscribed to the same direct exchange with the
same key, and you ought to double throughput (assuming all other
things being equal and fair).

2. If you want to be both fast and 'reliable' (no loss of acked
messages), then add more queues and make them durable, and set
messages to be persistent.

3. If you want to preserve ordering, label each message with an ID and
dedup at the endpoints.  This does as you say, add some small noise to
your producers and consumers, but the above two options 1 and 2, do
not.


> I don't think I understand how using Linux-HA with clustering would
> lead to a splitting a single queue across multiple nodes. I'm not
> familiar with HA, but it looked like it was a solution to provide a
> replicated failover.

You are right that HA techniques, indeed any kind of queue replication
or replicated failover, will not help you here.

What you want is 'flow over' ie. "when load is high, make a new node
with the same routing info".  This is certainly doable.

alexis






> Thanks again,
> Paul
>
> On Mon, Aug 17, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>> Paul Dix wrote:
>>> Do you have a roadmap for when a scalable queue
>>> will be available?
>>
>> If by "scalable" you mean "replicated", then that's available now, by
>> configuration along the lines I hinted at in my previous message. Adding
>> clustering into the mix can help increase capacity, on top of that (at a
>> certain cost in configuration complexity).
>>
>> If instead you mean "exceeding RAM+swap size", we're hoping to have that
>> for the 1.7 release -- which ought to be out within a month or so.
>>
>>> Just to give you a little more information on what I'm doing, I'm
>>> building a live search/aggregation system. I'm hoping to push updates
>>> of a constant internet crawl through the messaging system so workers
>>> can analyze the content and build indexes as everything comes in.
>>
>> Sounds pretty cool!
>>
>> Tony
>> --
>> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>



From tonyg at lshift.net  Mon Aug 17 15:59:15 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Mon, 17 Aug 2009 15:59:15 +0100
Subject: [rabbitmq-discuss] STOMP recovery issue fixed (was Re: Weird Crash
 (91MB message over STOMP) [Reproducible])
In-Reply-To: <50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com>
	<4A835011.2060800@lshift.net>
	<50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com>
Message-ID: <4A897043.3060404@lshift.net>

Hi Darien,

Darien Kindlund wrote:
>>>> 1) attempting to deliver messages recovered from the persister via STOMP
>>>> causes an error

To try the fix for this, update your rabbitmq-stomp checkout to branch
bug21366. It's going through QA now and should land in default soon, if
there are no problems with it.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Mon Aug 17 17:01:03 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Mon, 17 Aug 2009 17:01:03 +0100
Subject: [rabbitmq-discuss] STOMP error messages saner (was Re: Weird Crash
 (91MB message over STOMP) [Reproducible])
In-Reply-To: <50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<50c8ffe90908080129u64c7f775rd52d5283ba3a5ade@mail.gmail.com>
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com>
	<4A835011.2060800@lshift.net>
	<50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com>
Message-ID: <4A897EBF.7010701@lshift.net>

Hi again,

Darien Kindlund wrote:
>>>> 2) STOMP client disconnects can result in huge error messages being logged

This is ready, too, now: the branch is bug21365 of rabbitmq-stomp.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From darien at kindlund.com  Mon Aug 17 17:08:02 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Mon, 17 Aug 2009 12:08:02 -0400
Subject: [rabbitmq-discuss] STOMP error messages saner (was Re: Weird
	Crash (91MB message over STOMP) [Reproducible])
In-Reply-To: <4A897EBF.7010701@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com> 
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com> 
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com> 
	<4A835011.2060800@lshift.net>
	<50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com> 
	<4A897EBF.7010701@lshift.net>
Message-ID: <50c8ffe90908170908x36a262b2na29102bf08a13201@mail.gmail.com>

Great!  Let me know when the changes hit the default.
Thanks,
-- Darien

On Mon, Aug 17, 2009 at 12:01 PM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Hi again,
>
> Darien Kindlund wrote:
>>>>> 2) STOMP client disconnects can result in huge error messages being logged
>
> This is ready, too, now: the branch is bug21365 of rabbitmq-stomp.
>
> Regards,
> ?Tony
> --
> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>



From paul at pauldix.net  Mon Aug 17 17:22:12 2009
From: paul at pauldix.net (Paul Dix)
Date: Mon, 17 Aug 2009 12:22:12 -0400
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
Message-ID: <c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>

So what exactly does option 1 look like?

It sounds like it's possible to have a queue with the same id on two
different nodes bound to the same exchange. Will the exchange will
then round robin the messages to the two different queues? If so,
that's exactly what I'm looking for. I don't really care about order
on this queue.

Thanks,
Paul

On Mon, Aug 17, 2009 at 10:55 AM, Alexis
Richardson<alexis.richardson at gmail.com> wrote:
> Paul
>
> On Mon, Aug 17, 2009 at 3:34 PM, Paul Dix<paul at pauldix.net> wrote:
>> Sorry for the confusion. I mean scalability on a single queue. Say I
>> want to push 20k messages per second through a single queue. If a
>> single node can't handle that it seems I'm out of luck. That is, if
>> I'm understanding how things work.
>
> You can in principle just add more nodes to the cluster. ?More details below.
>
>
>
>
>> So I guess I'm not worried about total queue size, but queue
>> throughput (although size may become an issue, I'm not sure). It seems
>> the solution is to split out across multiple queues, but I was hoping
>> to avoid that since it will add a layer of complexity to my producers
>> and consumers.
>
> 1. To maximise throughput, don't use persistence. ?To make it bigger,
> forget about ordering. ?So for example, you can easily have two
> queues, one per node, subscribed to the same direct exchange with the
> same key, and you ought to double throughput (assuming all other
> things being equal and fair).
>
> 2. If you want to be both fast and 'reliable' (no loss of acked
> messages), then add more queues and make them durable, and set
> messages to be persistent.
>
> 3. If you want to preserve ordering, label each message with an ID and
> dedup at the endpoints. ?This does as you say, add some small noise to
> your producers and consumers, but the above two options 1 and 2, do
> not.
>
>
>> I don't think I understand how using Linux-HA with clustering would
>> lead to a splitting a single queue across multiple nodes. I'm not
>> familiar with HA, but it looked like it was a solution to provide a
>> replicated failover.
>
> You are right that HA techniques, indeed any kind of queue replication
> or replicated failover, will not help you here.
>
> What you want is 'flow over' ie. "when load is high, make a new node
> with the same routing info". ?This is certainly doable.
>
> alexis
>
>
>
>
>
>
>> Thanks again,
>> Paul
>>
>> On Mon, Aug 17, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>>> Paul Dix wrote:
>>>> Do you have a roadmap for when a scalable queue
>>>> will be available?
>>>
>>> If by "scalable" you mean "replicated", then that's available now, by
>>> configuration along the lines I hinted at in my previous message. Adding
>>> clustering into the mix can help increase capacity, on top of that (at a
>>> certain cost in configuration complexity).
>>>
>>> If instead you mean "exceeding RAM+swap size", we're hoping to have that
>>> for the 1.7 release -- which ought to be out within a month or so.
>>>
>>>> Just to give you a little more information on what I'm doing, I'm
>>>> building a live search/aggregation system. I'm hoping to push updates
>>>> of a constant internet crawl through the messaging system so workers
>>>> can analyze the content and build indexes as everything comes in.
>>>
>>> Sounds pretty cool!
>>>
>>> Tony
>>> --
>>> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>>> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>>> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>>>
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
>



From alexis.richardson at gmail.com  Mon Aug 17 19:32:44 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Mon, 17 Aug 2009 19:32:44 +0100
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
Message-ID: <167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>

On Mon, Aug 17, 2009 at 5:22 PM, Paul Dix<paul at pauldix.net> wrote:
> So what exactly does option 1 look like?
>
> It sounds like it's possible to have a queue with the same id on two
> different nodes bound to the same exchange.

Not quite.  Same routing - two queues, two ids.  Actually now that I
think about it that won't give you exactly what you need.  More below.


> Will the exchange will
> then round robin the messages to the two different queues? If so,
> that's exactly what I'm looking for. I don't really care about order
> on this queue.

No it won't and that's why my suggestion was wrong.

Round robin does occur when you have two consumers (clients) connected
to one queue.  This WILL help you by draining the queue faster, if
memory is a limitation.

If total ingress is the limitation you can increase that by splitting
the flow.  Suppose you start with one queue bound once to one exchange
with key "flow1".  Then all messages with routing key flow1 will go to
that queue.  When load is heavy, add a queue with key "flow2", on a
second node.  Then, alternate (if you prefer, randomly) between
routing keys flow1 and flow2.  This will spread the load as you
require.  And so on, for more queues.

You can make this part of a load balancing layer on the server side,
so that clients don't have to be coded too much.

Is this along the lines of what you need?  Let me know, and I can elaborate.

alexis




> Thanks,
> Paul
>
> On Mon, Aug 17, 2009 at 10:55 AM, Alexis
> Richardson<alexis.richardson at gmail.com> wrote:
>> Paul
>>
>> On Mon, Aug 17, 2009 at 3:34 PM, Paul Dix<paul at pauldix.net> wrote:
>>> Sorry for the confusion. I mean scalability on a single queue. Say I
>>> want to push 20k messages per second through a single queue. If a
>>> single node can't handle that it seems I'm out of luck. That is, if
>>> I'm understanding how things work.
>>
>> You can in principle just add more nodes to the cluster. ?More details below.
>>
>>
>>
>>
>>> So I guess I'm not worried about total queue size, but queue
>>> throughput (although size may become an issue, I'm not sure). It seems
>>> the solution is to split out across multiple queues, but I was hoping
>>> to avoid that since it will add a layer of complexity to my producers
>>> and consumers.
>>
>> 1. To maximise throughput, don't use persistence. ?To make it bigger,
>> forget about ordering. ?So for example, you can easily have two
>> queues, one per node, subscribed to the same direct exchange with the
>> same key, and you ought to double throughput (assuming all other
>> things being equal and fair).
>>
>> 2. If you want to be both fast and 'reliable' (no loss of acked
>> messages), then add more queues and make them durable, and set
>> messages to be persistent.
>>
>> 3. If you want to preserve ordering, label each message with an ID and
>> dedup at the endpoints. ?This does as you say, add some small noise to
>> your producers and consumers, but the above two options 1 and 2, do
>> not.
>>
>>
>>> I don't think I understand how using Linux-HA with clustering would
>>> lead to a splitting a single queue across multiple nodes. I'm not
>>> familiar with HA, but it looked like it was a solution to provide a
>>> replicated failover.
>>
>> You are right that HA techniques, indeed any kind of queue replication
>> or replicated failover, will not help you here.
>>
>> What you want is 'flow over' ie. "when load is high, make a new node
>> with the same routing info". ?This is certainly doable.
>>
>> alexis
>>
>>
>>
>>
>>
>>
>>> Thanks again,
>>> Paul
>>>
>>> On Mon, Aug 17, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>>>> Paul Dix wrote:
>>>>> Do you have a roadmap for when a scalable queue
>>>>> will be available?
>>>>
>>>> If by "scalable" you mean "replicated", then that's available now, by
>>>> configuration along the lines I hinted at in my previous message. Adding
>>>> clustering into the mix can help increase capacity, on top of that (at a
>>>> certain cost in configuration complexity).
>>>>
>>>> If instead you mean "exceeding RAM+swap size", we're hoping to have that
>>>> for the 1.7 release -- which ought to be out within a month or so.
>>>>
>>>>> Just to give you a little more information on what I'm doing, I'm
>>>>> building a live search/aggregation system. I'm hoping to push updates
>>>>> of a constant internet crawl through the messaging system so workers
>>>>> can analyze the content and build indexes as everything comes in.
>>>>
>>>> Sounds pretty cool!
>>>>
>>>> Tony
>>>> --
>>>> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>>>> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>>>> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>>>>
>>>
>>> _______________________________________________
>>> rabbitmq-discuss mailing list
>>> rabbitmq-discuss at lists.rabbitmq.com
>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>
>>
>



From paul at pauldix.net  Mon Aug 17 20:36:03 2009
From: paul at pauldix.net (Paul Dix)
Date: Mon, 17 Aug 2009 15:36:03 -0400
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
	<167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
Message-ID: <c0a615890908171236v4cb52ec8xcf0fde56a854966c@mail.gmail.com>

Yeah, that's what I'm talking about. There will probably be upwards of
a few hundred producers and a few hundred consumers. The total ingress
is definitely what I'm most worried about right now. Later, memory may
be a concern, but hopefully the consumers are pulling so quickly that
the queue never gets extremely large.

Can you give me more specific details (or a pointer) to how the flow1,
flow2 thing work (both producer and consumer side)?

Thanks,
Paul

On Mon, Aug 17, 2009 at 2:32 PM, Alexis
Richardson<alexis.richardson at gmail.com> wrote:
> On Mon, Aug 17, 2009 at 5:22 PM, Paul Dix<paul at pauldix.net> wrote:
>> So what exactly does option 1 look like?
>>
>> It sounds like it's possible to have a queue with the same id on two
>> different nodes bound to the same exchange.
>
> Not quite. ?Same routing - two queues, two ids. ?Actually now that I
> think about it that won't give you exactly what you need. ?More below.
>
>
>> Will the exchange will
>> then round robin the messages to the two different queues? If so,
>> that's exactly what I'm looking for. I don't really care about order
>> on this queue.
>
> No it won't and that's why my suggestion was wrong.
>
> Round robin does occur when you have two consumers (clients) connected
> to one queue. ?This WILL help you by draining the queue faster, if
> memory is a limitation.
>
> If total ingress is the limitation you can increase that by splitting
> the flow. ?Suppose you start with one queue bound once to one exchange
> with key "flow1". ?Then all messages with routing key flow1 will go to
> that queue. ?When load is heavy, add a queue with key "flow2", on a
> second node. ?Then, alternate (if you prefer, randomly) between
> routing keys flow1 and flow2. ?This will spread the load as you
> require. ?And so on, for more queues.
>
> You can make this part of a load balancing layer on the server side,
> so that clients don't have to be coded too much.
>
> Is this along the lines of what you need? ?Let me know, and I can elaborate.
>
> alexis
>
>
>
>
>> Thanks,
>> Paul
>>
>> On Mon, Aug 17, 2009 at 10:55 AM, Alexis
>> Richardson<alexis.richardson at gmail.com> wrote:
>>> Paul
>>>
>>> On Mon, Aug 17, 2009 at 3:34 PM, Paul Dix<paul at pauldix.net> wrote:
>>>> Sorry for the confusion. I mean scalability on a single queue. Say I
>>>> want to push 20k messages per second through a single queue. If a
>>>> single node can't handle that it seems I'm out of luck. That is, if
>>>> I'm understanding how things work.
>>>
>>> You can in principle just add more nodes to the cluster. ?More details below.
>>>
>>>
>>>
>>>
>>>> So I guess I'm not worried about total queue size, but queue
>>>> throughput (although size may become an issue, I'm not sure). It seems
>>>> the solution is to split out across multiple queues, but I was hoping
>>>> to avoid that since it will add a layer of complexity to my producers
>>>> and consumers.
>>>
>>> 1. To maximise throughput, don't use persistence. ?To make it bigger,
>>> forget about ordering. ?So for example, you can easily have two
>>> queues, one per node, subscribed to the same direct exchange with the
>>> same key, and you ought to double throughput (assuming all other
>>> things being equal and fair).
>>>
>>> 2. If you want to be both fast and 'reliable' (no loss of acked
>>> messages), then add more queues and make them durable, and set
>>> messages to be persistent.
>>>
>>> 3. If you want to preserve ordering, label each message with an ID and
>>> dedup at the endpoints. ?This does as you say, add some small noise to
>>> your producers and consumers, but the above two options 1 and 2, do
>>> not.
>>>
>>>
>>>> I don't think I understand how using Linux-HA with clustering would
>>>> lead to a splitting a single queue across multiple nodes. I'm not
>>>> familiar with HA, but it looked like it was a solution to provide a
>>>> replicated failover.
>>>
>>> You are right that HA techniques, indeed any kind of queue replication
>>> or replicated failover, will not help you here.
>>>
>>> What you want is 'flow over' ie. "when load is high, make a new node
>>> with the same routing info". ?This is certainly doable.
>>>
>>> alexis
>>>
>>>
>>>
>>>
>>>
>>>
>>>> Thanks again,
>>>> Paul
>>>>
>>>> On Mon, Aug 17, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>>>>> Paul Dix wrote:
>>>>>> Do you have a roadmap for when a scalable queue
>>>>>> will be available?
>>>>>
>>>>> If by "scalable" you mean "replicated", then that's available now, by
>>>>> configuration along the lines I hinted at in my previous message. Adding
>>>>> clustering into the mix can help increase capacity, on top of that (at a
>>>>> certain cost in configuration complexity).
>>>>>
>>>>> If instead you mean "exceeding RAM+swap size", we're hoping to have that
>>>>> for the 1.7 release -- which ought to be out within a month or so.
>>>>>
>>>>>> Just to give you a little more information on what I'm doing, I'm
>>>>>> building a live search/aggregation system. I'm hoping to push updates
>>>>>> of a constant internet crawl through the messaging system so workers
>>>>>> can analyze the content and build indexes as everything comes in.
>>>>>
>>>>> Sounds pretty cool!
>>>>>
>>>>> Tony
>>>>> --
>>>>> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>>>>> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>>>>> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>>>>>
>>>>
>>>> _______________________________________________
>>>> rabbitmq-discuss mailing list
>>>> rabbitmq-discuss at lists.rabbitmq.com
>>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>>
>>>
>>
>



From binary42 at gmail.com  Mon Aug 17 20:38:20 2009
From: binary42 at gmail.com (Brian Mitchell)
Date: Mon, 17 Aug 2009 15:38:20 -0400
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
	<167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
Message-ID: <fcfe41700908171238j55ec845h74d92af1304d10b1@mail.gmail.com>

On Mon, Aug 17, 2009 at 14:32, Alexis
Richardson<alexis.richardson at gmail.com> wrote:
> On Mon, Aug 17, 2009 at 5:22 PM, Paul Dix<paul at pauldix.net> wrote:
>> So what exactly does option 1 look like?
>>
>> It sounds like it's possible to have a queue with the same id on two
>> different nodes bound to the same exchange.
>
> Not quite. ?Same routing - two queues, two ids. ?Actually now that I
> think about it that won't give you exactly what you need. ?More below.

Right. I figured the producers would round robin their production in
some fashion for that method. Talking to Paul on IRC made it clear
that it would be ideal to limit the amount of logic and load balancing
that the producer and/or consumer is responsible for.

Another idea I've played with is splitting the vhosts or clusters up
and optionally only replicating internally on each one to a reasonable
limit for availability control. In this case, sharding methods like
bucket selection could be used to assign producers to a single cluster
or vhost combo taking the need to cycle out. Consumers could either
connect to a single cluster or vhost or many as appropriate for the
flow characteristics expected.

The only plusses of this are the fact that you can scale complex
exchange/queue setups w/o having to generate and track a lot of unique
routing keys that need to be coordinated with the consumer side.
Instead you just have a list of hosts that can be used. I've also
thought of a few ways one could put a load balancer in front of this
quite easily on either side if there is a concern with how smart a
client must be.

Brian.



From pekenney at gmail.com  Tue Aug 18 00:24:22 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Mon, 17 Aug 2009 16:24:22 -0700
Subject: [rabbitmq-discuss] connection pooling options ?
Message-ID: <3a5f03340908171624j10423729scdd6f8bf68f20d8d@mail.gmail.com>

are there any connection pooling options, I do not see any in the
RabbitMQ.Client or RabbitMQ.ServiceModel

thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090817/f1fd74d1/attachment.htm 

From matthias at lshift.net  Tue Aug 18 00:24:59 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Tue, 18 Aug 2009 00:24:59 +0100
Subject: [rabbitmq-discuss] Trying to do a simple subscription returns
 message too long error... (RabbitMq.Net)
In-Reply-To: <3a5f03340908170716v3c5484d4i478e69a33959f5f5@mail.gmail.com>
References: <3a5f03340907230913n47a8d94fvc87de32dea4044a@mail.gmail.com>	<4A844740.7060606@lshift.net>	<3a5f03340908131114s47d71fa9lccc6c0deb1425cc@mail.gmail.com>	<4A847F3B.1080103@lshift.net>	<3a5f03340908131421i649fc4aq668f78e7d4d0ffc1@mail.gmail.com>	<4A8485E3.7050501@lshift.net>	<3a5f03340908131449y3f13a8cehb5199f2420317ee2@mail.gmail.com>	<4A848DD9.4070905@lshift.net>	<3a5f03340908131707i7ab968fewe6dd121500b26f79@mail.gmail.com>	<4A8562DC.4050303@lshift.net>
	<3a5f03340908170716v3c5484d4i478e69a33959f5f5@mail.gmail.com>
Message-ID: <4A89E6CB.6000004@lshift.net>

Patrick,

Patrick Kenney wrote:
> so going to the api instead of using wcf does not repeat the errors...
> 
> i can not repeat the errors in a console app that does not use wcf...
> 
> there is no difference in the results when i use wcf in a console app or 
> a winform app

These are interesting findings. I wonder whether there are some 
multi-threading related issues in either the RabbitMQ WCF bindings or 
their usage.

> next steps?

Can you post the wcf console app?


Regards,

Matthias.



From pekenney at gmail.com  Tue Aug 18 01:02:58 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Mon, 17 Aug 2009 17:02:58 -0700
Subject: [rabbitmq-discuss] Error: An established connection was aborted by
	the software in your host machine
Message-ID: <3a5f03340908171702n2288e626x83d6047852025d0f@mail.gmail.com>

DotNet Client: An established connection was aborted by the software in your
host machine

everything i find researching this shows issues with firewall, av software,
etc...

not the case with me...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090817/f8e8a144/attachment.htm 

From matthias at lshift.net  Tue Aug 18 04:15:20 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Tue, 18 Aug 2009 04:15:20 +0100
Subject: [rabbitmq-discuss] Error: An established connection was aborted
 by	the software in your host machine
In-Reply-To: <3a5f03340908171702n2288e626x83d6047852025d0f@mail.gmail.com>
References: <3a5f03340908171702n2288e626x83d6047852025d0f@mail.gmail.com>
Message-ID: <4A8A1CC8.4020303@lshift.net>

Patrick,

Patrick Kenney wrote:
> DotNet Client: An established connection was aborted by the software in 
> your host machine
> 
> everything i find researching this shows issues with firewall, av 
> software, etc...
> 
> not the case with me...

So this error you get w/o WCF and w/o Windows Forms, right? Do you have 
a console app that can reproduce this reliably? If so, please send us 
the code.

Regards,

Matthias.



From westling at perceptech.com  Tue Aug 18 05:23:10 2009
From: westling at perceptech.com (Mark Westling)
Date: Tue, 18 Aug 2009 12:23:10 +0800
Subject: [rabbitmq-discuss] Socket errors and connections not closing
In-Reply-To: <4A824911.2070906@lshift.net>
References: <3de9aeb50908111942j1521cc11o323cf9eadac068e0@mail.gmail.com>
	<4A824911.2070906@lshift.net>
Message-ID: <3de9aeb50908172123g624f4339pcbe3a64d1030dce5@mail.gmail.com>

>
>
> Also, are these connections going via some kind of firewall or
> loadbalancer? If so, perhaps the connections to the server are kept open
> there.
>

To close the loop on this, the problem seems to be solved.  We're using a
Juniper SSG350M firewall that was configured, according to the network guys,
to allow all traffic between the client machine and the server running
RabbitMQ.  Traffic was going through, obviously but I kept seeing these
rather mysterious network glitches between the the client and RabbitMQ.  The
network guys then explicitly opened port 5672 and the problems went away.
 Unfortunately, I can't investigate this any further (or confirm the details
myself) since the network is managed by another company but hopefully this
information will help someone in the future.

Many thanks for the suggestion, Matthias!  Also thanks to Chris Duncan for
pointing me here.

--Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/b22ea57c/attachment.htm 

From alexis.richardson at gmail.com  Tue Aug 18 09:20:34 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Tue, 18 Aug 2009 09:20:34 +0100
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <c0a615890908171236v4cb52ec8xcf0fde56a854966c@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
	<167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
	<c0a615890908171236v4cb52ec8xcf0fde56a854966c@mail.gmail.com>
Message-ID: <167204d20908180120w39161f3cn2ac7268fc5a0ecf5@mail.gmail.com>

Paul,

On Mon, Aug 17, 2009 at 8:36 PM, Paul Dix<paul at pauldix.net> wrote:
> Yeah, that's what I'm talking about. There will probably be upwards of
> a few hundred producers and a few hundred consumers.

Cool.

So one question you need to answer is: do you want all the consumers
to receive the same messages?  I.e.:

* are you aggregating all the producers into one 'firehose', and then
sending the whole firehose on to all connected consumers?

OR

* are you planning to in some way share messages out amongst connected
consumers, eg on a round robin basis

See more below re flow1, flow2...


> The total ingress
> is definitely what I'm most worried about right now.

OK.

Be aware that in high ingress rate cases you may be limited by the
client egress rate, which is strongly implementation and platform
dependent.  Also, see Matthias' notes on testing performance, which
are googleable from the rabbitmq archives, if you want to run some
test cases at any point.



> Later, memory may
> be a concern, but hopefully the consumers are pulling so quickly that
> the queue never gets extremely large.

Yep.


> Can you give me more specific details (or a pointer) to how the flow1,
> flow2 thing work (both producer and consumer side)?

Sure.

First you need to read up on what 'direct exchanges' are and how they
work in AMQP.  I recommend Jason's intro to get you started:

http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/

More background info can be found here: www.rabbitmq.com/how

In a nutshell, RabbitMQ will route any message it receives on to one
or more queues.

Each queue lives on a node, and nodes are members of a cluster.  You
can have one or more nodes per machine - a good guide is to have one
per core.  You can send messages to any node in the cluster and they
will get routed to the right places (adding more nodes to a cluster is
how you scale ingress and availability).

The routing model is based on message routing keys: queues receive
messages whose routing keys match routing patterns ("bindings").  Note
that multiple queues can request messages matching the same key,
giving you 1-many pubsub.  This is explained in Jason's article.  I
suggest you use the 'direct exchange' routing model, in which each
message has one routing key, e.g.: "flow1", "flow2".

Take a look at the article and let us know if it all makes sense.

alexis


> Thanks,
> Paul
>
> On Mon, Aug 17, 2009 at 2:32 PM, Alexis
> Richardson<alexis.richardson at gmail.com> wrote:
>> On Mon, Aug 17, 2009 at 5:22 PM, Paul Dix<paul at pauldix.net> wrote:
>>> So what exactly does option 1 look like?
>>>
>>> It sounds like it's possible to have a queue with the same id on two
>>> different nodes bound to the same exchange.
>>
>> Not quite. ?Same routing - two queues, two ids. ?Actually now that I
>> think about it that won't give you exactly what you need. ?More below.
>>
>>
>>> Will the exchange will
>>> then round robin the messages to the two different queues? If so,
>>> that's exactly what I'm looking for. I don't really care about order
>>> on this queue.
>>
>> No it won't and that's why my suggestion was wrong.
>>
>> Round robin does occur when you have two consumers (clients) connected
>> to one queue. ?This WILL help you by draining the queue faster, if
>> memory is a limitation.
>>
>> If total ingress is the limitation you can increase that by splitting
>> the flow. ?Suppose you start with one queue bound once to one exchange
>> with key "flow1". ?Then all messages with routing key flow1 will go to
>> that queue. ?When load is heavy, add a queue with key "flow2", on a
>> second node. ?Then, alternate (if you prefer, randomly) between
>> routing keys flow1 and flow2. ?This will spread the load as you
>> require. ?And so on, for more queues.
>>
>> You can make this part of a load balancing layer on the server side,
>> so that clients don't have to be coded too much.
>>
>> Is this along the lines of what you need? ?Let me know, and I can elaborate.
>>
>> alexis
>>
>>
>>
>>
>>> Thanks,
>>> Paul
>>>
>>> On Mon, Aug 17, 2009 at 10:55 AM, Alexis
>>> Richardson<alexis.richardson at gmail.com> wrote:
>>>> Paul
>>>>
>>>> On Mon, Aug 17, 2009 at 3:34 PM, Paul Dix<paul at pauldix.net> wrote:
>>>>> Sorry for the confusion. I mean scalability on a single queue. Say I
>>>>> want to push 20k messages per second through a single queue. If a
>>>>> single node can't handle that it seems I'm out of luck. That is, if
>>>>> I'm understanding how things work.
>>>>
>>>> You can in principle just add more nodes to the cluster. ?More details below.
>>>>
>>>>
>>>>
>>>>
>>>>> So I guess I'm not worried about total queue size, but queue
>>>>> throughput (although size may become an issue, I'm not sure). It seems
>>>>> the solution is to split out across multiple queues, but I was hoping
>>>>> to avoid that since it will add a layer of complexity to my producers
>>>>> and consumers.
>>>>
>>>> 1. To maximise throughput, don't use persistence. ?To make it bigger,
>>>> forget about ordering. ?So for example, you can easily have two
>>>> queues, one per node, subscribed to the same direct exchange with the
>>>> same key, and you ought to double throughput (assuming all other
>>>> things being equal and fair).
>>>>
>>>> 2. If you want to be both fast and 'reliable' (no loss of acked
>>>> messages), then add more queues and make them durable, and set
>>>> messages to be persistent.
>>>>
>>>> 3. If you want to preserve ordering, label each message with an ID and
>>>> dedup at the endpoints. ?This does as you say, add some small noise to
>>>> your producers and consumers, but the above two options 1 and 2, do
>>>> not.
>>>>
>>>>
>>>>> I don't think I understand how using Linux-HA with clustering would
>>>>> lead to a splitting a single queue across multiple nodes. I'm not
>>>>> familiar with HA, but it looked like it was a solution to provide a
>>>>> replicated failover.
>>>>
>>>> You are right that HA techniques, indeed any kind of queue replication
>>>> or replicated failover, will not help you here.
>>>>
>>>> What you want is 'flow over' ie. "when load is high, make a new node
>>>> with the same routing info". ?This is certainly doable.
>>>>
>>>> alexis
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>> Thanks again,
>>>>> Paul
>>>>>
>>>>> On Mon, Aug 17, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>>>>>> Paul Dix wrote:
>>>>>>> Do you have a roadmap for when a scalable queue
>>>>>>> will be available?
>>>>>>
>>>>>> If by "scalable" you mean "replicated", then that's available now, by
>>>>>> configuration along the lines I hinted at in my previous message. Adding
>>>>>> clustering into the mix can help increase capacity, on top of that (at a
>>>>>> certain cost in configuration complexity).
>>>>>>
>>>>>> If instead you mean "exceeding RAM+swap size", we're hoping to have that
>>>>>> for the 1.7 release -- which ought to be out within a month or so.
>>>>>>
>>>>>>> Just to give you a little more information on what I'm doing, I'm
>>>>>>> building a live search/aggregation system. I'm hoping to push updates
>>>>>>> of a constant internet crawl through the messaging system so workers
>>>>>>> can analyze the content and build indexes as everything comes in.
>>>>>>
>>>>>> Sounds pretty cool!
>>>>>>
>>>>>> Tony
>>>>>> --
>>>>>> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>>>>>> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>>>>>> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> rabbitmq-discuss mailing list
>>>>> rabbitmq-discuss at lists.rabbitmq.com
>>>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>>>
>>>>
>>>
>>
>



From alexis.richardson at gmail.com  Tue Aug 18 09:23:37 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Tue, 18 Aug 2009 09:23:37 +0100
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <fcfe41700908171238j55ec845h74d92af1304d10b1@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
	<167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
	<fcfe41700908171238j55ec845h74d92af1304d10b1@mail.gmail.com>
Message-ID: <167204d20908180123g1957c360x7ca0efb8d0a4940f@mail.gmail.com>

Brian

On Mon, Aug 17, 2009 at 8:38 PM, Brian Mitchell<binary42 at gmail.com> wrote:
> On Mon, Aug 17, 2009 at 14:32, Alexis
> Richardson<alexis.richardson at gmail.com> wrote:
>> On Mon, Aug 17, 2009 at 5:22 PM, Paul Dix<paul at pauldix.net> wrote:
>>> So what exactly does option 1 look like?
>>>
>>> It sounds like it's possible to have a queue with the same id on two
>>> different nodes bound to the same exchange.
>>
>> Not quite. ?Same routing - two queues, two ids. ?Actually now that I
>> think about it that won't give you exactly what you need. ?More below.
>
> Right. I figured the producers would round robin their production in
> some fashion for that method. Talking to Paul on IRC made it clear
> that it would be ideal to limit the amount of logic and load balancing
> that the producer and/or consumer is responsible for.

That sounds right to me, based on what Paul's been saying he needs.


> Another idea I've played with is splitting the vhosts or clusters up
> and optionally only replicating internally on each one to a reasonable
> limit for availability control. In this case, sharding methods like
> bucket selection could be used to assign producers to a single cluster
> or vhost combo taking the need to cycle out. Consumers could either
> connect to a single cluster or vhost or many as appropriate for the
> flow characteristics expected.

Yes, although I think you would need high loads to justify the
additional management overhead.


> The only plusses of this are the fact that you can scale complex
> exchange/queue setups w/o having to generate and track a lot of unique
> routing keys that need to be coordinated with the consumer side.
> Instead you just have a list of hosts that can be used.

Yes.


> I've also
> thought of a few ways one could put a load balancer in front of this
> quite easily on either side if there is a concern with how smart a
> client must be.

IMO this is a good way to go.

alexis



From tonyg at lshift.net  Tue Aug 18 09:41:34 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Tue, 18 Aug 2009 09:41:34 +0100
Subject: [rabbitmq-discuss] connection pooling options ?
In-Reply-To: <3a5f03340908171624j10423729scdd6f8bf68f20d8d@mail.gmail.com>
References: <3a5f03340908171624j10423729scdd6f8bf68f20d8d@mail.gmail.com>
Message-ID: <4A8A693E.10501@lshift.net>

Hi Patrick,

Patrick Kenney wrote:
> are there any connection pooling options, I do not see any in the
> RabbitMQ.Client or RabbitMQ.ServiceModel

Not yet. AMQP's built-in channel multiplexing capability helps reduce
the need for them a little, but doesn't make the need totally go away.

In general, across all the client libraries, we have been concentrating
on making sure the core API is solid before constructing layers on top
like connection pooling and failover. This is the right list to discuss
ideas & code, though, so if you have any proposals, go ahead.

Cheers,
  Tony



From paul at pauldix.net  Tue Aug 18 14:18:53 2009
From: paul at pauldix.net (Paul Dix)
Date: Tue, 18 Aug 2009 09:18:53 -0400
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <167204d20908180120w39161f3cn2ac7268fc5a0ecf5@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A895BD0.6000005@lshift.net>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
	<167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
	<c0a615890908171236v4cb52ec8xcf0fde56a854966c@mail.gmail.com>
	<167204d20908180120w39161f3cn2ac7268fc5a0ecf5@mail.gmail.com>
Message-ID: <c0a615890908180618p1bf3ecfdj4caa5c19fa970721@mail.gmail.com>

All of that makes sense.

Let me give some more specifics about what I'm building and how I'm
hoping to use the messaging system. I'm doing a constant internet
crawl of sorts, twitter updates and everything else are in there. So
when something gets pulled down the document gets inserted into a
horizontally scalable key value store in the sky. I then want to send
a message through the system that this key/value has been
inserted/updated. This is being done by 20-100 boxes.

I then want that message to be grabbed by a consumer where some
processing will happen and probably some ranking, relevance and other
things get written to an index somewhere (also being done by a large
number of boxes).

So for this specific case I'm using a direct exchange with a single
queue (no message persistence and don't bother keeping ordering).
Hundreds of producers are posting messages to the exchange with the
same routing key and hundreds of consumers are pulling off the queue.
It's the firehose thing. Each message has to be processed once by any
one of the hundreds of consumers.

I guess I was hoping for the flow management part to be handled by
Rabbit. It looks to me that if I want to scale past the ingress
capabilities of one queue or exchange I have to manage that on the
producer and consumer side.

I can create multiple exchanges and bind to the same queue if the
routing becomes the bottleneck, but then the producers need to round
robin between the exchanges.

I can create multiple queues bound with different routing keys (flow1,
flow2) if the queue becomes the bottleneck, but then the producer
needs to know to round robin to the different routing keys and the
consumers need to check both queues.

So in essence, when I mentioned scalability, it was a reference to
being able to transparently scale the messaging system to multiple
boxes. And more specifically, I want my hundreds of producers to post
messages to a single exchange with a single routing key. I want my
hundreds of consumers to be able to consume messages off a single
queue. I want the exchange and the queue to be scalable (in the
multi-box, multi-process sense) where the messaging system handles it.
I want the messaging system to be scalable like the key/value store is
scalable. Transparently across many boxes.

There's really only one part of my system that has this requirement.
There are plenty of other aspects in which I'll use messaging and not
have these kinds of insane needs. As I work more with the system it's
likely that I'll want to use more complex routing logic. It's possible
I'll want to break updates from domains into separate message flows.

Thank you very much for being so helpful. Sorry for the lengthy response.
Paul

On Tue, Aug 18, 2009 at 4:20 AM, Alexis
Richardson<alexis.richardson at gmail.com> wrote:
> Paul,
>
> On Mon, Aug 17, 2009 at 8:36 PM, Paul Dix<paul at pauldix.net> wrote:
>> Yeah, that's what I'm talking about. There will probably be upwards of
>> a few hundred producers and a few hundred consumers.
>
> Cool.
>
> So one question you need to answer is: do you want all the consumers
> to receive the same messages? ?I.e.:
>
> * are you aggregating all the producers into one 'firehose', and then
> sending the whole firehose on to all connected consumers?
>
> OR
>
> * are you planning to in some way share messages out amongst connected
> consumers, eg on a round robin basis
>
> See more below re flow1, flow2...
>
>
>> The total ingress
>> is definitely what I'm most worried about right now.
>
> OK.
>
> Be aware that in high ingress rate cases you may be limited by the
> client egress rate, which is strongly implementation and platform
> dependent. ?Also, see Matthias' notes on testing performance, which
> are googleable from the rabbitmq archives, if you want to run some
> test cases at any point.
>
>
>
>> Later, memory may
>> be a concern, but hopefully the consumers are pulling so quickly that
>> the queue never gets extremely large.
>
> Yep.
>
>
>> Can you give me more specific details (or a pointer) to how the flow1,
>> flow2 thing work (both producer and consumer side)?
>
> Sure.
>
> First you need to read up on what 'direct exchanges' are and how they
> work in AMQP. ?I recommend Jason's intro to get you started:
>
> http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/
>
> More background info can be found here: www.rabbitmq.com/how
>
> In a nutshell, RabbitMQ will route any message it receives on to one
> or more queues.
>
> Each queue lives on a node, and nodes are members of a cluster. ?You
> can have one or more nodes per machine - a good guide is to have one
> per core. ?You can send messages to any node in the cluster and they
> will get routed to the right places (adding more nodes to a cluster is
> how you scale ingress and availability).
>
> The routing model is based on message routing keys: queues receive
> messages whose routing keys match routing patterns ("bindings"). ?Note
> that multiple queues can request messages matching the same key,
> giving you 1-many pubsub. ?This is explained in Jason's article. ?I
> suggest you use the 'direct exchange' routing model, in which each
> message has one routing key, e.g.: "flow1", "flow2".
>
> Take a look at the article and let us know if it all makes sense.
>
> alexis
>
>
>> Thanks,
>> Paul
>>
>> On Mon, Aug 17, 2009 at 2:32 PM, Alexis
>> Richardson<alexis.richardson at gmail.com> wrote:
>>> On Mon, Aug 17, 2009 at 5:22 PM, Paul Dix<paul at pauldix.net> wrote:
>>>> So what exactly does option 1 look like?
>>>>
>>>> It sounds like it's possible to have a queue with the same id on two
>>>> different nodes bound to the same exchange.
>>>
>>> Not quite. ?Same routing - two queues, two ids. ?Actually now that I
>>> think about it that won't give you exactly what you need. ?More below.
>>>
>>>
>>>> Will the exchange will
>>>> then round robin the messages to the two different queues? If so,
>>>> that's exactly what I'm looking for. I don't really care about order
>>>> on this queue.
>>>
>>> No it won't and that's why my suggestion was wrong.
>>>
>>> Round robin does occur when you have two consumers (clients) connected
>>> to one queue. ?This WILL help you by draining the queue faster, if
>>> memory is a limitation.
>>>
>>> If total ingress is the limitation you can increase that by splitting
>>> the flow. ?Suppose you start with one queue bound once to one exchange
>>> with key "flow1". ?Then all messages with routing key flow1 will go to
>>> that queue. ?When load is heavy, add a queue with key "flow2", on a
>>> second node. ?Then, alternate (if you prefer, randomly) between
>>> routing keys flow1 and flow2. ?This will spread the load as you
>>> require. ?And so on, for more queues.
>>>
>>> You can make this part of a load balancing layer on the server side,
>>> so that clients don't have to be coded too much.
>>>
>>> Is this along the lines of what you need? ?Let me know, and I can elaborate.
>>>
>>> alexis
>>>
>>>
>>>
>>>
>>>> Thanks,
>>>> Paul
>>>>
>>>> On Mon, Aug 17, 2009 at 10:55 AM, Alexis
>>>> Richardson<alexis.richardson at gmail.com> wrote:
>>>>> Paul
>>>>>
>>>>> On Mon, Aug 17, 2009 at 3:34 PM, Paul Dix<paul at pauldix.net> wrote:
>>>>>> Sorry for the confusion. I mean scalability on a single queue. Say I
>>>>>> want to push 20k messages per second through a single queue. If a
>>>>>> single node can't handle that it seems I'm out of luck. That is, if
>>>>>> I'm understanding how things work.
>>>>>
>>>>> You can in principle just add more nodes to the cluster. ?More details below.
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>> So I guess I'm not worried about total queue size, but queue
>>>>>> throughput (although size may become an issue, I'm not sure). It seems
>>>>>> the solution is to split out across multiple queues, but I was hoping
>>>>>> to avoid that since it will add a layer of complexity to my producers
>>>>>> and consumers.
>>>>>
>>>>> 1. To maximise throughput, don't use persistence. ?To make it bigger,
>>>>> forget about ordering. ?So for example, you can easily have two
>>>>> queues, one per node, subscribed to the same direct exchange with the
>>>>> same key, and you ought to double throughput (assuming all other
>>>>> things being equal and fair).
>>>>>
>>>>> 2. If you want to be both fast and 'reliable' (no loss of acked
>>>>> messages), then add more queues and make them durable, and set
>>>>> messages to be persistent.
>>>>>
>>>>> 3. If you want to preserve ordering, label each message with an ID and
>>>>> dedup at the endpoints. ?This does as you say, add some small noise to
>>>>> your producers and consumers, but the above two options 1 and 2, do
>>>>> not.
>>>>>
>>>>>
>>>>>> I don't think I understand how using Linux-HA with clustering would
>>>>>> lead to a splitting a single queue across multiple nodes. I'm not
>>>>>> familiar with HA, but it looked like it was a solution to provide a
>>>>>> replicated failover.
>>>>>
>>>>> You are right that HA techniques, indeed any kind of queue replication
>>>>> or replicated failover, will not help you here.
>>>>>
>>>>> What you want is 'flow over' ie. "when load is high, make a new node
>>>>> with the same routing info". ?This is certainly doable.
>>>>>
>>>>> alexis
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>> Thanks again,
>>>>>> Paul
>>>>>>
>>>>>> On Mon, Aug 17, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>>>>>>> Paul Dix wrote:
>>>>>>>> Do you have a roadmap for when a scalable queue
>>>>>>>> will be available?
>>>>>>>
>>>>>>> If by "scalable" you mean "replicated", then that's available now, by
>>>>>>> configuration along the lines I hinted at in my previous message. Adding
>>>>>>> clustering into the mix can help increase capacity, on top of that (at a
>>>>>>> certain cost in configuration complexity).
>>>>>>>
>>>>>>> If instead you mean "exceeding RAM+swap size", we're hoping to have that
>>>>>>> for the 1.7 release -- which ought to be out within a month or so.
>>>>>>>
>>>>>>>> Just to give you a little more information on what I'm doing, I'm
>>>>>>>> building a live search/aggregation system. I'm hoping to push updates
>>>>>>>> of a constant internet crawl through the messaging system so workers
>>>>>>>> can analyze the content and build indexes as everything comes in.
>>>>>>>
>>>>>>> Sounds pretty cool!
>>>>>>>
>>>>>>> Tony
>>>>>>> --
>>>>>>> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>>>>>>> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>>>>>>> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>>>>>>>
>>>>>>
>>>>>> _______________________________________________
>>>>>> rabbitmq-discuss mailing list
>>>>>> rabbitmq-discuss at lists.rabbitmq.com
>>>>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>>>>
>>>>>
>>>>
>>>
>>
>



From irrer at umich.edu  Tue Aug 18 14:47:39 2009
From: irrer at umich.edu (Jim Irrer)
Date: Tue, 18 Aug 2009 09:47:39 -0400
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <c0a615890908180618p1bf3ecfdj4caa5c19fa970721@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
	<167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
	<c0a615890908171236v4cb52ec8xcf0fde56a854966c@mail.gmail.com>
	<167204d20908180120w39161f3cn2ac7268fc5a0ecf5@mail.gmail.com>
	<c0a615890908180618p1bf3ecfdj4caa5c19fa970721@mail.gmail.com>
Message-ID: <3b6ef0790908180647q1066d470wa4fe164d3212fe89@mail.gmail.com>

It seems like one of the problems with round robin is that consumers may
spend
more time on some messages than others, so you are depending on a random
distribution to even out the load.

To help load balancing, could the consumers be set up to, instead of round
robin,
simply each try to read from a common queue, and who ever gets there first
gets the message.
This would mean that each consumer only gets a message when they become
idle,
which seems like what would be wanted.

On the producer side, if there were multiple queues, the producer would want
to
write to the queue with the least amount of messages on it.

I'm trying to learn AMQP too and this has been an interesting discussion to
watch.

Thanks,

- Jim

Jim Irrer     irrer at umich.edu       (734) 647-4409
University of Michigan Hospital Radiation Oncology
519 W. William St.             Ann Arbor, MI 48103


On Tue, Aug 18, 2009 at 9:18 AM, Paul Dix <paul at pauldix.net> wrote:

> All of that makes sense.
>
> Let me give some more specifics about what I'm building and how I'm
> hoping to use the messaging system. I'm doing a constant internet
> crawl of sorts, twitter updates and everything else are in there. So
> when something gets pulled down the document gets inserted into a
> horizontally scalable key value store in the sky. I then want to send
> a message through the system that this key/value has been
> inserted/updated. This is being done by 20-100 boxes.
>
> I then want that message to be grabbed by a consumer where some
> processing will happen and probably some ranking, relevance and other
> things get written to an index somewhere (also being done by a large
> number of boxes).
>
> So for this specific case I'm using a direct exchange with a single
> queue (no message persistence and don't bother keeping ordering).
> Hundreds of producers are posting messages to the exchange with the
> same routing key and hundreds of consumers are pulling off the queue.
> It's the firehose thing. Each message has to be processed once by any
> one of the hundreds of consumers.
>
> I guess I was hoping for the flow management part to be handled by
> Rabbit. It looks to me that if I want to scale past the ingress
> capabilities of one queue or exchange I have to manage that on the
> producer and consumer side.
>
> I can create multiple exchanges and bind to the same queue if the
> routing becomes the bottleneck, but then the producers need to round
> robin between the exchanges.
>
> I can create multiple queues bound with different routing keys (flow1,
> flow2) if the queue becomes the bottleneck, but then the producer
> needs to know to round robin to the different routing keys and the
> consumers need to check both queues.
>
> So in essence, when I mentioned scalability, it was a reference to
> being able to transparently scale the messaging system to multiple
> boxes. And more specifically, I want my hundreds of producers to post
> messages to a single exchange with a single routing key. I want my
> hundreds of consumers to be able to consume messages off a single
> queue. I want the exchange and the queue to be scalable (in the
> multi-box, multi-process sense) where the messaging system handles it.
> I want the messaging system to be scalable like the key/value store is
> scalable. Transparently across many boxes.
>
> There's really only one part of my system that has this requirement.
> There are plenty of other aspects in which I'll use messaging and not
> have these kinds of insane needs. As I work more with the system it's
> likely that I'll want to use more complex routing logic. It's possible
> I'll want to break updates from domains into separate message flows.
>
> Thank you very much for being so helpful. Sorry for the lengthy response.
> Paul
>
> On Tue, Aug 18, 2009 at 4:20 AM, Alexis
> Richardson<alexis.richardson at gmail.com> wrote:
> > Paul,
> >
> > On Mon, Aug 17, 2009 at 8:36 PM, Paul Dix<paul at pauldix.net> wrote:
> >> Yeah, that's what I'm talking about. There will probably be upwards of
> >> a few hundred producers and a few hundred consumers.
> >
> > Cool.
> >
> > So one question you need to answer is: do you want all the consumers
> > to receive the same messages?  I.e.:
> >
> > * are you aggregating all the producers into one 'firehose', and then
> > sending the whole firehose on to all connected consumers?
> >
> > OR
> >
> > * are you planning to in some way share messages out amongst connected
> > consumers, eg on a round robin basis
> >
> > See more below re flow1, flow2...
> >
> >
> >> The total ingress
> >> is definitely what I'm most worried about right now.
> >
> > OK.
> >
> > Be aware that in high ingress rate cases you may be limited by the
> > client egress rate, which is strongly implementation and platform
> > dependent.  Also, see Matthias' notes on testing performance, which
> > are googleable from the rabbitmq archives, if you want to run some
> > test cases at any point.
> >
> >
> >
> >> Later, memory may
> >> be a concern, but hopefully the consumers are pulling so quickly that
> >> the queue never gets extremely large.
> >
> > Yep.
> >
> >
> >> Can you give me more specific details (or a pointer) to how the flow1,
> >> flow2 thing work (both producer and consumer side)?
> >
> > Sure.
> >
> > First you need to read up on what 'direct exchanges' are and how they
> > work in AMQP.  I recommend Jason's intro to get you started:
> >
> > http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/
> >
> > More background info can be found here: www.rabbitmq.com/how
> >
> > In a nutshell, RabbitMQ will route any message it receives on to one
> > or more queues.
> >
> > Each queue lives on a node, and nodes are members of a cluster.  You
> > can have one or more nodes per machine - a good guide is to have one
> > per core.  You can send messages to any node in the cluster and they
> > will get routed to the right places (adding more nodes to a cluster is
> > how you scale ingress and availability).
> >
> > The routing model is based on message routing keys: queues receive
> > messages whose routing keys match routing patterns ("bindings").  Note
> > that multiple queues can request messages matching the same key,
> > giving you 1-many pubsub.  This is explained in Jason's article.  I
> > suggest you use the 'direct exchange' routing model, in which each
> > message has one routing key, e.g.: "flow1", "flow2".
> >
> > Take a look at the article and let us know if it all makes sense.
> >
> > alexis
> >
> >
> >> Thanks,
> >> Paul
> >>
> >> On Mon, Aug 17, 2009 at 2:32 PM, Alexis
> >> Richardson<alexis.richardson at gmail.com> wrote:
> >>> On Mon, Aug 17, 2009 at 5:22 PM, Paul Dix<paul at pauldix.net> wrote:
> >>>> So what exactly does option 1 look like?
> >>>>
> >>>> It sounds like it's possible to have a queue with the same id on two
> >>>> different nodes bound to the same exchange.
> >>>
> >>> Not quite.  Same routing - two queues, two ids.  Actually now that I
> >>> think about it that won't give you exactly what you need.  More below.
> >>>
> >>>
> >>>> Will the exchange will
> >>>> then round robin the messages to the two different queues? If so,
> >>>> that's exactly what I'm looking for. I don't really care about order
> >>>> on this queue.
> >>>
> >>> No it won't and that's why my suggestion was wrong.
> >>>
> >>> Round robin does occur when you have two consumers (clients) connected
> >>> to one queue.  This WILL help you by draining the queue faster, if
> >>> memory is a limitation.
> >>>
> >>> If total ingress is the limitation you can increase that by splitting
> >>> the flow.  Suppose you start with one queue bound once to one exchange
> >>> with key "flow1".  Then all messages with routing key flow1 will go to
> >>> that queue.  When load is heavy, add a queue with key "flow2", on a
> >>> second node.  Then, alternate (if you prefer, randomly) between
> >>> routing keys flow1 and flow2.  This will spread the load as you
> >>> require.  And so on, for more queues.
> >>>
> >>> You can make this part of a load balancing layer on the server side,
> >>> so that clients don't have to be coded too much.
> >>>
> >>> Is this along the lines of what you need?  Let me know, and I can
> elaborate.
> >>>
> >>> alexis
> >>>
> >>>
> >>>
> >>>
> >>>> Thanks,
> >>>> Paul
> >>>>
> >>>> On Mon, Aug 17, 2009 at 10:55 AM, Alexis
> >>>> Richardson<alexis.richardson at gmail.com> wrote:
> >>>>> Paul
> >>>>>
> >>>>> On Mon, Aug 17, 2009 at 3:34 PM, Paul Dix<paul at pauldix.net> wrote:
> >>>>>> Sorry for the confusion. I mean scalability on a single queue. Say I
> >>>>>> want to push 20k messages per second through a single queue. If a
> >>>>>> single node can't handle that it seems I'm out of luck. That is, if
> >>>>>> I'm understanding how things work.
> >>>>>
> >>>>> You can in principle just add more nodes to the cluster.  More
> details below.
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>>> So I guess I'm not worried about total queue size, but queue
> >>>>>> throughput (although size may become an issue, I'm not sure). It
> seems
> >>>>>> the solution is to split out across multiple queues, but I was
> hoping
> >>>>>> to avoid that since it will add a layer of complexity to my
> producers
> >>>>>> and consumers.
> >>>>>
> >>>>> 1. To maximise throughput, don't use persistence.  To make it bigger,
> >>>>> forget about ordering.  So for example, you can easily have two
> >>>>> queues, one per node, subscribed to the same direct exchange with the
> >>>>> same key, and you ought to double throughput (assuming all other
> >>>>> things being equal and fair).
> >>>>>
> >>>>> 2. If you want to be both fast and 'reliable' (no loss of acked
> >>>>> messages), then add more queues and make them durable, and set
> >>>>> messages to be persistent.
> >>>>>
> >>>>> 3. If you want to preserve ordering, label each message with an ID
> and
> >>>>> dedup at the endpoints.  This does as you say, add some small noise
> to
> >>>>> your producers and consumers, but the above two options 1 and 2, do
> >>>>> not.
> >>>>>
> >>>>>
> >>>>>> I don't think I understand how using Linux-HA with clustering would
> >>>>>> lead to a splitting a single queue across multiple nodes. I'm not
> >>>>>> familiar with HA, but it looked like it was a solution to provide a
> >>>>>> replicated failover.
> >>>>>
> >>>>> You are right that HA techniques, indeed any kind of queue
> replication
> >>>>> or replicated failover, will not help you here.
> >>>>>
> >>>>> What you want is 'flow over' ie. "when load is high, make a new node
> >>>>> with the same routing info".  This is certainly doable.
> >>>>>
> >>>>> alexis
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>>> Thanks again,
> >>>>>> Paul
> >>>>>>
> >>>>>> On Mon, Aug 17, 2009 at 10:24 AM, Tony Garnock-Jones<
> tonyg at lshift.net> wrote:
> >>>>>>> Paul Dix wrote:
> >>>>>>>> Do you have a roadmap for when a scalable queue
> >>>>>>>> will be available?
> >>>>>>>
> >>>>>>> If by "scalable" you mean "replicated", then that's available now,
> by
> >>>>>>> configuration along the lines I hinted at in my previous message.
> Adding
> >>>>>>> clustering into the mix can help increase capacity, on top of that
> (at a
> >>>>>>> certain cost in configuration complexity).
> >>>>>>>
> >>>>>>> If instead you mean "exceeding RAM+swap size", we're hoping to have
> that
> >>>>>>> for the 1.7 release -- which ought to be out within a month or so.
> >>>>>>>
> >>>>>>>> Just to give you a little more information on what I'm doing, I'm
> >>>>>>>> building a live search/aggregation system. I'm hoping to push
> updates
> >>>>>>>> of a constant internet crawl through the messaging system so
> workers
> >>>>>>>> can analyze the content and build indexes as everything comes in.
> >>>>>>>
> >>>>>>> Sounds pretty cool!
> >>>>>>>
> >>>>>>> Tony
> >>>>>>> --
> >>>>>>>  [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
> >>>>>>>   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
> >>>>>>>  []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
> >>>>>>>
> >>>>>>
> >>>>>> _______________________________________________
> >>>>>> rabbitmq-discuss mailing list
> >>>>>> rabbitmq-discuss at lists.rabbitmq.com
> >>>>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
> >>>>>>
> >>>>>
> >>>>
> >>>
> >>
> >
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/64c422e2/attachment.htm 

From irrer at umich.edu  Tue Aug 18 14:57:51 2009
From: irrer at umich.edu (Jim Irrer)
Date: Tue, 18 Aug 2009 09:57:51 -0400
Subject: [rabbitmq-discuss] method-like calls
Message-ID: <3b6ef0790908180657r6b53d1f4j49bb60015fe65e23@mail.gmail.com>

Hi -

We are replacing much of our SOAP infrastructure with AMQP, and
one problem we are looking at is how to wrap an AMQP call so that
it has a nice programming interface.  Basically we want to serialize
an object on one side and de-serialize on the other side, and do it
in a language independent way (we use Java C#, and C++).

I am looking at REST (Representational State Transfer), XML-RPC,
and possibly JSON-RPC.  Ideally we would like something that
automatically does the serialization/de-serialization or generates
code that does it.

Has anyone found a technology that they like?

Thanks,

- Jim

Jim Irrer     irrer at umich.edu       (734) 647-4409
University of Michigan Hospital Radiation Oncology
519 W. William St.             Ann Arbor, MI 48103
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/50e5a9ec/attachment.htm 

From michael.greene at gmail.com  Tue Aug 18 15:10:50 2009
From: michael.greene at gmail.com (Michael Greene)
Date: Tue, 18 Aug 2009 09:10:50 -0500
Subject: [rabbitmq-discuss] method-like calls
In-Reply-To: <3b6ef0790908180657r6b53d1f4j49bb60015fe65e23@mail.gmail.com>
References: <3b6ef0790908180657r6b53d1f4j49bb60015fe65e23@mail.gmail.com>
Message-ID: <f4d6a21a0908180710u531f65abmaf31270ed0701fcd@mail.gmail.com>

We currently use Apache Thrift for this, and have had success with it over
the past year of use.  Some others have mentioned using Protobufs on the
mailing list.  JSON is also an alternative.  Thrift and Protobufs both
require code generation, but have a more compact representation and faster
serialization / deserialization because of it.  JSON is human-readable and
still quite compact compared to alternatives like XML serialization.
Michael

On Tue, Aug 18, 2009 at 8:57 AM, Jim Irrer <irrer at umich.edu> wrote:

> Hi -
>
> We are replacing much of our SOAP infrastructure with AMQP, and
> one problem we are looking at is how to wrap an AMQP call so that
> it has a nice programming interface.  Basically we want to serialize
> an object on one side and de-serialize on the other side, and do it
> in a language independent way (we use Java C#, and C++).
>
> I am looking at REST (Representational State Transfer), XML-RPC,
> and possibly JSON-RPC.  Ideally we would like something that
> automatically does the serialization/de-serialization or generates
> code that does it.
>
> Has anyone found a technology that they like?
>
> Thanks,
>
> - Jim
>
> Jim Irrer     irrer at umich.edu       (734) 647-4409
> University of Michigan Hospital Radiation Oncology
> 519 W. William St.             Ann Arbor, MI 48103
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/3a167cca/attachment.htm 

From paul at pauldix.net  Tue Aug 18 15:24:36 2009
From: paul at pauldix.net (Paul Dix)
Date: Tue, 18 Aug 2009 10:24:36 -0400
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <3b6ef0790908180647q1066d470wa4fe164d3212fe89@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
	<167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
	<c0a615890908171236v4cb52ec8xcf0fde56a854966c@mail.gmail.com>
	<167204d20908180120w39161f3cn2ac7268fc5a0ecf5@mail.gmail.com>
	<c0a615890908180618p1bf3ecfdj4caa5c19fa970721@mail.gmail.com>
	<3b6ef0790908180647q1066d470wa4fe164d3212fe89@mail.gmail.com>
Message-ID: <c0a615890908180724m2ceb7520hd84fb2900658c57e@mail.gmail.com>

Round-robin was just as an example for the load-balancing strategy.
You could also do it based on a routing-key hashing strategy. The most
preferable one would be to route based on queue size. I just chose
round-robin because it's the simplest strategy in many cases. Those
are just for the producer side of the equation.

As for the consumers. I really just want them to specify one place in
the code (host, exchange, queue). However, since the scaling plan
seems to be to send out to multiple-queues and exchanges, the
consumers need to check every single one. That's the round-robin on
the consumers part. Basically, every consumer can process any one of
the queues (assuming all these queues were created for the same
message flow). I'd rather the consumers not have to know about all
this stuff.

The truth is that it will be changing dynamically. In fact, the flow
of updates online spikes during certain times. It's not a constant
thing. I'm deployed on EC2 so I'll be spinning up and shutting down
producers and consumers on the the fly as needed. I'm fine with the
messaging system not being that dynamic, as long as I can have the
queue load-balanced across 10 instances (or however many it takes). So
I just make sure that the messaging system is strong enough to handle
what comes through during peak load.

Paul


On Tue, Aug 18, 2009 at 9:47 AM, Jim Irrer<irrer at umich.edu> wrote:
> It seems like one of the problems with round robin is that consumers may
> spend
> more time on some messages than others, so you are depending on a random
> distribution to even out the load.
>
> To help load balancing, could the consumers be set up to, instead of round
> robin,
> simply each try to read from a common queue, and who ever gets there first
> gets the message.
> This would mean that each consumer only gets a message when they become
> idle,
> which seems like what would be wanted.
>
> On the producer side, if there were multiple queues, the producer would want
> to
> write to the queue with the least amount of messages on it.
>
> I'm trying to learn AMQP too and this has been an interesting discussion to
> watch.
>
> Thanks,
>
> - Jim
>
> Jim Irrer ? ? irrer at umich.edu ? ? ? (734) 647-4409
> University of Michigan Hospital Radiation Oncology
> 519 W. William St. ? ? ? ? ? ? Ann Arbor, MI 48103
>
>
> On Tue, Aug 18, 2009 at 9:18 AM, Paul Dix <paul at pauldix.net> wrote:
>>
>> All of that makes sense.
>>
>> Let me give some more specifics about what I'm building and how I'm
>> hoping to use the messaging system. I'm doing a constant internet
>> crawl of sorts, twitter updates and everything else are in there. So
>> when something gets pulled down the document gets inserted into a
>> horizontally scalable key value store in the sky. I then want to send
>> a message through the system that this key/value has been
>> inserted/updated. This is being done by 20-100 boxes.
>>
>> I then want that message to be grabbed by a consumer where some
>> processing will happen and probably some ranking, relevance and other
>> things get written to an index somewhere (also being done by a large
>> number of boxes).
>>
>> So for this specific case I'm using a direct exchange with a single
>> queue (no message persistence and don't bother keeping ordering).
>> Hundreds of producers are posting messages to the exchange with the
>> same routing key and hundreds of consumers are pulling off the queue.
>> It's the firehose thing. Each message has to be processed once by any
>> one of the hundreds of consumers.
>>
>> I guess I was hoping for the flow management part to be handled by
>> Rabbit. It looks to me that if I want to scale past the ingress
>> capabilities of one queue or exchange I have to manage that on the
>> producer and consumer side.
>>
>> I can create multiple exchanges and bind to the same queue if the
>> routing becomes the bottleneck, but then the producers need to round
>> robin between the exchanges.
>>
>> I can create multiple queues bound with different routing keys (flow1,
>> flow2) if the queue becomes the bottleneck, but then the producer
>> needs to know to round robin to the different routing keys and the
>> consumers need to check both queues.
>>
>> So in essence, when I mentioned scalability, it was a reference to
>> being able to transparently scale the messaging system to multiple
>> boxes. And more specifically, I want my hundreds of producers to post
>> messages to a single exchange with a single routing key. I want my
>> hundreds of consumers to be able to consume messages off a single
>> queue. I want the exchange and the queue to be scalable (in the
>> multi-box, multi-process sense) where the messaging system handles it.
>> I want the messaging system to be scalable like the key/value store is
>> scalable. Transparently across many boxes.
>>
>> There's really only one part of my system that has this requirement.
>> There are plenty of other aspects in which I'll use messaging and not
>> have these kinds of insane needs. As I work more with the system it's
>> likely that I'll want to use more complex routing logic. It's possible
>> I'll want to break updates from domains into separate message flows.
>>
>> Thank you very much for being so helpful. Sorry for the lengthy response.
>> Paul
>>
>> On Tue, Aug 18, 2009 at 4:20 AM, Alexis
>> Richardson<alexis.richardson at gmail.com> wrote:
>> > Paul,
>> >
>> > On Mon, Aug 17, 2009 at 8:36 PM, Paul Dix<paul at pauldix.net> wrote:
>> >> Yeah, that's what I'm talking about. There will probably be upwards of
>> >> a few hundred producers and a few hundred consumers.
>> >
>> > Cool.
>> >
>> > So one question you need to answer is: do you want all the consumers
>> > to receive the same messages? ?I.e.:
>> >
>> > * are you aggregating all the producers into one 'firehose', and then
>> > sending the whole firehose on to all connected consumers?
>> >
>> > OR
>> >
>> > * are you planning to in some way share messages out amongst connected
>> > consumers, eg on a round robin basis
>> >
>> > See more below re flow1, flow2...
>> >
>> >
>> >> The total ingress
>> >> is definitely what I'm most worried about right now.
>> >
>> > OK.
>> >
>> > Be aware that in high ingress rate cases you may be limited by the
>> > client egress rate, which is strongly implementation and platform
>> > dependent. ?Also, see Matthias' notes on testing performance, which
>> > are googleable from the rabbitmq archives, if you want to run some
>> > test cases at any point.
>> >
>> >
>> >
>> >> Later, memory may
>> >> be a concern, but hopefully the consumers are pulling so quickly that
>> >> the queue never gets extremely large.
>> >
>> > Yep.
>> >
>> >
>> >> Can you give me more specific details (or a pointer) to how the flow1,
>> >> flow2 thing work (both producer and consumer side)?
>> >
>> > Sure.
>> >
>> > First you need to read up on what 'direct exchanges' are and how they
>> > work in AMQP. ?I recommend Jason's intro to get you started:
>> >
>> > http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/
>> >
>> > More background info can be found here: www.rabbitmq.com/how
>> >
>> > In a nutshell, RabbitMQ will route any message it receives on to one
>> > or more queues.
>> >
>> > Each queue lives on a node, and nodes are members of a cluster. ?You
>> > can have one or more nodes per machine - a good guide is to have one
>> > per core. ?You can send messages to any node in the cluster and they
>> > will get routed to the right places (adding more nodes to a cluster is
>> > how you scale ingress and availability).
>> >
>> > The routing model is based on message routing keys: queues receive
>> > messages whose routing keys match routing patterns ("bindings"). ?Note
>> > that multiple queues can request messages matching the same key,
>> > giving you 1-many pubsub. ?This is explained in Jason's article. ?I
>> > suggest you use the 'direct exchange' routing model, in which each
>> > message has one routing key, e.g.: "flow1", "flow2".
>> >
>> > Take a look at the article and let us know if it all makes sense.
>> >
>> > alexis
>> >
>> >
>> >> Thanks,
>> >> Paul
>> >>
>> >> On Mon, Aug 17, 2009 at 2:32 PM, Alexis
>> >> Richardson<alexis.richardson at gmail.com> wrote:
>> >>> On Mon, Aug 17, 2009 at 5:22 PM, Paul Dix<paul at pauldix.net> wrote:
>> >>>> So what exactly does option 1 look like?
>> >>>>
>> >>>> It sounds like it's possible to have a queue with the same id on two
>> >>>> different nodes bound to the same exchange.
>> >>>
>> >>> Not quite. ?Same routing - two queues, two ids. ?Actually now that I
>> >>> think about it that won't give you exactly what you need. ?More below.
>> >>>
>> >>>
>> >>>> Will the exchange will
>> >>>> then round robin the messages to the two different queues? If so,
>> >>>> that's exactly what I'm looking for. I don't really care about order
>> >>>> on this queue.
>> >>>
>> >>> No it won't and that's why my suggestion was wrong.
>> >>>
>> >>> Round robin does occur when you have two consumers (clients) connected
>> >>> to one queue. ?This WILL help you by draining the queue faster, if
>> >>> memory is a limitation.
>> >>>
>> >>> If total ingress is the limitation you can increase that by splitting
>> >>> the flow. ?Suppose you start with one queue bound once to one exchange
>> >>> with key "flow1". ?Then all messages with routing key flow1 will go to
>> >>> that queue. ?When load is heavy, add a queue with key "flow2", on a
>> >>> second node. ?Then, alternate (if you prefer, randomly) between
>> >>> routing keys flow1 and flow2. ?This will spread the load as you
>> >>> require. ?And so on, for more queues.
>> >>>
>> >>> You can make this part of a load balancing layer on the server side,
>> >>> so that clients don't have to be coded too much.
>> >>>
>> >>> Is this along the lines of what you need? ?Let me know, and I can
>> >>> elaborate.
>> >>>
>> >>> alexis
>> >>>
>> >>>
>> >>>
>> >>>
>> >>>> Thanks,
>> >>>> Paul
>> >>>>
>> >>>> On Mon, Aug 17, 2009 at 10:55 AM, Alexis
>> >>>> Richardson<alexis.richardson at gmail.com> wrote:
>> >>>>> Paul
>> >>>>>
>> >>>>> On Mon, Aug 17, 2009 at 3:34 PM, Paul Dix<paul at pauldix.net> wrote:
>> >>>>>> Sorry for the confusion. I mean scalability on a single queue. Say
>> >>>>>> I
>> >>>>>> want to push 20k messages per second through a single queue. If a
>> >>>>>> single node can't handle that it seems I'm out of luck. That is, if
>> >>>>>> I'm understanding how things work.
>> >>>>>
>> >>>>> You can in principle just add more nodes to the cluster. ?More
>> >>>>> details below.
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>> So I guess I'm not worried about total queue size, but queue
>> >>>>>> throughput (although size may become an issue, I'm not sure). It
>> >>>>>> seems
>> >>>>>> the solution is to split out across multiple queues, but I was
>> >>>>>> hoping
>> >>>>>> to avoid that since it will add a layer of complexity to my
>> >>>>>> producers
>> >>>>>> and consumers.
>> >>>>>
>> >>>>> 1. To maximise throughput, don't use persistence. ?To make it
>> >>>>> bigger,
>> >>>>> forget about ordering. ?So for example, you can easily have two
>> >>>>> queues, one per node, subscribed to the same direct exchange with
>> >>>>> the
>> >>>>> same key, and you ought to double throughput (assuming all other
>> >>>>> things being equal and fair).
>> >>>>>
>> >>>>> 2. If you want to be both fast and 'reliable' (no loss of acked
>> >>>>> messages), then add more queues and make them durable, and set
>> >>>>> messages to be persistent.
>> >>>>>
>> >>>>> 3. If you want to preserve ordering, label each message with an ID
>> >>>>> and
>> >>>>> dedup at the endpoints. ?This does as you say, add some small noise
>> >>>>> to
>> >>>>> your producers and consumers, but the above two options 1 and 2, do
>> >>>>> not.
>> >>>>>
>> >>>>>
>> >>>>>> I don't think I understand how using Linux-HA with clustering would
>> >>>>>> lead to a splitting a single queue across multiple nodes. I'm not
>> >>>>>> familiar with HA, but it looked like it was a solution to provide a
>> >>>>>> replicated failover.
>> >>>>>
>> >>>>> You are right that HA techniques, indeed any kind of queue
>> >>>>> replication
>> >>>>> or replicated failover, will not help you here.
>> >>>>>
>> >>>>> What you want is 'flow over' ie. "when load is high, make a new node
>> >>>>> with the same routing info". ?This is certainly doable.
>> >>>>>
>> >>>>> alexis
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>> Thanks again,
>> >>>>>> Paul
>> >>>>>>
>> >>>>>> On Mon, Aug 17, 2009 at 10:24 AM, Tony
>> >>>>>> Garnock-Jones<tonyg at lshift.net> wrote:
>> >>>>>>> Paul Dix wrote:
>> >>>>>>>> Do you have a roadmap for when a scalable queue
>> >>>>>>>> will be available?
>> >>>>>>>
>> >>>>>>> If by "scalable" you mean "replicated", then that's available now,
>> >>>>>>> by
>> >>>>>>> configuration along the lines I hinted at in my previous message.
>> >>>>>>> Adding
>> >>>>>>> clustering into the mix can help increase capacity, on top of that
>> >>>>>>> (at a
>> >>>>>>> certain cost in configuration complexity).
>> >>>>>>>
>> >>>>>>> If instead you mean "exceeding RAM+swap size", we're hoping to
>> >>>>>>> have that
>> >>>>>>> for the 1.7 release -- which ought to be out within a month or so.
>> >>>>>>>
>> >>>>>>>> Just to give you a little more information on what I'm doing, I'm
>> >>>>>>>> building a live search/aggregation system. I'm hoping to push
>> >>>>>>>> updates
>> >>>>>>>> of a constant internet crawl through the messaging system so
>> >>>>>>>> workers
>> >>>>>>>> can analyze the content and build indexes as everything comes in.
>> >>>>>>>
>> >>>>>>> Sounds pretty cool!
>> >>>>>>>
>> >>>>>>> Tony
>> >>>>>>> --
>> >>>>>>> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>> >>>>>>> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>> >>>>>>> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>> >>>>>>>
>> >>>>>>
>> >>>>>> _______________________________________________
>> >>>>>> rabbitmq-discuss mailing list
>> >>>>>> rabbitmq-discuss at lists.rabbitmq.com
>> >>>>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>> >>>>>>
>> >>>>>
>> >>>>
>> >>>
>> >>
>> >
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From norton at tkg.att.ne.jp  Tue Aug 18 15:27:16 2009
From: norton at tkg.att.ne.jp (Joseph Wayne Norton)
Date: Tue, 18 Aug 2009 23:27:16 +0900
Subject: [rabbitmq-discuss] method-like calls
In-Reply-To: <f4d6a21a0908180710u531f65abmaf31270ed0701fcd@mail.gmail.com>
References: <3b6ef0790908180657r6b53d1f4j49bb60015fe65e23@mail.gmail.com>
	<f4d6a21a0908180710u531f65abmaf31270ed0701fcd@mail.gmail.com>
Message-ID: <op.uyu3ro1xhmvyvs@localhost>


Hello.

Although there is no direct relationship to AMQP or rabbitmq (except for  
erlang), please see here
for one approach for interfacing non-erlang (and erlang) clients with an  
erlang-based server.

   http://github.com/norton/ubf/tree/master

In addition the original UBF-based transport developed by Joe Armstrong,  
several other new
transports have been added.  Documentation and adding more examples is  
still in progress.

thanks,

Joe N.


On Tue, 18 Aug 2009 23:10:50 +0900, Michael Greene  
<michael.greene at gmail.com> wrote:

> We currently use Apache Thrift for this, and have had success with it  
> over
> the past year of use.  Some others have mentioned using Protobufs on the
> mailing list.  JSON is also an alternative.  Thrift and Protobufs both
> require code generation, but have a more compact representation and  
> faster
> serialization / deserialization because of it.  JSON is human-readable  
> and
> still quite compact compared to alternatives like XML serialization.
> Michael
>
> On Tue, Aug 18, 2009 at 8:57 AM, Jim Irrer <irrer at umich.edu> wrote:
>
>> Hi -
>>
>> We are replacing much of our SOAP infrastructure with AMQP, and
>> one problem we are looking at is how to wrap an AMQP call so that
>> it has a nice programming interface.  Basically we want to serialize
>> an object on one side and de-serialize on the other side, and do it
>> in a language independent way (we use Java C#, and C++).
>>
>> I am looking at REST (Representational State Transfer), XML-RPC,
>> and possibly JSON-RPC.  Ideally we would like something that
>> automatically does the serialization/de-serialization or generates
>> code that does it.
>>
>> Has anyone found a technology that they like?
>>
>> Thanks,
>>
>> - Jim
>>
>> Jim Irrer     irrer at umich.edu       (734) 647-4409
>> University of Michigan Hospital Radiation Oncology
>> 519 W. William St.             Ann Arbor, MI 48103
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
>>



-- 
norton at alum.mit.edu



From darien at kindlund.com  Tue Aug 18 15:41:35 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Tue, 18 Aug 2009 10:41:35 -0400
Subject: [rabbitmq-discuss] STOMP error messages saner (was Re: Weird
	Crash (91MB message over STOMP) [Reproducible])
In-Reply-To: <4A897EBF.7010701@lshift.net>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com> 
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com> 
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com> 
	<4A835011.2060800@lshift.net>
	<50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com> 
	<4A897EBF.7010701@lshift.net>
Message-ID: <50c8ffe90908180741j5975f640lad9e5be5e98e90a6@mail.gmail.com>

Hi Tony,

One quick question: Is there any way to swap different versions of
compiled STOMP adapters without having to restart RabbitMQ?  I'd
really like to test the changes made, but starting up/shutting down
consumers is a slow, expensive process.  I was kind of thinking that
the swap in procedure ideally would be the same as swapping in a new
Apache module (e.g., mod_perl) and issuing a graceful restart, which
would allow existing connections to use the old code, while the new
code would be used by new connections.

I'm guessing this is probably not something implemented, but thought
I'd ask just in case.

-- Darien


On Mon, Aug 17, 2009 at 12:01 PM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Hi again,
>
> Darien Kindlund wrote:
>>>>> 2) STOMP client disconnects can result in huge error messages being logged
>
> This is ready, too, now: the branch is bug21365 of rabbitmq-stomp.
>
> Regards,
> ?Tony
> --
> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>



From irrer at umich.edu  Tue Aug 18 15:48:25 2009
From: irrer at umich.edu (Jim Irrer)
Date: Tue, 18 Aug 2009 10:48:25 -0400
Subject: [rabbitmq-discuss] method-like calls
In-Reply-To: <op.uyu3ro1xhmvyvs@localhost>
References: <3b6ef0790908180657r6b53d1f4j49bb60015fe65e23@mail.gmail.com>
	<f4d6a21a0908180710u531f65abmaf31270ed0701fcd@mail.gmail.com>
	<op.uyu3ro1xhmvyvs@localhost>
Message-ID: <3b6ef0790908180748p5728c093r74c8189312e0578b@mail.gmail.com>

I'll check those out.

Thanks - That was fast.

- Jim

Jim Irrer     irrer at umich.edu       (734) 647-4409
University of Michigan Hospital Radiation Oncology
519 W. William St.             Ann Arbor, MI 48103


On Tue, Aug 18, 2009 at 10:27 AM, Joseph Wayne Norton
<norton at tkg.att.ne.jp>wrote:

>
> Hello.
>
> Although there is no direct relationship to AMQP or rabbitmq (except for
> erlang), please see here
> for one approach for interfacing non-erlang (and erlang) clients with an
> erlang-based server.
>
>  http://github.com/norton/ubf/tree/master
>
> In addition the original UBF-based transport developed by Joe Armstrong,
> several other new
> transports have been added.  Documentation and adding more examples is
> still in progress.
>
> thanks,
>
> Joe N.
>
>
>
> On Tue, 18 Aug 2009 23:10:50 +0900, Michael Greene <
> michael.greene at gmail.com> wrote:
>
>  We currently use Apache Thrift for this, and have had success with it over
>> the past year of use.  Some others have mentioned using Protobufs on the
>> mailing list.  JSON is also an alternative.  Thrift and Protobufs both
>> require code generation, but have a more compact representation and faster
>> serialization / deserialization because of it.  JSON is human-readable and
>> still quite compact compared to alternatives like XML serialization.
>> Michael
>>
>> On Tue, Aug 18, 2009 at 8:57 AM, Jim Irrer <irrer at umich.edu> wrote:
>>
>>  Hi -
>>>
>>> We are replacing much of our SOAP infrastructure with AMQP, and
>>> one problem we are looking at is how to wrap an AMQP call so that
>>> it has a nice programming interface.  Basically we want to serialize
>>> an object on one side and de-serialize on the other side, and do it
>>> in a language independent way (we use Java C#, and C++).
>>>
>>> I am looking at REST (Representational State Transfer), XML-RPC,
>>> and possibly JSON-RPC.  Ideally we would like something that
>>> automatically does the serialization/de-serialization or generates
>>> code that does it.
>>>
>>> Has anyone found a technology that they like?
>>>
>>> Thanks,
>>>
>>> - Jim
>>>
>>> Jim Irrer     irrer at umich.edu       (734) 647-4409
>>> University of Michigan Hospital Radiation Oncology
>>> 519 W. William St.             Ann Arbor, MI 48103
>>>
>>> _______________________________________________
>>> rabbitmq-discuss mailing list
>>> rabbitmq-discuss at lists.rabbitmq.com
>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>
>>>
>>>
>
>
> --
> norton at alum.mit.edu
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/681c68ff/attachment.htm 

From g at rre.tt  Tue Aug 18 16:13:58 2009
From: g at rre.tt (Garrett Smith)
Date: Tue, 18 Aug 2009 10:13:58 -0500
Subject: [rabbitmq-discuss] method-like calls
In-Reply-To: <f4d6a21a0908180710u531f65abmaf31270ed0701fcd@mail.gmail.com>
References: <3b6ef0790908180657r6b53d1f4j49bb60015fe65e23@mail.gmail.com>
	<f4d6a21a0908180710u531f65abmaf31270ed0701fcd@mail.gmail.com>
Message-ID: <ce2570e20908180813s39144a7cq48107b6783c8f2ec@mail.gmail.com>

On Tue, Aug 18, 2009 at 9:10 AM, Michael Greene<michael.greene at gmail.com> wrote:
> We currently use Apache Thrift for this, and have had success with it over
> the past year of use.

I'd second this.

There is some release management overhead in using Thrift or Protobuf,
so I'd also consider using JSON for the message payload. If your
schema changes a lot and you don't have massive throughput
requirements, I'd lean toward JSON just for its flexibility and solid
language support.

IIRC, we showed that JSON in Python was over 20x slower than Thrift at
encoding/decoding for messages that were basically hash maps (~10
fields, 512K total size). But unless your performance requirements are
unusually demanding, I wouldn't worry too much about this.

Garrett



From majek04 at gmail.com  Tue Aug 18 17:57:21 2009
From: majek04 at gmail.com (majek04)
Date: Tue, 18 Aug 2009 17:57:21 +0100
Subject: [rabbitmq-discuss] STOMP error messages saner (was Re: Weird
	Crash (91MB message over STOMP) [Reproducible])
In-Reply-To: <50c8ffe90908170908x36a262b2na29102bf08a13201@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com>
	<4A835011.2060800@lshift.net>
	<50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com>
	<4A897EBF.7010701@lshift.net>
	<50c8ffe90908170908x36a262b2na29102bf08a13201@mail.gmail.com>
Message-ID: <3bb0d9710908180957k315237d0h7d57549d892dc1e7@mail.gmail.com>

On Mon, Aug 17, 2009 at 17:08, Darien Kindlund<darien at kindlund.com> wrote:
> Great! ?Let me know when the changes hit the default.

The fix has just been merged into the default STOMP branch.



From darien at kindlund.com  Tue Aug 18 18:05:56 2009
From: darien at kindlund.com (Darien Kindlund)
Date: Tue, 18 Aug 2009 13:05:56 -0400
Subject: [rabbitmq-discuss] STOMP error messages saner (was Re: Weird
	Crash (91MB message over STOMP) [Reproducible])
In-Reply-To: <3bb0d9710908180957k315237d0h7d57549d892dc1e7@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com> 
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com> 
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com> 
	<4A835011.2060800@lshift.net>
	<50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com> 
	<4A897EBF.7010701@lshift.net>
	<50c8ffe90908170908x36a262b2na29102bf08a13201@mail.gmail.com> 
	<3bb0d9710908180957k315237d0h7d57549d892dc1e7@mail.gmail.com>
Message-ID: <50c8ffe90908181005n1bb14adfjbc08ec6f5c0d2b9a@mail.gmail.com>

Thanks Marek!
-- Darien

On Tue, Aug 18, 2009 at 12:57 PM, majek04<majek04 at gmail.com> wrote:
> On Mon, Aug 17, 2009 at 17:08, Darien Kindlund<darien at kindlund.com> wrote:
>> Great! ?Let me know when the changes hit the default.
>
> The fix has just been merged into the default STOMP branch.
>



From ram.muthiah at yahoo.com  Tue Aug 18 19:50:35 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Tue, 18 Aug 2009 11:50:35 -0700 (PDT)
Subject: [rabbitmq-discuss] Working with Java Client
Message-ID: <208517.40949.qm@web44705.mail.sp1.yahoo.com>

I downloaded java client (for java 1.5) and source code from http://www.rabbitmq.com/java-client.html page. I downloaded http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-bin-1.6.0.zip, http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip respectively for java client and source code. 

Instruction for "Bundled Examples" (http://www.rabbitmq.com/examples.html#demo-server) says "The source code for these examples is in the java/test/srcfolder in the source distribution". But, there is no java/test/src folder in the source distribution I downloaded from http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip.
This zip folder has the structure like
rabbitmq-java-client-1.6.0/test/src/com/rabbitmq/client/..... All sample codes refer AMQP class which is supposed to be in client folder, but AMQP is missing. So the commands like "import
com.rabbitmq.client.AMQP.BasicProperties" fails all over the place.

Did I download the correct file for source code for Java client? 

Thanks



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/0860811d/attachment.htm 

From pauljones23 at gmail.com  Tue Aug 18 20:00:13 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Tue, 18 Aug 2009 20:00:13 +0100
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
Message-ID: <29598b610908181200u365bd8d8r8a9b0d6ab7b5af97@mail.gmail.com>

Hi Ram,

The AMQP class is automatically generated by the included code generation
script. If you run "ant build" in the downloaded directory, you'll find a
build/gensrc directory is created, and within that will be AMQP.java.

Paul.

On Tue, Aug 18, 2009 at 7:50 PM, Ram Muthiah <ram.muthiah at yahoo.com> wrote:

> I downloaded java client (for java 1.5) and source code from
> http://www.rabbitmq.com/java-client.html page. I downloaded
> http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-bin-1.6.0.zip,
>
> http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.ziprespectively for java client and source code.
>
> Instruction for "Bundled Examples" (
> http://www.rabbitmq.com/examples.html#demo-server) says "The source code
> for these examples is in the java/test/src folder in the source
> distribution". But, there is no java/test/src folder in the source
> distribution I downloaded from
> http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip.
> This zip folder has the structure like
> rabbitmq-java-client-1.6.0/test/src/com/rabbitmq/client/..... All sample
> codes refer AMQP class which is supposed to be in client folder, but AMQP is
> missing. So the commands like "import
> com.rabbitmq.client.AMQP.BasicProperties" fails all over the place.
>
> Did I download the correct file for source code for Java client?
>
> Thanks
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/ddb70bd0/attachment.htm 

From matthew at lshift.net  Tue Aug 18 19:57:52 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Tue, 18 Aug 2009 19:57:52 +0100
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
Message-ID: <20090818185751.GA6592@wellquite.org>

Hi Ram,

Yes, you have the right client and source code. You have in fact
downloaded "zip" files which contain several other files - think of them
as a container of other files. Thus if you "expand" the zip files (most
computers these days can do this - if you're using Windows XP or above
then just "double clicking" on the zip files will "open" them, from
where you can copy the files out) then you will gain access to the files
you're after.

Matthew

On Tue, Aug 18, 2009 at 11:50:35AM -0700, Ram Muthiah wrote:
> I downloaded java client (for java 1.5) and source code from http://www.rabbitmq.com/java-client.html page. I downloaded http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-bin-1.6.0.zip, http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip respectively for java client and source code. 
> 
> Instruction for "Bundled Examples" (http://www.rabbitmq.com/examples.html#demo-server) says "The source code for these examples is in the java/test/srcfolder in the source distribution". But, there is no java/test/src folder in the source distribution I downloaded from http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip.
> This zip folder has the structure like
> rabbitmq-java-client-1.6.0/test/src/com/rabbitmq/client/..... All sample codes refer AMQP class which is supposed to be in client folder, but AMQP is missing. So the commands like "import
> com.rabbitmq.client.AMQP.BasicProperties" fails all over the place.
> 
> Did I download the correct file for source code for Java client? 
> 
> Thanks
> 
> 
> 
>       

> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss




From matthias at lshift.net  Tue Aug 18 20:16:50 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Tue, 18 Aug 2009 20:16:50 +0100
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
Message-ID: <4A8AFE22.5060102@lshift.net>

Ram,

just to follow up on what Paul and Matthew said ...

Ram Muthiah wrote:
> Instruction for "Bundled Examples" 
> (http://www.rabbitmq.com/examples.html#demo-server) says "The source 
> code for these examples is in the |java/test/src| folder in the source 
> distribution". But, there is no java/test/src folder in the source 
> distribution I downloaded from 
> http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip. 
> This zip folder has the structure like 
> rabbitmq-java-client-1.6.0/test/src/com/rabbitmq/client/.....  

The examples are indeed located in the test/src dir. I have corrected 
the web page.

> All sample codes refer AMQP class which is supposed to be in client folder, but 
> AMQP is missing. So the commands like "import 
> com.rabbitmq.client.AMQP.BasicProperties" fails all over the place.

If you want to build the client from source, please follow the 
instructions at http://www.rabbitmq.com/build-java-client.html. The 
build process generates the AMQP class automatically from the spec.


Regards,

Matthias.



From ram.muthiah at yahoo.com  Tue Aug 18 21:00:09 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Tue, 18 Aug 2009 13:00:09 -0700 (PDT)
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <4A8AFE22.5060102@lshift.net>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
	<4A8AFE22.5060102@lshift.net>
Message-ID: <71579.39324.qm@web44714.mail.sp1.yahoo.com>

Hi Matthias and Paul,

Thank you. I will try building the client. 

Matthew: Thanks. I have already unzipped the files, that's not an issue! The problem is missing classes in the unzipped folder. Anyway, I am going to try building the client to see what happens. 

Regards,
Ram




________________________________
From: Matthias Radestock <matthias at lshift.net>
To: Ram Muthiah <ram.muthiah at yahoo.com>
Cc: rabbitmq-discuss at lists.rabbitmq.com
Sent: Tuesday, August 18, 2009 12:16:50 PM
Subject: Re: [rabbitmq-discuss] Working with Java Client

Ram,

just to follow up on what Paul and Matthew said ...

Ram Muthiah wrote:
> Instruction for "Bundled Examples" (http://www.rabbitmq.com/examples.html#demo-server) says "The source code for these examples is in the |java/test/src| folder in the source distribution". But, there is no java/test/src folder in the source distribution I downloaded from http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip. This zip folder has the structure like rabbitmq-java-client-1.6.0/test/src/com/rabbitmq/client/.....  

The examples are indeed located in the test/src dir. I have corrected the web page.

> All sample codes refer AMQP class which is supposed to be in client folder, but AMQP is missing. So the commands like "import com.rabbitmq.client.AMQP.BasicProperties" fails all over the place.

If you want to build the client from source, please follow the instructions at http://www.rabbitmq.com/build-java-client.html. The build process generates the AMQP class automatically from the spec.


Regards,

Matthias.



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/0dea8932/attachment.htm 

From matthew at lshift.net  Tue Aug 18 21:05:12 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Tue, 18 Aug 2009 21:05:12 +0100
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <71579.39324.qm@web44714.mail.sp1.yahoo.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
	<4A8AFE22.5060102@lshift.net>
	<71579.39324.qm@web44714.mail.sp1.yahoo.com>
Message-ID: <20090818200510.GC6592@wellquite.org>

Ram,

On Tue, Aug 18, 2009 at 01:00:09PM -0700, Ram Muthiah wrote:
> Matthew: Thanks. I have already unzipped the files, that's not an issue! The problem is missing classes in the unzipped folder. Anyway, I am going to try building the client to see what happens. 

My apologies - I failed to fully read your first email. Glad you're
making progress.

Matthew



From ram.muthiah at yahoo.com  Wed Aug 19 00:01:41 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Tue, 18 Aug 2009 16:01:41 -0700 (PDT)
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <4A8AFE22.5060102@lshift.net>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
	<4A8AFE22.5060102@lshift.net>
Message-ID: <877337.64591.qm@web44707.mail.sp1.yahoo.com>

API guide for Java client (http://www.rabbitmq.com/api-guide.html) is useful. Is there a tutorial or document with complete java code to connect to the server to help Java newbies? 

Thanks
Ram




________________________________
From: Matthias Radestock <matthias at lshift.net>
To: Ram Muthiah <ram.muthiah at yahoo.com>
Cc: rabbitmq-discuss at lists.rabbitmq.com
Sent: Tuesday, August 18, 2009 12:16:50 PM
Subject: Re: [rabbitmq-discuss] Working with Java Client

Ram,

just to follow up on what Paul and Matthew said ...

Ram Muthiah wrote:
> Instruction for "Bundled Examples" (http://www.rabbitmq.com/examples.html#demo-server) says "The source code for these examples is in the |java/test/src| folder in the source distribution". But, there is no java/test/src folder in the source distribution I downloaded from http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip. This zip folder has the structure like rabbitmq-java-client-1.6.0/test/src/com/rabbitmq/client/.....  

The examples are indeed located in the test/src dir. I have corrected the web page.

> All sample codes refer AMQP class which is supposed to be in client folder, but AMQP is missing. So the commands like "import com.rabbitmq.client.AMQP.BasicProperties" fails all over the place.

If you want to build the client from source, please follow the instructions at http://www.rabbitmq.com/build-java-client.html. The build process generates the AMQP class automatically from the spec.


Regards,

Matthias.



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/febee93c/attachment.htm 

From ram.muthiah at yahoo.com  Wed Aug 19 02:43:31 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Tue, 18 Aug 2009 18:43:31 -0700 (PDT)
Subject: [rabbitmq-discuss] Searching the list archive
Message-ID: <239155.17620.qm@web44701.mail.sp1.yahoo.com>

Is there a way you can search all threads in list archive? Thanks.



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090818/a9a76012/attachment.htm 

From pauljones23 at gmail.com  Wed Aug 19 06:13:18 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Wed, 19 Aug 2009 06:13:18 +0100
Subject: [rabbitmq-discuss] Searching the list archive
In-Reply-To: <239155.17620.qm@web44701.mail.sp1.yahoo.com>
References: <239155.17620.qm@web44701.mail.sp1.yahoo.com>
Message-ID: <29598b610908182213g665288f3o842647ac8e886525@mail.gmail.com>

Hi Ram,

Nabble indexes the Rabbit mailing list, so you can use it to search:
http://www.nabble.com/RabbitMQ-f25704.html

Paul.

On Wed, Aug 19, 2009 at 2:43 AM, Ram Muthiah <ram.muthiah at yahoo.com> wrote:

> Is there a way you can search all threads in list archive? Thanks.
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090819/098ac64d/attachment.htm 

From pauljones23 at gmail.com  Wed Aug 19 08:21:30 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Wed, 19 Aug 2009 08:21:30 +0100
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <877337.64591.qm@web44707.mail.sp1.yahoo.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
	<4A8AFE22.5060102@lshift.net>
	<877337.64591.qm@web44707.mail.sp1.yahoo.com>
Message-ID: <29598b610908190021v2a768504k312cf3d55f9e049d@mail.gmail.com>

Hi Ram,

Both the source and binary distributions do contain runnable examples. The
page http://www.rabbitmq.com/examples.html does detail how to run the
examples - if you're having trouble building the source distribution, these
are also all pre-compiled in the binary distribution that you found.
Potentially, the quickest way to understand it all would be to run the
examples in the binary distribution whilst using the source distribution to
get an understanding of what is going on.

Paul.

On Wed, Aug 19, 2009 at 12:01 AM, Ram Muthiah <ram.muthiah at yahoo.com> wrote:

> API guide for Java client (http://www.rabbitmq.com/api-guide.html) is
> useful. Is there a tutorial or document with complete java code to connect
> to the server to help Java newbies?
>
> Thanks
> Ram
>
> ------------------------------
> *From:* Matthias Radestock <matthias at lshift.net>
> *To:* Ram Muthiah <ram.muthiah at yahoo.com>
> *Cc:* rabbitmq-discuss at lists.rabbitmq.com
> *Sent:* Tuesday, August 18, 2009 12:16:50 PM
> *Subject:* Re: [rabbitmq-discuss] Working with Java Client
>
> Ram,
>
> just to follow up on what Paul and Matthew said ...
>
> Ram Muthiah wrote:
> > Instruction for "Bundled Examples" (
> http://www.rabbitmq.com/examples.html#demo-server) says "The source code
> for these examples is in the |java/test/src| folder in the source
> distribution". But, there is no java/test/src folder in the source
> distribution I downloaded from
> http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip.
> This zip folder has the structure like
> rabbitmq-java-client-1.6.0/test/src/com/rabbitmq/client/.....
>
> The examples are indeed located in the test/src dir. I have corrected the
> web page.
>
> > All sample codes refer AMQP class which is supposed to be in client
> folder, but AMQP is missing. So the commands like "import
> com.rabbitmq.client.AMQP.BasicProperties" fails all over the place.
>
> If you want to build the client from source, please follow the instructions
> at http://www.rabbitmq.com/build-java-client.html. The build process
> generates the AMQP class automatically from the spec.
>
>
> Regards,
>
> Matthias.
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090819/84eccfc6/attachment.htm 

From alexis.richardson at gmail.com  Wed Aug 19 14:06:12 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Wed, 19 Aug 2009 14:06:12 +0100
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <3b6ef0790908180647q1066d470wa4fe164d3212fe89@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>
	<4A896812.9030802@lshift.net>
	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>
	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>
	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>
	<167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>
	<c0a615890908171236v4cb52ec8xcf0fde56a854966c@mail.gmail.com>
	<167204d20908180120w39161f3cn2ac7268fc5a0ecf5@mail.gmail.com>
	<c0a615890908180618p1bf3ecfdj4caa5c19fa970721@mail.gmail.com>
	<3b6ef0790908180647q1066d470wa4fe164d3212fe89@mail.gmail.com>
Message-ID: <167204d20908190606k231e8823ydf9f8021fef953c2@mail.gmail.com>

Jim,

On Tue, Aug 18, 2009 at 2:47 PM, Jim Irrer<irrer at umich.edu> wrote:
>
> To help load balancing, could the consumers be set up to, instead of round
> robin,
> simply each try to read from a common queue, and who ever gets there first
> gets the message.
> This would mean that each consumer only gets a message when they become
> idle,
> which seems like what would be wanted.

That's right.  If you attach N consumers to one queue, then they will
treat that as a shared resource, so that message consumption is
round-robined.

alexis




> On the producer side, if there were multiple queues, the producer would want
> to
> write to the queue with the least amount of messages on it.
>
> I'm trying to learn AMQP too and this has been an interesting discussion to
> watch.
>
> Thanks,
>
> - Jim
>
> Jim Irrer ? ? irrer at umich.edu ? ? ? (734) 647-4409
> University of Michigan Hospital Radiation Oncology
> 519 W. William St. ? ? ? ? ? ? Ann Arbor, MI 48103
>
>
> On Tue, Aug 18, 2009 at 9:18 AM, Paul Dix <paul at pauldix.net> wrote:
>>
>> All of that makes sense.
>>
>> Let me give some more specifics about what I'm building and how I'm
>> hoping to use the messaging system. I'm doing a constant internet
>> crawl of sorts, twitter updates and everything else are in there. So
>> when something gets pulled down the document gets inserted into a
>> horizontally scalable key value store in the sky. I then want to send
>> a message through the system that this key/value has been
>> inserted/updated. This is being done by 20-100 boxes.
>>
>> I then want that message to be grabbed by a consumer where some
>> processing will happen and probably some ranking, relevance and other
>> things get written to an index somewhere (also being done by a large
>> number of boxes).
>>
>> So for this specific case I'm using a direct exchange with a single
>> queue (no message persistence and don't bother keeping ordering).
>> Hundreds of producers are posting messages to the exchange with the
>> same routing key and hundreds of consumers are pulling off the queue.
>> It's the firehose thing. Each message has to be processed once by any
>> one of the hundreds of consumers.
>>
>> I guess I was hoping for the flow management part to be handled by
>> Rabbit. It looks to me that if I want to scale past the ingress
>> capabilities of one queue or exchange I have to manage that on the
>> producer and consumer side.
>>
>> I can create multiple exchanges and bind to the same queue if the
>> routing becomes the bottleneck, but then the producers need to round
>> robin between the exchanges.
>>
>> I can create multiple queues bound with different routing keys (flow1,
>> flow2) if the queue becomes the bottleneck, but then the producer
>> needs to know to round robin to the different routing keys and the
>> consumers need to check both queues.
>>
>> So in essence, when I mentioned scalability, it was a reference to
>> being able to transparently scale the messaging system to multiple
>> boxes. And more specifically, I want my hundreds of producers to post
>> messages to a single exchange with a single routing key. I want my
>> hundreds of consumers to be able to consume messages off a single
>> queue. I want the exchange and the queue to be scalable (in the
>> multi-box, multi-process sense) where the messaging system handles it.
>> I want the messaging system to be scalable like the key/value store is
>> scalable. Transparently across many boxes.
>>
>> There's really only one part of my system that has this requirement.
>> There are plenty of other aspects in which I'll use messaging and not
>> have these kinds of insane needs. As I work more with the system it's
>> likely that I'll want to use more complex routing logic. It's possible
>> I'll want to break updates from domains into separate message flows.
>>
>> Thank you very much for being so helpful. Sorry for the lengthy response.
>> Paul
>>
>> On Tue, Aug 18, 2009 at 4:20 AM, Alexis
>> Richardson<alexis.richardson at gmail.com> wrote:
>> > Paul,
>> >
>> > On Mon, Aug 17, 2009 at 8:36 PM, Paul Dix<paul at pauldix.net> wrote:
>> >> Yeah, that's what I'm talking about. There will probably be upwards of
>> >> a few hundred producers and a few hundred consumers.
>> >
>> > Cool.
>> >
>> > So one question you need to answer is: do you want all the consumers
>> > to receive the same messages? ?I.e.:
>> >
>> > * are you aggregating all the producers into one 'firehose', and then
>> > sending the whole firehose on to all connected consumers?
>> >
>> > OR
>> >
>> > * are you planning to in some way share messages out amongst connected
>> > consumers, eg on a round robin basis
>> >
>> > See more below re flow1, flow2...
>> >
>> >
>> >> The total ingress
>> >> is definitely what I'm most worried about right now.
>> >
>> > OK.
>> >
>> > Be aware that in high ingress rate cases you may be limited by the
>> > client egress rate, which is strongly implementation and platform
>> > dependent. ?Also, see Matthias' notes on testing performance, which
>> > are googleable from the rabbitmq archives, if you want to run some
>> > test cases at any point.
>> >
>> >
>> >
>> >> Later, memory may
>> >> be a concern, but hopefully the consumers are pulling so quickly that
>> >> the queue never gets extremely large.
>> >
>> > Yep.
>> >
>> >
>> >> Can you give me more specific details (or a pointer) to how the flow1,
>> >> flow2 thing work (both producer and consumer side)?
>> >
>> > Sure.
>> >
>> > First you need to read up on what 'direct exchanges' are and how they
>> > work in AMQP. ?I recommend Jason's intro to get you started:
>> >
>> > http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/
>> >
>> > More background info can be found here: www.rabbitmq.com/how
>> >
>> > In a nutshell, RabbitMQ will route any message it receives on to one
>> > or more queues.
>> >
>> > Each queue lives on a node, and nodes are members of a cluster. ?You
>> > can have one or more nodes per machine - a good guide is to have one
>> > per core. ?You can send messages to any node in the cluster and they
>> > will get routed to the right places (adding more nodes to a cluster is
>> > how you scale ingress and availability).
>> >
>> > The routing model is based on message routing keys: queues receive
>> > messages whose routing keys match routing patterns ("bindings"). ?Note
>> > that multiple queues can request messages matching the same key,
>> > giving you 1-many pubsub. ?This is explained in Jason's article. ?I
>> > suggest you use the 'direct exchange' routing model, in which each
>> > message has one routing key, e.g.: "flow1", "flow2".
>> >
>> > Take a look at the article and let us know if it all makes sense.
>> >
>> > alexis
>> >
>> >
>> >> Thanks,
>> >> Paul
>> >>
>> >> On Mon, Aug 17, 2009 at 2:32 PM, Alexis
>> >> Richardson<alexis.richardson at gmail.com> wrote:
>> >>> On Mon, Aug 17, 2009 at 5:22 PM, Paul Dix<paul at pauldix.net> wrote:
>> >>>> So what exactly does option 1 look like?
>> >>>>
>> >>>> It sounds like it's possible to have a queue with the same id on two
>> >>>> different nodes bound to the same exchange.
>> >>>
>> >>> Not quite. ?Same routing - two queues, two ids. ?Actually now that I
>> >>> think about it that won't give you exactly what you need. ?More below.
>> >>>
>> >>>
>> >>>> Will the exchange will
>> >>>> then round robin the messages to the two different queues? If so,
>> >>>> that's exactly what I'm looking for. I don't really care about order
>> >>>> on this queue.
>> >>>
>> >>> No it won't and that's why my suggestion was wrong.
>> >>>
>> >>> Round robin does occur when you have two consumers (clients) connected
>> >>> to one queue. ?This WILL help you by draining the queue faster, if
>> >>> memory is a limitation.
>> >>>
>> >>> If total ingress is the limitation you can increase that by splitting
>> >>> the flow. ?Suppose you start with one queue bound once to one exchange
>> >>> with key "flow1". ?Then all messages with routing key flow1 will go to
>> >>> that queue. ?When load is heavy, add a queue with key "flow2", on a
>> >>> second node. ?Then, alternate (if you prefer, randomly) between
>> >>> routing keys flow1 and flow2. ?This will spread the load as you
>> >>> require. ?And so on, for more queues.
>> >>>
>> >>> You can make this part of a load balancing layer on the server side,
>> >>> so that clients don't have to be coded too much.
>> >>>
>> >>> Is this along the lines of what you need? ?Let me know, and I can
>> >>> elaborate.
>> >>>
>> >>> alexis
>> >>>
>> >>>
>> >>>
>> >>>
>> >>>> Thanks,
>> >>>> Paul
>> >>>>
>> >>>> On Mon, Aug 17, 2009 at 10:55 AM, Alexis
>> >>>> Richardson<alexis.richardson at gmail.com> wrote:
>> >>>>> Paul
>> >>>>>
>> >>>>> On Mon, Aug 17, 2009 at 3:34 PM, Paul Dix<paul at pauldix.net> wrote:
>> >>>>>> Sorry for the confusion. I mean scalability on a single queue. Say
>> >>>>>> I
>> >>>>>> want to push 20k messages per second through a single queue. If a
>> >>>>>> single node can't handle that it seems I'm out of luck. That is, if
>> >>>>>> I'm understanding how things work.
>> >>>>>
>> >>>>> You can in principle just add more nodes to the cluster. ?More
>> >>>>> details below.
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>> So I guess I'm not worried about total queue size, but queue
>> >>>>>> throughput (although size may become an issue, I'm not sure). It
>> >>>>>> seems
>> >>>>>> the solution is to split out across multiple queues, but I was
>> >>>>>> hoping
>> >>>>>> to avoid that since it will add a layer of complexity to my
>> >>>>>> producers
>> >>>>>> and consumers.
>> >>>>>
>> >>>>> 1. To maximise throughput, don't use persistence. ?To make it
>> >>>>> bigger,
>> >>>>> forget about ordering. ?So for example, you can easily have two
>> >>>>> queues, one per node, subscribed to the same direct exchange with
>> >>>>> the
>> >>>>> same key, and you ought to double throughput (assuming all other
>> >>>>> things being equal and fair).
>> >>>>>
>> >>>>> 2. If you want to be both fast and 'reliable' (no loss of acked
>> >>>>> messages), then add more queues and make them durable, and set
>> >>>>> messages to be persistent.
>> >>>>>
>> >>>>> 3. If you want to preserve ordering, label each message with an ID
>> >>>>> and
>> >>>>> dedup at the endpoints. ?This does as you say, add some small noise
>> >>>>> to
>> >>>>> your producers and consumers, but the above two options 1 and 2, do
>> >>>>> not.
>> >>>>>
>> >>>>>
>> >>>>>> I don't think I understand how using Linux-HA with clustering would
>> >>>>>> lead to a splitting a single queue across multiple nodes. I'm not
>> >>>>>> familiar with HA, but it looked like it was a solution to provide a
>> >>>>>> replicated failover.
>> >>>>>
>> >>>>> You are right that HA techniques, indeed any kind of queue
>> >>>>> replication
>> >>>>> or replicated failover, will not help you here.
>> >>>>>
>> >>>>> What you want is 'flow over' ie. "when load is high, make a new node
>> >>>>> with the same routing info". ?This is certainly doable.
>> >>>>>
>> >>>>> alexis
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>> Thanks again,
>> >>>>>> Paul
>> >>>>>>
>> >>>>>> On Mon, Aug 17, 2009 at 10:24 AM, Tony
>> >>>>>> Garnock-Jones<tonyg at lshift.net> wrote:
>> >>>>>>> Paul Dix wrote:
>> >>>>>>>> Do you have a roadmap for when a scalable queue
>> >>>>>>>> will be available?
>> >>>>>>>
>> >>>>>>> If by "scalable" you mean "replicated", then that's available now,
>> >>>>>>> by
>> >>>>>>> configuration along the lines I hinted at in my previous message.
>> >>>>>>> Adding
>> >>>>>>> clustering into the mix can help increase capacity, on top of that
>> >>>>>>> (at a
>> >>>>>>> certain cost in configuration complexity).
>> >>>>>>>
>> >>>>>>> If instead you mean "exceeding RAM+swap size", we're hoping to
>> >>>>>>> have that
>> >>>>>>> for the 1.7 release -- which ought to be out within a month or so.
>> >>>>>>>
>> >>>>>>>> Just to give you a little more information on what I'm doing, I'm
>> >>>>>>>> building a live search/aggregation system. I'm hoping to push
>> >>>>>>>> updates
>> >>>>>>>> of a constant internet crawl through the messaging system so
>> >>>>>>>> workers
>> >>>>>>>> can analyze the content and build indexes as everything comes in.
>> >>>>>>>
>> >>>>>>> Sounds pretty cool!
>> >>>>>>>
>> >>>>>>> Tony
>> >>>>>>> --
>> >>>>>>> ?[][][] Tony Garnock-Jones ? ? | Mob: +44 (0)7905 974 211
>> >>>>>>> ? [][] LShift Ltd ? ? ? ? ? ? | Tel: +44 (0)20 7729 7060
>> >>>>>>> ?[] ?[] http://www.lshift.net/ | Email: tonyg at lshift.net
>> >>>>>>>
>> >>>>>>
>> >>>>>> _______________________________________________
>> >>>>>> rabbitmq-discuss mailing list
>> >>>>>> rabbitmq-discuss at lists.rabbitmq.com
>> >>>>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>> >>>>>>
>> >>>>>
>> >>>>
>> >>>
>> >>
>> >
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From niko.felger at googlemail.com  Wed Aug 19 15:06:50 2009
From: niko.felger at googlemail.com (Niko Felger)
Date: Wed, 19 Aug 2009 15:06:50 +0100
Subject: [rabbitmq-discuss] Broker failover
Message-ID: <c4f7626d0908190706x6cbe48d1j235a06aeb031bf18@mail.gmail.com>

Hi,

Are there any best practices how to achieve broker failover?

We are currently using two clustered nodes with durable queues and
exchanges. The clients are configured to connect to the first node. In the
event that this node dies, I would like both existing consumers as well as
newly started ones to connect to the other node. Are there standard patterns
or recipies to achieve this?

Thanks!
Niko
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090819/24a3bd28/attachment.htm 

From matthew at lshift.net  Wed Aug 19 15:41:59 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Wed, 19 Aug 2009 15:41:59 +0100
Subject: [rabbitmq-discuss] Broker failover
In-Reply-To: <c4f7626d0908190706x6cbe48d1j235a06aeb031bf18@mail.gmail.com>
References: <c4f7626d0908190706x6cbe48d1j235a06aeb031bf18@mail.gmail.com>
Message-ID: <20090819144159.GC22620@mrnibble.lshift.net>

Hi Niko,

On Wed, Aug 19, 2009 at 03:06:50PM +0100, Niko Felger wrote:
> Are there any best practices how to achieve broker failover?
> 
> We are currently using two clustered nodes with durable queues and
> exchanges. The clients are configured to connect to the first node. In the
> event that this node dies, I would like both existing consumers as well as
> newly started ones to connect to the other node. Are there standard patterns
> or recipies to achieve this?

There's nothing standard just yet, but we're getting a lot of interest
in this area and are working on solutions. Just at the moment the
situation is as follows:

Due to the way mnesia works, you can't just transfer the files from one
machine to another and start the broker up. To make this work, both
machines must have the same hostname as mnesia records this in the
database. To solve this, you can just use the nodename of
rabbit at localhost. However, this prevents you doing clustering, which is
a shame.

Therefore, if HA and failover is important to you, we'd recommend the
following:

1) Put a simple TCP/IP load balancer in front of the nodes of rabbits,
but do this only for producers. The load balancer needs to be able to
dynamically cope with nodes going down, reappearing etc.
2) For consumers you really want them to all try and consume from all
the nodes at the same time. They also need to be able to silently cope
with nodes going down and reappearing. Obviously the exact details of
this vary between application.
3) Have a SAN with some shared storage which is not partitioned. All the
rabbit nodes need access to this.
4) Use Linux-HA or equiv to do monitoring of your rabbit nodes, and
start up all the brokers with the nodename of rabbit at localhost

Now, when a node fails, Linux-HA will notice, and should tell a spare
node to start up, setting the RABBITMQ_MNESIA_DIR to the location on the
SAN of the files for the failed node. It should all just start up.

Obviously, this depends on the reliability and availability of your SAN,
and the drawbacks of not having clustering available complicate at least
consumers. However, if HA and failover is more important then this may
be a tradeoff you're willing to make just at the moment.

Also, be aware that with this solution, non persistent messages can be
lost as a node goes down, and even persistent messages which are not
part of a transaction can also be lost.

Needless to say, a more comprehensive solution is on our TODO list, but
may be a little way off just at the moment.

I hope this helps,

Matthew



From matthew at lshift.net  Wed Aug 19 15:45:28 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Wed, 19 Aug 2009 15:45:28 +0100
Subject: [rabbitmq-discuss] Broker failover
In-Reply-To: <20090819144159.GC22620@mrnibble.lshift.net>
References: <c4f7626d0908190706x6cbe48d1j235a06aeb031bf18@mail.gmail.com>
	<20090819144159.GC22620@mrnibble.lshift.net>
Message-ID: <20090819144528.GD22620@mrnibble.lshift.net>

Niko,

On Wed, Aug 19, 2009 at 03:41:59PM +0100, Matthew Sackman wrote:
> Therefore, if HA and failover is important to you, we'd recommend the
> following:

...

One further issue with this is that it means really all the nodes need
to manually be configured the same, in terms of queues, exchanges and
bindings. As producers don't know which node they're connected to, this
really demands that:
a) Every producer can attempt configuration whenever it connects; or
b) As consumers may need to be connected to every node, they could do
   the configuration, as they're not in front of the load balancer; or
c) You have some other process that does configuration.

This is definitely one area where the clustered setup saves you effort
as all nodes implicitly get configured in the same way.

Matthew



From n8gray at n8gray.org  Wed Aug 19 17:32:37 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Wed, 19 Aug 2009 09:32:37 -0700
Subject: [rabbitmq-discuss] How to sanely bind one queue to many
	exchanges?
In-Reply-To: <4A86E112.5080609@lshift.net>
References: <65a6e3960908111220t1364e184mef27eb38098c6a51@mail.gmail.com>
	<65a6e3960908141029k214d6e8bkc4b3ab5c51219ecb@mail.gmail.com>
	<29598b610908141053o6a1316dax2431ba7a2e626e48@mail.gmail.com>
	<65a6e3960908141117v8551da3q2d2eb32c931c9f13@mail.gmail.com>
	<29598b610908141152m70f04a44g84925b261860ccc6@mail.gmail.com>
	<65a6e3960908141241m5468ce6p9d55a1d37c9bdedc@mail.gmail.com>
	<65a6e3960908142233s326ca1av39f05f3709e3c6cb@mail.gmail.com>
	<29598b610908150028k61d09a1cncc59e4f622404c84@mail.gmail.com>
	<65a6e3960908150909g7ff8f256v1b352c780a8f0fbc@mail.gmail.com>
	<4A86E112.5080609@lshift.net>
Message-ID: <65a6e3960908190932q4393696eoe39a1b21bf454100@mail.gmail.com>

On Sat, Aug 15, 2009 at 9:23 AM, Matthias Radestock<matthias at lshift.net> wrote:
> Nathan,
>
> Nathan Gray wrote:
>>
>> On Sat, Aug 15, 2009 at 12:28 AM, Paul Jones<pauljones23 at gmail.com> wrote:
>>>
>>> On Sat, Aug 15, 2009 at 6:33 AM, Nathan Gray <n8gray at n8gray.org> wrote:
>>>>
>>>> Also, is there a nicely-formatted non-xml version of amqp0-8.xml
>>>> somewhere?
>>>
>>> The AMQP website has a PDF'ed version at
>>>
>>> http://jira.amqp.org/confluence/download/attachments/720900/amqp-xml-doc0-8.pdf?version=1
>>
>> That document seems to be missing most of the interesting information.
>
> Try the 0-9-1 version instead:
>
> http://jira.amqp.org/confluence/download/attachments/720900/amqp-xml-doc0-9-1.pdf
>
> That, together with the 0-9-1 spec at
>
> http://jira.amqp.org/confluence/download/attachments/720900/amqp0-9-1.pdf
>
> is more readable than the 0-8 version. There are of course differences
> between 0-8 and 0-9-1, but the two version are very close indeed.

Ok, thanks for the tip!

BTW, I'm happy to report that my prototype is working nicely.  Thanks
for the help everyone!

Cheers,
-n8

-- 
http://n8gray.org



From n8gray at n8gray.org  Wed Aug 19 21:27:46 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Wed, 19 Aug 2009 13:27:46 -0700
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
	over the JSON RPC interface)
In-Reply-To: <4A8057CD.9070004@lshift.net>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>
	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>
	<65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>
	<65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>
	<4A8057CD.9070004@lshift.net>
Message-ID: <65a6e3960908191327o1064c872i103dbf810badf7c6@mail.gmail.com>

Hi Tony,

On Mon, Aug 10, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>
> I will alter the code to make cast() non-long-polling. Thanks for
> drawing this to my attention!

Thanks to the help from this list I now have my prototype up and
running and this cast behavior is the only problematic part left.
I've gone poking around in rabbit_http_channel.erl to fix it myself,
and this is what I came up with.  I'm not an erlang programmer, so
please let me know if I've done something wrong.

Cheers,
-n8

-- 
http://n8gray.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: rabbitmq-http2-cast-no-block.patch
Type: application/octet-stream
Size: 2347 bytes
Desc: not available
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090819/f0ecadc9/attachment.obj 

From n8gray at n8gray.org  Thu Aug 20 02:10:22 2009
From: n8gray at n8gray.org (Nathan Gray)
Date: Wed, 19 Aug 2009 18:10:22 -0700
Subject: [rabbitmq-discuss] C client -- heartbeats
Message-ID: <65a6e3960908191810k1ba183b8t3c9dbcf1c123bbbe@mail.gmail.com>

Hi folks,

I noticed the C client doesn't support heartbeats, which I need.  Has
anybody done any work to support them?  Is that on the roadmap?

Thanks,
-n8

-- 
http://n8gray.org



From pauljones23 at gmail.com  Thu Aug 20 10:02:30 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Thu, 20 Aug 2009 10:02:30 +0100
Subject: [rabbitmq-discuss] C client -- heartbeats
In-Reply-To: <65a6e3960908191810k1ba183b8t3c9dbcf1c123bbbe@mail.gmail.com>
References: <65a6e3960908191810k1ba183b8t3c9dbcf1c123bbbe@mail.gmail.com>
Message-ID: <29598b610908200202g768e8917q8728dfd043a93543@mail.gmail.com>

Hi Nathan,

At this point, adding heartbeats to the C client is not on the roadmap since
that C client is considered highly experimental.

Thanks,
Paul.

On Thu, Aug 20, 2009 at 2:10 AM, Nathan Gray <n8gray at n8gray.org> wrote:

> Hi folks,
>
> I noticed the C client doesn't support heartbeats, which I need.  Has
> anybody done any work to support them?  Is that on the roadmap?
>
> Thanks,
> -n8
>
> --
> http://n8gray.org
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090820/c36c3ff1/attachment.htm 

From niko.felger at googlemail.com  Thu Aug 20 11:09:32 2009
From: niko.felger at googlemail.com (Niko Felger)
Date: Thu, 20 Aug 2009 11:09:32 +0100
Subject: [rabbitmq-discuss] Broker failover
In-Reply-To: <20090819144528.GD22620@mrnibble.lshift.net>
References: <c4f7626d0908190706x6cbe48d1j235a06aeb031bf18@mail.gmail.com> 
	<20090819144159.GC22620@mrnibble.lshift.net>
	<20090819144528.GD22620@mrnibble.lshift.net>
Message-ID: <c4f7626d0908200309q14eec70eu123c02f936958dd9@mail.gmail.com>

Matthew,

Thanks a lot for all this info!

Is there a way to achieve some of this in a clustered setup? I guess our
requirements are not so much HA of the whole messaging subsystem, but rather
that an as-large-as-possible proportion of messages gets processed
_eventually_. The scenario I am mainly worried about is when producers
suddenly cannot publish anymore because the server has gone away and thus
any messages are lost at that point.

We tried using a dumb load balancer (in front of both producers and
consumers) to achieve this, but so far this has caused us more trouble than
it saved, see here:
http://www.nabble.com/RabbitMQ-load-balancing-failover-with-LVS-td24683230.html#a24683230

Thanks!
niko

On Wed, Aug 19, 2009 at 15:45, Matthew Sackman <matthew at lshift.net> wrote:

> Niko,
>
> On Wed, Aug 19, 2009 at 03:41:59PM +0100, Matthew Sackman wrote:
> > Therefore, if HA and failover is important to you, we'd recommend the
> > following:
>
> ...
>
> One further issue with this is that it means really all the nodes need
> to manually be configured the same, in terms of queues, exchanges and
> bindings. As producers don't know which node they're connected to, this
> really demands that:
> a) Every producer can attempt configuration whenever it connects; or
> b) As consumers may need to be connected to every node, they could do
>   the configuration, as they're not in front of the load balancer; or
> c) You have some other process that does configuration.
>
> This is definitely one area where the clustered setup saves you effort
> as all nodes implicitly get configured in the same way.
>
> Matthew
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090820/a89c647a/attachment.htm 

From matthew at lshift.net  Thu Aug 20 11:18:58 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Thu, 20 Aug 2009 11:18:58 +0100
Subject: [rabbitmq-discuss] Broker failover
In-Reply-To: <c4f7626d0908200309q14eec70eu123c02f936958dd9@mail.gmail.com>
References: <c4f7626d0908190706x6cbe48d1j235a06aeb031bf18@mail.gmail.com>
	<20090819144159.GC22620@mrnibble.lshift.net>
	<20090819144528.GD22620@mrnibble.lshift.net>
	<c4f7626d0908200309q14eec70eu123c02f936958dd9@mail.gmail.com>
Message-ID: <20090820101858.GE22620@mrnibble.lshift.net>

Hi Niko,

On Thu, Aug 20, 2009 at 11:09:32AM +0100, Niko Felger wrote:
> Is there a way to achieve some of this in a clustered setup? I guess our
> requirements are not so much HA of the whole messaging subsystem, but rather
> that an as-large-as-possible proportion of messages gets processed
> _eventually_. The scenario I am mainly worried about is when producers
> suddenly cannot publish anymore because the server has gone away and thus
> any messages are lost at that point.
>
> We tried using a dumb load balancer (in front of both producers and
> consumers) to achieve this, but so far this has caused us more trouble than
> it saved, see here:
> http://www.nabble.com/RabbitMQ-load-balancing-failover-with-LVS-td24683230.html#a24683230

Ahh, interesting.

We do have some suspicions that the failover can be made to work with
clustering - provided that when the new node comes up it takes over the
IP / hostname of the failed node, it *might* just work. However, be
aware this pretty much came out of a 5 minute conversation in the office
yesterday and we've not even attempted it let alone fully tested it.
However, we think it might work! :D

LinuxHA can indeed do MAC address stealing and thus IP etc. So I would
suggest, if you have the time to spare, you start down that route.

Matthew



From tonyg at lshift.net  Thu Aug 20 11:22:15 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Thu, 20 Aug 2009 11:22:15 +0100
Subject: [rabbitmq-discuss] C client -- heartbeats
In-Reply-To: <65a6e3960908191810k1ba183b8t3c9dbcf1c123bbbe@mail.gmail.com>
References: <65a6e3960908191810k1ba183b8t3c9dbcf1c123bbbe@mail.gmail.com>
Message-ID: <4A8D23D7.6040509@lshift.net>

Hi Nathan,

Nathan Gray wrote:
> I noticed the C client doesn't support heartbeats, which I need.  Has
> anybody done any work to support them?  Is that on the roadmap?

It does hand them back, if it gets them, and it will send them, if you
hand one to it. It will not automatically send any, though, and it
doesn't have any policy about what to do with present or absent
heartbeats: just a mechanism for handing them up to the app. There's
also no API for requesting heartbeats from the broker.

>From a glance at the code, fixing the API for requesting heartbeats will
be easy; but the code is intended to be agnostic regarding the event and
I/O system in use -- for instance, I've had both raw sockets and
libevent working with it -- so automating heartbeat processing would
have to be done carefully to avoid forcing people into any one
particular style of event/timeout handling.

I'll make the change for letting heartbeats get set, so you can experiment.

Cheers,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Thu Aug 20 11:33:33 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Thu, 20 Aug 2009 11:33:33 +0100
Subject: [rabbitmq-discuss] C client -- heartbeats
In-Reply-To: <4A8D23D7.6040509@lshift.net>
References: <65a6e3960908191810k1ba183b8t3c9dbcf1c123bbbe@mail.gmail.com>
	<4A8D23D7.6040509@lshift.net>
Message-ID: <4A8D267D.40100@lshift.net>

Tony Garnock-Jones wrote:
> I'll make the change for letting heartbeats get set, so you can experiment.

This is done now. amqp_login has sprouted an extra argument. To see the
effect, try changing it to 3 in amqp_listen.c and see that the server
starts handing out heartbeat frames when its side of the connection is
idle. It'll eventually disconnect amqp_listen when it has heartbeats
configured, because amqp_listen doesn't send any traffic at all once
it's consuming.

Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Thu Aug 20 11:37:04 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Thu, 20 Aug 2009 11:37:04 +0100
Subject: [rabbitmq-discuss] questions about distributed queue
In-Reply-To: <3b6ef0790908180647q1066d470wa4fe164d3212fe89@mail.gmail.com>
References: <c0a615890908170607p173408acy6987c8da59dd5bea@mail.gmail.com>	<c0a615890908170706w31e43bc6m4a4302b83d0f36e7@mail.gmail.com>	<4A896812.9030802@lshift.net>	<c0a615890908170734q716d02eeuef106cb428999b25@mail.gmail.com>	<167204d20908170755o579424efw18d4d1256b3ce414@mail.gmail.com>	<c0a615890908170922h3e73b73fhd915c3e731000ad9@mail.gmail.com>	<167204d20908171132m71c3e7b0t3d6e016ae96f3a6d@mail.gmail.com>	<c0a615890908171236v4cb52ec8xcf0fde56a854966c@mail.gmail.com>	<167204d20908180120w39161f3cn2ac7268fc5a0ecf5@mail.gmail.com>	<c0a615890908180618p1bf3ecfdj4caa5c19fa970721@mail.gmail.com>
	<3b6ef0790908180647q1066d470wa4fe164d3212fe89@mail.gmail.com>
Message-ID: <4A8D2750.9070301@lshift.net>

Jim Irrer wrote:
> It seems like one of the problems with round robin is that consumers may
> spend
> more time on some messages than others, so you are depending on a random
> distribution to even out the load.

Setting basic.qos prefetch windows might help with this, by breaking out
of strict round-robin. A limit of one, for instance, means that the
server will make sure the limited consumer never has more than a single
outstanding message in its possession. Other messages will be dealt out
to other consumers while the limited consumer is busy.

Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Thu Aug 20 11:51:58 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Thu, 20 Aug 2009 11:51:58 +0100
Subject: [rabbitmq-discuss] STOMP error messages saner (was Re: Weird
 Crash (91MB message over STOMP) [Reproducible])
In-Reply-To: <50c8ffe90908180741j5975f640lad9e5be5e98e90a6@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com>
	<4A835011.2060800@lshift.net>
	<50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com>
	<4A897EBF.7010701@lshift.net>
	<50c8ffe90908180741j5975f640lad9e5be5e98e90a6@mail.gmail.com>
Message-ID: <4A8D2ACE.4010801@lshift.net>

Darien Kindlund wrote:
> One quick question: Is there any way to swap different versions of
> compiled STOMP adapters without having to restart RabbitMQ?

Yessssss.... maybe. Um. Erlang lets you reload modules. We haven't
provided an interface for doing so, though. Um. You could try replacing
the .beam file and then using

  erl_call -a 'code load_file [stomp_frame]' -n rabbit
  erl_call -a 'code load_file [rabbit_stomp]' -n rabbit

With the specific changes you want to test, that's unlikely to work,
because the state records have changed shape. Existing connections will
probably crash (but the broker should stay up, and new connections
should be fine).

In situations where only the code changes, though, or where the OTP
structured state upgrade mechanism are in place, then using
code:load_file/1 should work fine to upgrade bits and pieces in a
running system.

Note that there are plenty of caveats about the precise way this works.
>From the code(3erl) manpage:

CURRENT AND OLD CODE
       The  code  of a module can exists in two variants in a
       system: current code and old code. When  a  module  is
       loaded into the system for the first time, the code of
       the module becomes ?current? and the global export ta?
       ble  is  updated  with  references  to  all  functions
       exported from the module.

       If then a new instance of the module is  loaded  (per?
       haps  because of the correction of an error), then the
       code of the previous instance becomes ?old?,  and  all
       export  entries referring to the previous instance are
       removed. After that the new instance is loaded  as  if
       it  was loaded for the first time, as described above,
       and becomes ?current?.

       Both old and current code for a module are valid,  and
       may  even be evaluated concurrently. The difference is
       that exported functions in old code  are  unavailable.
       Hence  there  is  no  way  to make a global call to an
       exported function in old code, but old code may  still
       be evaluated because of processes lingering in it.

       If  a third instance of the module is loaded, the code
       server will remove (purge) the old code and  any  pro?
       cesses  lingering  in  it will be terminated. Then the
       third instance becomes ?current?  and  the  previously
       current code becomes ?old?.

       For  more  information about old and current code, and
       how to make a process switch from old to current code,
       refer to Erlang Reference Manual.

Regards,
  Tony
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From tonyg at lshift.net  Thu Aug 20 12:18:44 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Thu, 20 Aug 2009 12:18:44 +0100
Subject: [rabbitmq-discuss] Using rabbitmq-http2 (was: simple.publish
 over the JSON RPC interface)
In-Reply-To: <65a6e3960908191327o1064c872i103dbf810badf7c6@mail.gmail.com>
References: <65a6e3960908031212t64b1622ekcb3f3dc83702e099@mail.gmail.com>	
	<269388e30908031330l6563425apa91d677f0636f1ea@mail.gmail.com>	
	<aae1003d0908032142v31701483m59368765cb1888d8@mail.gmail.com>	
	<65a6e3960908041522x4948bc1dm161cd9610d4c7a6d@mail.gmail.com>	
	<aae1003d0908042020w42dab66eu1c1565ef0f97749b@mail.gmail.com>	
	<65a6e3960908051139m408da74atf96dd14536d430be@mail.gmail.com>	
	<aae1003d0908052136p135dfd8bg16e57cbdd4b150c3@mail.gmail.com>	
	<65a6e3960908052253h9c67febl1d04a099c1f17fc2@mail.gmail.com>	
	<65a6e3960908052309l445de974h3db61bc43833f6e3@mail.gmail.com>	
	<4A8057CD.9070004@lshift.net>
	<65a6e3960908191327o1064c872i103dbf810badf7c6@mail.gmail.com>
Message-ID: <4A8D3114.8030100@lshift.net>

Hi Nathan,

Thanks for the patch. I've taken the idea at its heart, expressed a
little differently, and applied it to the default branch. I've also
updated rabbitmq.js to no longer treat cast() as long-polling. (The new
cast takes care to return [], though, so old client code will keep working.)

Regards,
  Tony


Nathan Gray wrote:
> Hi Tony,
> 
> On Mon, Aug 10, 2009 at 10:24 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
>> I will alter the code to make cast() non-long-polling. Thanks for
>> drawing this to my attention!
> 
> Thanks to the help from this list I now have my prototype up and
> running and this cast behavior is the only problematic part left.
> I've gone poking around in rabbit_http_channel.erl to fix it myself,
> and this is what I came up with.  I'm not an erlang programmer, so
> please let me know if I've done something wrong.
> 
> Cheers,
> -n8
> 


-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net



From majek04 at gmail.com  Thu Aug 20 14:46:14 2009
From: majek04 at gmail.com (majek04)
Date: Thu, 20 Aug 2009 14:46:14 +0100
Subject: [rabbitmq-discuss] Weird Crash (91MB message over STOMP)
	[Reproducible]
In-Reply-To: <50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com>
References: <50c8ffe90908072304ha3ab70fk9b7e76fb26db49e3@mail.gmail.com>
	<4A7D462F.3020401@lshift.net>
	<E49C23AC-BE53-408C-80AD-971B4F393C25@kindlund.com>
	<50c8ffe90908090028j62dbedcat1bea5d7934a9ae1e@mail.gmail.com>
	<4A7E8FAA.3030202@lshift.net>
	<50c8ffe90908091252qeabe2d1pcc1d9abe329a5979@mail.gmail.com>
	<4A82BAB3.9050906@lshift.net>
	<50c8ffe90908120824j20bc51afs4bb3a982e922bd6a@mail.gmail.com>
	<4A835011.2060800@lshift.net>
	<50c8ffe90908141335k9f6c7ecl64130db1ba8d8dde@mail.gmail.com>
Message-ID: <3bb0d9710908200646j24ea5ea5odef9d5bfc69e2a7d@mail.gmail.com>

On Fri, Aug 14, 2009 at 21:35, Darien Kindlund<darien at kindlund.com> wrote:
> Hi Tony & Matthias,
> Just wanted to let you know that I've finished testing your patch for
> issue #3 and it works perfectly... the 91+MB messages are now getting
> processed and delivered properly by RabbitMQ. ?Let me know when you
> get #1 and #2 fixed, and I'll be happy to test those accordingly, as
> well.

Thank you for testing!

Fixes for #1 and #2 are already in the default branch.

Changes for #1:
http://hg.rabbitmq.com/rabbitmq-stomp/rev/709ece65af53

For #2:
http://hg.rabbitmq.com/rabbitmq-stomp/rev/9003ff7697ab


Cheers!
  Marek Majkowski



From jasonjwwilliams at gmail.com  Thu Aug 20 16:26:38 2009
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Thu, 20 Aug 2009 09:26:38 -0600
Subject: [rabbitmq-discuss] Broker failover
In-Reply-To: <c4f7626d0908200309q14eec70eu123c02f936958dd9@mail.gmail.com>
References: <c4f7626d0908190706x6cbe48d1j235a06aeb031bf18@mail.gmail.com>
	<20090819144159.GC22620@mrnibble.lshift.net>
	<20090819144528.GD22620@mrnibble.lshift.net>
	<c4f7626d0908200309q14eec70eu123c02f936958dd9@mail.gmail.com>
Message-ID: <0371E18D-F025-4F90-9B53-6361DC6EB361@gmail.com>

Hey Niko,

Can you set your SLB to persistent mapping based on client IP. That  
should keep each client on the server they are intially mapped to  
until that server fails.

That being said, I still believe HA should be done in Rabbit. SLB is  
not the right hammer in my opinion.

-J

Sent via iPhone

On Aug 20, 2009, at 4:09, Niko Felger <niko.felger at googlemail.com>  
wrote:

> Matthew,
>
> Thanks a lot for all this info!
>
> Is there a way to achieve some of this in a clustered setup? I guess  
> our requirements are not so much HA of the whole messaging  
> subsystem, but rather that an as-large-as-possible proportion of  
> messages gets processed _eventually_. The scenario I am mainly  
> worried about is when producers suddenly cannot publish anymore  
> because the server has gone away and thus any messages are lost at  
> that point.
>
> We tried using a dumb load balancer (in front of both producers and  
> consumers) to achieve this, but so far this has caused us more  
> trouble than it saved, see here: http://www.nabble.com/RabbitMQ-load-balancing-failover-with-LVS-td24683230.html#a24683230
>
> Thanks!
> niko
>
> On Wed, Aug 19, 2009 at 15:45, Matthew Sackman <matthew at lshift.net>  
> wrote:
> Niko,
>
> On Wed, Aug 19, 2009 at 03:41:59PM +0100, Matthew Sackman wrote:
> > Therefore, if HA and failover is important to you, we'd recommend  
> the
> > following:
>
> ...
>
> One further issue with this is that it means really all the nodes need
> to manually be configured the same, in terms of queues, exchanges and
> bindings. As producers don't know which node they're connected to,  
> this
> really demands that:
> a) Every producer can attempt configuration whenever it connects; or
> b) As consumers may need to be connected to every node, they could do
>   the configuration, as they're not in front of the load balancer; or
> c) You have some other process that does configuration.
>
> This is definitely one area where the clustered setup saves you effort
> as all nodes implicitly get configured in the same way.
>
> Matthew
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090820/599f0b93/attachment.htm 

From rich.kim at db.com  Thu Aug 20 16:30:45 2009
From: rich.kim at db.com (Rich Kim)
Date: Thu, 20 Aug 2009 11:30:45 -0400
Subject: [rabbitmq-discuss] Command Line Deletion of Queues?
Message-ID: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>

Is there any command line method to explicitly delete a durable queue? I'm 
aware of the Channel.queueDelete() , but was hoping there might be a way 
to perform this via rabbitmqctl as an administrative function?

________________________
Richard Kim
Deutsche Bank Americas
Global Banking, New York
rich.kim at db.com
P: +1 212.250.4984

---
This communication may contain confidential and/or privileged information.
If you are not the intended recipient (or have received this communication
in error) please notify the sender immediately and destroy this
communication. Any unauthorized copying, disclosure or distribution of the
material in this communication is strictly forbidden.

Deutsche Bank does not render legal or tax advice, and the information
contained in this communication should not be regarded as such.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090820/b5cca201/attachment.htm 

From 0x6e6562 at gmail.com  Thu Aug 20 17:03:32 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 20 Aug 2009 17:03:32 +0100
Subject: [rabbitmq-discuss] Command Line Deletion of Queues?
In-Reply-To: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
References: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
Message-ID: <269388e30908200903p1328bc1cw4eb6d771847a031a@mail.gmail.com>

Richard,

On 8/20/09, Rich Kim <rich.kim at db.com> wrote:
> Is there any command line method to explicitly delete a durable queue? I'm
> aware of the Channel.queueDelete() , but was hoping there might be a way
> to perform this via rabbitmqctl as an administrative function?

ATM you can't use this via rabbitmqctl. However, as part of the
upcoming release there is a management plugin that lets you do this.
This is usable now, but it means that you would have to get the latest
source, build it, install the plugin, etc, which means that you won't
be using a released version.

HTH,

Ben



From ram.muthiah at yahoo.com  Thu Aug 20 18:40:05 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Thu, 20 Aug 2009 10:40:05 -0700 (PDT)
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <29598b610908190021v2a768504k312cf3d55f9e049d@mail.gmail.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
	<4A8AFE22.5060102@lshift.net>
	<877337.64591.qm@web44707.mail.sp1.yahoo.com>
	<29598b610908190021v2a768504k312cf3d55f9e049d@mail.gmail.com>
Message-ID: <536995.36933.qm@web44706.mail.sp1.yahoo.com>

Hi Paul,

I feel the examples document needs to be more detailed. Examples page instructs to run runjava.bat com.rabbitmq.examples.TestMain to run the TestMain class. But, don't we need to change hostname, guest, password, etc before running these classes? 

You have a wonderful product. But, if the users don't find detailed instructions to use it, it's very hard to run even some simple tests. Jason wrote in his blog (http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/) about rabbitmq documentation as "horrible" back in Jan 2009. I feel that quality of the documentation still remains the same.

I setup the server, I ran some basic python scripts to send/receive messages, they work well. I am stuck while using java client. Any help is much appreciated.

Thanks
Ram




________________________________
From: Paul Jones <pauljones23 at gmail.com>
To: Ram Muthiah <ram.muthiah at yahoo.com>
Cc: rabbitmq-discuss at lists.rabbitmq.com
Sent: Wednesday, August 19, 2009 12:21:30 AM
Subject: Re: [rabbitmq-discuss] Working with Java Client

Hi Ram,

Both the source and binary distributions do contain runnable examples. The page http://www.rabbitmq.com/examples.html does detail how to run the examples - if you're having trouble building the source distribution, these are also all pre-compiled in the binary distribution that you found. Potentially, the quickest way to understand it all would be to run the examples in the binary distribution whilst using the source distribution to get an understanding of what is going on.

Paul.


On Wed, Aug 19, 2009 at 12:01 AM, Ram Muthiah <ram.muthiah at yahoo.com> wrote:

API guide for Java client (http://www.rabbitmq.com/api-guide.html) is useful. Is there a tutorial or document with complete java code to connect to the server to help Java newbies? 
>
>Thanks
>Ram 
>
>
>
>
________________________________
 From: Matthias Radestock <matthias at lshift.net>
>To: Ram Muthiah <ram.muthiah at yahoo.com>
>Cc: rabbitmq-discuss at lists.rabbitmq.com
>Sent: Tuesday, August 18, 2009 12:16:50 PM
>Subject: Re: [rabbitmq-discuss] Working with Java Client
>
>
>Ram,
>
>just to follow up on what Paul and Matthew said ...
>
>Ram Muthiah wrote:
>>> Instruction for "Bundled Examples" (http://www.rabbitmq.com/examples.html#demo-server) says "The source code for these examples is in the |java/test/src| folder in the source distribution". But, there is no java/test/src folder in the source distribution I downloaded from http://www.rabbitmq.com/releases/rabbitmq-java-client/v1.6.0/rabbitmq-java-client-1.6.0.zip. This zip folder has the structure like
> rabbitmq-java-client-1.6.0/test/src/com/rabbitmq/client/.....  
>
>The examples are indeed located in the test/src dir. I have corrected the web page.
>
>> All sample codes refer AMQP class which is supposed to be in client folder, but AMQP is missing. So the commands like "import com.rabbitmq.client.AMQP.BasicProperties" fails all over the place.
>
>If you want to build the client from source, please follow the instructions at http://www.rabbitmq.com/build-java-client.html. The build process generates the AMQP class automatically from the spec.
>
>
>Regards,
>
>Matthias.
>
>
>_______________________________________________
>>rabbitmq-discuss mailing list
>rabbitmq-discuss at lists.rabbitmq.com
>http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090820/c14850da/attachment.htm 

From dougbarth at gmail.com  Thu Aug 20 18:57:32 2009
From: dougbarth at gmail.com (Doug Barth)
Date: Thu, 20 Aug 2009 10:57:32 -0700 (PDT)
Subject: [rabbitmq-discuss] Command Line Deletion of Queues?
In-Reply-To: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
References: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
Message-ID: <a5c94b81-550d-4f2d-bec1-430568b48257@v20g2000yqm.googlegroups.com>

On Aug 20, 10:30?am, Rich Kim <rich.... at db.com> wrote:
> Is there any command line method to explicitly delete a durable queue? I'm
> aware of the Channel.queueDelete() , but was hoping there might be a way
> to perform this via rabbitmqctl as an administrative function?

A bit of shameless self promotion.

gem install amqp-utils
amqp-deleteq <queue>

--
Doug Barth



From pauljones23 at gmail.com  Thu Aug 20 19:07:42 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Thu, 20 Aug 2009 19:07:42 +0100
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <536995.36933.qm@web44706.mail.sp1.yahoo.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
	<4A8AFE22.5060102@lshift.net>
	<877337.64591.qm@web44707.mail.sp1.yahoo.com>
	<29598b610908190021v2a768504k312cf3d55f9e049d@mail.gmail.com>
	<536995.36933.qm@web44706.mail.sp1.yahoo.com>
Message-ID: <29598b610908201107g3de20ee6geaebf88a8a11eee1@mail.gmail.com>

Ram,

On Thu, Aug 20, 2009 at 6:40 PM, Ram Muthiah <ram.muthiah at yahoo.com> wrote:

> I feel the examples document needs to be more detailed. Examples page
> instructs to run runjava.bat com.rabbitmq.examples.TestMain to run the
> TestMain class. But, don't we need to change hostname, guest, password, etc
> before running these classes?
>

As far as I can see, the scripts default to using localhost and guest/guest.
A broker running on the same machine should accept these credentials out of
the box.


>
> I setup the server, I ran some basic python scripts to send/receive
> messages, they work well. I am stuck while using java client. Any help is
> much appreciated.
>

Unfortunately you're going to need to tell us how you're stuck before we can
provide any useful assistance.

Paul.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090820/8b54fe4b/attachment.htm 

From irrer at umich.edu  Thu Aug 20 22:46:31 2009
From: irrer at umich.edu (Jim Irrer)
Date: Thu, 20 Aug 2009 17:46:31 -0400
Subject: [rabbitmq-discuss] method-like calls
In-Reply-To: <ce2570e20908180813s39144a7cq48107b6783c8f2ec@mail.gmail.com>
References: <3b6ef0790908180657r6b53d1f4j49bb60015fe65e23@mail.gmail.com>
	<f4d6a21a0908180710u531f65abmaf31270ed0701fcd@mail.gmail.com>
	<ce2570e20908180813s39144a7cq48107b6783c8f2ec@mail.gmail.com>
Message-ID: <3b6ef0790908201446n5f925af4t82905351ad894aa0@mail.gmail.com>

Thrift looks pretty good, but it does not seem to support one-way messages.
All are implemented as if they were using a server-client model, and we will
have some relationships that are one way (fire off a message and forget
about it).

I was able to fake out Thrift by creating my own null protocol and
transport, and
that would be ok, but it requires writing code for each platform, and if
there is
a niftier way to do this I would like to know.

Thanks,

- Jim

Jim Irrer     irrer at umich.edu       (734) 647-4409
University of Michigan Hospital Radiation Oncology
519 W. William St.             Ann Arbor, MI 48103


On Tue, Aug 18, 2009 at 11:13 AM, Garrett Smith <g at rre.tt> wrote:

> On Tue, Aug 18, 2009 at 9:10 AM, Michael Greene<michael.greene at gmail.com>
> wrote:
> > We currently use Apache Thrift for this, and have had success with it
> over
> > the past year of use.
>
> I'd second this.
>
> There is some release management overhead in using Thrift or Protobuf,
> so I'd also consider using JSON for the message payload. If your
> schema changes a lot and you don't have massive throughput
> requirements, I'd lean toward JSON just for its flexibility and solid
> language support.
>
> IIRC, we showed that JSON in Python was over 20x slower than Thrift at
> encoding/decoding for messages that were basically hash maps (~10
> fields, 512K total size). But unless your performance requirements are
> unusually demanding, I wouldn't worry too much about this.
>
> Garrett
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090820/c8a70f24/attachment.htm 

From michael.greene at gmail.com  Thu Aug 20 22:55:11 2009
From: michael.greene at gmail.com (Michael Greene)
Date: Thu, 20 Aug 2009 16:55:11 -0500
Subject: [rabbitmq-discuss] method-like calls
In-Reply-To: <3b6ef0790908201446n5f925af4t82905351ad894aa0@mail.gmail.com>
References: <3b6ef0790908180657r6b53d1f4j49bb60015fe65e23@mail.gmail.com>
	<f4d6a21a0908180710u531f65abmaf31270ed0701fcd@mail.gmail.com>
	<ce2570e20908180813s39144a7cq48107b6783c8f2ec@mail.gmail.com>
	<3b6ef0790908201446n5f925af4t82905351ad894aa0@mail.gmail.com>
Message-ID: <f4d6a21a0908201455t6cb014abi7e1314325ddb232@mail.gmail.com>

If you're using Thrift with RabbitMQ, you don't need to use the
transport at all necessarily -- you can just use Thrift and its
protocols for serialization, and send the messages over AMQP queues.

That said, Thrift RPC does have a 'oneway' service method keyword.
This is used for asynchronous calls.  You might want to look into
txAmqp and txThrift for some ideas if you really want to abstract all
of your calls into Thrift objects + AMQP messaging.  Esteve has done
an excellent job with both tools.

Michael

On Thu, Aug 20, 2009 at 4:46 PM, Jim Irrer<irrer at umich.edu> wrote:
> Thrift looks pretty good, but it does not seem to support one-way messages.
> All are implemented as if they were using a server-client model, and we will
> have some relationships that are one way (fire off a message and forget
> about it).
>
> I was able to fake out Thrift by creating my own null protocol and
> transport, and
> that would be ok, but it requires writing code for each platform, and if
> there is
> a niftier way to do this I would like to know.
>
> Thanks,
>
> - Jim
>
> Jim Irrer ? ? irrer at umich.edu ? ? ? (734) 647-4409
> University of Michigan Hospital Radiation Oncology
> 519 W. William St. ? ? ? ? ? ? Ann Arbor, MI 48103
>
>
> On Tue, Aug 18, 2009 at 11:13 AM, Garrett Smith <g at rre.tt> wrote:
>>
>> On Tue, Aug 18, 2009 at 9:10 AM, Michael Greene<michael.greene at gmail.com>
>> wrote:
>> > We currently use Apache Thrift for this, and have had success with it
>> > over
>> > the past year of use.
>>
>> I'd second this.
>>
>> There is some release management overhead in using Thrift or Protobuf,
>> so I'd also consider using JSON for the message payload. If your
>> schema changes a lot and you don't have massive throughput
>> requirements, I'd lean toward JSON just for its flexibility and solid
>> language support.
>>
>> IIRC, we showed that JSON in Python was over 20x slower than Thrift at
>> encoding/decoding for messages that were basically hash maps (~10
>> fields, 512K total size). But unless your performance requirements are
>> unusually demanding, I wouldn't worry too much about this.
>>
>> Garrett
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From g at rre.tt  Fri Aug 21 00:13:57 2009
From: g at rre.tt (Garrett Smith)
Date: Thu, 20 Aug 2009 18:13:57 -0500
Subject: [rabbitmq-discuss] Command Line Deletion of Queues?
In-Reply-To: <269388e30908200903p1328bc1cw4eb6d771847a031a@mail.gmail.com>
References: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
	<269388e30908200903p1328bc1cw4eb6d771847a031a@mail.gmail.com>
Message-ID: <ce2570e20908201613r696da0e3x3053e597d231778a@mail.gmail.com>

On Thu, Aug 20, 2009 at 11:03 AM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Richard,
>
> On 8/20/09, Rich Kim <rich.kim at db.com> wrote:
>> Is there any command line method to explicitly delete a durable queue? I'm
>> aware of the Channel.queueDelete() , but was hoping there might be a way
>> to perform this via rabbitmqctl as an administrative function?
>
> ATM you can't use this via rabbitmqctl. However, as part of the
> upcoming release there is a management plugin that lets you do this.
> This is usable now, but it means that you would have to get the latest
> source, build it, install the plugin, etc, which means that you won't
> be using a released version.

Being able to delete queues seems like good functionality for rabbitmqctl.

Is the current direction/thinking to move management facilities into plugins?

Garrett



From 0x6e6562 at gmail.com  Fri Aug 21 01:26:23 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Fri, 21 Aug 2009 01:26:23 +0100
Subject: [rabbitmq-discuss] Command Line Deletion of Queues?
In-Reply-To: <ce2570e20908201613r696da0e3x3053e597d231778a@mail.gmail.com>
References: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
	<269388e30908200903p1328bc1cw4eb6d771847a031a@mail.gmail.com>
	<ce2570e20908201613r696da0e3x3053e597d231778a@mail.gmail.com>
Message-ID: <269388e30908201726g3c4c7560m666d0d29e92f15aa@mail.gmail.com>

Garrett,

On Fri, Aug 21, 2009 at 12:13 AM, Garrett Smith<g at rre.tt> wrote:
> Being able to delete queues seems like good functionality for rabbitmqctl.
>
> Is the current direction/thinking to move management facilities into plugins?

Not completely. The long talked about intention is to expose
management primitives in the clients, upon which applications can be
built, including CLIs. The how and when of this is still up in the
air. In the interim, plugins are free to fill the gap, because they
can do whatever they want to. Also, in the future, it is likely that
plugins will still be required as a filtering/processing layer on top
the exposed management primitives.

rabbitmqctl was deliberately held as thin as possible, in order that
it remained the simplest possible implementation whilst actually still
being useful.

Ben



From brian.noguchi at gmail.com  Fri Aug 21 01:39:27 2009
From: brian.noguchi at gmail.com (Brian)
Date: Thu, 20 Aug 2009 17:39:27 -0700 (PDT)
Subject: [rabbitmq-discuss] Does the RabbitMQ XMPP Gateway work with
	RabbitMQ stable release version 1.6.0?
Message-ID: <f30b3c43-64cb-477f-bc7c-2af5b25bdb4a@u38g2000pro.googlegroups.com>

I've been having trouble getting it to work, and then I found a post
on the forum from January mentioning that the code breaks in 1.5 but
would be updated with release of 1.6.x.  Wondering what the latest is
on that.

If it is supposed to work with 1.6, I'm still seeing this error when I
run "ejabbertctl stop":

=ERROR REPORT==== 2009-08-20 17:26:55 ===
E(<0.521.0>:gen_mod:95) : {noproc,
                              {gen_server,call,
 
[ejabberd_mod_rabbitmq_localhost,stop]}}

=ERROR REPORT==== 2009-08-20 17:26:55 ===
E(<0.521.0>:gen_mod:95) : {noproc,
                              {gen_server,call,
                                  ['ejabberd_mod_rabbitmq_hostname',
                                   stop]}}

Any insight into this?

Thanks,
--Brian



From tonyg at lshift.net  Fri Aug 21 08:49:55 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Fri, 21 Aug 2009 08:49:55 +0100
Subject: [rabbitmq-discuss] Does the RabbitMQ XMPP Gateway work
 with	RabbitMQ stable release version 1.6.0?
In-Reply-To: <f30b3c43-64cb-477f-bc7c-2af5b25bdb4a@u38g2000pro.googlegroups.com>
References: <f30b3c43-64cb-477f-bc7c-2af5b25bdb4a@u38g2000pro.googlegroups.com>
Message-ID: <4A8E51A3.5040906@lshift.net>

Hi Brian,

It certainly *has* worked with 1.6, but as it's experimental/unofficial,
no particular effort went into tagging it at the time 1.6 was released.
It does currently work with the default branch in hg, FWIW...

Brian wrote:
> If it is supposed to work with 1.6, I'm still seeing this error when I
> run "ejabbertctl stop":

Interesting! I'm not sure I've ever tried that :-)

I'll take a look and get back to you.

Regards,
  Tony




From tonyg at lshift.net  Fri Aug 21 09:05:08 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Fri, 21 Aug 2009 09:05:08 +0100
Subject: [rabbitmq-discuss] Command Line Deletion of Queues?
In-Reply-To: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
References: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
Message-ID: <4A8E5534.6080706@lshift.net>

Rich Kim wrote:
> Is there any command line method to explicitly delete a durable queue?

One of the things I've wanted to do for a while is to use something like
the rabbitmq-c library, in conjunction with the spec XML/JSON
definitions, to build a tool for interactive or shell-scripting use that
automatically exposes the whole protocol. It's just always been eclipsed
by more important tasks :-)

I'm imagining either something like

  amqptool -U guest guest -V / -H localhost -P 5672 \
           --queue.delete -queue "myqueue" \
           --queue.declare -queue "myqueue -autodelete false \
           --basic.publish -exchange "" -routingkey "myqueue" \
              -.contenttype "text/plain" \
              "Hello, world!\n"

or

  amqptool -U guest guest -V / -H localhost -P 5672 << END
  QUEUE.DELETE AMQP/0-8
  Queue: myqueue

  QUEUE.DECLARE AMQP/0-8
  Queue: myqueue
  Autodelete: false

  BASIC.PUBLISH AMQP/0-8
  Exchange:
  Routingkey: myqueue
  .Contenttype: text/plain
  Content-length: 14

  Hello, world!
  END

Hmm. Actually the latter really reminds me of STOMP, without the silly
NUL business, and with AMQP-style commands instead of STOMP commands. If
it were done as a network protocol, then *netcat* would be a sufficient
client! Hmm!

Regards,
  Tony




From Alister.Morton at tradition.com  Fri Aug 21 09:53:39 2009
From: Alister.Morton at tradition.com (Alister Morton)
Date: Fri, 21 Aug 2009 09:53:39 +0100
Subject: [rabbitmq-discuss] Command Line Deletion of Queues?
In-Reply-To: <4A8E5534.6080706@lshift.net>
References: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
	<4A8E5534.6080706@lshift.net>
Message-ID: <5A46D132C446C04B9EFE8AD14E7891066EE9C0471B@SVR-2K3-BH-EMC.tradition.int>

> Is there any command line method to explicitly delete a durable queue?

Something which one of my colleagues has been looking for is a fully interactive realtime monitoring and controlling application, so that from a graphical console you can monitor all exchanges, all the queues bound to them, who is using those queues at any given moment, how many messages are queued, what the throughput stats are etc, and be able to manually remove or create exchanges, queues and users, purge queues, that sort of thing. Are the tools around to enable this sort of management tool to be developed?  We currently have a number of messaging systems in use (3rd party and written in house) and they have administrative applications with varying degrees of granularity, and this kind of resource monitoring is crucial to ensuring that problems can be headed off before they become critical. A graphical front end onto a message broker enabling full real-time control and monitoring would be a huge step forward, but we're not sure where to start.

The information herein may have been obtained from various sources. Any opinion expressed may be that of the sender only, is subject to change without notice and should be independently evaluated. Nothing herein constitutes investment advice or an offer, or solicitation of an offer, to buy or sell any financial product. Any data consists of purely indicative prices and should not be relied upon to revalue any commercial positions held by any recipient. Tradition makes no warranty that the data represent or indicates prices at which transactions may be or have been made by any Tradition Group company. To the maximum extent of the law, Tradition accepts no responsibility for, and cannot and does not warrant the integrity, accuracy, quality, completeness, merchantability or suitability for a particular purpose or requirement of the information or data, even if arising out of the negligence of Tradition or otherwise. Tradition accepts no liability for any direct, indirect or other consequential loss arising out of any use of the information contained in this document or any omission from it. This communication is directed at Eligible Counterparties and Professional Clients as defined by the FSA. It is not for distribution to nor should it be relied upon by Private Clients. It is not intended for distribution to, or use by any person or entity in any jurisdiction or country where such distribution or use would be contrary to any applicable law or regulation. Please note that, for business or compliance reasons, we may monitor and read emails sent or received using our servers or equipment. Tradition (UK) Ltd (937647; FSA 139200), Tradition Financial Services Ltd (1046064; FSA 147543), TFS Derivatives Ltd (4051930; FSA 197244), Tradition London Clearing Ltd (3633863; FSA 190632) and TFS-ICAP Ltd (4025995; FSA 206018) registered in England at Beaufort House, 15 St Botolph Street, London EC3A 7QX; authorised and regulated by the Financial Services Authority. VAT No: GB 365 4639 27 except TFS-ICAP GB 766 0854 05.



From tonyg at lshift.net  Fri Aug 21 15:40:18 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Fri, 21 Aug 2009 15:40:18 +0100
Subject: [rabbitmq-discuss] Command Line Deletion of Queues?
In-Reply-To: <5A46D132C446C04B9EFE8AD14E7891066EE9C0471B@SVR-2K3-BH-EMC.tradition.int>
References: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>	<4A8E5534.6080706@lshift.net>
	<5A46D132C446C04B9EFE8AD14E7891066EE9C0471B@SVR-2K3-BH-EMC.tradition.int>
Message-ID: <4A8EB1D2.8010802@lshift.net>

Alister Morton wrote:
>> Is there any command line method to explicitly delete a durable queue?
> 
> Something which one of my colleagues has been looking for is a fully
> interactive realtime monitoring and controlling application, so that
> from a graphical console you can monitor all exchanges, all the queues
> bound to them, who is using those queues at any given moment, how many
> messages are queued, what the throughput stats are etc, and be able to
> manually remove or create exchanges, queues and users, purge queues,
> that sort of thing. Are the tools around to enable this sort of
> management tool to be developed?

Check out trixx and alice&wonderland. There are also Munin plugins
available for displaying rabbitmqctl output graphically.

Cheers,
  Tony




From gmr at myyearbook.com  Fri Aug 21 15:49:02 2009
From: gmr at myyearbook.com (Gavin M. Roy)
Date: Fri, 21 Aug 2009 10:49:02 -0400
Subject: [rabbitmq-discuss] Command Line Deletion of Queues?
In-Reply-To: <4A8EB1D2.8010802@lshift.net>
References: <OF96D70483.3530E505-ON85257618.0054FF21-85257618.00553696@db.com>
	<4A8E5534.6080706@lshift.net>
	<5A46D132C446C04B9EFE8AD14E7891066EE9C0471B@SVR-2K3-BH-EMC.tradition.int>
	<4A8EB1D2.8010802@lshift.net>
Message-ID: <af1bce590908210749v5861372djd8b3f2c7711f71c7@mail.gmail.com>

On Fri, Aug 21, 2009 at 10:40 AM, Tony Garnock-Jones<tonyg at lshift.net> wrote:
> Alister Morton wrote:
>>> Is there any command line method to explicitly delete a durable queue?
>>
>> Something which one of my colleagues has been looking for is a fully
>> interactive realtime monitoring and controlling application, so that
>> from a graphical console you can monitor all exchanges, all the queues
>> bound to them, who is using those queues at any given moment, how many
>> messages are queued, what the throughput stats are etc, and be able to
>> manually remove or create exchanges, queues and users, purge queues,
>> that sort of thing. Are the tools around to enable this sort of
>> management tool to be developed?
>
> Check out trixx and alice&wonderland. There are also Munin plugins
> available for displaying rabbitmqctl output graphically.

+1 for Alice, very nice app for monitoring.  Provides all of the
output of rabbitmqctl in JSON format via HTTP.



From juhani at juranki.com  Fri Aug 21 17:01:12 2009
From: juhani at juranki.com (=?ISO-8859-1?Q?Juhani_R=E4nkimies?=)
Date: Fri, 21 Aug 2009 19:01:12 +0300
Subject: [rabbitmq-discuss] Feedback on erlang rabbitmq client (default
	branch)
Message-ID: <e55356640908210901w261f6893h239c84066d5795ab@mail.gmail.com>

Hi,

In amqp_client.hrl #amqp_params.host defaults to  <<"localhost">>.
Should be a string.

Rabbitmq headers are included from amqp_client.hrl like this:
-include_lib("rabbit_common/include/rabbit.hrl").
-include_lib("rabbit_common/include/rabbit_framing.hrl").

At least in my setup they didn't load without playing a little with $ERL_LIB.


Eagerly waiting for 1.7,
-juhani



From 0x6e6562 at gmail.com  Fri Aug 21 17:31:45 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Fri, 21 Aug 2009 17:31:45 +0100
Subject: [rabbitmq-discuss] Feedback on erlang rabbitmq client (default
	branch)
In-Reply-To: <e55356640908210901w261f6893h239c84066d5795ab@mail.gmail.com>
References: <e55356640908210901w261f6893h239c84066d5795ab@mail.gmail.com>
Message-ID: <269388e30908210931i3dd0fd8ch861922402e02ef92@mail.gmail.com>

Juhani,

On 8/21/09, Juhani R?nkimies <juhani at juranki.com> wrote:
> In amqp_client.hrl #amqp_params.host defaults to  <<"localhost">>.
> Should be a string.

Ooops, I wonder how that slipped past testing. I've just pushed out a
fix for this.

> Rabbitmq headers are included from amqp_client.hrl like this:
> -include_lib("rabbit_common/include/rabbit.hrl").
> -include_lib("rabbit_common/include/rabbit_framing.hrl").
>
> At least in my setup they didn't load without playing a little with
> $ERL_LIB.

Yes, you can waste a fair bit of time with the ERL_LIBS gotchas.
Basically you need to unpack any archive if you want the compiler to
read the include_lib headers. The include directory also needs to have
a sibling directory called ebin, even if it is empty.

> Eagerly waiting for 1.7,

Crashing a server near you soon :-)

Ben



From 0x6e6562 at gmail.com  Fri Aug 21 17:35:53 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Fri, 21 Aug 2009 17:35:53 +0100
Subject: [rabbitmq-discuss] client and server versioning
In-Reply-To: <269388e30908021618j62a6b58bo25d94e8153bc0671@mail.gmail.com>
References: <e55356640907310144m258a52eekf7af4795dcdcb951@mail.gmail.com>
	<269388e30908021618j62a6b58bo25d94e8153bc0671@mail.gmail.com>
Message-ID: <269388e30908210935t2d6bf023q9eba8e38b68c6640@mail.gmail.com>

Juhani,

On 8/3/09, Ben Hood <0x6e6562 at gmail.com> wrote:
> Juhani,
>
> On Fri, Jul 31, 2009 at 9:44 AM, Juhani R?nkimies<juhani at juranki.com>
> wrote:
>> Am I asking for trouble if I follow erlang-client default branch and
>> keep the server at 1.6.0?
>> I'd be using network connection.
>
> Until the Erlang client is officially released, following the default
> branch of the client is pretty much your only reasonably stable
> option. Given that you can now build loadable bundles for the modules
> specific to the client and for the shared modules and your client is
> running in a different VM, you should fair well.

You have probably realized by now that what I said previously is a
complete lie. Whilst we are trying to target Erlang server-client
release synchronicity for 1.7, we've taken the opportunity to refactor
the API a bit in the last week or so - I think Matthew pointed this
out at some point as well.

Ben



From juhani at juranki.com  Fri Aug 21 18:13:58 2009
From: juhani at juranki.com (=?ISO-8859-1?Q?Juhani_R=E4nkimies?=)
Date: Fri, 21 Aug 2009 20:13:58 +0300
Subject: [rabbitmq-discuss] client and server versioning
In-Reply-To: <269388e30908210935t2d6bf023q9eba8e38b68c6640@mail.gmail.com>
References: <e55356640907310144m258a52eekf7af4795dcdcb951@mail.gmail.com>
	<269388e30908021618j62a6b58bo25d94e8153bc0671@mail.gmail.com>
	<269388e30908210935t2d6bf023q9eba8e38b68c6640@mail.gmail.com>
Message-ID: <e55356640908211013x39185f91q28f2ba5dc4bf431c@mail.gmail.com>

On Fri, Aug 21, 2009 at 7:35 PM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Juhani,
>
> On 8/3/09, Ben Hood <0x6e6562 at gmail.com> wrote:
>> Juhani,
>>
>> On Fri, Jul 31, 2009 at 9:44 AM, Juhani R?nkimies<juhani at juranki.com>
>> wrote:
>>> Am I asking for trouble if I follow erlang-client default branch and
>>> keep the server at 1.6.0?
>>> I'd be using network connection.
>>
>> Until the Erlang client is officially released, following the default
>> branch of the client is pretty much your only reasonably stable
>> option. Given that you can now build loadable bundles for the modules
>> specific to the client and for the shared modules and your client is
>> running in a different VM, you should fair well.
>
> You have probably realized by now that what I said previously is a
> complete lie. Whilst we are trying to target Erlang server-client
> release synchronicity for 1.7, we've taken the opportunity to refactor
> the API a bit in the last week or so - I think Matthew pointed this
> out at some point as well.
>
> Ben
>

No problem, I noticed Matthew's mail and chose to keep the real app at 1.6.0.
I track the api changes by keeping a toy app in sync with the default branch.

-juhani



From ram.muthiah at yahoo.com  Fri Aug 21 20:31:46 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Fri, 21 Aug 2009 12:31:46 -0700 (PDT)
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <29598b610908201107g3de20ee6geaebf88a8a11eee1@mail.gmail.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
	<4A8AFE22.5060102@lshift.net>
	<877337.64591.qm@web44707.mail.sp1.yahoo.com>
	<29598b610908190021v2a768504k312cf3d55f9e049d@mail.gmail.com>
	<536995.36933.qm@web44706.mail.sp1.yahoo.com>
	<29598b610908201107g3de20ee6geaebf88a8a11eee1@mail.gmail.com>
Message-ID: <17725.62638.qm@web44711.mail.sp1.yahoo.com>

Hi Paul,

I am not running the client in the same machine as the server. I installed rabbitmq in our server. I am testing the PC clients that communicate with rabbitmq server. I left the username and password as it is, so their values are still "guest". However, the hostname is changed, so I am not able to use TestMain out of the box. The documentation should clearly state that runjava.bat com.rabbitmq.examples.TestMain would work only if the broker is installed in the same machine as the client. 

Going to the "stuck" part of my development effort -- I have the following code that is supposed to connect the consumer to the broker. 

package rabbitmq;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.QueueingConsumer;

public class SimpleConsumer {
    public static void main(String[] args) {
        try {
            String hostName = (args.length > 0) ? args[0] : "dev.rabbitmq.com";
            int portNumber = (args.length > 1) ? Integer.parseInt(args[1]) : AMQP.PROTOCOL.PORT;
            String queueName = (args.length > 2) ? args[2] : "SimpleQueue";

            ConnectionFactory connFactory = new ConnectionFactory();
            Connection conn = connFactory.newConnection(hostName, portNumber);

            final Channel ch = conn.createChannel();

            ch.queueDeclare(queueName);

            QueueingConsumer consumer = new QueueingConsumer(ch);
            ch.basicConsume(queueName, consumer);
            while (true) {
                QueueingConsumer.Delivery delivery = consumer.nextDelivery();
                System.out.println("Message: " + new String(delivery.getBody()));
                ch.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
            }
        } catch (Exception ex) {
            System.err.println("Main thread caught exception: " + ex);
            ex.printStackTrace();
            System.exit(1);
        }
    }
}

When I run the above code, I get the following error message: 

Main thread caught exception: java.io.IOException
java.io.IOException
        at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:121)
        at com.rabbitmq.client.impl.AMQConnection.open(AMQConnection.java:363)
        at com.rabbitmq.client.impl.AMQConnection.<init>(AMQConnection.java:208)
        at com.rabbitmq.client.impl.AMQConnection.<init>(AMQConnection.java:178)
        at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:165)
        at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:213)
        at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:227)
        at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:238)
        at rabbitmq.SimpleConsumer.main(SimpleConsumer.java:48)
Caused by: com.rabbitmq.client.ShutdownSignalException: connection error; reason: java.lang.NoClassDefFoundError: org/apache/commons/io/input/ProxyInputStream
        at com.rabbitmq.client.impl.AMQConnection.shutdown(AMQConnection.java:599)
        at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:465)
Caused by: java.lang.NoClassDefFoundError: org/apache/commons/io/input/ProxyInputStream
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:621)
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
        at java.net.URLClassLoader.access$000(URLClassLoader.java:56)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)
        at com.rabbitmq.client.impl.MethodArgumentReader.<init>(MethodArgumentReader.java:70)
        at com.rabbitmq.client.impl.AMQImpl.readMethodFrom(AMQImpl.java:5710)
        at com.rabbitmq.client.impl.AMQCommand$Assembler.handleFrame(AMQCommand.java:275)
        at com.rabbitmq.client.impl.AMQChannel.handleFrame(AMQChannel.java:107)
        at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:439)
Caused by: java.lang.ClassNotFoundException: org.apache.commons.io.input.ProxyInputStream
        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)


What I am looking for is complete working example of java code for the client. Simple example like just connecting to the broker and receiving the message (on the consumer side) from the producer. 

Thanks
Ram





________________________________
From: Paul Jones <pauljones23 at gmail.com>
To: Ram Muthiah <ram.muthiah at yahoo.com>
Cc: rabbitmq-discuss at lists.rabbitmq.com
Sent: Thursday, August 20, 2009 11:07:42 AM
Subject: Re: [rabbitmq-discuss] Working with Java Client

Ram,


On Thu, Aug 20, 2009 at 6:40 PM, Ram Muthiah <ram.muthiah at yahoo.com> wrote:

I feel the examples document needs to be more detailed. Examples page instructs to run runjava.bat com.rabbitmq.examples.TestMain to run the TestMain class. But, don't we need to change hostname, guest, password, etc before running these classes? 
>

As far as I can see, the scripts default to using localhost and guest/guest. A broker running on the same machine should accept these credentials out of the box.
 

>I setup the server, I ran some basic python scripts to
> send/receive messages, they work well. I am stuck while using java client. Any help is much appreciated.
>

Unfortunately you're going to need to tell us how you're stuck before we can provide any useful assistance.

Paul.



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090821/9aef9eec/attachment.htm 

From pauljones23 at gmail.com  Fri Aug 21 21:24:34 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Fri, 21 Aug 2009 21:24:34 +0100
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <17725.62638.qm@web44711.mail.sp1.yahoo.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
	<4A8AFE22.5060102@lshift.net>
	<877337.64591.qm@web44707.mail.sp1.yahoo.com>
	<29598b610908190021v2a768504k312cf3d55f9e049d@mail.gmail.com>
	<536995.36933.qm@web44706.mail.sp1.yahoo.com>
	<29598b610908201107g3de20ee6geaebf88a8a11eee1@mail.gmail.com>
	<17725.62638.qm@web44711.mail.sp1.yahoo.com>
Message-ID: <29598b610908211324x67f9c032ndca1e8e866856706@mail.gmail.com>

Ram,

On Fri, Aug 21, 2009 at 8:31 PM, Ram Muthiah <ram.muthiah at yahoo.com> wrote:

> I am not running the client in the same machine as the server. I installed
> rabbitmq in our server. I am testing the PC clients that communicate with
> rabbitmq server. I left the username and password as it is, so their values
> are still "guest". However, the hostname is changed, so I am not able to use
> TestMain out of the box. The documentation should clearly state that
> runjava.bat com.rabbitmq.examples.TestMain would work only if the broker is
> installed in the same machine as the client.
>

A quick perusal of the source code for TestMain indicates quite quickly (and
in my opinion, relatively clearly) that the optional first command line
parameter is the target host to connect to. Specifying this will change the
host that the application connects to.

The below failure, as indicated by the NoClassFoundError, indicates that
you're missing apache commons-io, a dependency of the library. You'll need
to add that into your classpath in order for the library to work.
Alternatively, you could just run the examples with dev.rabbitmq.com as the
first parameter.

Paul.


>
> Going to the "stuck" part of my development effort -- I have the following
> code that is supposed to connect the consumer to the broker.
>
> package rabbitmq;
>
> import com.rabbitmq.client.AMQP;
> import com.rabbitmq.client.Channel;
> import com.rabbitmq.client.Connection;
> import com.rabbitmq.client.ConnectionFactory;
> import com.rabbitmq.client.QueueingConsumer;
>
> public class SimpleConsumer {
>     public static void main(String[] args) {
>         try {
>             String hostName = (args.length > 0) ? args[0] : "
> dev.rabbitmq.com";
>             int portNumber = (args.length > 1) ? Integer.parseInt(args[1])
> : AMQP.PROTOCOL.PORT;
>             String queueName = (args.length > 2) ? args[2] : "SimpleQueue";
>
>             ConnectionFactory connFactory = new ConnectionFactory();
>             Connection conn = connFactory.newConnection(hostName,
> portNumber);
>
>             final Channel ch = conn.createChannel();
>
>             ch.queueDeclare(queueName);
>
>             QueueingConsumer consumer = new QueueingConsumer(ch);
>             ch.basicConsume(queueName, consumer);
>             while (true) {
>                 QueueingConsumer.Delivery delivery =
> consumer.nextDelivery();
>                 System.out.println("Message: " + new
> String(delivery.getBody()));
>                 ch.basicAck(delivery.getEnvelope().getDeliveryTag(),
> false);
>             }
>         } catch (Exception ex) {
>             System.err.println("Main thread caught exception: " + ex);
>             ex.printStackTrace();
>             System.exit(1);
>         }
>     }
> }
>
> When I run the above code, I get the following error message:
>
> Main thread caught exception: java.io.IOException
> java.io.IOException
>         at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:121)
>         at
> com.rabbitmq.client.impl.AMQConnection.open(AMQConnection.java:363)
>         at
> com.rabbitmq.client.impl.AMQConnection.<init>(AMQConnection.java:208)
>         at
> com.rabbitmq.client.impl.AMQConnection.<init>(AMQConnection.java:178)
>         at
> com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:165)
>         at
> com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:213)
>         at
> com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:227)
>         at
> com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:238)
>         at rabbitmq.SimpleConsumer.main(SimpleConsumer.java:48)
> Caused by: com.rabbitmq.client.ShutdownSignalException: connection error;
> reason: java.lang.NoClassDefFoundError:
> org/apache/commons/io/input/ProxyInputStream
>         at
> com.rabbitmq.client.impl.AMQConnection.shutdown(AMQConnection.java:599)
>         at
> com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:465)
> Caused by: java.lang.NoClassDefFoundError:
> org/apache/commons/io/input/ProxyInputStream
>         at java.lang.ClassLoader.defineClass1(Native Method)
>         at java.lang.ClassLoader.defineClass(ClassLoader.java:621)
>         at
> java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
>         at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
>         at java.net.URLClassLoader.access$000(URLClassLoader.java:56)
>         at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
>         at java.security.AccessController.doPrivileged(Native Method)
>         at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
>         at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
>         at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
>         at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
>         at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)
>         at
> com.rabbitmq.client.impl.MethodArgumentReader.<init>(MethodArgumentReader.java:70)
>         at
> com.rabbitmq.client.impl.AMQImpl.readMethodFrom(AMQImpl.java:5710)
>         at
> com.rabbitmq.client.impl.AMQCommand$Assembler.handleFrame(AMQCommand.java:275)
>         at
> com.rabbitmq.client.impl.AMQChannel.handleFrame(AMQChannel.java:107)
>         at
> com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:439)
> Caused by: java.lang.ClassNotFoundException:
> org.apache.commons.io.input.ProxyInputStream
>         at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
>         at java.security.AccessController.doPrivileged(Native Method)
>         at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
>         at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
>         at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
>         at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
>         at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)
>
>
> What I am looking for is complete working example of java code for the
> client. Simple example like just connecting to the broker and receiving the
> message (on the consumer side) from the producer.
>
> Thanks
> Ram
>
>
> ------------------------------
> *From:* Paul Jones <pauljones23 at gmail.com>
> *To:* Ram Muthiah <ram.muthiah at yahoo.com>
> *Cc:* rabbitmq-discuss at lists.rabbitmq.com
> *Sent:* Thursday, August 20, 2009 11:07:42 AM
> *Subject:* Re: [rabbitmq-discuss] Working with Java Client
>
> Ram,
>
> On Thu, Aug 20, 2009 at 6:40 PM, Ram Muthiah <ram.muthiah at yahoo.com>wrote:
>
>> I feel the examples document needs to be more detailed. Examples page
>> instructs to run runjava.bat com.rabbitmq.examples.TestMain to run the
>> TestMain class. But, don't we need to change hostname, guest, password, etc
>> before running these classes?
>>
>
> As far as I can see, the scripts default to using localhost and
> guest/guest. A broker running on the same machine should accept these
> credentials out of the box.
>
>
>>
>> I setup the server, I ran some basic python scripts to send/receive
>> messages, they work well. I am stuck while using java client. Any help is
>> much appreciated.
>>
>
> Unfortunately you're going to need to tell us how you're stuck before we
> can provide any useful assistance.
>
> Paul.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090821/f722cfc2/attachment.htm 

From ram.muthiah at yahoo.com  Fri Aug 21 23:03:10 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Fri, 21 Aug 2009 15:03:10 -0700 (PDT)
Subject: [rabbitmq-discuss] Working with Java Client
In-Reply-To: <29598b610908211324x67f9c032ndca1e8e866856706@mail.gmail.com>
References: <208517.40949.qm@web44705.mail.sp1.yahoo.com>
	<4A8AFE22.5060102@lshift.net>
	<877337.64591.qm@web44707.mail.sp1.yahoo.com>
	<29598b610908190021v2a768504k312cf3d55f9e049d@mail.gmail.com>
	<536995.36933.qm@web44706.mail.sp1.yahoo.com>
	<29598b610908201107g3de20ee6geaebf88a8a11eee1@mail.gmail.com>
	<17725.62638.qm@web44711.mail.sp1.yahoo.com>
	<29598b610908211324x67f9c032ndca1e8e866856706@mail.gmail.com>
Message-ID: <320143.8091.qm@web44710.mail.sp1.yahoo.com>

Hi Paul,

I added commons-io library, it worked well! I tested on both consumer and producer sides, the messages are going from producer to consumer. I assume that to make a chat function work between two clients (client A and B), we need to make both clients to act as consumer as well as producer. There is still a lot more to learn! Thanks for your help.

Ram




________________________________
From: Paul Jones <pauljones23 at gmail.com>
To: Ram Muthiah <ram.muthiah at yahoo.com>
Cc: rabbitmq-discuss at lists.rabbitmq.com
Sent: Friday, August 21, 2009 1:24:34 PM
Subject: Re: [rabbitmq-discuss] Working with Java Client

Ram,


On Fri, Aug 21, 2009 at 8:31 PM, Ram Muthiah <ram.muthiah at yahoo.com> wrote:

I am not running the client in the same machine as the server. I installed rabbitmq in our server. I am testing the PC clients that communicate with rabbitmq server. I left the username and password as it is, so their values are still "guest". However, the hostname is changed, so I am not able to use TestMain out of the box. The documentation should clearly state that runjava.bat com.rabbitmq.examples.TestMain would work only if the broker is installed in the same machine as the client. 
>

A quick perusal of the source code for TestMain indicates quite quickly (and in my opinion, relatively clearly) that the optional first command line parameter is the target host to connect to. Specifying this will change the host that the application connects to.

The below failure, as indicated by the NoClassFoundError, indicates that you're missing apache commons-io, a dependency of the library. You'll need to add that into your classpath in order for the library to work. Alternatively, you could just run the examples with dev.rabbitmq.com as the first parameter.

Paul.
 

>Going to the "stuck" part of my development effort -- I have the following code that is supposed to connect the consumer to the broker. 
>
>package rabbitmq;
>
>import com.rabbitmq.client.AMQP;
>>import com.rabbitmq.client.Channel;
>import
> com.rabbitmq.client.Connection;
>import com.rabbitmq.client.ConnectionFactory;
>import com.rabbitmq.client.QueueingConsumer;
>
>public class SimpleConsumer {
>    public static void main(String[] args) {
>        try {
>>            String hostName = (args.length > 0) ? args[0] : "dev.rabbitmq.com";
>            int portNumber = (args.length > 1) ? Integer.parseInt(args[1]) : AMQP.PROTOCOL.PORT;
>>            String queueName = (args.length > 2) ? args[2] : "SimpleQueue";
>
>            ConnectionFactory connFactory = new ConnectionFactory();
>           
> Connection conn = connFactory.newConnection(hostName, portNumber);
>
>            final Channel ch = conn.createChannel();
>
>            ch.queueDeclare(queueName);
>
>            QueueingConsumer consumer = new QueueingConsumer(ch);
>>            ch.basicConsume(queueName, consumer);
>            while (true) {
>                QueueingConsumer.Delivery delivery = consumer.nextDelivery();
>                System.out.println("Message: " + new
> String(delivery.getBody()));
>                ch.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
>            }
>        } catch (Exception ex) {
>            System.err.println("Main thread caught exception: " + ex);
>>            ex.printStackTrace();
>            System.exit(1);
>        }
>    }
>}
>
>When I run the above code, I get the following error message: 
>
>Main thread caught exception: java.io.IOException
>>java.io.IOException
>        at
> com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:121)
>        at com.rabbitmq.client.impl.AMQConnection.open(AMQConnection.java:363)
>        at com.rabbitmq.client.impl.AMQConnection.<init>(AMQConnection.java:208)
>>        at com.rabbitmq.client.impl.AMQConnection.<init>(AMQConnection.java:178)
>        at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:165)
>        at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:213)
>>        at com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:227)
>        at
> com.rabbitmq.client.ConnectionFactory.newConnection(ConnectionFactory.java:238)
>        at rabbitmq.SimpleConsumer.main(SimpleConsumer.java:48)
>Caused by: com.rabbitmq.client.ShutdownSignalException: connection error; reason: java.lang.NoClassDefFoundError: org/apache/commons/io/input/ProxyInputStream
>>        at com.rabbitmq.client.impl.AMQConnection.shutdown(AMQConnection.java:599)
>        at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:465)
>Caused by: java.lang.NoClassDefFoundError: org/apache/commons/io/input/ProxyInputStream
>>        at java.lang.ClassLoader.defineClass1(Native Method)
>        at java.lang.ClassLoader.defineClass(ClassLoader.java:621)
>        at
> java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)
>        at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)
>        at java.net.URLClassLoader.access$000(URLClassLoader.java:56)
>>        at java.net.URLClassLoader$1.run(URLClassLoader.java:195)
>        at java.security.AccessController.doPrivileged(Native Method)
>        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
>        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
>>        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
>        at
> java.lang.ClassLoader.loadClass(ClassLoader.java:252)
>        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)
>        at com.rabbitmq.client.impl.MethodArgumentReader.<init>(MethodArgumentReader.java:70)
>>        at com.rabbitmq.client.impl.AMQImpl.readMethodFrom(AMQImpl.java:5710)
>        at com.rabbitmq.client.impl.AMQCommand$Assembler.handleFrame(AMQCommand.java:275)
>        at com.rabbitmq.client.impl.AMQChannel.handleFrame(AMQChannel.java:107)
>>        at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:439)
>Caused by: java.lang.ClassNotFoundException: org.apache.commons.io.input.ProxyInputStream
>        at
> java.net.URLClassLoader$1.run(URLClassLoader.java:200)
>        at java.security.AccessController.doPrivileged(Native Method)
>        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
>        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
>>        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
>        at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
>        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)
>
>
>What I am looking for is complete working example of java code for the client. Simple example like just connecting to the broker and receiving the message (on the consumer side) from the producer. 
>
>Thanks
>Ram
>
>
>
>
>
________________________________
From: Paul Jones <pauljones23 at gmail.com>
>To: Ram Muthiah <ram.muthiah at yahoo.com>
>Cc: rabbitmq-discuss at lists.rabbitmq.com
>Sent: Thursday, August 20, 2009 11:07:42 AM
>
>Subject: Re: [rabbitmq-discuss] Working with Java Client
>
>
>Ram,
>
>
>On Thu, Aug 20, 2009 at 6:40 PM, Ram Muthiah <ram.muthiah at yahoo.com> wrote:
>
>I feel the examples document needs to be more detailed. Examples page instructs to run runjava.bat com.rabbitmq.examples.TestMain to run the TestMain class. But, don't we need to change hostname, guest, password, etc before running these classes? 
>>
>
>As far as I can see, the scripts default to using localhost and guest/guest. A broker running on the same machine should accept these credentials out of the box.
> 
>
>>I setup the server, I ran some basic python scripts to
>> send/receive messages, they work well. I am stuck while using java client. Any help is much appreciated.
>>
>
>Unfortunately you're going to need to tell us how you're stuck before we can provide any useful assistance.
>
>Paul.
>
>



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090821/a721a5da/attachment.htm 

From bchesneau at gmail.com  Sat Aug 22 10:54:30 2009
From: bchesneau at gmail.com (Benoit Chesneau)
Date: Sat, 22 Aug 2009 11:54:30 +0200
Subject: [rabbitmq-discuss] load balancing for consummer
In-Reply-To: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
Message-ID: <b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>

Hi,

I've a consummer using erlang-rabbitmq-client
http://www.friendpaste.com/1vohm5UA0oZpcDyONuikHy.

it workss well,but if rabbitmq server hangs all the app hangs. Seem
I'm unable to catch the EXIT message from channel gen_serv, ?I've the
idee to setup a rabbitmq cluster and if one node fails just use
another using a list of connexions. I odn't know if it's possible.
Obviously I should the same on the sender. Any idee ow I could simply
do some loadbalancing to another rabbitmq node ? If I could catch the
EXIT part I may eventually be abble ?to do that. Maybe there are
better solution.

I use rabbitmq-server 1.6.0 and revision #d522704ccd77 of
erlang-rabbitmq-client.


- beno?t



From matthew at lshift.net  Sat Aug 22 11:19:37 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Sat, 22 Aug 2009 11:19:37 +0100
Subject: [rabbitmq-discuss] load balancing for consummer
In-Reply-To: <b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
	<b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
Message-ID: <20090822101937.GA15620@wellquite.org>

Hi Beno?t,

On Sat, Aug 22, 2009 at 11:54:30AM +0200, Benoit Chesneau wrote:
> it workss well,but if rabbitmq server hangs all the app hangs. Seem
> I'm unable to catch the EXIT message from channel gen_serv, ?I've the
> idee to setup a rabbitmq cluster and if one node fails just use
> another using a list of connexions. I odn't know if it's possible.
> Obviously I should the same on the sender. Any idee ow I could simply
> do some loadbalancing to another rabbitmq node ? If I could catch the
> EXIT part I may eventually be abble ?to do that. Maybe there are
> better solution.

One initial question I have is how are you seeing RabbitMQ hang? Is it
repeatable under a certain loading, or is it more random? If the server
is just really busy it's possible the channel is simply blocked on a
call of some sort, so it's not really exiting - do you have evidence
that the channel really is dying?

Matthew



From 0x6e6562 at gmail.com  Sat Aug 22 11:45:23 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sat, 22 Aug 2009 11:45:23 +0100
Subject: [rabbitmq-discuss] load balancing for consummer
In-Reply-To: <b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
	<b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
Message-ID: <269388e30908220345n543fdc04jd6b093604cfc30aa@mail.gmail.com>

Benoit,

On Sat, Aug 22, 2009 at 10:54 AM, Benoit Chesneau<bchesneau at gmail.com> wrote:
> I've a consummer using erlang-rabbitmq-client
> http://www.friendpaste.com/1vohm5UA0oZpcDyONuikHy.
>
> it workss well,but if rabbitmq server hangs all the app hangs. Seem
> I'm unable to catch the EXIT message from channel gen_serv, ?I've the
> idee to setup a rabbitmq cluster and if one node fails just use
> another using a list of connexions. I odn't know if it's possible.
> Obviously I should the same on the sender. Any idee ow I could simply
> do some loadbalancing to another rabbitmq node ? If I could catch the
> EXIT part I may eventually be abble ?to do that. Maybe there are
> better solution.

Your general strategy of maintaining a list of nodes to failover to
seems ok. There are possibly a few details that are making this a
little difficult ATM:

- There is a known issue in the client surrounding the way events are
propagated to the application in the scenario that the broker forces
the connection to close. This has been outstanding for a while and is
due to fixed soon;

- You can actually link the amqp_channel process if you wanting to
trap exits - use start_network_link/1 instead of start_network/1;

Ben



From 0x6e6562 at gmail.com  Sat Aug 22 11:58:59 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sat, 22 Aug 2009 11:58:59 +0100
Subject: [rabbitmq-discuss] load balancing for consummer
In-Reply-To: <b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
	<b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
Message-ID: <269388e30908220358k2fde47cer94f1f27740a9f332@mail.gmail.com>

Beno?t,

On Sat, Aug 22, 2009 at 10:54 AM, Benoit Chesneau<bchesneau at gmail.com> wrote:
> I've a consummer using erlang-rabbitmq-client
> http://www.friendpaste.com/1vohm5UA0oZpcDyONuikHy.

Just took a peek at this, here are some minor observations:

- Realms and tickets have been toast for a while now. The server
treats them as NOOPs;
- You might want to check the rabbit_framing.hrl header file to find
out what default values are set in each record definition - this may
help make your code terser;
- You don't need to set consumer_tags when subscribing unless you
really want to - the server will generate them for you;
- Are you sure you need a topic exchange?
- Furthermore, I assume that your code works, but I what I'm not
getting on first glance is how the subscription works when you use the
name of the module instead of a pid - maybe there's something else
going on here?

Also, as some other users of the Erlang client have already noticed,
the API has undergone a lot of cleanup to get it to a releasable state
- you might want to keep this in mind as it is likely to land some
time soon.

Ben



From 0x6e6562 at gmail.com  Sat Aug 22 14:47:27 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sat, 22 Aug 2009 14:47:27 +0100
Subject: [rabbitmq-discuss] Fwd:  load balancing for consummer
In-Reply-To: <b7cd8ed10908220443v76f6e644n2b65730af56e529f@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
	<b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
	<269388e30908220358k2fde47cer94f1f27740a9f332@mail.gmail.com>
	<b7cd8ed10908220443v76f6e644n2b65730af56e529f@mail.gmail.com>
Message-ID: <269388e30908220647o2f898590raab61427012533a@mail.gmail.com>

Beno?t,

On Sat, Aug 22, 2009 at 12:43 PM, Benoit Chesneau<bchesneau at gmail.com> wrote:
>> On Sat, Aug 22, 2009 at 10:54 AM, Benoit Chesneau<bchesneau at gmail.com> wrote:
>>> I've a consummer using erlang-rabbitmq-client
>>> http://www.friendpaste.com/1vohm5UA0oZpcDyONuikHy.
>>
>> Just took a peek at this, here are some minor observations:
>>
>> - Realms and tickets have been toast for a while now. The server
>> treats them as NOOPs;
>> - You might want to check the rabbit_framing.hrl header file to find
>> out what default values are set in each record definition - this may
>> help make your code terser;
>> - You don't need to set consumer_tags when subscribing unless you
>> really want to - the server will generate them for you;
> I ignored that.
>
>> - Are you sure you need a topic exchange?
> Right I don't need this, thanks
>
>> - Furthermore, I assume that your code works, but I what I'm not
>> getting on first glance is how the subscription works when you use the
>> name of the module instead of a pid - maybe there's something else
>> going on here?
>>
> Think I will have a closer look on it. Will do appropriate changes
> this afternoon.
>
>> Also, as some other users of the Erlang client have already noticed,
>> the API has undergone a lot of cleanup to get it to a releasable state
>> - you might want to keep this in mind as it is likely to land some
>> time soon.
>>
> Would you suggest to use latest tips of rabbitmq-server &
> rabbitmq-client ? For now I'm using the released version of rabbitmq +
> the revision number given by matthew in a previous mail.
>
> Anyway thanks for all your explanations. I will let you know about the result.
>
> - beno?t
>



From 0x6e6562 at gmail.com  Sat Aug 22 14:57:54 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sat, 22 Aug 2009 14:57:54 +0100
Subject: [rabbitmq-discuss] load balancing for consummer
In-Reply-To: <b7cd8ed10908220443v76f6e644n2b65730af56e529f@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
	<b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
	<269388e30908220358k2fde47cer94f1f27740a9f332@mail.gmail.com>
	<b7cd8ed10908220443v76f6e644n2b65730af56e529f@mail.gmail.com>
Message-ID: <269388e30908220657x731b9410n6b4953657a271992@mail.gmail.com>

Beno?t,

On Sat, Aug 22, 2009 at 12:43 PM, Benoit Chesneau<bchesneau at gmail.com> wrote:
> Would you suggest to use latest tips of rabbitmq-server &
> rabbitmq-client ? For now I'm using the released version of rabbitmq +
> the revision number given by matthew in a previous mail.

That tagged version of the client is going to be the only one that
will work with the 1.6.0 server release.

My *personal* opinion is to generally use the latest heads of the
default branches of the client and server. The reason is twofold:

- Default branches always contain the latest QA'ed code that will go
into the next release and are generally contain many bug fixes that
the released version doesn't;
- It provides the Rabbit development team with valuable testing before
a release is made;

However, many people will prefer either to have what they consider to
be a stable release or they don't want to have to play around with
source control.

There is also the issue of repeatability - the head of any branch is
always a moving target, whereas a release isn't.

Which brings me onto a pre-emptive strike - if you do decide to use
the latest head of default, make sure that you don't use the hg tip
command, because it just gives you random junk.

Ben



From bchesneau at gmail.com  Sat Aug 22 21:11:13 2009
From: bchesneau at gmail.com (Benoit Chesneau)
Date: Sat, 22 Aug 2009 22:11:13 +0200
Subject: [rabbitmq-discuss] bug in latest default branch of
	erlangg-rabbitmq-client
Message-ID: <b7cd8ed10908221311j209f4a0cp4c034176649449d6@mail.gmail.com>

Hi,

I'm not sure where to report bug about this lib. So I tried latest
default branch of client with l



From bchesneau at gmail.com  Sat Aug 22 21:15:21 2009
From: bchesneau at gmail.com (Benoit Chesneau)
Date: Sat, 22 Aug 2009 22:15:21 +0200
Subject: [rabbitmq-discuss] bug in latest default branch of
	erlangg-rabbitmq-client
Message-ID: <b7cd8ed10908221315l60cd7d36l9cc8d35b987b53b2@mail.gmail.com>

Hi,

So I'm trying to work with latest "default" branch of erlang cient and
server but I get this error when launching tests :

enki:rabbitmq-erlang-client benoitc$ make test_network
make -C test
ERL_LIBS=../deps erlc -I ../include -o ./ -Wall -v +debug_info
-Duse_specs direct_client_SUITE.erl
ERL_LIBS=../deps erlc -I ../include -o ./ -Wall -v +debug_info
-Duse_specs negative_test_util.erl
ERL_LIBS=../deps erlc -I ../include -o ./ -Wall -v +debug_info
-Duse_specs network_client_SUITE.erl
ERL_LIBS=../deps erlc -I ../include -o ./ -Wall -v +debug_info
-Duse_specs test_util.erl
make run_test_broker RUN_TEST_BROKER_ARGS="-s network_client_SUITE test"
make -C ../rabbitmq-server start-background-node
RABBITMQ_NODE_IP_ADDRESS="" RABBITMQ_NODE_PORT=""
RABBITMQ_LOG_BASE="/var/folders/do/doZ4IUNPHjCoD2AxIGmvRk+++TI/-Tmp-/"
RABBITMQ_MNESIA_DIR="/var/folders/do/doZ4IUNPHjCoD2AxIGmvRk+++TI/-Tmp-//rabbitmq-rabbit-mnesia"
\
		RABBITMQ_NODE_ONLY=true \
		RABBITMQ_SERVER_START_ARGS=" -detached" \
		./scripts/rabbitmq-server ; sleep 1
make -C ../rabbitmq-server start-rabbit-on-node
echo "rabbit:start()." | erl_call -sname rabbit -e
/bin/sh: erl_call: command not found
make[2]: *** [start-rabbit-on-node] Error 127
make[1]: *** [boot_broker] Error 2
make: *** [test_network] Error 2
enki:rabbitmq-erlang-client benoitc$ hg branch
default

The same with rabbitmq-server

enki:rabbitmq-server benoitc$ make run-tests
echo "rabbit_tests:all_tests()." | erl_call -sname rabbit -e
/bin/sh: erl_call: command not found
make: *** [run-tests] Error 127


I've installed erlang r13b01 with macports and previous tests with 1.6
version worked. Any idee how to fix it ?

- beno?t



From bchesneau at gmail.com  Sat Aug 22 21:25:53 2009
From: bchesneau at gmail.com (Benoit Chesneau)
Date: Sat, 22 Aug 2009 22:25:53 +0200
Subject: [rabbitmq-discuss] bug in latest default branch of
	erlangg-rabbitmq-client
In-Reply-To: <b7cd8ed10908221315l60cd7d36l9cc8d35b987b53b2@mail.gmail.com>
References: <b7cd8ed10908221315l60cd7d36l9cc8d35b987b53b2@mail.gmail.com>
Message-ID: <b7cd8ed10908221325v1e3ee963u5cc65c081e385ce4@mail.gmail.com>

Answered to myself :

sudo ln -s /opt/local/lib/erlang/lib/erl_interface-3.6.2/bin/erl_call
/opt/local/bin/

did the trick.

- beno?t



From celldee at gmail.com  Sun Aug 23 12:09:20 2009
From: celldee at gmail.com (Chris Duncan)
Date: Sun, 23 Aug 2009 12:09:20 +0100
Subject: [rabbitmq-discuss] RabbitMQ version 1.7
Message-ID: <A8161A5B-D088-436C-929C-B1A595717F8C@gmail.com>

Hi,

Could anybody tell me whether version 1.7 of RabbitMQ is intended to  
be a complete implementation of the 0-9-1 AMQP spec? By 'complete' I  
mean providing all of the 'must' parts of the spec.

Also, as I understand it, the way that clients initiate connections  
differs between 0-8 and 0-9-1. Will RabbitMQ 1.7 use the 0-9-1  
connection dialogue?

Regards,

Chris



From matthew at lshift.net  Sun Aug 23 12:24:10 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Sun, 23 Aug 2009 12:24:10 +0100
Subject: [rabbitmq-discuss] RabbitMQ version 1.7
In-Reply-To: <A8161A5B-D088-436C-929C-B1A595717F8C@gmail.com>
References: <A8161A5B-D088-436C-929C-B1A595717F8C@gmail.com>
Message-ID: <20090823112410.GA3448@wellquite.org>

Hi Chris,

On Sun, Aug 23, 2009 at 12:09:20PM +0100, Chris Duncan wrote:
> Could anybody tell me whether version 1.7 of RabbitMQ is intended to  
> be a complete implementation of the 0-9-1 AMQP spec? By 'complete' I  
> mean providing all of the 'must' parts of the spec.

No, 1.7 is still AMQP 0-8.

Matthew



From 0x6e6562 at gmail.com  Mon Aug 24 15:00:08 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 24 Aug 2009 15:00:08 +0100
Subject: [rabbitmq-discuss] Problem with multiple subscribers on the same
	queue
In-Reply-To: <4A929CEE.8030201@lshift.net>
References: <4A929CEE.8030201@lshift.net>
Message-ID: <269388e30908240700u3cb8c779rf46e41301221b549@mail.gmail.com>

Frank,

Sorry about the late response of your mail.

Boisson, Franck wrote:
> I have an exchange, let?s say ?marketdata.test.command? and a queue name
> ?marketdata.test#RPC?.
>
> Queue ?marketdata.test#RPC? is binded to ?marketdata.test.command?
> exchange through ?subscribe? key.
>
>
>
> I have severals subscribers (which, in my case, are
> data-producers)listening to ?marketdata.test#RPC? queue and each time a
> message is sent on this queue, one of the producer take it as a
> subscriber request.
>
>
>
> My problem appears when a data-producer can handle only a given type of
> product. In this case, if it is the first joined to subscribe to a A
> product, and if it does not support this product, it should be able to
> requeue the message in order to join another data-producer (which could
> be able to handle the request).
>
> The simple way I was seeing was to reject the message when it arrive on
> A (basic.Reject) but I see that RabbitMQ do not support it yet.
>
>
>
> Do you have a solution for my case?

There are couple of ways around this:

- When a consumer decides that it can't process a message, it could
publish it back to an alternate exchange that has no binding to a queue
that this consumer would read from. After re-publishing the message,
this consumer would acknowledge the message so that it is gone from the
original queue. Whilst this would straight forward to implement, it is a
bit of hack and increases the amount of orchestration you'd have to do
in total;

- You could set up more judicious bindings so that the type of message
exposed in the routing key or a message header and then bind queues
based on this predicate. If you were to use a topic exchange, you could
publish with routing keys that indicate what type of message it is, e.g.
"product.A", "product.B", etc. Consumers would then be as exact as then
can when setting up bindings to their queues. A consumer that could only
process type B messages would bind with "product.B" and an omnivorous
consumer would bind with "product.*". The same can be achieved with a
headers exchange. You could put the message type into a header field and
then set up a routing rule that only binds on a particular message type.
Both approaches are similar.

That would get you out of the woods, but there may be some things you
might want to consider, such as:

- Be aware that both topic exchanges and headers exchanges incur a
linear scan of all the bindings. If this is an issue for you, you might
have to put some effort into more sophisticated direct exchange bindings;

- At any stage of the game, for whatever reason (e.g. a bug in your
setup), you will *invariably* receive a message you cannot process and
you will have to think about some kind of catch all error handling,
either by reposting to an exception queue or just logging the bad
message and discarding it;

>
> Do you have a release date for the basic.reject feature?

No, we don't. This is due to the fact that up until now, very few have
asked for this feature, so it has been deprioritized over other
features. Also, it is slightly tricky to implement because it is a
stateful command. Having said that, I myself encountered a scenario
recently on a customer project where this would have been very handy :-(


BTW would you be OK with with taking this topic onto the public
discussion forum as other people might be interested in it too?

HTH,

Ben



From 0x6e6562 at gmail.com  Mon Aug 24 15:02:07 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 24 Aug 2009 15:02:07 +0100
Subject: [rabbitmq-discuss] Problem with multiple subscribers on the
	same queue
In-Reply-To: <4A929CFC.2060305@lshift.net>
References: <4A929CFC.2060305@lshift.net>
Message-ID: <269388e30908240702q42dc453cs4a8603e87802e30d@mail.gmail.com>

Hi Ben,

Thanks for this answer. The second solution is the one I have already
chosen (found it few hours after having written you my mail). But to be
honest, I am not very happy with that because it introduces some
potential failures on my system. For example, to publishers (the one
listening for subscription on marketdata.test#RPC in my previous
example) will be able to listen to the same subject (let's say TOTO.#
for example) and if a subscriber come and ask for a subscription on
TOTO.test1 (request is made through the marketdata.test#RPC exchange as
you can imagine), both of them will take it in account and will publish
data for TOTO.test1.
Anyway, I have no choice for the moment so I will handle that.

Yes of course you can put this topic onto the publish discussion forum
(to be honest, I was thinking that I was writing to the public RabbitMQ
mailing list throught the info at rabbitmq email).

Best regards
Franck



From 0x6e6562 at gmail.com  Mon Aug 24 15:15:13 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 24 Aug 2009 15:15:13 +0100
Subject: [rabbitmq-discuss] Problem with multiple subscribers on the
	same queue
In-Reply-To: <4A929CFC.2060305@lshift.net>
References: <4A929CFC.2060305@lshift.net>
Message-ID: <269388e30908240715s99dc065u25dde1374f4be186@mail.gmail.com>

Frank,

On 8/24/09, Ben Hood <ben at lshift.net> wrote:
>
> Thanks for this answer. The second solution is the one I have already
> chosen (found it few hours after having written you my mail). But to be
> honest, I am not very happy with that because it introduces some
> potential failures on my system. For example, to publishers (the one
> listening for subscription on marketdata.test#RPC in my previous
> example) will be able to listen to the same subject (let's say TOTO.#
> for example) and if a subscriber come and ask for a subscription on
> TOTO.test1 (request is made through the marketdata.test#RPC exchange as
> you can imagine), both of them will take it in account and will publish
> data for TOTO.test1.
> Anyway, I have no choice for the moment so I will handle that.

So if I understand you correctly, you want messages to be consumed
selectively but only once, i.e. only by one single consumer who
decides that they are capable of processing that message type?

So if that is the case, can't you use a topic exchange to only make
exact matches - i.e. when you construct your routing table, you just
make sure that you don't have bindings that cause a message to be
multicasted to more that one queue? Or as an alternative, since the
message type is a discriminating factor, why not make it out to be a
first class endpoint and send each different message type directly to
a well-known queue whose consumers only process that message type?

My original point was that you probably shouldn't being using message
rejection (if it were available) to do a selective receive. Selective
reception belongs *ideally* in the routing layer and message rejection
should generally only used as neat and tidy way to handle
unforeseeable exceptions.

Maybe I am missing the point though.

> Yes of course you can put this topic onto the publish discussion forum
> (to be honest, I was thinking that I was writing to the public RabbitMQ
> mailing list throught the info at rabbitmq email).

OK, I've now taken this discussion onto the public forum, please just
CC rabbitmq-discuss at lists.rabbitmq.com

HTH,

Ben



From jasonjwwilliams at gmail.com  Mon Aug 24 15:49:52 2009
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Mon, 24 Aug 2009 08:49:52 -0600
Subject: [rabbitmq-discuss] Problem with multiple subscribers on the
	same queue
In-Reply-To: <269388e30908240700u3cb8c779rf46e41301221b549@mail.gmail.com>
References: <4A929CEE.8030201@lshift.net>
	<269388e30908240700u3cb8c779rf46e41301221b549@mail.gmail.com>
Message-ID: <8C85023B-848C-4EB8-A981-BF6E17B11914@gmail.com>

I'll have to check our code but I think we handle this by not ack'ing  
the message. The ineffecient part is it may be reassigned to another  
consumer who also can't handle it.

-J

Sent via iPhone

On Aug 24, 2009, at 8:00, Ben Hood <0x6e6562 at gmail.com> wrote:

> Frank,
>
> Sorry about the late response of your mail.
>
> Boisson, Franck wrote:
>> I have an exchange, let?s say ?marketdata.test.command? and a  
>> queue name
>> ?marketdata.test#RPC?.
>>
>> Queue ?marketdata.test#RPC? is binded to ?marketdata.test.comma 
>> nd?
>> exchange through ?subscribe? key.
>>
>>
>>
>> I have severals subscribers (which, in my case, are
>> data-producers)listening to ?marketdata.test#RPC? queue and each  
>> time a
>> message is sent on this queue, one of the producer take it as a
>> subscriber request.
>>
>>
>>
>> My problem appears when a data-producer can handle only a given  
>> type of
>> product. In this case, if it is the first joined to subscribe to a A
>> product, and if it does not support this product, it should be able  
>> to
>> requeue the message in order to join another data-producer (which  
>> could
>> be able to handle the request).
>>
>> The simple way I was seeing was to reject the message when it  
>> arrive on
>> A (basic.Reject) but I see that RabbitMQ do not support it yet.
>>
>>
>>
>> Do you have a solution for my case?
>
> There are couple of ways around this:
>
> - When a consumer decides that it can't process a message, it could
> publish it back to an alternate exchange that has no binding to a  
> queue
> that this consumer would read from. After re-publishing the message,
> this consumer would acknowledge the message so that it is gone from  
> the
> original queue. Whilst this would straight forward to implement, it  
> is a
> bit of hack and increases the amount of orchestration you'd have to do
> in total;
>
> - You could set up more judicious bindings so that the type of message
> exposed in the routing key or a message header and then bind queues
> based on this predicate. If you were to use a topic exchange, you  
> could
> publish with routing keys that indicate what type of message it is,  
> e.g.
> "product.A", "product.B", etc. Consumers would then be as exact as  
> then
> can when setting up bindings to their queues. A consumer that could  
> only
> process type B messages would bind with "product.B" and an omnivorous
> consumer would bind with "product.*". The same can be achieved with a
> headers exchange. You could put the message type into a header field  
> and
> then set up a routing rule that only binds on a particular message  
> type.
> Both approaches are similar.
>
> That would get you out of the woods, but there may be some things you
> might want to consider, such as:
>
> - Be aware that both topic exchanges and headers exchanges incur a
> linear scan of all the bindings. If this is an issue for you, you  
> might
> have to put some effort into more sophisticated direct exchange  
> bindings;
>
> - At any stage of the game, for whatever reason (e.g. a bug in your
> setup), you will *invariably* receive a message you cannot process and
> you will have to think about some kind of catch all error handling,
> either by reposting to an exception queue or just logging the bad
> message and discarding it;
>
>>
>> Do you have a release date for the basic.reject feature?
>
> No, we don't. This is due to the fact that up until now, very few have
> asked for this feature, so it has been deprioritized over other
> features. Also, it is slightly tricky to implement because it is a
> stateful command. Having said that, I myself encountered a scenario
> recently on a customer project where this would have been very  
> handy :-(
>
>
> BTW would you be OK with with taking this topic onto the public
> discussion forum as other people might be interested in it too?
>
> HTH,
>
> Ben
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss



From 0x6e6562 at gmail.com  Mon Aug 24 15:58:42 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 24 Aug 2009 15:58:42 +0100
Subject: [rabbitmq-discuss] Problem with multiple subscribers on the
	same queue
In-Reply-To: <8C85023B-848C-4EB8-A981-BF6E17B11914@gmail.com>
References: <4A929CEE.8030201@lshift.net>
	<269388e30908240700u3cb8c779rf46e41301221b549@mail.gmail.com>
	<8C85023B-848C-4EB8-A981-BF6E17B11914@gmail.com>
Message-ID: <269388e30908240758o54fa5821m5bec4e78a2fcc5b0@mail.gmail.com>

Jason,

On 8/24/09, Jason J. W. Williams <jasonjwwilliams at gmail.com> wrote:
> I'll have to check our code but I think we handle this by not ack'ing
> the message. The ineffecient part is it may be reassigned to another
> consumer who also can't handle it.

Yep, that will certainly work if the original consumer nukes the
channel that they were subscribed on.

It's a heavyweight way of rejecting the message, which, as is well
known, is not really possible to do otherwise with Rabbit ATM.

Also, as you say yourself, it is an inefficient way of doing a
selective receive.

The ideal scenario would be to have better routing rules combined with
the ability to do a reject to mop up unexpected messages (whether or
not this actually implements the *exact* semantics of the basic.reject
command).

Ben



From esteve at sindominio.net  Mon Aug 24 16:46:42 2009
From: esteve at sindominio.net (Esteve Fernandez)
Date: Mon, 24 Aug 2009 17:46:42 +0200 (CEST)
Subject: [rabbitmq-discuss] method-like calls
In-Reply-To: <f4d6a21a0908201455t6cb014abi7e1314325ddb232@mail.gmail.com>
References: <3b6ef0790908180657r6b53d1f4j49bb60015fe65e23@mail.gmail.com>
	<f4d6a21a0908180710u531f65abmaf31270ed0701fcd@mail.gmail.com>
	<ce2570e20908180813s39144a7cq48107b6783c8f2ec@mail.gmail.com>
	<3b6ef0790908201446n5f925af4t82905351ad894aa0@mail.gmail.com>
	<f4d6a21a0908201455t6cb014abi7e1314325ddb232@mail.gmail.com>
Message-ID: <3d47f5d36a32b207f35daf97b3b12ac1.squirrel@webmail.sindominio.net>

Hi

sorry for chiming in so late, last week we released our product (FluidDB)
after two years working on it.

> If you're using Thrift with RabbitMQ, you don't need to use the
> transport at all necessarily -- you can just use Thrift and its
> protocols for serialization, and send the messages over AMQP queues.
>
> That said, Thrift RPC does have a 'oneway' service method keyword.
> This is used for asynchronous calls.  You might want to look into
> txAmqp and txThrift for some ideas if you really want to abstract all
> of your calls into Thrift objects + AMQP messaging.  Esteve has done
> an excellent job with both tools.

What we did with Thrift and AMQP is to map this scenario [1] using Twisted, a
framework for asynchronous programming. The basic idea around txAMQP and
txThrift is to use a Deferred (a future/promise-like structure) to define
asynchronous calls to Thrift, and use AMQP as a transport.

Thrift is cross-language, so if you have a mixed environment, is worth having
a look. You don't need to use its RPC mechanism, you can just use it for
serializing/deserializing your objects and embed them in a Basic.Content
message. However, you'll have to build your own RPC mechanism in that case.

Cheers.

1 - http://www.openamq.org/tutorial:soa




From mark.geib at echostar.com  Tue Aug 25 15:31:07 2009
From: mark.geib at echostar.com (Mark Geib)
Date: Tue, 25 Aug 2009 08:31:07 -0600
Subject: [rabbitmq-discuss] attempt to connect to broker with invalid
	username/password hangs
Message-ID: <4A93F5AB.7000801@echostar.com>

I have just started using non guest users and password and have found 
that using the erlang client when I make the call

amqp_connection:start(User, Password, Broker)

it will hang, seemingly forever, if the user is invalid. Once I change 
the user to a correct one everything works as advertised.

Is there a way to avoid this hang and detect wrong user names.??


-- 
Principal Engineer
Cheyenne Software Engineering
mark.geib at echostar.com / 35-215

PGP fingerprint:6DFC 389D 9796 0188 92E5 58F5 34C5 6B47 D091 76FD



From 0x6e6562 at gmail.com  Tue Aug 25 15:36:14 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Tue, 25 Aug 2009 15:36:14 +0100
Subject: [rabbitmq-discuss] attempt to connect to broker with invalid
	username/password hangs
In-Reply-To: <4A93F5AB.7000801@echostar.com>
References: <4A93F5AB.7000801@echostar.com>
Message-ID: <269388e30908250736j6303e0c7td1eac2ba75393c57@mail.gmail.com>

Marc,

On Tue, Aug 25, 2009 at 3:31 PM, Mark Geib<mark.geib at echostar.com> wrote:
> I have just started using non guest users and password and have found
> that using the erlang client when I make the call
>
> amqp_connection:start(User, Password, Broker)
>
> it will hang, seemingly forever, if the user is invalid. Once I change
> the user to a correct one everything works as advertised.
>
> Is there a way to avoid this hang and detect wrong user names.??

Yes, this was a bug but has now been fixed. You will have to update to
latest version of the default branch from the repository. Also note
that the API has changed somewhat w.r.t. starting a connection - the
start function takes an #amqp_params{} record.

HTH,

Ben



From 0x6e6562 at gmail.com  Tue Aug 25 15:38:57 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Tue, 25 Aug 2009 15:38:57 +0100
Subject: [rabbitmq-discuss] attempt to connect to broker with invalid
	username/password hangs
In-Reply-To: <269388e30908250736j6303e0c7td1eac2ba75393c57@mail.gmail.com>
References: <4A93F5AB.7000801@echostar.com>
	<269388e30908250736j6303e0c7td1eac2ba75393c57@mail.gmail.com>
Message-ID: <269388e30908250738k1c7842a0w19dbf9516cf0c1f8@mail.gmail.com>

Marc,

On Tue, Aug 25, 2009 at 3:36 PM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Is there a way to avoid this hang and detect wrong user names.??

As indicated in my previous post, this specific issue has been fixed.
However, we do have plans to make the error handling more rebost, in
particular being able to differentiate between bad credentials and not
having access rights for a particular vhost. This work should get
scheduled sometime soon.

Ben



From mark.geib at echostar.com  Tue Aug 25 15:41:53 2009
From: mark.geib at echostar.com (Mark Geib)
Date: Tue, 25 Aug 2009 08:41:53 -0600
Subject: [rabbitmq-discuss] attempt to connect to broker with invalid
 username/password hangs
In-Reply-To: <269388e30908250736j6303e0c7td1eac2ba75393c57@mail.gmail.com>
References: <4A93F5AB.7000801@echostar.com>
	<269388e30908250736j6303e0c7td1eac2ba75393c57@mail.gmail.com>
Message-ID: <4A93F831.30803@echostar.com>

Ben,

Thanks for the quick response. Is there a bug tracker that we can 
consult prior to posting these types of questions.??

Mark.

Ben Hood wrote:
> Marc,
> 
> On Tue, Aug 25, 2009 at 3:31 PM, Mark Geib<mark.geib at echostar.com> wrote:
>> I have just started using non guest users and password and have found
>> that using the erlang client when I make the call
>>
>> amqp_connection:start(User, Password, Broker)
>>
>> it will hang, seemingly forever, if the user is invalid. Once I change
>> the user to a correct one everything works as advertised.
>>
>> Is there a way to avoid this hang and detect wrong user names.??
> 
> Yes, this was a bug but has now been fixed. You will have to update to
> latest version of the default branch from the repository. Also note
> that the API has changed somewhat w.r.t. starting a connection - the
> start function takes an #amqp_params{} record.
> 
> HTH,
> 
> Ben
> 

-- 
Principal Engineer
Cheyenne Software Engineering
mark.geib at echostar.com / 35-215

PGP fingerprint:6DFC 389D 9796 0188 92E5 58F5 34C5 6B47 D091 76FD



From 0x6e6562 at gmail.com  Tue Aug 25 15:43:22 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Tue, 25 Aug 2009 15:43:22 +0100
Subject: [rabbitmq-discuss] attempt to connect to broker with invalid
	username/password hangs
In-Reply-To: <4A93F831.30803@echostar.com>
References: <4A93F5AB.7000801@echostar.com>
	<269388e30908250736j6303e0c7td1eac2ba75393c57@mail.gmail.com>
	<4A93F831.30803@echostar.com>
Message-ID: <269388e30908250743w93ba02fp953dd7f61ca93c09@mail.gmail.com>

Marc,

On Tue, Aug 25, 2009 at 3:41 PM, Mark Geib<mark.geib at echostar.com> wrote:
> Thanks for the quick response. Is there a bug tracker that we can consult
> prior to posting these types of questions.??

The current policy for Rabbit bug tracking is to google the list archive :-)

HTH,

Ben



From ram.muthiah at yahoo.com  Tue Aug 25 21:02:06 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Tue, 25 Aug 2009 13:02:06 -0700 (PDT)
Subject: [rabbitmq-discuss] IRC timings
Message-ID: <380763.41852.qm@web44712.mail.sp1.yahoo.com>

Hi, Is there a specific timeframe in which we can chat with RabbitMQ developers in #rabbitmq channel? Every time, I visit this channel, I am the only one there!



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090825/9a7fcf5c/attachment.htm 

From ram.muthiah at yahoo.com  Tue Aug 25 21:14:53 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Tue, 25 Aug 2009 13:14:53 -0700 (PDT)
Subject: [rabbitmq-discuss]  building chat
Message-ID: <860157.29474.qm@web44702.mail.sp1.yahoo.com>

Hi Alexis,

I want to use both multi-user chat and one-to-one chat (IM) using RabbitMQ. If I use XMPP gateway, XEP-0045 is not supported, so I can't use multi-user chat. If I have to use RabbitMQ for both MUC and IM, I have to create two queues per chat and route the messages to one another for IM + use RabbitMQ's pubsub model for MUC? 

Has anyone implemented chat using RabbitMQ? I would like to see real-world application to see how they have done it.

Thanks
Ram



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090825/658ab4eb/attachment.htm 

From matthew at lshift.net  Tue Aug 25 21:22:13 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Tue, 25 Aug 2009 21:22:13 +0100
Subject: [rabbitmq-discuss] IRC timings
In-Reply-To: <380763.41852.qm@web44712.mail.sp1.yahoo.com>
References: <380763.41852.qm@web44712.mail.sp1.yahoo.com>
Message-ID: <20090825202212.GD10427@wellquite.org>

Hi Ram,

On Tue, Aug 25, 2009 at 01:02:06PM -0700, Ram Muthiah wrote:
> Hi, Is there a specific timeframe in which we can chat with RabbitMQ developers in #rabbitmq channel? Every time, I visit this channel, I am the only one there!

In general, I am on the IRC channel. However, for an awful lot of
questions I direct people straight to the mailing list - the reason for
this is that google can index the mailing list and then should people
come across a similar problem later (as is often the case), some quick
googling will give them answers very promptly. Really, during office
hours, London time, we're pretty much heads down, working away, and so
it's very rare you'll catch us on IRC then. After hours, it's pretty hit
and miss as to what we're individually up to.

Matthew



From 0x6e6562 at gmail.com  Wed Aug 26 00:18:23 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Wed, 26 Aug 2009 00:18:23 +0100
Subject: [rabbitmq-discuss] Fwd:  load balancing for consummer
In-Reply-To: <b7cd8ed10908251237n20939830na89b64471bad8f34@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
	<b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
	<269388e30908220358k2fde47cer94f1f27740a9f332@mail.gmail.com>
	<b7cd8ed10908251237n20939830na89b64471bad8f34@mail.gmail.com>
Message-ID: <269388e30908251618q3e4e3404q71241b0300ab1388@mail.gmail.com>

---------- Forwarded message ----------
From: Benoit Chesneau <bchesneau at gmail.com>
Date: Tue, Aug 25, 2009 at 8:37 PM
Subject: Re: [rabbitmq-discuss] load balancing for consummer
To: Ben Hood <0x6e6562 at gmail.com>


Just reread our last mail exchange. Well installed latest default
branhes of both rabbitmq-server and client and it works well. The
defaults behaviour are just the one I use, and some api call are more
understandable I thought. Juts come back on one point of your mail I
didn't see at first

On Sat, Aug 22, 2009 at 12:58 PM, Ben Hood<0x6e6562 at gmail.com> wrote:
;
> - Are you sure you need a topic exchange?
> - Furthermore, I assume that your code works, but I what I'm not
> getting on first glance is how the subscription works when you use the
> name of the module instead of a pid - maybe there's something else
> going on here?
>

i use ?MODULE to catch message at handle_info level. Would you suggest
another method ? Also I'm not sure I'm right to do it especially if I
want to catch cases where socket is closed. What is the best practice
about it ?

- beno?t



From 0x6e6562 at gmail.com  Wed Aug 26 00:18:42 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Wed, 26 Aug 2009 00:18:42 +0100
Subject: [rabbitmq-discuss] load balancing for consummer
In-Reply-To: <b7cd8ed10908251237n20939830na89b64471bad8f34@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
	<b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
	<269388e30908220358k2fde47cer94f1f27740a9f332@mail.gmail.com>
	<b7cd8ed10908251237n20939830na89b64471bad8f34@mail.gmail.com>
Message-ID: <269388e30908251618i55ed4e80ib0960c6f827e264f@mail.gmail.com>

Beno?t,

On Tue, Aug 25, 2009 at 8:37 PM, Benoit Chesneau<bchesneau at gmail.com> wrote:
> i use ?MODULE to catch message at handle_info level. Would you suggest
> another method ? Also I'm not sure I'm right to do it especially if I
> want to catch cases where socket is closed. What is the best practice
> about it ?

I think I was confused by registration name of the gen_server
instance. Your gen_server registers itself as couchdbbot_consumer, so

couchdbbot_consumer ! msg

would resolve the pid of your gen_server instance.

However, the atom you use to subscribe to the queue is ?MODULE (which
would preprocess to bot_consumer) which wouldn't resolve to a pid.

So I was wondering where the magic occurs, that's all.

Having said that, I am actually wondering whether we're speaking about
the same thing. The process that is subscribed to queue will only get
3 types of messages from the amqp_channel process, namely
basic.consume_ok, basic.cancel_ok and basic.deliver. I don't see where
the socket exceptions are going to come from.

Ben

PS Please try to keep the discussion on list, as other people will be
able to help as well :-)



From alexis.richardson at gmail.com  Wed Aug 26 08:36:10 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Wed, 26 Aug 2009 00:36:10 -0700
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <860157.29474.qm@web44702.mail.sp1.yahoo.com>
References: <860157.29474.qm@web44702.mail.sp1.yahoo.com>
Message-ID: <167204d20908260036v7bf73a3ei8051c0354eec6cf5@mail.gmail.com>

Ram

There was a discussion about this a few weeks ago on this list - take
a look in the archives.

Sorry to be brief... technically I'm on vacation :-)

alexis


On Tue, Aug 25, 2009 at 1:14 PM, Ram Muthiah<ram.muthiah at yahoo.com> wrote:
> Hi Alexis,
>
> I want to use both multi-user chat and one-to-one chat (IM) using RabbitMQ.
> If I use XMPP gateway, XEP-0045 is not supported, so I can't use multi-user
> chat. If I have to use RabbitMQ for both MUC and IM, I have to create two
> queues per chat and route the messages to one another for IM + use
> RabbitMQ's pubsub model for MUC?
>
> Has anyone implemented chat using RabbitMQ? I would like to see real-world
> application to see how they have done it.
>
> Thanks
> Ram
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From alexis.richardson at gmail.com  Wed Aug 26 08:47:29 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Wed, 26 Aug 2009 00:47:29 -0700
Subject: [rabbitmq-discuss] IRC timings
In-Reply-To: <20090825202212.GD10427@wellquite.org>
References: <380763.41852.qm@web44712.mail.sp1.yahoo.com>
	<20090825202212.GD10427@wellquite.org>
Message-ID: <167204d20908260047m5fe0ee0r3fc868e4d1063b19@mail.gmail.com>

Ram,

A good time for #rabbitmq on IRC is during Pacific working hours,
although as Matthew implies, you may not always catch UK based folks
online throughout that time.

alexis


On Tue, Aug 25, 2009 at 1:22 PM, Matthew Sackman<matthew at lshift.net> wrote:
> Hi Ram,
>
> On Tue, Aug 25, 2009 at 01:02:06PM -0700, Ram Muthiah wrote:
>> Hi, Is there a specific timeframe in which we can chat with RabbitMQ developers in #rabbitmq channel? Every time, I visit this channel, I am the only one there!
>
> In general, I am on the IRC channel. However, for an awful lot of
> questions I direct people straight to the mailing list - the reason for
> this is that google can index the mailing list and then should people
> come across a similar problem later (as is often the case), some quick
> googling will give them answers very promptly. Really, during office
> hours, London time, we're pretty much heads down, working away, and so
> it's very rare you'll catch us on IRC then. After hours, it's pretty hit
> and miss as to what we're individually up to.
>
> Matthew
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>



From bchesneau at gmail.com  Wed Aug 26 09:23:27 2009
From: bchesneau at gmail.com (Benoit Chesneau)
Date: Wed, 26 Aug 2009 10:23:27 +0200
Subject: [rabbitmq-discuss] load balancing for consummer
In-Reply-To: <269388e30908251618i55ed4e80ib0960c6f827e264f@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
	<b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
	<269388e30908220358k2fde47cer94f1f27740a9f332@mail.gmail.com>
	<b7cd8ed10908251237n20939830na89b64471bad8f34@mail.gmail.com>
	<269388e30908251618i55ed4e80ib0960c6f827e264f@mail.gmail.com>
Message-ID: <b7cd8ed10908260123vaef751et7bb9a88303b8146f@mail.gmail.com>

On Wed, Aug 26, 2009 at 1:18 AM, Ben Hood<0x6e6562 at gmail.com> wrote:

> couchdbbot_consumer ! msg
>
> would resolve the pid of your gen_server instance.
>
> However, the atom you use to subscribe to the queue is ?MODULE (which
> would preprocess to bot_consumer) which wouldn't resolve to a pid.
>
> So I was wondering where the magic occurs, that's all.

dunno myself, I will provide the pid now.

>
> Having said that, I am actually wondering whether we're speaking about
> the same thing. The process that is subscribed to queue will only get
> 3 types of messages from the amqp_channel process, namely
> basic.consume_ok, basic.cancel_ok and basic.deliver. I don't see where
> the socket exceptions are going to come from.
>

socket is in the init. I guess that when the socket failed it didn't
receive connexion so the gen_serv failed and supervisor tried to
launch new instance then the error happend. I need to rethink that,
I'm not sure actually how i could simply wait a  new instance come up
in the rabbitmq cluster.


>
> PS Please try to keep the discussion on list, as other people will be
> able to help as well :-)
>
sure , I blame gmail for that :) sorry anyway.

- beno?t



From 0x6e6562 at gmail.com  Wed Aug 26 10:53:28 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Wed, 26 Aug 2009 10:53:28 +0100
Subject: [rabbitmq-discuss] load balancing for consummer
In-Reply-To: <b7cd8ed10908260123vaef751et7bb9a88303b8146f@mail.gmail.com>
References: <b7cd8ed10908220252q45c29bfg3a3eeea1c63fd5b9@mail.gmail.com>
	<b7cd8ed10908220254r16c7f5b8k8ff1df0768e651b3@mail.gmail.com>
	<269388e30908220358k2fde47cer94f1f27740a9f332@mail.gmail.com>
	<b7cd8ed10908251237n20939830na89b64471bad8f34@mail.gmail.com>
	<269388e30908251618i55ed4e80ib0960c6f827e264f@mail.gmail.com>
	<b7cd8ed10908260123vaef751et7bb9a88303b8146f@mail.gmail.com>
Message-ID: <269388e30908260253u3174459fj6109c9fca40549f1@mail.gmail.com>

Beno?t,

On Wed, Aug 26, 2009 at 9:23 AM, Benoit Chesneau<bchesneau at gmail.com> wrote:
>> Having said that, I am actually wondering whether we're speaking about
>> the same thing. The process that is subscribed to queue will only get
>> 3 types of messages from the amqp_channel process, namely
>> basic.consume_ok, basic.cancel_ok and basic.deliver. I don't see where
>> the socket exceptions are going to come from.
>>
>
> socket is in the init. I guess that when the socket failed it didn't
> receive connexion so the gen_serv failed and supervisor tried to
> launch new instance then the error happend. I need to rethink that,
> I'm not sure actually how i could simply wait a ?new instance come up
> in the rabbitmq cluster.

Again, I'm not sure I completely follow.

This what the gen_server documentation says about the lifecycle of start_link/4:

"The gen_server process calls Module:init/1 to initialize. To ensure a
synchronized start-up procedure, start_link/3,4 does not return until
Module:init/1 has returned."

If the connection fails during init, then the process will be
terminated and hence will not be able to receive anything, least of
all any subscription callbacks.

Are you maybe trying to get a supervisor catch the failure in the
initialization and iterate through a list of known Rabbit hosts?

Ben



From riteshrathi at gmail.com  Wed Aug 26 14:42:13 2009
From: riteshrathi at gmail.com (rathi)
Date: Wed, 26 Aug 2009 13:42:13 +0000
Subject: [rabbitmq-discuss] Error while doing channel.basicConsume
Message-ID: <d31e757a0908260642w1567acb1j52d429e630f0f2d4@mail.gmail.com>

I am using rabbitmq's java client. While doing channel.basicConsule it
throws the below exception. This is a 64bit machine. But when I use the same
code in 32 bit machine it is working.

java.io.IOException
        at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:121)
        at com.rabbitmq.client.impl.ChannelN.basicConsume(ChannelN.java:703)
        at com.rabbitmq.client.impl.ChannelN.basicConsume(ChannelN.java:661)
        at com.rabbitmq.client.impl.ChannelN.basicConsume(ChannelN.java:647)
        at
com.adventnet.repl.replicator.ExchangeQueueListener.startListener(ExchangeQueueListener.java:73)
        at
com.adventnet.repl.replicator.ExchangeQueueListener.run(ExchangeQueueListener.java:33)
        at java.lang.Thread.run(Thread.java:595)
Caused by: com.rabbitmq.client.ShutdownSignalException (connection error;
reason:
{#method<connection.close>(reply-code=541,reply-text=INTERNAL_ERROR,class-id=0,method-id=0),null,""})
        at
com.rabbitmq.client.impl.AMQConnection.shutdown(AMQConnection.java:606)
        at
com.rabbitmq.client.impl.AMQConnection.handleConnectionClose(AMQConnection.java:561)
        at
com.rabbitmq.client.impl.AMQConnection.processControlCommand(AMQConnection.java:541)
        at
com.rabbitmq.client.impl.AMQConnection$1.processAsync(AMQConnection.java:84)
        at
com.rabbitmq.client.impl.AMQChannel.handleCompleteInboundCommand(AMQChannel.java:159)
        at
com.rabbitmq.client.impl.AMQChannel.handleFrame(AMQChannel.java:110)
        at
com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:446)


In the rabbit log we get the following error : *
*
=ERROR REPORT==== 26-Aug-2009::17:12:34 ===
connection <0.224.0> (running), channel 1 - error:
{undef,[{ssl_base64,encode,

[<<127,81,49,251,211,111,84,61,174,121,190,249,69,78,177,
                       123>>]},
        {rabbit_misc,string_guid,1},
        {rabbit_misc,binstring_guid,1},
        {rabbit_channel,handle_method,3},
        {rabbit_channel,handle_message,2},
        {buffering_proxy,'-mainloop/4-fun-0-',3},
        {lists,foldl,3},
        {buffering_proxy,mainloop,4}]}

=WARNING REPORT==== 26-Aug-2009::17:12:34 ===
Non-AMQP exit reason '{undef,
                          [{ssl_base64,encode,
                               [<<127,81,49,251,211,111,84,61,174,121,190,
                                  249,69,78,177,123>>]},
                           {rabbit_misc,string_guid,1},
                           {rabbit_misc,binstring_guid,1},
                           {rabbit_channel,handle_method,3},
                           {rabbit_channel,handle_message,2},
                           {buffering_proxy,'-mainloop/4-fun-0-',3},
                           {lists,foldl,3},
                           {buffering_proxy,mainloop,4}]}'

=INFO REPORT==== 26-Aug-2009::17:12:34 ===
closing TCP connection <0.224.0> from 127.0.0.1:46753



Can someone help me with this problem.

thanks & regards,
rathi
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090826/878b467a/attachment.htm 

From matthias at lshift.net  Wed Aug 26 14:46:19 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Wed, 26 Aug 2009 14:46:19 +0100
Subject: [rabbitmq-discuss] Error while doing channel.basicConsume
In-Reply-To: <d31e757a0908260642w1567acb1j52d429e630f0f2d4@mail.gmail.com>
References: <d31e757a0908260642w1567acb1j52d429e630f0f2d4@mail.gmail.com>
Message-ID: <4A953CAB.20105@lshift.net>

Rathi,

rathi wrote:
> In the rabbit log we get the following error : *
> *
> =ERROR REPORT==== 26-Aug-2009::17:12:34 ===
> connection <0.224.0> (running), channel 1 - error:
> {undef,[{ssl_base64,encode,
>                    
> [<<127,81,49,251,211,111,84,61,174,121,190,249,69,78,177,
>                        123>>]},
>         {rabbit_misc,string_guid,1},
>         {rabbit_misc,binstring_guid,1},
>         {rabbit_channel,handle_method,3},
>         {rabbit_channel,handle_message,2},
>         {buffering_proxy,'-mainloop/4-fun-0-',3},
>         {lists,foldl,3},
>         {buffering_proxy,mainloop,4}]}

What version of Erlang/OTP are you running?


Matthias.



From riteshrathi at gmail.com  Wed Aug 26 15:02:06 2009
From: riteshrathi at gmail.com (rathi)
Date: Wed, 26 Aug 2009 14:02:06 +0000
Subject: [rabbitmq-discuss] Error while doing channel.basicConsume
In-Reply-To: <4A953CAB.20105@lshift.net>
References: <d31e757a0908260642w1567acb1j52d429e630f0f2d4@mail.gmail.com>
	<4A953CAB.20105@lshift.net>
Message-ID: <d31e757a0908260702n6ff34ef5td36d0bc71d340771@mail.gmail.com>

Bug fix release : otp_src_R12B-5
Build date      : 2008-11-05

rathi

On Wed, Aug 26, 2009 at 1:46 PM, Matthias Radestock <matthias at lshift.net>wrote:

> Rathi,
>
> rathi wrote:
> > In the rabbit log we get the following error : *
> > *
> > =ERROR REPORT==== 26-Aug-2009::17:12:34 ===
> > connection <0.224.0> (running), channel 1 - error:
> > {undef,[{ssl_base64,encode,
> >
> > [<<127,81,49,251,211,111,84,61,174,121,190,249,69,78,177,
> >                        123>>]},
> >         {rabbit_misc,string_guid,1},
> >         {rabbit_misc,binstring_guid,1},
> >         {rabbit_channel,handle_method,3},
> >         {rabbit_channel,handle_message,2},
> >         {buffering_proxy,'-mainloop/4-fun-0-',3},
> >         {lists,foldl,3},
> >         {buffering_proxy,mainloop,4}]}
>
> What version of Erlang/OTP are you running?
>
>
> Matthias.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090826/8edb552f/attachment.htm 

From matthias at lshift.net  Wed Aug 26 15:04:36 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Wed, 26 Aug 2009 15:04:36 +0100
Subject: [rabbitmq-discuss] Error while doing channel.basicConsume
In-Reply-To: <d31e757a0908260655n7758cc54h96b07ff3005b4bf3@mail.gmail.com>
References: <d31e757a0908260642w1567acb1j52d429e630f0f2d4@mail.gmail.com>	<4A953CAB.20105@lshift.net>
	<d31e757a0908260655n7758cc54h96b07ff3005b4bf3@mail.gmail.com>
Message-ID: <4A9540F4.9030609@lshift.net>

Rathi,

rathi wrote:
> Bug fix release : otp_src_R12B-5
> Build date      : 2008-11-05

Did you build Erlang/OTP from source? If so, you must make sure to
enable crypto for the build. Note that crypto gets enabled by default
when the openssl libraries are present, so I suspect you are missing
these libs from the system.


Matthias.



From brian at echonest.com  Wed Aug 26 15:04:35 2009
From: brian at echonest.com (Brian Whitman)
Date: Wed, 26 Aug 2009 10:04:35 -0400
Subject: [rabbitmq-discuss] File operation error: eacces. Target: ...
Message-ID: <dbd9700a0908260704h719b7d2cm2cae8b1b8267c193@mail.gmail.com>

We have rabbit running on a managed host that did the setup for us and runs
rabbit under the user rabbitmq-server. Everything works great from our
client end but when we log on to the server directly and do a list_queues
command on rabbitmqctl we get all these errors. Note that the queues do get
listed but after a big long list of "File operation error"s. Are these
something to worry about? If so, what i can tell the team to fix?
[rabbitmq-server at xxxx bwhitman]$
/opt/rabbitmq/rabbitmq-server/scripts/rabbitmqctl list_queues
{error_logger,{{2009,8,26},{9,1,55}},std_error,"File operation error:
eacces. Target: .. Function: read_file_info. Process: code_server."}
{error_logger,{{2009,8,26},{9,1,55}},std_error,"File operation error:
eacces. Target: ./standard_error.beam. Function: get_file. Process:
code_server."}
{error_logger,{{2009,8,26},{9,1,55}},std_error,"File operation error:
eacces. Target: ./supervisor_bridge.beam. Function: get_file. Process:
code_server."}
{error_logger,{{2009,8,26},{9,1,55}},std_error,"File operation error:
eacces. Target: ./user_sup.beam. Function: get_file. Process: code_server."}
{error_logger,{{2009,8,26},{9,1,55}},std_error,"File operation error:
eacces. Target: ./user.beam. Function: get_file. Process: code_server."}
{error_logger,{{2009,8,26},{9,1,55}},std_error,"File operation error:
eacces. Target: ./kernel_config.beam. Function: get_file. Process:
code_server."}
{error_logger,{{2009,8,26},{9,1,55}},std_error,"File operation error:
eacces. Target: ./queue.beam. Function: get_file. Process: code_server."}

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: .. Function: read_file_info. Process:
code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./standard_error.beam. Function:
get_file. Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./supervisor_bridge.beam. Function:
get_file. Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./user_sup.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./user.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./kernel_config.beam. Function:
get_file. Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./queue.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./error_logger_tty_h.beam. Function:
get_file. Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./io_lib.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./io_lib_format.beam. Function:
get_file. Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./io_lib_pretty.beam. Function:
get_file. Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./io.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./unicode.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./c.beam. Function: get_file. Process:
code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./erl_eval.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./orddict.beam. Function: get_file.
Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./file_io_server.beam. Function:
get_file. Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./erl_posix_msg.beam. Function:
get_file. Process: code_server.

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
file:path_eval([".","/home/rabbitmq-server"],".erlang"): permission denied
Listing queues ...

=ERROR REPORT==== 26-Aug-2009::09:01:55 ===
File operation error: eacces. Target: ./dist_util.beam. Function: get_file.
Process: code_server.
xy_queue  17881
xz_queue 88804
...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090826/54b6cca9/attachment.htm 

From riteshrathi at gmail.com  Wed Aug 26 18:41:03 2009
From: riteshrathi at gmail.com (rathi)
Date: Wed, 26 Aug 2009 17:41:03 +0000
Subject: [rabbitmq-discuss] Error while doing channel.basicConsume
In-Reply-To: <4A9540F4.9030609@lshift.net>
References: <d31e757a0908260642w1567acb1j52d429e630f0f2d4@mail.gmail.com>
	<4A953CAB.20105@lshift.net>
	<d31e757a0908260655n7758cc54h96b07ff3005b4bf3@mail.gmail.com>
	<4A9540F4.9030609@lshift.net>
Message-ID: <d31e757a0908261041i37c1df78ifa90e37f6f7dfd51@mail.gmail.com>

I recompiled openssl libraries present. Now I am getting the following error
message in the logs


=ERROR REPORT==== 26-Aug-2009::23:07:12 ===
connection <0.209.0> (running), channel 1 - error:
{undef,[{ssl_base64,encode,[<<"P??ChZ;E???\"?\t?1">>]},
        {rabbit_misc,string_guid,1},
        {rabbit_misc,binstring_guid,1},
        {rabbit_channel,handle_method,3},
        {rabbit_channel,handle_message,2},
        {buffering_proxy,'-mainloop/4-fun-0-',3},
        {lists,foldl,3},
        {buffering_proxy,mainloop,4}]}

=WARNING REPORT==== 26-Aug-2009::23:07:12 ===
Non-AMQP exit reason
'{undef,[{ssl_base64,encode,[<<"P??ChZ;E???\"?\t?1">>]},
                              {rabbit_misc,string_guid,1},
                              {rabbit_misc,binstring_guid,1},
                              {rabbit_channel,handle_method,3},
                              {rabbit_channel,handle_message,2},
                              {buffering_proxy,'-mainloop/4-fun-0-',3},
                              {lists,foldl,3},
                              {buffering_proxy,mainloop,4}]}'


thanks & regards,
rathi

On Wed, Aug 26, 2009 at 2:04 PM, Matthias Radestock <matthias at lshift.net>wrote:

> Rathi,
>
> rathi wrote:
> > Bug fix release : otp_src_R12B-5
> > Build date      : 2008-11-05
>
> Did you build Erlang/OTP from source? If so, you must make sure to
> enable crypto for the build. Note that crypto gets enabled by default
> when the openssl libraries are present, so I suspect you are missing
> these libs from the system.
>
>
> Matthias.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090826/dfde52ca/attachment.htm 

From matthias at lshift.net  Wed Aug 26 18:53:46 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Wed, 26 Aug 2009 18:53:46 +0100
Subject: [rabbitmq-discuss] Error while doing channel.basicConsume
In-Reply-To: <d31e757a0908261041i37c1df78ifa90e37f6f7dfd51@mail.gmail.com>
References: <d31e757a0908260642w1567acb1j52d429e630f0f2d4@mail.gmail.com>	<4A953CAB.20105@lshift.net>	<d31e757a0908260655n7758cc54h96b07ff3005b4bf3@mail.gmail.com>	<4A9540F4.9030609@lshift.net>
	<d31e757a0908261041i37c1df78ifa90e37f6f7dfd51@mail.gmail.com>
Message-ID: <4A9576AA.10704@lshift.net>

Rathi,

rathi wrote:
> I recompiled openssl libraries present. Now I am getting the following
> error message in the logs

That's the same error as before?

Does the Erlang 'configure' step pick up the OpenSSL libraries? You
should see a line like this:

checking for OpenSSL >= 0.9.7 in standard locations... /usr


Btw, what platform is this on?


Regards,

Matthias.



From ram.muthiah at yahoo.com  Wed Aug 26 19:02:35 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Wed, 26 Aug 2009 11:02:35 -0700 (PDT)
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <167204d20908260036v7bf73a3ei8051c0354eec6cf5@mail.gmail.com>
References: <860157.29474.qm@web44702.mail.sp1.yahoo.com>
	<167204d20908260036v7bf73a3ei8051c0354eec6cf5@mail.gmail.com>
Message-ID: <991842.89854.qm@web44704.mail.sp1.yahoo.com>

Hi, Actually I landed in this discussion after I searched in Nabble. I understand that only way to search this list's archive is thru Nabble. I got http://www.nabble.com/building-chat-td24847735.html as the result of my search which is this same thread! 

Alexis, enjoy your vacation!

Can anyone else help me?

Thanks
Ram




________________________________
From: Alexis Richardson <alexis.richardson at gmail.com>
To: Ram Muthiah <ram.muthiah at yahoo.com>
Cc: rabbitmq-discuss at lists.rabbitmq.com
Sent: Wednesday, August 26, 2009 12:36:10 AM
Subject: Re: [rabbitmq-discuss] building chat

Ram

There was a discussion about this a few weeks ago on this list - take
a look in the archives.

Sorry to be brief... technically I'm on vacation :-)

alexis


On Tue, Aug 25, 2009 at 1:14 PM, Ram Muthiah<ram.muthiah at yahoo.com> wrote:
> Hi Alexis,
>
> I want to use both multi-user chat and one-to-one chat (IM) using RabbitMQ.
> If I use XMPP gateway, XEP-0045 is not supported, so I can't use multi-user
> chat. If I have to use RabbitMQ for both MUC and IM, I have to create two
> queues per chat and route the messages to one another for IM + use
> RabbitMQ's pubsub model for MUC?
>
> Has anyone implemented chat using RabbitMQ? I would like to see real-world
> application to see how they have done it.
>
> Thanks
> Ram
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090826/219a0c87/attachment.htm 

From riteshrathi at gmail.com  Wed Aug 26 20:07:07 2009
From: riteshrathi at gmail.com (rathi)
Date: Thu, 27 Aug 2009 00:37:07 +0530
Subject: [rabbitmq-discuss] Error while doing channel.basicConsume
In-Reply-To: <4A9576AA.10704@lshift.net>
References: <d31e757a0908260642w1567acb1j52d429e630f0f2d4@mail.gmail.com>
	<4A953CAB.20105@lshift.net>
	<d31e757a0908260655n7758cc54h96b07ff3005b4bf3@mail.gmail.com>
	<4A9540F4.9030609@lshift.net>
	<d31e757a0908261041i37c1df78ifa90e37f6f7dfd51@mail.gmail.com>
	<4A9576AA.10704@lshift.net>
Message-ID: <d31e757a0908261207n6a3fd9c2ra5d197043fbd9df4@mail.gmail.com>

I am sorry had two versions of erlang in the system which was still causing
this error. Changed the path properly and now it is working. Thanks for the
help and sorry for the trouble.

thanks & regards,
rathi


On Wed, Aug 26, 2009 at 11:23 PM, Matthias Radestock <matthias at lshift.net>wrote:

> Rathi,
>
> rathi wrote:
> > I recompiled openssl libraries present. Now I am getting the following
> > error message in the logs
>
> That's the same error as before?
>
> Does the Erlang 'configure' step pick up the OpenSSL libraries? You
> should see a line like this:
>
> checking for OpenSSL >= 0.9.7 in standard locations... /usr
>
>
> Btw, what platform is this on?
>
>
> Regards,
>
> Matthias.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090827/ddb5a637/attachment.htm 

From 0x6e6562 at gmail.com  Wed Aug 26 21:42:08 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Wed, 26 Aug 2009 21:42:08 +0100
Subject: [rabbitmq-discuss] File operation error: eacces. Target: ...
In-Reply-To: <dbd9700a0908260704h719b7d2cm2cae8b1b8267c193@mail.gmail.com>
References: <dbd9700a0908260704h719b7d2cm2cae8b1b8267c193@mail.gmail.com>
Message-ID: <269388e30908261342qcf773eeub60fa99fcf30bbae@mail.gmail.com>

Brian,

On Wed, Aug 26, 2009 at 3:04 PM, Brian Whitman<brian at echonest.com> wrote:
> We have rabbit running on a managed host that did the setup for us and runs
> rabbit under the user rabbitmq-server. Everything works great from our
> client end but when we log on to the server directly and do a list_queues
> command on rabbitmqctl we get all these errors. Note that the queues do get
> listed but after a big long list of "File operation error"s. Are these
> something to worry about? If so, what i can tell the team to fix?

Basically it's a privilege issue with the user that is executing the
script. Whether or not it is something to worry about depends on
whether you are parsing the output of the script. Certainly it doesn't
look nice, so it would be nice to tweak the packaging so that it just
works without complaining for any user, but off the top of my head I
don't know the implications of doing this. We'd have to take a closer
look.

Ben



From ram.muthiah at yahoo.com  Thu Aug 27 03:05:06 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Wed, 26 Aug 2009 19:05:06 -0700 (PDT)
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <167204d20908260036v7bf73a3ei8051c0354eec6cf5@mail.gmail.com>
References: <860157.29474.qm@web44702.mail.sp1.yahoo.com>
	<167204d20908260036v7bf73a3ei8051c0354eec6cf5@mail.gmail.com>
Message-ID: <619996.73011.qm@web44714.mail.sp1.yahoo.com>

Based on Ben and Alexis's discussion, I came up with the following logic. Let me know if you guys see any flaw in it. I use two exchanges; one for one-to-one chat and another for multi-user chat. Clients will use Java. I create one queue per user. Effectively, there will be two queues per chat. 



One-to-one chat:
 
When the user wants to send the message use SimpleProducer
class. For every 10 seconds, run SimpleConsumer class to see if there are any
messages in the queue.
 
SimpleProducer:
 
Publish the message in the window with the user?s name 
 
Connect to channel
 
Declare exchange named ?direct?
Create queuename equivalent to the friend?s user name. 
Routing key is the same as the queuename.
 
Do channel.basicPublish to publish the message to the
friend.
 
If message is not acknowledged, show error as
?<friendname> is offline?.
 
SimpleConsumer:

Set noAck to false
 
Do channel.basicGet for the queuename ?<username>?
 
If message is received successfully, do channel.basicAck to
acknowledge the receipt of the message.
 
Publish the incoming message with the friend?s name
 
 
Multi-user chat:
When the user wants to send the message use
SimpleProducerMulti class. For every 10 seconds, run SimpleConsumerMulti class
to see if there are any messages in the queue.
 
SimpleProducerMulti:
 
Connect to channel
 
Declare exchange named ?multiuser?
Create queuename as ?multiuserqueue?
Routing key is the same as the queuename..
 
Do channel.basicPublish to publish the message to
multiuserqueue.
 
If message is not acknowledged, show error as ?server is
offline?.
 
SimpleConsumerMulti:

Set noAck to false
 
Use QueueingConsumer class 
 
Do channel.basicConsume for the queuename ?<username>?
 
If message is received successfully, do channel.basicAck to
acknowledge the receipt of the message.
 
Publish the incoming message with the author?s name.

-- Thanks, Ram



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090826/716efb94/attachment.htm 

From dan.simpson at gmail.com  Thu Aug 27 05:37:12 2009
From: dan.simpson at gmail.com (Dan Simpson)
Date: Wed, 26 Aug 2009 21:37:12 -0700
Subject: [rabbitmq-discuss] Port Number
Message-ID: <64740e0d0908262137x3d90bca9r1cd7025a98c3af9e@mail.gmail.com>

Hello,

I am having trouble getting rabbitmq to listen on a "well-known" port.  I am
guessing there is some implemented restriction for listening on any port
less than 1024.

How can I get around this?

--Dan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090826/0488a9f3/attachment.htm 

From 0x6e6562 at gmail.com  Thu Aug 27 08:14:03 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 27 Aug 2009 08:14:03 +0100
Subject: [rabbitmq-discuss] Port Number
In-Reply-To: <64740e0d0908262137x3d90bca9r1cd7025a98c3af9e@mail.gmail.com>
References: <64740e0d0908262137x3d90bca9r1cd7025a98c3af9e@mail.gmail.com>
Message-ID: <269388e30908270014k6d6045d3rd2001b505cffc40a@mail.gmail.com>

Dan,

On Thu, Aug 27, 2009 at 5:37 AM, Dan Simpson<dan.simpson at gmail.com> wrote:
> I am having trouble getting rabbitmq to listen on a "well-known" port.? I am
> guessing there is some implemented restriction for listening on any port
> less than 1024.

The IANA port number for AMQP is 5672, which is what Rabbit listens to
by default. Are you trying to get Rabbit to listen on some custom port
number?

Ben



From matthew at lshift.net  Thu Aug 27 08:53:29 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Thu, 27 Aug 2009 08:53:29 +0100
Subject: [rabbitmq-discuss] Port Number
In-Reply-To: <64740e0d0908262137x3d90bca9r1cd7025a98c3af9e@mail.gmail.com>
References: <64740e0d0908262137x3d90bca9r1cd7025a98c3af9e@mail.gmail.com>
Message-ID: <20090827075328.GA27803@wellquite.org>

On Wed, Aug 26, 2009 at 09:37:12PM -0700, Dan Simpson wrote:
> I am having trouble getting rabbitmq to listen on a "well-known" port.  I am
> guessing there is some implemented restriction for listening on any port
> less than 1024.

You will need to start Rabbit as the root user in order to gain access to
ports under 1024. This is a security risk, and Rabbit is not designed to
be used in this way - in particular, we don't do the "usual" trick of
opening the port as root and then becomming some other user, dropping
our priviledges but keeping the port open. If you start Rabbit as root,
it will stay as root, which is potentially dangerous.

That said, if you wish to proceed, it's probably not straight forward to
stop Rabbit being started as the rabbit user. Therefore, I'd directly
edit /etc/passwd and make sure rabbit has a uid of 0. Then, even when it
starts up as rabbit, it's still root!

Matthew



From pauljones23 at gmail.com  Thu Aug 27 09:33:40 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Thu, 27 Aug 2009 09:33:40 +0100
Subject: [rabbitmq-discuss] Fwd:  Port Number
In-Reply-To: <29598b610908262238r7766e08dy261a58ae09ea54d1@mail.gmail.com>
References: <64740e0d0908262137x3d90bca9r1cd7025a98c3af9e@mail.gmail.com>
	<29598b610908262238r7766e08dy261a58ae09ea54d1@mail.gmail.com>
Message-ID: <29598b610908270133i740fa9bdpd64abb18ee5c85d6@mail.gmail.com>

Oops...

I did reply to Dan, but forgot to CC the list.

---------- Forwarded message ----------
From: Paul Jones <pauljones23 at gmail.com>
Date: Thu, Aug 27, 2009 at 6:38 AM
Subject: Re: [rabbitmq-discuss] Port Number
To: Dan Simpson <dan.simpson at gmail.com>


Hi Dan,

How are you running Rabbit? Most systems implement a restriction where only
processes run by root can take ports <1024. The  default start scripts for
rabbit will actually start Rabbit as a "rabbitmq" user, so in order to take
a well-known port, you'd need to alter these scripts.

Be warned however that Rabbit doesn't support the features normally required
by daemons that use well-known ports, such as the ability to open the port
then drop to the context of a less privileged user. This means that a Rabbit
running as root will stay running as root.

Paul.

On Thu, Aug 27, 2009 at 5:37 AM, Dan Simpson <dan.simpson at gmail.com> wrote:

> Hello,
>
> I am having trouble getting rabbitmq to listen on a "well-known" port.  I
> am guessing there is some implemented restriction for listening on any port
> less than 1024.
>
> How can I get around this?
>
> --Dan
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090827/c7065eb2/attachment.htm 

From 0x6e6562 at gmail.com  Thu Aug 27 13:22:05 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 27 Aug 2009 13:22:05 +0100
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <619996.73011.qm@web44714.mail.sp1.yahoo.com>
References: <860157.29474.qm@web44702.mail.sp1.yahoo.com>
	<167204d20908260036v7bf73a3ei8051c0354eec6cf5@mail.gmail.com>
	<619996.73011.qm@web44714.mail.sp1.yahoo.com>
Message-ID: <269388e30908270522n62ee3dbdo498b9a46f383fb64@mail.gmail.com>

Ram,

On Thu, Aug 27, 2009 at 3:05 AM, Ram Muthiah<ram.muthiah at yahoo.com> wrote:
> Based on Ben and Alexis's discussion, I came up with the following logic.
> Let me know if you guys see any flaw in it. I use two exchanges; one for
> one-to-one chat and another for multi-user chat. Clients will use Java. I
> create one queue per user. Effectively, there will be two queues per chat.

Fundamentally I don't see that much wrong with it. However I am
wondering what your intention is - do you need an application to
achieve a business goal or are you just getting your feet wet with
AMQP?

Here are some study notes:

- If you want to route directly to a named queue, you can publish to
the default exchange (In Java this an empty string as a name) with the
name of the queue as a routing key. No need to create an extra
exchange for this;

- How is your application going to know about the non-acknowledgement
of messages on the outbound side (this is where you expect the client
to display the "user offline")? Seems to me that you need presence to
do this (i.e. the 1st P in XMPP).

Cheers,

Ben



From dan.simpson at gmail.com  Thu Aug 27 16:37:09 2009
From: dan.simpson at gmail.com (Dan Simpson)
Date: Thu, 27 Aug 2009 08:37:09 -0700
Subject: [rabbitmq-discuss] Fwd: Port Number
In-Reply-To: <29598b610908270133i740fa9bdpd64abb18ee5c85d6@mail.gmail.com>
References: <64740e0d0908262137x3d90bca9r1cd7025a98c3af9e@mail.gmail.com>
	<29598b610908262238r7766e08dy261a58ae09ea54d1@mail.gmail.com>
	<29598b610908270133i740fa9bdpd64abb18ee5c85d6@mail.gmail.com>
Message-ID: <64740e0d0908270837ufedd6eex39fb73dfe80fca8f@mail.gmail.com>

I didn't reply to the list either.  Thanks for the help all.

On Wed, Aug 26, 2009 at 10:43 PM, Dan Simpson <dan.simpson at gmail.com> wrote:

> Paul.
>
> I was running it from the command line.  I now see: su rabbitmq -s /bin/sh
> -c "/usr/lib/rabbitmq/bin/${SCRIPT} ${CMDLINE}" in the rabbitmq-server
> script.
>
> Thanks for the quick response,
> Dan
>
> On Wed, Aug 26, 2009 at 10:38 PM, Paul Jones <pauljones23 at gmail.com>wrote:
>
>> Hi Dan,
>>
>> How are you running Rabbit? Most systems implement a restriction where
>> only processes run by root can take ports <1024. The  default start scripts
>> for rabbit will actually start Rabbit as a "rabbitmq" user, so in order to
>> take a well-known port, you'd need to alter these scripts.
>>
>> Be warned however that Rabbit doesn't support the features normally
>> required by daemons that use well-known ports, such as the ability to open
>> the port then drop to the context of a less privileged user. This means that
>> a Rabbit running as root will stay running as root.
>>
>> Paul.
>>
>> On Thu, Aug 27, 2009 at 5:37 AM, Dan Simpson <dan.simpson at gmail.com>wrote:
>>
>>> Hello,
>>>
>>> I am having trouble getting rabbitmq to listen on a "well-known" port.  I
>>> am guessing there is some implemented restriction for listening on any port
>>> less than 1024.
>>>
>>> How can I get around this?
>>>
>>> --Dan
>>>
>>> _______________________________________________
>>> rabbitmq-discuss mailing list
>>> rabbitmq-discuss at lists.rabbitmq.com
>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>
>>>
>>
>

On Thu, Aug 27, 2009 at 1:33 AM, Paul Jones <pauljones23 at gmail.com> wrote:

> Oops...
>
> I did reply to Dan, but forgot to CC the list.
>
>
> ---------- Forwarded message ----------
> From: Paul Jones <pauljones23 at gmail.com>
> Date: Thu, Aug 27, 2009 at 6:38 AM
> Subject: Re: [rabbitmq-discuss] Port Number
> To: Dan Simpson <dan.simpson at gmail.com>
>
>
> Hi Dan,
>
> How are you running Rabbit? Most systems implement a restriction where only
> processes run by root can take ports <1024. The  default start scripts for
> rabbit will actually start Rabbit as a "rabbitmq" user, so in order to take
> a well-known port, you'd need to alter these scripts.
>
> Be warned however that Rabbit doesn't support the features normally
> required by daemons that use well-known ports, such as the ability to open
> the port then drop to the context of a less privileged user. This means that
> a Rabbit running as root will stay running as root.
>
> Paul.
>
> On Thu, Aug 27, 2009 at 5:37 AM, Dan Simpson <dan.simpson at gmail.com>wrote:
>
>> Hello,
>>
>> I am having trouble getting rabbitmq to listen on a "well-known" port.  I
>> am guessing there is some implemented restriction for listening on any port
>> less than 1024.
>>
>> How can I get around this?
>>
>> --Dan
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
>>
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090827/65ad4679/attachment.htm 

From tonyg at lshift.net  Thu Aug 27 16:41:21 2009
From: tonyg at lshift.net (Tony Garnock-Jones)
Date: Thu, 27 Aug 2009 16:41:21 +0100
Subject: [rabbitmq-discuss] [Fwd: Re: rabbitmq-c versus MSYS]
Message-ID: <4A96A921.3050604@lshift.net>

Oops -- meant this to go to the list too!
-- 
 [][][] Tony Garnock-Jones     | Mob: +44 (0)7905 974 211
   [][] LShift Ltd             | Tel: +44 (0)20 7729 7060
 []  [] http://www.lshift.net/ | Email: tonyg at lshift.net
-------------- next part --------------
An embedded message was scrubbed...
From: Tony Garnock-Jones <tonyg at lshift.net>
Subject: Re: rabbitmq-c versus MSYS
Date: Mon, 17 Aug 2009 14:26:12 +0100
Size: 1044
Url: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090827/a4bd51f4/attachment.eml 

From ram.muthiah at yahoo.com  Thu Aug 27 18:33:52 2009
From: ram.muthiah at yahoo.com (Ram Muthiah)
Date: Thu, 27 Aug 2009 10:33:52 -0700 (PDT)
Subject: [rabbitmq-discuss] building chat
In-Reply-To: <269388e30908270522n62ee3dbdo498b9a46f383fb64@mail.gmail.com>
References: <860157.29474.qm@web44702.mail.sp1.yahoo.com>
	<167204d20908260036v7bf73a3ei8051c0354eec6cf5@mail.gmail.com>
	<619996.73011.qm@web44714.mail.sp1.yahoo.com>
	<269388e30908270522n62ee3dbdo498b9a46f383fb64@mail.gmail.com>
Message-ID: <192224.60377.qm@web44704.mail.sp1.yahoo.com>

Hi Ben,
 
Thank you for the reply. I am working on this application to achieve the business goal. It?s the real thing! 
 
The idea is to have chat inside my iPhone application. iPhone app interacts with my server code to get the list of friends and their presence. iPhone displays all friends in the chat window, user can pick a friend and chat with him/her. 
 
Whenever the chat message is routed thru RabbitMQ server and if there is no ack from the friend, program can check the application server for the presence and let the user knows if his friend is offline. 
 
I think I can avoid using XMPP gateway on top of RabbitMQ. 
 
I don?t quite understand about default exchange you mentioned. I didn?t even know there is a default exchange. Can I use this default exchange for both one-to-one chat and multi-user chat? 
 
I am using different queues for both of these chat types. There will be only one queue for mult-user chat, each user will read from it and write into it. For one-to-one chat, each user will have his/her own queue. If I want to send message to my friend, I will send message to his queue, then he read from there. When he wants to send message to me, he will put his message in my queue, I will take it from there. 
 
I assumed that I need to have separate exchanges for different chat types. It appears that I can use the same exchange. Is there any user/message limit on each exchange?
 
Thanks again for taking time to answer my queries.
 
Ram
 



________________________________
From: Ben Hood <0x6e6562 at gmail.com>
To: Ram Muthiah <ram.muthiah at yahoo.com>
Cc: rabbitmq <rabbitmq-discuss at lists.rabbitmq.com>
Sent: Thursday, August 27, 2009 5:22:05 AM
Subject: Re: [rabbitmq-discuss] building chat

Ram,

On Thu, Aug 27, 2009 at 3:05 AM, Ram Muthiah<ram.muthiah at yahoo.com> wrote:
> Based on Ben and Alexis's discussion, I came up with the following logic.
> Let me know if you guys see any flaw in it. I use two exchanges; one for
> one-to-one chat and another for multi-user chat. Clients will use Java. I
> create one queue per user. Effectively, there will be two queues per chat.

Fundamentally I don't see that much wrong with it. However I am
wondering what your intention is - do you need an application to
achieve a business goal or are you just getting your feet wet with
AMQP?

Here are some study notes:

- If you want to route directly to a named queue, you can publish to
the default exchange (In Java this an empty string as a name) with the
name of the queue as a routing key. No need to create an extra
exchange for this;

- How is your application going to know about the non-acknowledgement
of messages on the outbound side (this is where you expect the client
to display the "user offline")? Seems to me that you need presence to
do this (i.e. the 1st P in XMPP).

Cheers,

Ben



      
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090827/8ea4f786/attachment.htm 

From anand.ved at Xoriant.Com  Thu Aug 27 20:58:08 2009
From: anand.ved at Xoriant.Com (Anand Ved)
Date: Fri, 28 Aug 2009 01:28:08 +0530
Subject: [rabbitmq-discuss] Storing UTF-8 strings
Message-ID: <FA3D7C54DA3A1540B2C92C93ACD2156004221BE1@XOREXCH.India.XoriantCorp.com>

Hi,
 
I was trying to store UTF-8 character strings into the Queue using publish and while retriving them using QueueConsumer, I found that the strings were messed up.
 
I am using a Java Client
 
Is there any way to configure rabbit to maintain the strings in the same encoding as they are?
 
Regards,
Anand.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090828/7e6b7e81/attachment.htm 

From 0x6e6562 at gmail.com  Thu Aug 27 22:42:48 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Thu, 27 Aug 2009 22:42:48 +0100
Subject: [rabbitmq-discuss] Storing UTF-8 strings
In-Reply-To: <FA3D7C54DA3A1540B2C92C93ACD2156004221BE1@XOREXCH.India.XoriantCorp.com>
References: <FA3D7C54DA3A1540B2C92C93ACD2156004221BE1@XOREXCH.India.XoriantCorp.com>
Message-ID: <269388e30908271442s28ab2c62o52c65ed43769a00a@mail.gmail.com>

Anand,

On Thu, Aug 27, 2009 at 8:58 PM, Anand Ved<anand.ved at xoriant.com> wrote:
> I was trying to store UTF-8 character strings into the Queue using publish
> and while retriving them using QueueConsumer, I found that the strings were
> messed up.
>
> I am using a Java Client
>
> Is there any way to configure rabbit to maintain the strings in the same
> encoding as they are?

Rabbit treats a message payload as an opaque binary. Can you send us a
cut down version of your program that demonstrates the behavior you
are seeing?

Ben



From bchesneau at gmail.com  Fri Aug 28 09:08:26 2009
From: bchesneau at gmail.com (Benoit Chesneau)
Date: Fri, 28 Aug 2009 10:08:26 +0200
Subject: [rabbitmq-discuss] getting list of nodes in a cluster
Message-ID: <b7cd8ed10908280108p521da51ayf8230ad1686cbe30@mail.gmail.com>

Hi,

I'm looking for a way to get a list of rabbitmq nodes in a cluster. It
seems they aren't grouped logically (at least with pg2 module). Is
there a way to do it ?

- benoit



From matthias at lshift.net  Fri Aug 28 09:17:37 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 28 Aug 2009 09:17:37 +0100
Subject: [rabbitmq-discuss] getting list of nodes in a cluster
In-Reply-To: <b7cd8ed10908280108p521da51ayf8230ad1686cbe30@mail.gmail.com>
References: <b7cd8ed10908280108p521da51ayf8230ad1686cbe30@mail.gmail.com>
Message-ID: <4A9792A1.7090700@lshift.net>

Benoit,

Benoit Chesneau wrote:
> I'm looking for a way to get a list of rabbitmq nodes in a cluster. It
> seems they aren't grouped logically (at least with pg2 module). Is
> there a way to do it ?

nodes() ?


Matthias.



From matthias at lshift.net  Fri Aug 28 10:14:12 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 28 Aug 2009 10:14:12 +0100
Subject: [rabbitmq-discuss] getting list of nodes in a cluster
In-Reply-To: <b7cd8ed10908280201h750b93c1kb2f76c7bc24628a8@mail.gmail.com>
References: <b7cd8ed10908280108p521da51ayf8230ad1686cbe30@mail.gmail.com>	<4A9792A1.7090700@lshift.net>
	<b7cd8ed10908280201h750b93c1kb2f76c7bc24628a8@mail.gmail.com>
Message-ID: <4A979FE4.7030107@lshift.net>

Benoit,

Benoit Chesneau wrote:
> Do you mean erlang:nodes() ?

Yes. It returns all the connected erlang nodes. In a RabbitMQ cluster
that will be the list of all cluster nodes (unless you have additional,
non-rabbit nodes).

> I don't see how it could help here. I want to fetch the list of
> launched erlang node to find one available and open a connection to
> it. To make some kind of fail-over and eventually load balancing.

Ah, so you want to find out this information in some *client* code? Then
no, there is no way to do that.


Matthias.



From mchruszcz at gmail.com  Fri Aug 28 16:41:43 2009
From: mchruszcz at gmail.com (Michal Chruszcz)
Date: Fri, 28 Aug 2009 17:41:43 +0200
Subject: [rabbitmq-discuss] Priorities support in RabbitMQ
Message-ID: <A338BFF3-508E-460F-8558-7A0FCFECFFAC@gmail.com>

Hi,

I've been analyzing support of message priorities by RabbitMQ and the  
only
information I've found is the document describing compatibility with  
AMQP
specification (http://www.rabbitmq.com/specification.html), which states
that "server MUST implement at least 2 priority levels for basic  
messages"
and RabbitMQ currently is in the stage of "planned". I assume there is  
no
support for priorities in RabbitMQ currently. However could any one  
tell me
something more about this? When it possibly could be included in  
official
release? I'd really appreciate knowing more details on this as it's a
feature probably desired by many.

Best regards,
Michal Chruszcz
mchruszcz at gmail.com
mobile: +48 607 620 771
phone: +48 22 849 30 26




From matthew at lshift.net  Fri Aug 28 16:48:05 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Fri, 28 Aug 2009 16:48:05 +0100
Subject: [rabbitmq-discuss] Priorities support in RabbitMQ
In-Reply-To: <A338BFF3-508E-460F-8558-7A0FCFECFFAC@gmail.com>
References: <A338BFF3-508E-460F-8558-7A0FCFECFFAC@gmail.com>
Message-ID: <20090828154804.GA22219@mrnibble.lshift.net>

Hi Michal,

On Fri, Aug 28, 2009 at 05:41:43PM +0200, Michal Chruszcz wrote:
> I've been analyzing support of message priorities by RabbitMQ and the  
> only
> information I've found is the document describing compatibility with  
> AMQP
> specification (http://www.rabbitmq.com/specification.html), which states
> that "server MUST implement at least 2 priority levels for basic  
> messages"
> and RabbitMQ currently is in the stage of "planned". I assume there is  
> no
> support for priorities in RabbitMQ currently. However could any one  
> tell me
> something more about this? When it possibly could be included in  
> official
> release? I'd really appreciate knowing more details on this as it's a
> feature probably desired by many.

Yes, you're right, RabbitMQ does not support message priorities at all
at the moment, and yes, it is a fairly oft requested feature. We do have
plans to add support for it, but we don't have a release target for it
just yet. I'm afraid I don't have any more information that than -
basically: yes, we know people want it; yes, it's on our todo list; no,
we don't know when it'll get done.

Matthew



From jvarona at attinteractive.com  Fri Aug 28 22:22:07 2009
From: jvarona at attinteractive.com (Jorge Varona)
Date: Fri, 28 Aug 2009 14:22:07 -0700
Subject: [rabbitmq-discuss] Clustering Issue
Message-ID: <7CA37CF4B3E0664983CF2BD8A97495F9025B0165@GLNEXM01.YELLOWPAGES.LOCAL>

I've noticed some issues with clustered boxes that are weird. For
example, in a two-box cluster I have Client A sending messages to Server
A and Client B pulling messages from Server B. We already know that if
we shut down Server A (it was first to declare a queue) messages stop
being delivered to Server B and in turn Client B. The strange behavior
I've noticed is that if I bring Server A back up and send messages to it
they are not relayed to Server B, which has Client B attached. Only
after I restart Server B do messages begin to be relayed to Client B.

 

Here are my assumptions:

1. Queues exist only on the server on which they were first declared.

2. Nodes within a cluster relay requests to the server on which the
queue exists instead of messages being relayed to the server after first
received. 

3. If one node is down (I only tested the one on which the queue was
created) all nodes must be restarted to re-commence replication-like
behavior in the cluster.

 

 

Has anyone experienced the same behavior? Could this be due to bad
configuration? If not, are there efforts to address these
issues/scenarios? Thanks.

 

Jorge

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090828/70ec83a2/attachment.htm 

From matthias at lshift.net  Fri Aug 28 22:51:56 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Fri, 28 Aug 2009 22:51:56 +0100
Subject: [rabbitmq-discuss] Clustering Issue
In-Reply-To: <7CA37CF4B3E0664983CF2BD8A97495F9025B0165@GLNEXM01.YELLOWPAGES.LOCAL>
References: <7CA37CF4B3E0664983CF2BD8A97495F9025B0165@GLNEXM01.YELLOWPAGES.LOCAL>
Message-ID: <4A98517C.5030402@lshift.net>

Jorge,

Jorge Varona wrote:
> I've noticed some issues with clustered boxes that are weird. For 
> example, in a two-box cluster I have Client A sending messages to Server 
> A and Client B pulling messages from Server B. We already know that if 
> we shut down Server A (it was first to declare a queue) messages stop 
> being delivered to Server B and in turn Client B. The strange behavior 
> I've noticed is that if I bring Server A back up and send messages to it 
> they are not relayed to Server B, which has Client B attached. Only 
> after I restart Server B do messages begin to be relayed to Client B.

When node A dies, as far as B is concerned all the queues on A die too. 
If client B attempted a 'basic.get', or indeed any other operation on 
any of A's queues it would get a 'not_found' error.

BUT - and this is what you are seeing - there is no way in AMQP to 
inform existing subscribers that a queue has vanished.

This isn't just a problem for clustering - you can run into the same 
issue on just a single node if one client consumes from a queue and 
another client removes that queue.

> Here are my assumptions:
> 
> 1. Queues exist only on the server on which they were first declared.
> 
> 2. Nodes within a cluster relay requests to the server on which the 
> queue exists instead of messages being relayed to the server after first 
> received.

Both correct.

> are there efforts to address these issues/scenarios?

It is possible that AMQP 1.0 addresses this. Not sure.


Regards,

Matthias.



From jvarona at attinteractive.com  Fri Aug 28 23:08:20 2009
From: jvarona at attinteractive.com (Jorge Varona)
Date: Fri, 28 Aug 2009 15:08:20 -0700
Subject: [rabbitmq-discuss] Clustering Issue
In-Reply-To: <4A98517C.5030402@lshift.net>
References: <7CA37CF4B3E0664983CF2BD8A97495F9025B0165@GLNEXM01.YELLOWPAGES.LOCAL>
	<4A98517C.5030402@lshift.net>
Message-ID: <7CA37CF4B3E0664983CF2BD8A97495F9025B0182@GLNEXM01.YELLOWPAGES.LOCAL>

Mattias,

Thanks for the quick response. I understand that if the Server A dies
other nodes should be able to assume that the queue is dead as well. My
real concern is that the queue(s) are not distributed and the box that
carries the physical queue is a single point of failure. While the
current clustering helps load-balance read operations very well it
doesn't address durability and reliability concerns, which happen to be
important to my project. 

I guess my real question is if there are or will be efforts to
distribute the queues across physical nodes? I understand that this
implies locking, consensus, and a bunch of other things that could
hinder scale. If not, do you have any recommendations on how I could
provide a higher durability and fault-tolerance guarantees to my
consumers?

Jorge



-----Original Message-----
From: Matthias Radestock [mailto:matthias at lshift.net] 
Sent: Friday, August 28, 2009 2:52 PM
To: Jorge Varona
Cc: rabbitmq-discuss at lists.rabbitmq.com
Subject: Re: [rabbitmq-discuss] Clustering Issue

Jorge,

Jorge Varona wrote:
> I've noticed some issues with clustered boxes that are weird. For 
> example, in a two-box cluster I have Client A sending messages to
Server 
> A and Client B pulling messages from Server B. We already know that if

> we shut down Server A (it was first to declare a queue) messages stop 
> being delivered to Server B and in turn Client B. The strange behavior

> I've noticed is that if I bring Server A back up and send messages to
it 
> they are not relayed to Server B, which has Client B attached. Only 
> after I restart Server B do messages begin to be relayed to Client B.

When node A dies, as far as B is concerned all the queues on A die too. 
If client B attempted a 'basic.get', or indeed any other operation on 
any of A's queues it would get a 'not_found' error.

BUT - and this is what you are seeing - there is no way in AMQP to 
inform existing subscribers that a queue has vanished.

This isn't just a problem for clustering - you can run into the same 
issue on just a single node if one client consumes from a queue and 
another client removes that queue.

> Here are my assumptions:
> 
> 1. Queues exist only on the server on which they were first declared.
> 
> 2. Nodes within a cluster relay requests to the server on which the 
> queue exists instead of messages being relayed to the server after
first 
> received.

Both correct.

> are there efforts to address these issues/scenarios?

It is possible that AMQP 1.0 addresses this. Not sure.


Regards,

Matthias.



From charity at lindenlab.com  Fri Aug 28 23:16:02 2009
From: charity at lindenlab.com (Charity Majors)
Date: Fri, 28 Aug 2009 15:16:02 -0700
Subject: [rabbitmq-discuss] direct queue throughput
Message-ID: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>

Hi.  I'm working on a distributed load testing tool for mysql, where
we capture several hours worth of peak query load and replay the
queries against different db versions and configurations.  Rabbitmq is
the pipeline between the central aggregator process and the workers.

I have (essentially) two queues set up, one for farming query
sequences out to workers and one for sending mysql return codes back
to the central.  Both queues are non-durable and use a direct
exchange.

So far, so good.  But it's starting to look like this configuration
isn't fast enough to let me test SSDs.  Rabbitmq appears to top out at
a throughput rate of around 7k msgs/sec for the two queues.  Does that
number sound right?  The rate is the same whether I'm running on an 8
core box with 32 gigs of memory or a 4 core with 4 gigs.

Thanks,
charity.



From cremes.devlist at mac.com  Fri Aug 28 23:38:58 2009
From: cremes.devlist at mac.com (Chuck Remes)
Date: Fri, 28 Aug 2009 17:38:58 -0500
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
Message-ID: <15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>


On Aug 28, 2009, at 5:16 PM, Charity Majors wrote:

> Hi.  I'm working on a distributed load testing tool for mysql, where
> we capture several hours worth of peak query load and replay the
> queries against different db versions and configurations.  Rabbitmq is
> the pipeline between the central aggregator process and the workers.
>
> I have (essentially) two queues set up, one for farming query
> sequences out to workers and one for sending mysql return codes back
> to the central.  Both queues are non-durable and use a direct
> exchange.
>
> So far, so good.  But it's starting to look like this configuration
> isn't fast enough to let me test SSDs.  Rabbitmq appears to top out at
> a throughput rate of around 7k msgs/sec for the two queues.  Does that
> number sound right?  The rate is the same whether I'm running on an 8
> core box with 32 gigs of memory or a 4 core with 4 gigs.

I don't have an answer for you but I do have a few things to point out.

1. RabbitMQ is written in Erlang. I am pretty sure the latest stable  
releases are still a single-threaded process (though internally the  
application uses hundreds or thousands of "green" threads). Therefore  
you won't get much throughput increase by running on a larger multi- 
core box.

2. You don't really describe what kind of data stream the queues  
carry. A fanout exchange has higher throughput than a direct exchange  
since it does fewer routing checks. That may or may not be a more  
appropriate choice for you.

3. Are you certain that your worker processes are keeping up? It's  
possible you are only seeing 7k msgs/sec because your worker processes  
aren't consuming them fast enough (ie. back pressure on the queue).

4. It sounds odd that you have higher than 7k queries/sec in your  
environment. Is your mysql system really capable of returning every  
query within 140 microseconds? I'm probably just misunderstanding  
something here so feel free to clarify what you mean by 7k queries/sec.

I hope some of this is useful to you.

cr




From matthew at lshift.net  Sat Aug 29 00:01:09 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Sat, 29 Aug 2009 00:01:09 +0100
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
	<15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
Message-ID: <20090828230109.GA4507@wellquite.org>

On Fri, Aug 28, 2009 at 05:38:58PM -0500, Chuck Remes wrote:
> > So far, so good.  But it's starting to look like this configuration
> > isn't fast enough to let me test SSDs.  Rabbitmq appears to top out at
> > a throughput rate of around 7k msgs/sec for the two queues.  Does that
> > number sound right?  The rate is the same whether I'm running on an 8
> > core box with 32 gigs of memory or a 4 core with 4 gigs.

I can crank 27kHz on my Q9450 with 4GB RAM. However, numbers like this
are utterly meaningless, without further qualification. In my case,
0-bytes message payload, and auto-ack consumer. Thus, we realy need far
more details about your setup, the nature of your exchanges, queues,
publishers and consumers before being able to suggest whether or not the
performance you're getting "sounds about right" ;)

With hardware like yours, I'd expect you to be able to push the envelope
a fair bit!

> I don't have an answer for you but I do have a few things to point out.
> 
> 1. RabbitMQ is written in Erlang. I am pretty sure the latest stable  
> releases are still a single-threaded process (though internally the  
> application uses hundreds or thousands of "green" threads). Therefore  
> you won't get much throughput increase by running on a larger multi- 
> core box.

Erlang has supported SMP for several releases, I believe first gaining
support about 4 years ago. Initially, yes, we found that very early
versions of Rabbit ran slower with the SMP support turned on that off.
However, Erlang's support for SMP has improved substantially over the
years and Rabbit benefits substantially from Erlang's SMP support.

man erl, and a quick search for SMP reveals that by default, and in
absence of any conflicting parameters, and on a supported platform, SMP
support will be enabled.

As with all non-"trivially parallisable" applications, you get
diminishing returns from going more and more parallel. That said, in
Rabbit, it's very plausible to have sockets, channels and queues running
in entirely separate processes. In short, if you structure things
correctly, you should be able to get very substantial benefits from
additional parallel hardware.

The rest of Chuck's points are absolutely valid though - we really need
a fair bit more information - which clients are you using, what is the
sustain network load, are the consumers, auto-acking, manually acking,
is qos being used?

Matthew



From charity at lindenlab.com  Sat Aug 29 00:34:47 2009
From: charity at lindenlab.com (Charity Majors)
Date: Fri, 28 Aug 2009 16:34:47 -0700
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
	<15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
Message-ID: <f7541d9c0908281634p33788802sc9defd1d40500d3b@mail.gmail.com>

Whoops, sorry -- I'm not getting 7k msgs/sec through rabbitmq.  I'm
getting closer to *2k*/sec through rmq.

7k/sec is the mysql query count.  But we serialize the queries into
sequences and submit those sequences into the worker-jobs queue, to
better mimic the way the queries were originally executed.

> 1. RabbitMQ is written in Erlang. I am pretty sure the latest stable
> releases are still a single-threaded process (though internally the
> application uses hundreds or thousands of "green" threads). Therefore
> you won't get much throughput increase by running on a larger multi-
> core box.

Good to know.  The CPU load does seem awfully low.

> 3. Are you certain that your worker processes are keeping up? It's
> possible you are only seeing 7k msgs/sec because your worker processes
> aren't consuming them fast enough (ie. back pressure on the queue).

Yeah, I'm sure.  I can run rabbitmqctl list_queues and look at the
message counts, and the consumers are keeping the queues basically
clear.

> 4. It sounds odd that you have higher than 7k queries/sec in your
> environment. Is your mysql system really capable of returning every
> query within 140 microseconds? I'm probably just misunderstanding
> something here so feel free to clarify what you mean by 7k queries/sec.

Yeah.  This wasn't really a problem until I started testing the SSDs.
With the SSDs and my current test setup, I can push the QPS up close
to 10k queries per second (according to innotop and my ganglia
graphs), and the box is still basically just yawning at me.  It's
still only using like 20% of the IO.

It's a nice problem to have, but still ... :)



From charity at lindenlab.com  Sat Aug 29 00:51:19 2009
From: charity at lindenlab.com (Charity Majors)
Date: Fri, 28 Aug 2009 16:51:19 -0700
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <20090828230109.GA4507@wellquite.org>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
	<15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
	<20090828230109.GA4507@wellquite.org>
Message-ID: <f7541d9c0908281651g36073d79x561b99ea118ed2d3@mail.gmail.com>

> Erlang has supported SMP for several releases, I believe first gaining
> support about 4 years ago. Initially, yes, we found that very early
> versions of Rabbit ran slower with the SMP support turned on that off.
> However, Erlang's support for SMP has improved substantially over the
> years and Rabbit benefits substantially from Erlang's SMP support.

Oh!  Hmm, okay, even better to know.  :)

> The rest of Chuck's points are absolutely valid though - we really need
> a fair bit more information - which clients are you using, what is the
> sustain network load, are the consumers, auto-acking, manually acking,
> is qos being used?

I'm using python-amqplib.  There's no flow control, so I have an
option implemented that works kind of like a poor man's throttle.  We
already keep state on how many jobs are running or waiting at a given
time, so our job minder thread doesn't submit any more jobs to the
queue if there's more than a certain number already running or waiting
to execute.

This works pretty well.  With the SSDs, however, it runs so fast that
I don't even have to turn on the throttle.  The workers consume the
jobs, execute the SQL, and return their status faster than the
publisher can stuff jobs into the queue.

We aren't acking at all.

Network load ... I would have to check on that.  But I don't think
that's the ceiling we're bumping up against.  I can run it with a null
plugin, so it just pushes the jobs through the rabbitmq queues and
fakes the mysql responses, and everything stays on the same box.  And
my throughput rate looks identical to the rates I see testing the
SSDs.

Does that answer your questions?

Thanks,
charity.



From bp at barryp.org  Sat Aug 29 05:15:56 2009
From: bp at barryp.org (Barry Pederson)
Date: Fri, 28 Aug 2009 23:15:56 -0500
Subject: [rabbitmq-discuss] Python library (py-amqplib)
In-Reply-To: <4A86E7A3.2040309@barryp.org>
References: <ce2570e20908051108o3382ed2ke23e9fdd28bd2045@mail.gmail.com>	<3bb0d9710908060252t7a20e5b4i36b972a222915e5e@mail.gmail.com>
	<4A86E7A3.2040309@barryp.org>
Message-ID: <4A98AB7C.70201@barryp.org>

Hi Everyone:

I just tagged and uploaded a version 0.6.1 of the Python amqplib to PyPI

     http://pypi.python.org/pypi/amqplib/0.6.1

containing the various fixed accumulated over the summer.  The download 
and source code can also be found on Google Code

     http://code.google.com/p/py-amqplib/

   Barry



From matthew at lshift.net  Sat Aug 29 11:44:35 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Sat, 29 Aug 2009 11:44:35 +0100
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <f7541d9c0908281651g36073d79x561b99ea118ed2d3@mail.gmail.com>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
	<15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
	<20090828230109.GA4507@wellquite.org>
	<f7541d9c0908281651g36073d79x561b99ea118ed2d3@mail.gmail.com>
Message-ID: <20090829104432.GA6005@wellquite.org>

Hi Charity,

On Fri, Aug 28, 2009 at 04:51:19PM -0700, Charity Majors wrote:
> We aren't acking at all.

Err, this seems odd. Do you mean that your consumers set noAck to true
when setting up the subscription to the queue? If you're not, and you're
not explicitly acking then Rabbit will be keeping a copy of the message
in memory all the time, because it won't discard messages until it
receives an ack from the consumer for the msg.

Are the queues durable and are the messages being published persistent
(delivery_mode = 2)? If so, this /may/ slow things down depending on
the nature of your consumers.

However, if a) cpu load is very low, and b) rabbitmqctl list_queues
shows that the queues are being kept empty, I rather suspect that
messages aren't getting in to Rabbit fast enough.

> Network load ... I would have to check on that.  But I don't think
> that's the ceiling we're bumping up against.  I can run it with a null
> plugin, so it just pushes the jobs through the rabbitmq queues and
> fakes the mysql responses, and everything stays on the same box.  And
> my throughput rate looks identical to the rates I see testing the
> SSDs.

Yes, I think this backs up my theory - if a null consumer isn't going
any faster, then I would definitely point the finger at the producers.
How big are the messages you're sending? If you're all on the same box,
I find this a bit surprising - I can push above 400M*Bytes*/s over
localhost loopback to and from Rabbit.

First of all though, if you've got noAck false in the consumers then
you *must* explicitly ack messages. I'd correct that and then see where
you are.

Matthew



From matthew at lshift.net  Sat Aug 29 13:00:54 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Sat, 29 Aug 2009 13:00:54 +0100
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <20090829104432.GA6005@wellquite.org>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
	<15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
	<20090828230109.GA4507@wellquite.org>
	<f7541d9c0908281651g36073d79x561b99ea118ed2d3@mail.gmail.com>
	<20090829104432.GA6005@wellquite.org>
Message-ID: <20090829120054.GB6005@wellquite.org>

On Sat, Aug 29, 2009 at 11:44:35AM +0100, Matthew Sackman wrote:
> Are the queues durable and are the messages being published persistent
> (delivery_mode = 2)? If so, this /may/ slow things down depending on
> the nature of your consumers.

My apologies - you did in fact say in your first email that the queues
are not durable. Are the messages persistent though - or more simply,
are you seeing any disk activity beyond MySQL's disk activity?

Matthew



From bms at incunabulum.net  Sat Aug 29 13:41:27 2009
From: bms at incunabulum.net (Bruce Simpson)
Date: Sat, 29 Aug 2009 13:41:27 +0100
Subject: [rabbitmq-discuss] rabbitmq-c versus MSYS
In-Reply-To: <407fa4640908130758s72e18361kdc43621ae6a1b85e@mail.gmail.com>
References: <407fa4640908130758s72e18361kdc43621ae6a1b85e@mail.gmail.com>
Message-ID: <4A9921F7.2070104@incunabulum.net>

Michael Nacos wrote:
> ...
> make[2]: *** No rule to make target `codegen/amqp-0.8.json', needed by 
> `amqp_framing.h'.  Stop.
> make[2]: Leaving directory `/c/Projects/rabbitmq-c/librabbitmq'
> make[1]: *** [all-recursive] Error 1
> make[1]: Leaving directory `/c/Projects/rabbitmq-c'
> make: *** [all] Error 2
>
> then again, there is no python support in MSYS. IYO, what would be the 
> best way forward?

Have you tried installing ActiveState Python?

In the old XORP world order, we shipped a set of Windows binaries for 
routing processes built under MSYS. The RPC stubs in the tree were 
generated with Python, and we used to check them in directly.

There can be some subtle path issues with MSYS, because whilst it 
supports a UNIX-like development environment, all binaries are in fact 
invoked via the usual Win32 command line subsystem mechanisms.

In practice this usually isn't an issue, providing the tool(s) are in 
your PATH, and/or scripts/builders invoked directly by the MinGW port of 
GNU Make use the #!/usr/bin/env construct.

We found it *was* an issue where child processes were expected to be run 
under an MSYS bash shell, as the MSYS runtime tries to deal with 
situations where DOS-style, NT/UNC-style and UNIX-style paths are mixed. 
As you probably already know, GNU Make will try to use bash wherever it can.

You might want to have a look at the legacy build notes for XORP:
    
http://xorp.svn.sourceforge.net/viewvc/xorp/trunk/xorp/BUILD_NOTES?revision=11305&view=markup

We have since moved away from GNU Autotools to SCons, which is 
significantly better in a number of ways; tedious regeneration of the 
build glue is not needed every time an incremental change is made.

thanks,
BMS



From dikkiehagel at hotmail.com  Sat Aug 29 15:20:16 2009
From: dikkiehagel at hotmail.com (Dikkie Hagel)
Date: Sat, 29 Aug 2009 16:20:16 +0200
Subject: [rabbitmq-discuss] Is RabbitMQ indeed "hype ware"?
Message-ID: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>


Hello,

I am in the process of setting up messaging middleware for a webbased platform which should be able to handle millions producers/consumers.

We've started our development with ActiveMQ. Everything seemed to work fine until we started connecting with 1000 consumers to a single topic. ActiveMQ could not handle this at all, complaining about "too many open filehandles". Others seem to have encountered this same issue as well (see second life's review), but we've not been able to google a solution. That was a major showstopper, and made us conclude that something was terribly wrong with the architecture of this software, which made it unsuitable for our intended purpose.

We then turned to RabbitMQ, and after fixing the Perl and ActionScript AMQP interfaces (http://github.com/joodie) we now almost have a working prototype for our environment, ready for some first performance tests.

Now I just received a mail from the ActiveMQ/Fuse support team, which in reply to my report to them about the 1000 consumers issue, quotes their "Manager Engineering", stating the following:

============== START OF QUOTE =================
This is due to the configuration out of the box for ActiveMQ - its very
straightforward for ActiveMQ to handle the same load as RabbitMQ.
There are some significant benefits in using ActiveMQ over RabbitMQ.
ActiveMQ has no limit on the depth (number of messages) in a Queue -
other than disk space. RabbitMQ runs out of memory.
Also - there's performance benefits too - although sending messages can
be a lot faster to RabbitMQ (this is due to RabbitMQ caching messages in
memory) - consuming messages is considerably slower.
In reality, RabbitMQ is just hype ware - not really suitable for
production scenarios. Although its getting a lot of traction, it only
suitable for cases where consumers will always keep up with producers.
=============== END OF QUOTE ======================

Now that's a pretty scary assesment there. "Hype ware"... Perhaps RabbitMQ's engineers can reply to this, and reassure us that our shift in favour of RabbitMQ is a sound decision? (we plan to deploy it on systems with plenty gigs of RAM).

Kind regards, Roberto
_________________________________________________________________
What can you do with the new Windows Live? Find out
http://www.microsoft.com/windows/windowslive/default.aspx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090829/8c317812/attachment.htm 

From 0x6e6562 at gmail.com  Sat Aug 29 15:55:04 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sat, 29 Aug 2009 15:55:04 +0100
Subject: [rabbitmq-discuss] Is RabbitMQ indeed "hype ware"?
In-Reply-To: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>
References: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>
Message-ID: <269388e30908290755p32826be2v9cc8323ce8523ee9@mail.gmail.com>

Roberto,

On Sat, Aug 29, 2009 at 3:20 PM, Dikkie Hagel<dikkiehagel at hotmail.com> wrote:
> We've started our development with ActiveMQ. Everything seemed to work fine
> until we started connecting with 1000 consumers to a single topic. ActiveMQ
> could not handle this at all, complaining about "too many open filehandles".
> Others seem to have encountered this same issue as well (see second life's
> review), but we've not been able to google a solution.

Were you not able to use ulimit to increase the OS limit for open file handles?

> We then turned to RabbitMQ, and after fixing the Perl and ActionScript AMQP
> interfaces (http://github.com/joodie) we now almost have a working prototype
> for our environment, ready for some first performance tests.

Interesting. Can you tell us what fixes had to be made? I've seen that
as3-amqp was forked yesterday, but I don't know if that is what you
are actually referring to. I've noticed that the same github user also
forked net-amqp as well. Is this related?

> ============== START OF QUOTE =================
> This is due to the configuration out of the box for ActiveMQ - its very
> straightforward for ActiveMQ to handle the same load as RabbitMQ.
> There are some significant benefits in using ActiveMQ over RabbitMQ.
> ActiveMQ has no limit on the depth (number of messages) in a Queue -
> other than disk space. RabbitMQ runs out of memory.

In Rabbit 1.6 this is true. Once you run out of physical memory it
will start running slowly, and then after that you will hit the wall
when you exceed virtual memory. Hence the major feature of the
upcoming release is queue paging.

> Also - there's performance benefits too - although sending messages can
> be a lot faster to RabbitMQ (this is due to RabbitMQ caching messages in
> memory) - consuming messages is considerably slower.

RabbitMQ endeavours to deliver messages as opposed to queueing them,
so I'm not too sure that there is something methodologically wrong
there. However, it may be the case that ActiveMQ benchmarks better
than RabbitMQ, for this or other reasons. I guess the simplest way to
find out is to just run some benchmarks on both systems and see what
transpires.

> In reality, RabbitMQ is just hype ware - not really suitable for
> production scenarios. Although its getting a lot of traction, it only
> suitable for cases where consumers will always keep up with producers.

As I said previously, not being able to page is a known issue in Rabbit 1.6.

Whether or not is suitable for production is not up to me to say.
After all, it is just some open source software that you can download,
run and test for yourself.

I guess another way to find out is to ask the community and google for
archives and blogs for people indicating that Rabbit doesn't work.

> Now that's a pretty scary assesment there. "Hype ware"... Perhaps RabbitMQ's
> engineers can reply to this, and reassure us that our shift in favour of
> RabbitMQ is a sound decision? (we plan to deploy it on systems with plenty
> gigs of RAM).

Hypeware is cool name :-)

As for your production issues, it's kind of hard to respond to an
issue that hasn't arisen yet. I would just test it and find out for
yourself. Do the same with ActiveMQ and just choose the system that
suits you best.

Also, I think the pending 1.7 release will mitigate the issue of true
store and forward.

So if you app really does have some heavy paging requirements it would
be interesting to test out the new persister mechanism to see if
actually works .... would be cool to see :-)

HTH,

Ben



From chime at mu.dk  Sat Aug 29 16:11:22 2009
From: chime at mu.dk (Michael Arnoldus)
Date: Sat, 29 Aug 2009 17:11:22 +0200
Subject: [rabbitmq-discuss] Is RabbitMQ indeed "hype ware"?
In-Reply-To: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>
References: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>
Message-ID: <AA1ABCE3-184B-43F2-8D67-FC01878BA2BF@mu.dk>

For what it's worth I've been using RabbitMQ in a production system  
running 24/7 for more than 2 year, running flawlessly. I wouldn't  
hesitate to use it again.

Whether it will solve your specific issues or not, I can't tell.

Also, I believe in the AMQP standard effort as I feel less "locked in"  
than with other solutions.

YMMV.

Regards,

Michael Arnoldus

On Aug 29, 2009, at 16:20 , Dikkie Hagel wrote:

> Hello,
>
> I am in the process of setting up messaging middleware for a  
> webbased platform which should be able to handle millions producers/ 
> consumers.
>
> We've started our development with ActiveMQ. Everything seemed to  
> work fine until we started connecting with 1000 consumers to a  
> single topic. ActiveMQ could not handle this at all, complaining  
> about "too many open filehandles". Others seem to have encountered  
> this same issue as well (see second life's review), but we've not  
> been able to google a solution. That was a major showstopper, and  
> made us conclude that something was terribly wrong with the  
> architecture of this software, which made it unsuitable for our  
> intended purpose.
>
> We then turned to RabbitMQ, and after fixing the Perl and  
> ActionScript AMQP interfaces (http://github.com/joodie) we now  
> almost have a working prototype for our environment, ready for some  
> first performance tests.
>
> Now I just received a mail from the ActiveMQ/Fuse support team,  
> which in reply to my report to them about the 1000 consumers issue,  
> quotes their "Manager Engineering", stating the following:
>
> ============== START OF QUOTE =================
> This is due to the configuration out of the box for ActiveMQ - its  
> very
> straightforward for ActiveMQ to handle the same load as RabbitMQ.
> There are some significant benefits in using ActiveMQ over RabbitMQ.
> ActiveMQ has no limit on the depth (number of messages) in a Queue -
> other than disk space. RabbitMQ runs out of memory.
> Also - there's performance benefits too - although sending messages  
> can
> be a lot faster to RabbitMQ (this is due to RabbitMQ caching  
> messages in
> memory) - consuming messages is considerably slower.
> In reality, RabbitMQ is just hype ware - not really suitable for
> production scenarios. Although its getting a lot of traction, it only
> suitable for cases where consumers will always keep up with producers.
> =============== END OF QUOTE ======================
>
> Now that's a pretty scary assesment there. "Hype ware"... Perhaps  
> RabbitMQ's engineers can reply to this, and reassure us that our  
> shift in favour of RabbitMQ is a sound decision? (we plan to deploy  
> it on systems with plenty gigs of RAM).
>
> Kind regards, Roberto
> What can you do with the new Windows Live? Find  
> out_______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090829/8bfa1e04/attachment.htm 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 1912 bytes
Desc: not available
Url : http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090829/8bfa1e04/attachment.bin 

From gmr at myyearbook.com  Sat Aug 29 16:26:21 2009
From: gmr at myyearbook.com (Gavin M. Roy)
Date: Sat, 29 Aug 2009 11:26:21 -0400
Subject: [rabbitmq-discuss] Is RabbitMQ indeed "hype ware"?
In-Reply-To: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>
References: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>
Message-ID: <af1bce590908290826n535e4985yd2b3cfbd55bc83c1@mail.gmail.com>

While I've not completed my migration from ActiveMQ to RabbitMQ, every
indication is that it is faster in my work load.  I do not have
thousands of consumers, but I do have thousands of clients connecting,
enqueueing and disconnecting.

In this scenario, connection times in ActiveMQ increase over the
course of days, starting at 4ms and if left unattended to, increase
to100's of ms.  The only way to resolve this is to restart the
ActiveMQ broker which is disruptive and an operational issue for us.

In addition, load tests show that ActiveMQ slows considerably with
steady enqueue with no dequeue, over the course of 1000's of messages.
 I ran this same test with RabbitMQ runs steady until it runs out of
memory which for my tests was around 2M messages.

Regards,

Gavin

On Sat, Aug 29, 2009 at 10:20 AM, Dikkie Hagel<dikkiehagel at hotmail.com> wrote:
> Hello,
>
> I am in the process of setting up messaging middleware for a webbased
> platform which should be able to handle millions producers/consumers.
>
> We've started our development with ActiveMQ. Everything seemed to work fine
> until we started connecting with 1000 consumers to a single topic. ActiveMQ
> could not handle this at all, complaining about "too many open filehandles".
> Others seem to have encountered this same issue as well (see second life's
> review), but we've not been able to google a solution. That was a major
> showstopper, and made us conclude that something was terribly wrong with the
> architecture of this software, which made it unsuitable for our intended
> purpose.
>
> We then turned to RabbitMQ, and after fixing the Perl and ActionScript AMQP
> interfaces (http://github.com/joodie) we now almost have a working prototype
> for our environment, ready for some first performance tests.
>
> Now I just received a mail from the ActiveMQ/Fuse support team, which in
> reply to my report to them about the 1000 consumers issue, quotes their
> "Manager Engineering", stating the following:
>
> ============== START OF QUOTE =================
> This is due to the configuration out of the box for ActiveMQ - its very
> straightforward for ActiveMQ to handle the same load as RabbitMQ.
> There are some significant benefits in using ActiveMQ over RabbitMQ.
> ActiveMQ has no limit on the depth (number of messages) in a Queue -
> other than disk space. RabbitMQ runs out of memory.
> Also - there's performance benefits too - although sending messages can
> be a lot faster to RabbitMQ (this is due to RabbitMQ caching messages in
> memory) - consuming messages is considerably slower.
> In reality, RabbitMQ is just hype ware - not really suitable for
> production scenarios. Although its getting a lot of traction, it only
> suitable for cases where consumers will always keep up with producers.
> =============== END OF QUOTE ======================
>
> Now that's a pretty scary assesment there. "Hype ware"... Perhaps RabbitMQ's
> engineers can reply to this, and reassure us that our shift in favour of
> RabbitMQ is a sound decision? (we plan to deploy it on systems with plenty
> gigs of RAM).
>
> Kind regards, Roberto
> ________________________________
> What can you do with the new Windows Live? Find out
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
>



From alexis.richardson at gmail.com  Sat Aug 29 18:19:09 2009
From: alexis.richardson at gmail.com (Alexis Richardson)
Date: Sat, 29 Aug 2009 10:19:09 -0700
Subject: [rabbitmq-discuss] Is RabbitMQ indeed "hype ware"?
In-Reply-To: <af1bce590908290826n535e4985yd2b3cfbd55bc83c1@mail.gmail.com>
References: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>
	<af1bce590908290826n535e4985yd2b3cfbd55bc83c1@mail.gmail.com>
Message-ID: <167204d20908291019m17ac2446j4f1f7fb9777a49cf@mail.gmail.com>

Hi

Thanks everyone for these emails.

To further Ben's excellent response, if anyone has any use cases or
tests where they are not seeing what they expect, please do let us
know as much as you can about what you are seeing.  If you can post
any test harnesses on the web, eg on github, then everyone can try to
replicate what you are seeing.  In the case of a messaging system like
RabbitMQ or ActiveMQ, the most interesting production behaviours may
take time to observe so *any* concrete tests to replicate unusual
behaviour are *very* helpful.

Cheers,

alexis




On Sat, Aug 29, 2009 at 8:26 AM, Gavin M. Roy<gmr at myyearbook.com> wrote:
> While I've not completed my migration from ActiveMQ to RabbitMQ, every
> indication is that it is faster in my work load. ?I do not have
> thousands of consumers, but I do have thousands of clients connecting,
> enqueueing and disconnecting.
>
> In this scenario, connection times in ActiveMQ increase over the
> course of days, starting at 4ms and if left unattended to, increase
> to100's of ms. ?The only way to resolve this is to restart the
> ActiveMQ broker which is disruptive and an operational issue for us.
>
> In addition, load tests show that ActiveMQ slows considerably with
> steady enqueue with no dequeue, over the course of 1000's of messages.
> ?I ran this same test with RabbitMQ runs steady until it runs out of
> memory which for my tests was around 2M messages.
>
> Regards,
>
> Gavin
>
> On Sat, Aug 29, 2009 at 10:20 AM, Dikkie Hagel<dikkiehagel at hotmail.com> wrote:
>> Hello,
>>
>> I am in the process of setting up messaging middleware for a webbased
>> platform which should be able to handle millions producers/consumers.
>>
>> We've started our development with ActiveMQ. Everything seemed to work fine
>> until we started connecting with 1000 consumers to a single topic. ActiveMQ
>> could not handle this at all, complaining about "too many open filehandles".
>> Others seem to have encountered this same issue as well (see second life's
>> review), but we've not been able to google a solution. That was a major
>> showstopper, and made us conclude that something was terribly wrong with the
>> architecture of this software, which made it unsuitable for our intended
>> purpose.
>>
>> We then turned to RabbitMQ, and after fixing the Perl and ActionScript AMQP
>> interfaces (http://github.com/joodie) we now almost have a working prototype
>> for our environment, ready for some first performance tests.
>>
>> Now I just received a mail from the ActiveMQ/Fuse support team, which in
>> reply to my report to them about the 1000 consumers issue, quotes their
>> "Manager Engineering", stating the following:
>>
>> ============== START OF QUOTE =================
>> This is due to the configuration out of the box for ActiveMQ - its very
>> straightforward for ActiveMQ to handle the same load as RabbitMQ.
>> There are some significant benefits in using ActiveMQ over RabbitMQ.
>> ActiveMQ has no limit on the depth (number of messages) in a Queue -
>> other than disk space. RabbitMQ runs out of memory.
>> Also - there's performance benefits too - although sending messages can
>> be a lot faster to RabbitMQ (this is due to RabbitMQ caching messages in
>> memory) - consuming messages is considerably slower.
>> In reality, RabbitMQ is just hype ware - not really suitable for
>> production scenarios. Although its getting a lot of traction, it only
>> suitable for cases where consumers will always keep up with producers.
>> =============== END OF QUOTE ======================
>>
>> Now that's a pretty scary assesment there. "Hype ware"... Perhaps RabbitMQ's
>> engineers can reply to this, and reassure us that our shift in favour of
>> RabbitMQ is a sound decision? (we plan to deploy it on systems with plenty
>> gigs of RAM).
>>
>> Kind regards, Roberto
>> ________________________________
>> What can you do with the new Windows Live? Find out
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
>>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>



From aagarwal at yellowpages.com  Sat Aug 29 18:23:53 2009
From: aagarwal at yellowpages.com (Anuj Agarwal)
Date: Sat, 29 Aug 2009 10:23:53 -0700 (PDT)
Subject: [rabbitmq-discuss]  Consumer does not get error about queue dying
Message-ID: <25204723.post@talk.nabble.com>


Hi,

So i realize that a queue's data only lives on the rabbit broker that
the queue was created in. It seems like if you have one consumer
connected to that broker and reading from that queue and another
consumer connected to a different broker in the same cluster and reading
from that same queue, then it will not be notified of the error if the
broker holding the queue's msgs is stopped.

Here's the scenario in detail -
 * rabbit1 & rabbit2 make up a cluster.
 * Publisher P connects to default amq.direct exchange in rabbit1 and
starts writing messages
 * Consumer A creates queue named Queue1 in rabbit2 and starts
subscribing to above messages
 * Consumer B connects same queue Queue1 in rabbit1 and also starts
subscribing So now, A & B receive messages in a round-robin manner. If i
stop the
rabbit2 node, then Consumer A encounters an exception but Consumer B
does not. I'm using the standard BasicConsume code and calling Dequeue
in a loop.

Is there a way for consumer B to detect this error so i can add code to
recover from it? I saw some threads about a heartbeat functionality but
it seemed like its currently broken. Is that true?

thanks...



-- 
View this message in context: http://www.nabble.com/Consumer-does-not-get-error-about-queue-dying-tp25204723p25204723.html
Sent from the RabbitMQ mailing list archive at Nabble.com.




From aagarwal at yellowpages.com  Sat Aug 29 18:24:46 2009
From: aagarwal at yellowpages.com (Anuj Agarwal)
Date: Sat, 29 Aug 2009 10:24:46 -0700 (PDT)
Subject: [rabbitmq-discuss]  Setting up WAN cluster vs using Shovel
Message-ID: <25204733.post@talk.nabble.com>




Hi,

We plan to use RabbitMQ in 2 of our data centers. We're thinking of
setting up a local cluster in each data center and a 'WAN cluster' which
includes 2 nodes from each data center for applications that need to
publish msgs that should be retrievable from either data center.

Private address space is the same across the 2 co-los (same domain) so
configuring such a cluster is not an issue. Does this solution have
drawbacks as opposed to using the Shovel addon? This seems much simpler
to use than Shovel, but are how robust is the cluster against data
connection hiccups between the nodes?

thanks..


-- 
View this message in context: http://www.nabble.com/Setting-up-WAN-cluster-vs-using-Shovel-tp25204733p25204733.html
Sent from the RabbitMQ mailing list archive at Nabble.com.




From jasonjwwilliams at gmail.com  Sat Aug 29 22:00:34 2009
From: jasonjwwilliams at gmail.com (Jason J. W. Williams)
Date: Sat, 29 Aug 2009 15:00:34 -0600
Subject: [rabbitmq-discuss] Is RabbitMQ indeed "hype ware"?
In-Reply-To: <167204d20908291019m17ac2446j4f1f7fb9777a49cf@mail.gmail.com>
References: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>
	<af1bce590908290826n535e4985yd2b3cfbd55bc83c1@mail.gmail.com>
	<167204d20908291019m17ac2446j4f1f7fb9777a49cf@mail.gmail.com>
Message-ID: <609629CE-18BE-4DC3-A6A2-FD3C4E531073@gmail.com>

RMQ is definitely not hype ware. If you Google around on ActiveMQ  
you'll find more than a few horror stories of AMQ dropping messages  
regularly. That's what drove us to find something else...that  
something ended up bring Rabbit.

Also, if you have to queue to disk to keep from keeling over, there's  
something very inappropriate about the sizing of your setup. Not to  
say disk queuing doesn't have a place, but if you're so overloaded  
that it's required you're not that long from AMQ seizing up too due to  
inability to service requests because of disk latency.

Just my two cents.

-J

Sent via iPhone

On Aug 29, 2009, at 11:19, Alexis Richardson <alexis.richardson at gmail.com 
 > wrote:

> Hi
>
> Thanks everyone for these emails.
>
> To further Ben's excellent response, if anyone has any use cases or
> tests where they are not seeing what they expect, please do let us
> know as much as you can about what you are seeing.  If you can post
> any test harnesses on the web, eg on github, then everyone can try to
> replicate what you are seeing.  In the case of a messaging system like
> RabbitMQ or ActiveMQ, the most interesting production behaviours may
> take time to observe so *any* concrete tests to replicate unusual
> behaviour are *very* helpful.
>
> Cheers,
>
> alexis
>
>
>
>
> On Sat, Aug 29, 2009 at 8:26 AM, Gavin M. Roy<gmr at myyearbook.com>  
> wrote:
>> While I've not completed my migration from ActiveMQ to RabbitMQ,  
>> every
>> indication is that it is faster in my work load.  I do not have
>> thousands of consumers, but I do have thousands of clients  
>> connecting,
>> enqueueing and disconnecting.
>>
>> In this scenario, connection times in ActiveMQ increase over the
>> course of days, starting at 4ms and if left unattended to, increase
>> to100's of ms.  The only way to resolve this is to restart the
>> ActiveMQ broker which is disruptive and an operational issue for us.
>>
>> In addition, load tests show that ActiveMQ slows considerably with
>> steady enqueue with no dequeue, over the course of 1000's of  
>> messages.
>>  I ran this same test with RabbitMQ runs steady until it runs out of
>> memory which for my tests was around 2M messages.
>>
>> Regards,
>>
>> Gavin
>>
>> On Sat, Aug 29, 2009 at 10:20 AM, Dikkie Hagel<dikkiehagel at hotmail.com 
>> > wrote:
>>> Hello,
>>>
>>> I am in the process of setting up messaging middleware for a  
>>> webbased
>>> platform which should be able to handle millions producers/ 
>>> consumers.
>>>
>>> We've started our development with ActiveMQ. Everything seemed to  
>>> work fine
>>> until we started connecting with 1000 consumers to a single topic.  
>>> ActiveMQ
>>> could not handle this at all, complaining about "too many open  
>>> filehandles".
>>> Others seem to have encountered this same issue as well (see  
>>> second life's
>>> review), but we've not been able to google a solution. That was a  
>>> major
>>> showstopper, and made us conclude that something was terribly  
>>> wrong with the
>>> architecture of this software, which made it unsuitable for our  
>>> intended
>>> purpose.
>>>
>>> We then turned to RabbitMQ, and after fixing the Perl and  
>>> ActionScript AMQP
>>> interfaces (http://github.com/joodie) we now almost have a working  
>>> prototype
>>> for our environment, ready for some first performance tests.
>>>
>>> Now I just received a mail from the ActiveMQ/Fuse support team,  
>>> which in
>>> reply to my report to them about the 1000 consumers issue, quotes  
>>> their
>>> "Manager Engineering", stating the following:
>>>
>>> ============== START OF QUOTE =================
>>> This is due to the configuration out of the box for ActiveMQ - its  
>>> very
>>> straightforward for ActiveMQ to handle the same load as RabbitMQ.
>>> There are some significant benefits in using ActiveMQ over RabbitMQ.
>>> ActiveMQ has no limit on the depth (number of messages) in a Queue -
>>> other than disk space. RabbitMQ runs out of memory.
>>> Also - there's performance benefits too - although sending  
>>> messages can
>>> be a lot faster to RabbitMQ (this is due to RabbitMQ caching  
>>> messages in
>>> memory) - consuming messages is considerably slower.
>>> In reality, RabbitMQ is just hype ware - not really suitable for
>>> production scenarios. Although its getting a lot of traction, it  
>>> only
>>> suitable for cases where consumers will always keep up with  
>>> producers.
>>> =============== END OF QUOTE ======================
>>>
>>> Now that's a pretty scary assesment there. "Hype ware"... Perhaps  
>>> RabbitMQ's
>>> engineers can reply to this, and reassure us that our shift in  
>>> favour of
>>> RabbitMQ is a sound decision? (we plan to deploy it on systems  
>>> with plenty
>>> gigs of RAM).
>>>
>>> Kind regards, Roberto
>>> ________________________________
>>> What can you do with the new Windows Live? Find out
>>> _______________________________________________
>>> rabbitmq-discuss mailing list
>>> rabbitmq-discuss at lists.rabbitmq.com
>>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>>
>>>
>>
>> _______________________________________________
>> rabbitmq-discuss mailing list
>> rabbitmq-discuss at lists.rabbitmq.com
>> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss



From matthew at lshift.net  Sat Aug 29 22:32:15 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Sat, 29 Aug 2009 22:32:15 +0100
Subject: [rabbitmq-discuss] Is RabbitMQ indeed "hype ware"?
In-Reply-To: <609629CE-18BE-4DC3-A6A2-FD3C4E531073@gmail.com>
References: <SNT109-W438BE1F113F27C64CB34BCA9F40@phx.gbl>
	<af1bce590908290826n535e4985yd2b3cfbd55bc83c1@mail.gmail.com>
	<167204d20908291019m17ac2446j4f1f7fb9777a49cf@mail.gmail.com>
	<609629CE-18BE-4DC3-A6A2-FD3C4E531073@gmail.com>
Message-ID: <20090829213215.GD6005@wellquite.org>

On Sat, Aug 29, 2009 at 03:00:34PM -0600, Jason J. W. Williams wrote:
> Also, if you have to queue to disk to keep from keeling over, there's  
> something very inappropriate about the sizing of your setup. Not to  
> say disk queuing doesn't have a place, but if you're so overloaded  
> that it's required you're not that long from AMQ seizing up too due to  
> inability to service requests because of disk latency.

This raises some interesting points.

A disk-backed queue is always going to be slower than a queue held
solely in memory. Unless you substantially underclock your RAM.

If you have a low-rate queue which you want to run such that messages
in it are stored on disk so that they can be recovered in the event of
failure, then that's one good use case of a disk queue.

If you have a very bursty, frequently idle, but sometimes very busy
producer and bunch of consumers that can consume at a steady rate, then
this is potentially another good use - the disk queue will ensure that
messages don't need to be held in memory (coming soon in Rabbit 1.7!),
so the broker won't explode (provided the burst isn't so big that it
runs out of RAM before messages can be written out to disk), and can
deliver messages to the consumers as they are able to handle them.
Obviously, whether this works depends on just how bursty the producers
are, how much data they try to flood the broker with and the rate the
broker (and consumers) can handle that data at.

But the simple fact is that if you have a producer which is pumping out
a steady stream of above 70MB/s, you're beyond most hard discs at that
point so you need to start looking at RAID 0 or other more exotic
solutions. At the end of the day, no matter how smart the programmers
are, if the bottleneck is your harddisc, the broker *won't keep up*.
Also note that writing messages out to disk is a substantially
sequential activity.

At this point, mechanics of hard discs and the cost of operating system
calls read their heads. Fancy SSDs *still* only write sequentially at up
to 70MB/s and in practise, this rate drops off once the drive has been
filled once over. High quality rotating media has higher sequential
write rates. (That said, SSD optimisation seems to be a trade off
between sequential write rate, and random write latency. There are some
drives that can write sequentially very quickly, but are very very slow
at small random writes).

It's no surprise that the easiest way of saturating a disk is to write
in page-size units to it. If your messages happen to be that size, then
good for you. If your messages are very small, then the cost of
thousands of OS calls to write small messages is going to be your
bottleneck and you will struggle to saturate disks (yes, batching writes
helps here, but eg if you're doing transactions and are really unlucky,
each transaction commit /can/ result in an fsync. This is not going to be
fast).

Matthew



From 0x6e6562 at gmail.com  Sat Aug 29 23:04:39 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sat, 29 Aug 2009 23:04:39 +0100
Subject: [rabbitmq-discuss] Consumer does not get error about queue dying
In-Reply-To: <25204723.post@talk.nabble.com>
References: <25204723.post@talk.nabble.com>
Message-ID: <8595E04B-3A6A-4514-9751-63A1B1C821E4@gmail.com>

Anuj,

On 29 Aug 2009, at 18:23, Anuj Agarwal <aagarwal at yellowpages.com> wrote:

>
> Hi,
>
> So i realize that a queue's data only lives on the rabbit broker that
> the queue was created in. It seems like if you have one consumer
> connected to that broker and reading from that queue and another
> consumer connected to a different broker in the same cluster and  
> reading
> from that same queue, then it will not be notified of the error if the
> broker holding the queue's msgs is stopped.

This is true.

Unfortutenately this scenario was not catered for in the original  
spec, i.e. if a queue disappears there is no way to notify consumers  
of this queue. This semantic is being addressed from a protocol  
perspective, but for the meantime, this is how Rabbit will behave.

HTH,

Ben



From 0x6e6562 at gmail.com  Sun Aug 30 10:18:18 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sun, 30 Aug 2009 10:18:18 +0100
Subject: [rabbitmq-discuss] Setting up WAN cluster vs using Shovel
In-Reply-To: <25204733.post@talk.nabble.com>
References: <25204733.post@talk.nabble.com>
Message-ID: <269388e30908300218m66726716v7a020f3a3b67acea@mail.gmail.com>

Anuj,

On Sat, Aug 29, 2009 at 6:24 PM, Anuj Agarwal<aagarwal at yellowpages.com> wrote:
> We plan to use RabbitMQ in 2 of our data centers. We're thinking of
> setting up a local cluster in each data center and a 'WAN cluster' which
> includes 2 nodes from each data center for applications that need to
> publish msgs that should be retrievable from either data center.
> Private address space is the same across the 2 co-los (same domain) so
> configuring such a cluster is not an issue. Does this solution have
> drawbacks as opposed to using the Shovel addon? This seems much simpler
> to use than Shovel, but are how robust is the cluster against data
> connection hiccups between the nodes?

Interesting. I don't know if anybody has run a Rabbit cluster split
across a WAN, and whilst it can be done, my first thought would be
that there is little sophistication for handling network partitions in
Rabbit. (Having said that, I don't know if running a Rabbit cluster on
EC2 counts as running over a WAN)

One attraction in splitting the cluster to make messages available to
consumers in both data centers is that when a client creates a queue,
it is local to the node that it connected to and hence you could keep
most of your network traffic local because the Rabbit handles the
intra-node communication on a per-message basis, i.e. it will only
ship one copy of a message between nodes even if you have multiple
bound queues.

This obviously leads to the downside of queues not reachable due to
partitioning and hence you will miss messages.

In this scenario, shovel *may* be less afflicted by partitioning due
to the fact that it could just queue up messages in the event of a
split brain and then replay them once coherency has been restored.
However there are probably some downsides to it such as the extra
configuration you'd have to do yourself. Also, I wouldn't say that the
original shovel implementation is of (dare I say) production quality.
Furthermore, I'm not aware of anybody that has actually used it in
anger in a WAN (although maybe there are some adaptations).

Another alternative to both of these schemes is to run Rabbit in one
data center and just have consumers connect over the WAN.

HTH,

Ben



From 0x6e6562 at gmail.com  Sun Aug 30 10:22:36 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Sun, 30 Aug 2009 10:22:36 +0100
Subject: [rabbitmq-discuss] Consumer does not get error about queue dying
In-Reply-To: <8595E04B-3A6A-4514-9751-63A1B1C821E4@gmail.com>
References: <25204723.post@talk.nabble.com>
	<8595E04B-3A6A-4514-9751-63A1B1C821E4@gmail.com>
Message-ID: <269388e30908300222q36f1e937se3546444775ec98a@mail.gmail.com>

Anuj,

On Sat, Aug 29, 2009 at 11:04 PM, Ben Hood<0x6e6562 at gmail.com> wrote:
> Unfortutenately this scenario was not catered for in the original spec, i.e.
> if a queue disappears there is no way to notify consumers of this queue.
> This semantic is being addressed from a protocol perspective, but for the
> meantime, this is how Rabbit will behave.

I forgot to mention that efforts are underway, albeit slowly, to
expose lifecycle events of things such as queues, bindings and
exchanges. This may provide a non-AMQP solution for notifying
subscribers that their queue has disappeared. However, there is no ETA
on this feature.

Ben



From josh at gebaschtel.ch  Sun Aug 30 14:03:32 2009
From: josh at gebaschtel.ch (Josh Geisser)
Date: Sun, 30 Aug 2009 15:03:32 +0200
Subject: [rabbitmq-discuss] beginners question about RabbitMQ over HTTP
Message-ID: <9C37154E143FE14CBA656B2D2232745F0327EEBB677B@popeye.gebaschtel.bnet>

Hi all

My goal is to connect my consumers and providers over http to the RabbitMQ (fw/proxy between clients and queue), and after a few hours of googeling I'm more confused than before.

I was kind of able to get the rabbitmq-mochiweb running, but didn't find any examples how to use/verify it with amqplib/python

Can someone pinpoint me whether this is already possible, and how to start?

Cheers & thanks
Josh 




From cremes.devlist at mac.com  Sun Aug 30 21:13:26 2009
From: cremes.devlist at mac.com (Chuck Remes)
Date: Sun, 30 Aug 2009 15:13:26 -0500
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <20090828230109.GA4507@wellquite.org>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
	<15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
	<20090828230109.GA4507@wellquite.org>
Message-ID: <BE40AB7E-4963-434F-BB33-6122C5637B5E@mac.com>


On Aug 28, 2009, at 6:01 PM, Matthew Sackman wrote:

> On Fri, Aug 28, 2009 at 05:38:58PM -0500, Chuck Remes wrote:
>> I don't have an answer for you but I do have a few things to point  
>> out.
>>
>> 1. RabbitMQ is written in Erlang. I am pretty sure the latest stable
>> releases are still a single-threaded process (though internally the
>> application uses hundreds or thousands of "green" threads). Therefore
>> you won't get much throughput increase by running on a larger multi-
>> core box.
>
> Erlang has supported SMP for several releases, I believe first gaining
> support about 4 years ago. Initially, yes, we found that very early
> versions of Rabbit ran slower with the SMP support turned on that off.
> However, Erlang's support for SMP has improved substantially over the
> years and Rabbit benefits substantially from Erlang's SMP support.

I don't disbelieve you but in my testing I have never seen a rabbit  
process go above 100%. This is using Erlang 13B and the "generic" unix  
rabbitmq 1.5.5 under OSX. Perhaps the defaults disable SMP?

cr




From matthew at lshift.net  Sun Aug 30 22:14:16 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Sun, 30 Aug 2009 22:14:16 +0100
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <BE40AB7E-4963-434F-BB33-6122C5637B5E@mac.com>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
	<15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
	<20090828230109.GA4507@wellquite.org>
	<BE40AB7E-4963-434F-BB33-6122C5637B5E@mac.com>
Message-ID: <20090830211416.GA16933@wellquite.org>

Hi Chuck,

On Sun, Aug 30, 2009 at 03:13:26PM -0500, Chuck Remes wrote:
> I don't disbelieve you but in my testing I have never seen a rabbit  
> process go above 100%. This is using Erlang 13B and the "generic" unix  
> rabbitmq 1.5.5 under OSX. Perhaps the defaults disable SMP?

I don't think we're doing anything special under OS X to disable SMP
support.

http://developer.studivz.net/tag/erlang/ has some information about
recent developments in the Erlang interpreter for SMP support.

It's possible that I'm overstating the contribution of SMP to Rabbit,
but I've definitely seen Rabbit use more than 1 CPU under Linux.

Just a quick test - 100 queues, one producer, default direct exchange,
fire in messages to every queue in turn. Output of top:

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                               
29500 matthew   20   0  805m 542m 2284 S  203 13.7   1:23.53 beam.smp

and it sits there at > 190% CPU for most of the test. This is on a
quad-core - one core is totally maxed out with the producer. Having run
this test for a little while, my load average is now sitting at 3.1,
which makes sense.

So no, we're not scaling linearly with the number of cores available,
and we will continue to try and improve this. But we definitely are
taking at least some advantage of parallel hardware. Without wishing to
bash OS X unnecessarily, it is known to fair badly in multithreaded
testing - I seem to recall a lot of multithreaded MySQL tests
demonstrating OS X really performs badly, due (hazy memory) to its
threads actually being quite heavy weight - IIRC, they took the
lightweight Mach threads, and wrapped round them several times, ending
up with something very heavy and performing badly. However, the reports
I'm thinking of definitely happened several years ago, and I wouldn't be
surpised if Apple have improved things since, assuming they took some
time out from polishing pretty buttons! ;)

Matthew



From mchruszcz at gmail.com  Mon Aug 31 09:29:06 2009
From: mchruszcz at gmail.com (Michal Chruszcz)
Date: Mon, 31 Aug 2009 10:29:06 +0200
Subject: [rabbitmq-discuss] Priorities support in RabbitMQ
In-Reply-To: <20090828154804.GA22219@mrnibble.lshift.net>
References: <A338BFF3-508E-460F-8558-7A0FCFECFFAC@gmail.com>
	<20090828154804.GA22219@mrnibble.lshift.net>
Message-ID: <D84D84FB-2D98-4FBE-853B-DB1D722D9D68@gmail.com>

On Aug 28, 2009, at 5:48 PM, Matthew Sackman wrote:

> Hi Michal,
>
> On Fri, Aug 28, 2009 at 05:41:43PM +0200, Michal Chruszcz wrote:
>> I've been analyzing support of message priorities by RabbitMQ and the
>> only
>> information I've found is the document describing compatibility with
>> AMQP
>> specification (http://www.rabbitmq.com/specification.html), which  
>> states
>> that "server MUST implement at least 2 priority levels for basic
>> messages"
>> and RabbitMQ currently is in the stage of "planned". I assume there  
>> is
>> no
>> support for priorities in RabbitMQ currently. However could any one
>> tell me
>> something more about this? When it possibly could be included in
>> official
>> release? I'd really appreciate knowing more details on this as it's a
>> feature probably desired by many.
>
> Yes, you're right, RabbitMQ does not support message priorities at all
> at the moment, and yes, it is a fairly oft requested feature. We do  
> have
> plans to add support for it, but we don't have a release target for it
> just yet. I'm afraid I don't have any more information that than -
> basically: yes, we know people want it; yes, it's on our todo list;  
> no,
> we don't know when it'll get done.


Thank you for the answer. This makes things quite clear. Then I just  
have to keep my fingers crossed and hope it'll be supported as soon as  
possible.

Michal Chruszcz
mchruszcz at gmail.com
mobile: +48 607 620 771
phone: +48 22 849 30 26




From matthias at lshift.net  Mon Aug 31 09:50:31 2009
From: matthias at lshift.net (Matthias Radestock)
Date: Mon, 31 Aug 2009 09:50:31 +0100
Subject: [rabbitmq-discuss] Priorities support in RabbitMQ
In-Reply-To: <D84D84FB-2D98-4FBE-853B-DB1D722D9D68@gmail.com>
References: <A338BFF3-508E-460F-8558-7A0FCFECFFAC@gmail.com>	<20090828154804.GA22219@mrnibble.lshift.net>
	<D84D84FB-2D98-4FBE-853B-DB1D722D9D68@gmail.com>
Message-ID: <4A9B8ED7.5000007@lshift.net>

Michal,

Michal Chruszcz wrote:
> On Aug 28, 2009, at 5:48 PM, Matthew Sackman wrote:
>> RabbitMQ does not support message priorities at all
> 
> Thank you for the answer. This makes things quite clear. Then I just  
> have to keep my fingers crossed and hope it'll be supported as soon as  
> possible.

What do you want to use priorities for? Depending on your use case there 
could be some fairly straightforward approaches to emulate priorities 
with the current RabbitMQ releases.


Regards,

Matthias.



From mchruszcz at gmail.com  Mon Aug 31 12:34:37 2009
From: mchruszcz at gmail.com (Michal Chruszcz)
Date: Mon, 31 Aug 2009 13:34:37 +0200
Subject: [rabbitmq-discuss] Priorities support in RabbitMQ
In-Reply-To: <4A9B8ED7.5000007@lshift.net>
References: <A338BFF3-508E-460F-8558-7A0FCFECFFAC@gmail.com>	<20090828154804.GA22219@mrnibble.lshift.net>
	<D84D84FB-2D98-4FBE-853B-DB1D722D9D68@gmail.com>
	<4A9B8ED7.5000007@lshift.net>
Message-ID: <85E27B09-0AE2-4D0F-9558-9CF4D97E763E@gmail.com>

On Aug 31, 2009, at 10:50 AM, Matthias Radestock wrote:

> Michal,
>
> Michal Chruszcz wrote:
>> On Aug 28, 2009, at 5:48 PM, Matthew Sackman wrote:
>>> RabbitMQ does not support message priorities at all
>> Thank you for the answer. This makes things quite clear. Then I  
>> just  have to keep my fingers crossed and hope it'll be supported  
>> as soon as  possible.
>
> What do you want to use priorities for? Depending on your use case  
> there could be some fairly straightforward approaches to emulate  
> priorities with the current RabbitMQ releases.


Think so? I've been looking for *something* that could enable me to  
control order of message processing. Say I have distributed  
asynchronous data processing service, which uses RabbitMQ for queueing  
tasks, and would like to prioritize them depending on  data volume  
(tiny packages are processed first). Priorities seemed to be perfect  
solution, but unfortunately later I realized it's not supported yet.

Michal Chruszcz
mchruszcz at gmail.com
mobile: +48 607 620 771
phone: +48 22 849 30 26




From holger.hoffstaette at googlemail.com  Mon Aug 31 13:19:59 2009
From: holger.hoffstaette at googlemail.com (=?ISO-8859-1?Q?Holger_Hoffst=E4tte?=)
Date: Mon, 31 Aug 2009 14:19:59 +0200
Subject: [rabbitmq-discuss] Priorities support in RabbitMQ
In-Reply-To: <85E27B09-0AE2-4D0F-9558-9CF4D97E763E@gmail.com>
References: <A338BFF3-508E-460F-8558-7A0FCFECFFAC@gmail.com>	<20090828154804.GA22219@mrnibble.lshift.net>	<D84D84FB-2D98-4FBE-853B-DB1D722D9D68@gmail.com>	<4A9B8ED7.5000007@lshift.net>
	<85E27B09-0AE2-4D0F-9558-9CF4D97E763E@gmail.com>
Message-ID: <4A9BBFEF.5050809@googlemail.com>

Michal Chruszcz wrote:
> control order of message processing. Say I have distributed  
> asynchronous data processing service, which uses RabbitMQ for queueing  
> tasks, and would like to prioritize them depending on  data volume  
> (tiny packages are processed first). Priorities seemed to be perfect  
> solution, but unfortunately later I realized it's not supported yet.

It is a common misconception that priorities alone can be used to do this
"properly" - it will only work well if you are accidentally lucky with
your ingress patterns or really don't care about a total lack of
predictable processing latency for larger messages. Since Rabbit does not
page to disk yet, preferring small messages might even make it run out of
memory *sooner* as more and more large messages are held back. Do not
underestimate the effectiveness of randomized workloads. :)
Explicitly moding this with multiple queues and multiple consumers is much
more likely to result in better (both predictable and controllable)
scalability and a well-balanced throughput for both small and large
messages. Spin up multiple consumers for small messages (keeping those
cores busy and even hopefully reducing per-message latency), have one
low-priority consumer chew on larger tasks in the background or even on
another machine. It also gives you the option of having different
durability/persistence options for different priorities.

-h



From majek04 at gmail.com  Mon Aug 31 14:09:50 2009
From: majek04 at gmail.com (majek04)
Date: Mon, 31 Aug 2009 15:09:50 +0200
Subject: [rabbitmq-discuss] Priorities support in RabbitMQ
In-Reply-To: <85E27B09-0AE2-4D0F-9558-9CF4D97E763E@gmail.com>
References: <A338BFF3-508E-460F-8558-7A0FCFECFFAC@gmail.com>
	<20090828154804.GA22219@mrnibble.lshift.net>
	<D84D84FB-2D98-4FBE-853B-DB1D722D9D68@gmail.com>
	<4A9B8ED7.5000007@lshift.net>
	<85E27B09-0AE2-4D0F-9558-9CF4D97E763E@gmail.com>
Message-ID: <3bb0d9710908310609u54d811e5lcabf6ed4e6b5ee59@mail.gmail.com>

On Mon, Aug 31, 2009 at 13:34, Michal Chruszcz<mchruszcz at gmail.com> wrote:
> Think so? I've been looking for *something* that could enable me to
> control order of message processing. Say I have distributed
> asynchronous data processing service, which uses RabbitMQ for queueing
> tasks, and would like to prioritize them depending on ?data volume
> (tiny packages are processed first). Priorities seemed to be perfect
> solution, but unfortunately later I realized it's not supported yet.

Some people just create many queues, one for each priority.
Than they poll queues in proper order, so that the higher priority
queue is always served before low priority one.
Will that work for you?

Marek Majkowski



From digitalwarfare at gmail.com  Mon Aug 31 17:10:02 2009
From: digitalwarfare at gmail.com (Suhail Doshi)
Date: Mon, 31 Aug 2009 09:10:02 -0700
Subject: [rabbitmq-discuss] RabbitMQ + MySQL
In-Reply-To: <3b949f090908131246tbb4e3cah52848fe1e6f52dbe@mail.gmail.com>
References: <376f3e6f0908131225p2181c637ib33865f4033fcad5@mail.gmail.com> 
	<3b949f090908131246tbb4e3cah52848fe1e6f52dbe@mail.gmail.com>
Message-ID: <376f3e6f0908310910wb8fb1fft75c93d6693d4568@mail.gmail.com>

Ask,
READ-COMMITED did not seem to work, any other ideas? I don't wish to change
my engine to MyISAM =)

Suhail

On Thu, Aug 13, 2009 at 12:46 PM, Jason J. W. Williams <
jasonjwwilliams at gmail.com> wrote:

> Depending on your requirements MyISAM can be a better choice. The
> table-wide locks are lightning fast, and can work better in a high
> concurrency insert environment than InnoDB. But you lose ACID so you
> have to make sure you're replicating to another box for data
> integrity.
>
> -J
>
> On Thu, Aug 13, 2009 at 1:25 PM, Suhail Doshi<digitalwarfare at gmail.com>
> wrote:
> > Anyone using rabbitmq with lots of consumers along with MySQL and hitting
> > dead locks if you run too many consumers, any smart way to deal with
> that?
> > My theory was sharding on some distinct id and sending only some data to
> > specific consumers based on an id...
> > Ideas? Suggestions?
> >
> > _______________________________________________
> > rabbitmq-discuss mailing list
> > rabbitmq-discuss at lists.rabbitmq.com
> > http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
> >
> >
>



-- 
http://mixpanel.com
Blog: http://blog.mixpanel.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090831/dd75fd1f/attachment.htm 

From 0x6e6562 at gmail.com  Mon Aug 31 17:28:46 2009
From: 0x6e6562 at gmail.com (Ben Hood)
Date: Mon, 31 Aug 2009 17:28:46 +0100
Subject: [rabbitmq-discuss] Problem with multiple subscribers on the
	same queue
In-Reply-To: <1590A5C25AF3E9438F4232897EEFA514AB1496@EXCHSI001.AD.MLP.COM>
References: <4A929CFC.2060305@lshift.net>
	<269388e30908240715s99dc065u25dde1374f4be186@mail.gmail.com>
	<1590A5C25AF3E9438F4232897EEFA514AB1496@EXCHSI001.AD.MLP.COM>
Message-ID: <269388e30908310928s2979353fm1711062f4a2c6413@mail.gmail.com>

Franck,

On Fri, Aug 28, 2009 at 2:37 AM, Boisson, Franck<Franck.Boisson at mlp.com> wrote:
>> So if that is the case, can't you use a topic exchange to only make
>> exact matches - i.e. when you construct your routing table, you just
>> make sure that you don't have bindings that cause a message to be
>> multicasted to more that one queue? Or as an alternative, since the
>> message type is a discriminating factor, why not make it out to be a
>> first class endpoint and send each different message type directly to
>> a well-known queue whose consumers only process that message type?
>
> Ok but here is something I do not know how to do. How can I make sure
> that I don't have bindings that cause a message to be multicasted to
> more than one queue when I bind a new queue?

You could use read ACLs that only permit certain users to creating
bindings to a certain exchange - this would limit anybody's ability to
multicast messages. But you'd still have to do it manually.

> For you second proposition, I believe you assume that my subscribing
> clients know the exact scope off all my publishers in order to address
> the good one. Isn't it?

Yes.

> Another question I have is: How can I monitor a queue? I would like to
> know when a queue goes down.

You can't via the protocol ATM. Right now you can use the rabbitmqctl
interface.  BQL will be available as a plugin in the next release, but
this just gives you similar semantics to rabbitmqctl.

> For the moment, all my subscribers clients create their own queue when
> they start (let's say subscribe.A#PING for client A and subscribe.B#PING
> for client B) and they give these queue ids to the publishing client.
> After that, nothing is done on these queues but the publishing client is
> watching at them (through a queueDeclare with passive=true) and if a
> queues goes down, the publishing client consider that the subscribing
> client has shutted-down and it clean his internal cache in as a
> consequence.

Yes, this whole area is an issue. The wheels are in motion to
introduce some kind of presence notification, but this requires a lot
more thought and development and hence there's no ETA.

For now what you can do from a sending perspective is to set the
mandatory flag - this will result in a return if the message could not
be routed.

Cheers,

Ben

PS I've looked at the mailman admin to send if there is a pending
request from you, which there isn't. Can you maybe send the rejection
message please?



From pekenney at gmail.com  Mon Aug 31 17:40:24 2009
From: pekenney at gmail.com (Patrick Kenney)
Date: Mon, 31 Aug 2009 09:40:24 -0700
Subject: [rabbitmq-discuss] Error: RabbitMQ.Client.ConnectionFactory.cs -
	"Only one usage of each socket address (protocol/network
	address/port) is normally permitted"
Message-ID: <3a5f03340908310940p78f0453dr87ed981fb787747f@mail.gmail.com>

As far as I can tell at the moment; this error is being thrown by the call
to ""FollowRedirectChain" in RabbitMQ.Client.ConnectionFactory.cs ...

its being caught in the exception2 catch in FollowRedirectChain...

I have not been able to find anything specific to rabbitmq with others
having this particular error thus far but; I found the following ...
http://blogs.msdn.com/dgorti/archive/2005/09/18/470766.aspx ( tried the
various suggestions and it made no difference)

seemed to closely resemble the condition, as I am sending 4000 copies of the
same message to the following method...

        public void PublishMessage(string pstrExchangeName, string
pstrReturnKey, string pstrXml)
        {
            try
            {
                using (IConnection conn = new
ConnectionFactory().CreateConnection(this.rabbitmqHost))
                {
                    using (IModel ch = conn.CreateModel())
                    {
                        IBasicProperties props = ch.CreateBasicProperties();
                        IStreamMessageBuilder b = new
StreamMessageBuilder(ch);

                        byte[] bytes = Encoding.UTF8.GetBytes(pstrXml);
                        b.WriteBytes(bytes);
                        ch.BasicPublish(pstrExchangeName, pstrReturnKey,
null, bytes);
                    }
                }
            }

            catch (Exception ex)
            {
                throw ex;
            }
        }

it consistently fails pretty close to the 4000' th... iteration 3959 etc...

I am thinking I am hitting some kind of configurable threshold in the
RabbitMQ Client  and or RabbitMQ ServiceModel... but have been unable thus
far to pin it down...

Another interesting thing is that this exact code works unchanged on a much
older, slower Pentium IV 2ghz, 2gig ram on windows xp pro vs. windows server
2003 enterprise  sp2... quad core xeon, 4gig, etc...

and each individual message size is about 400k

thanks in advance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090831/c7446426/attachment.htm 

From anktth at gmail.com  Mon Aug 31 19:28:28 2009
From: anktth at gmail.com (amith kashyap)
Date: Mon, 31 Aug 2009 23:58:28 +0530
Subject: [rabbitmq-discuss] Transaction management
Message-ID: <423d2cbb0908311128m6c59932bv700a0ff82651b2a0@mail.gmail.com>

Hi,

Can RabbitMQ act as the transaction manager in a transaction ? or just as a
participant ?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090831/8982f4e0/attachment.htm 

From charity at lindenlab.com  Mon Aug 31 20:25:07 2009
From: charity at lindenlab.com (Charity Majors)
Date: Mon, 31 Aug 2009 12:25:07 -0700
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <20090829104432.GA6005@wellquite.org>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
	<15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
	<20090828230109.GA4507@wellquite.org>
	<f7541d9c0908281651g36073d79x561b99ea118ed2d3@mail.gmail.com>
	<20090829104432.GA6005@wellquite.org>
Message-ID: <f7541d9c0908311225q4ee47520g55435d388500a6d8@mail.gmail.com>

On Sat, Aug 29, 2009 at 3:44 AM, Matthew Sackman<matthew at lshift.net> wrote:
> Hi Charity,
>
> On Fri, Aug 28, 2009 at 04:51:19PM -0700, Charity Majors wrote:
>> We aren't acking at all.
>
> Err, this seems odd. Do you mean that your consumers set noAck to true
> when setting up the subscription to the queue? If you're not, and you're
> not explicitly acking then Rabbit will be keeping a copy of the message
> in memory all the time, because it won't discard messages until it
> receives an ack from the consumer for the msg.

I'm a little confused about this sentence here, but no, I'm not
explicitly acking anything.  I have no_ack set to True, and no durable
queues or persistent delivery mode, so I shouldn't be storing anything
in memory or disk.  It doesn't appear as though I am.

> Yes, I think this backs up my theory - if a null consumer isn't going
> any faster, then I would definitely point the finger at the producers.
> How big are the messages you're sending? If you're all on the same box,
> I find this a bit surprising - I can push above 400M*Bytes*/s over
> localhost loopback to and from Rabbit.

Yeah, this makes sense.  Let me try taking RMQ out of the equation
completely and seeing how fast the producers are producing messages.

Thanks.



From matthew at lshift.net  Mon Aug 31 20:37:42 2009
From: matthew at lshift.net (Matthew Sackman)
Date: Mon, 31 Aug 2009 20:37:42 +0100
Subject: [rabbitmq-discuss] direct queue throughput
In-Reply-To: <f7541d9c0908311225q4ee47520g55435d388500a6d8@mail.gmail.com>
References: <f7541d9c0908281516n3e6545c1m8cbe7cd611af7e0@mail.gmail.com>
	<15FDFBBA-B8E0-4FBD-BBA1-7BC516A46CD4@mac.com>
	<20090828230109.GA4507@wellquite.org>
	<f7541d9c0908281651g36073d79x561b99ea118ed2d3@mail.gmail.com>
	<20090829104432.GA6005@wellquite.org>
	<f7541d9c0908311225q4ee47520g55435d388500a6d8@mail.gmail.com>
Message-ID: <20090831193741.GA17165@wellquite.org>

Hi Charity,

On Mon, Aug 31, 2009 at 12:25:07PM -0700, Charity Majors wrote:
> > Err, this seems odd. Do you mean that your consumers set noAck to true
> > when setting up the subscription to the queue? If you're not, and you're
> > not explicitly acking then Rabbit will be keeping a copy of the message
> > in memory all the time, because it won't discard messages until it
> > receives an ack from the consumer for the msg.
> 
> I'm a little confused about this sentence here, but no, I'm not
> explicitly acking anything.  I have no_ack set to True, and no durable
> queues or persistent delivery mode, so I shouldn't be storing anything
> in memory or disk.  It doesn't appear as though I am.

Ahh right, yes. If noAck is true, then you're ok.

AMQP says that a broker shouldn't forget about a msg until it's been
ack'd. Now this can either happen by an explicit ack coming from the
consumer, or from an implicit ack, by setting noAck to true when
subscribing to the queue. Yes, the unfortunate naming of "noAck" is, um,
unfortunate. Internally, we tend to invert this and then call it
AckRequired.

> > Yes, I think this backs up my theory - if a null consumer isn't going
> > any faster, then I would definitely point the finger at the producers.
> > How big are the messages you're sending? If you're all on the same box,
> > I find this a bit surprising - I can push above 400M*Bytes*/s over
> > localhost loopback to and from Rabbit.
> 
> Yeah, this makes sense.  Let me try taking RMQ out of the equation
> completely and seeing how fast the producers are producing messages.

Do let us know how you get on.

Cheers,

Matthew



From pauljones23 at gmail.com  Mon Aug 31 21:48:25 2009
From: pauljones23 at gmail.com (Paul Jones)
Date: Mon, 31 Aug 2009 21:48:25 +0100
Subject: [rabbitmq-discuss] beginners question about RabbitMQ over HTTP
In-Reply-To: <9C37154E143FE14CBA656B2D2232745F0327EEBB677B@popeye.gebaschtel.bnet>
References: <9C37154E143FE14CBA656B2D2232745F0327EEBB677B@popeye.gebaschtel.bnet>
Message-ID: <29598b610908311348v8e2847bs8947af4d43a895a9@mail.gmail.com>

Josh,

At this stage, none of the standard clients actually support connecting to
Rabbit via HTTP. The rabbitmq-mochiweb plugin simply provides an embedded
HTTP server within the broker - it doesn't actually provide any HTTP
services for the client to connect to.

The rabbitmq-jsonrpc plugin does actually provide a JSON-RPC endpoint for
the broker - however, the only client provided for this is a Javascript
based client (though this in no way means that a non-javascript client
wouldn't be possible).

RabbitHub (http://github.com/tonyg/rabbithub/tree/master) provides another
HTTP-style endpoint for Rabbit - in this case, via a Restful API. Once
again, however, there is no official client for this.

The documentation is being updated for the various rabbitmq-* plugins as
part of the 1.7 release, so hopefully the distinction between the various
functions will become clearer at that point.

On your original point however, is it actually not possible to get the
RabbitMQ port opened through your firewall? Or alternatively, would you be
able to use something like stunnel to sneak the traffic through looking like
HTTPS? (this would certainly require experimentation, as I'm not entirely
sure this would all work from a protocol perspective - I suspect it would
all depend on the strength of the firewall/proxy)

Hopefully this helps clear up some of your questions.

Paul.

On Sun, Aug 30, 2009 at 2:03 PM, Josh Geisser <josh at gebaschtel.ch> wrote:

> Hi all
>
> My goal is to connect my consumers and providers over http to the RabbitMQ
> (fw/proxy between clients and queue), and after a few hours of googeling I'm
> more confused than before.
>
> I was kind of able to get the rabbitmq-mochiweb running, but didn't find
> any examples how to use/verify it with amqplib/python
>
> Can someone pinpoint me whether this is already possible, and how to start?
>
> Cheers & thanks
> Josh
>
>
> _______________________________________________
> rabbitmq-discuss mailing list
> rabbitmq-discuss at lists.rabbitmq.com
> http://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/attachments/20090831/4ff2a5de/attachment.htm 

