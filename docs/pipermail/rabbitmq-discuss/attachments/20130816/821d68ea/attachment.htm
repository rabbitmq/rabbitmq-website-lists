<tt>
&lt;html&gt;<br>
&nbsp;&nbsp;&lt;head&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;content=&quot;text/html;&nbsp;charset=ISO-8859-1&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http-equiv=&quot;Content-Type&quot;&gt;<br>
&nbsp;&nbsp;&lt;/head&gt;<br>
&nbsp;&nbsp;&lt;body&nbsp;bgcolor=&quot;#FFFFFF&quot;&nbsp;text=&quot;#000000&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Hi&nbsp;Mark,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Ok&nbsp;-&nbsp;without&nbsp;getting&nbsp;buried&nbsp;in&nbsp;the&nbsp;details,&nbsp;it&nbsp;sounds&nbsp;like&nbsp;what&nbsp;you<br>
&nbsp;&nbsp;&nbsp;&nbsp;want&nbsp;is&nbsp;a&nbsp;simple&nbsp;try...catch&nbsp;in&nbsp;your&nbsp;code&nbsp;to&nbsp;determine&nbsp;whether&nbsp;or<br>
&nbsp;&nbsp;&nbsp;&nbsp;not&nbsp;the&nbsp;queue.declare&nbsp;succeeds.&nbsp;That's&nbsp;fairly&nbsp;simple&nbsp;to&nbsp;do,&nbsp;since<br>
&nbsp;&nbsp;&nbsp;&nbsp;either&nbsp;you'll&nbsp;get&nbsp;back&nbsp;a&nbsp;#'queue.declare-ok'{}&nbsp;record&nbsp;or&nbsp;an&nbsp;error<br>
&nbsp;&nbsp;&nbsp;&nbsp;will&nbsp;propagate&nbsp;to&nbsp;the&nbsp;caller.&nbsp;In&nbsp;the&nbsp;latter&nbsp;case,&nbsp;you&nbsp;can&nbsp;set&nbsp;off&nbsp;a<br>
&nbsp;&nbsp;&nbsp;&nbsp;timer&nbsp;to&nbsp;retry&nbsp;when&nbsp;you're&nbsp;ready:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;init(Config)&nbsp;-&amp;gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;{Timeout,&nbsp;Queue,&nbsp;Params}&nbsp;=&nbsp;parse_config(Config),&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;{ok,&nbsp;Conn}&nbsp;=&nbsp;amqp_connection:start(Params),&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;{ok,&nbsp;Chan}&nbsp;=&nbsp;amqp_connection:open_channel(Conn),&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;State&nbsp;=&nbsp;#state{&nbsp;connection&nbsp;=&nbsp;Conn,&nbsp;channel&nbsp;=&nbsp;Chan,&nbsp;queue&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;Queue,&nbsp;timeout&nbsp;=&nbsp;Timeout,&nbsp;status&nbsp;=&nbsp;idle&nbsp;},&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;start_timer(State),&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;{ok,&nbsp;State}.&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;handle_info(connect,&nbsp;State&nbsp;=&nbsp;#state{&nbsp;status&nbsp;=&nbsp;running&nbsp;})&nbsp;-&amp;gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;{noreply,&nbsp;State};&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;handle_info(connect,&nbsp;State&nbsp;=&nbsp;#state{&nbsp;channel&nbsp;=&nbsp;Chan,&nbsp;queue&nbsp;=&nbsp;Queue<br>
&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;-&amp;gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;try&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#'queue.declare_ok'{}&nbsp;=&nbsp;amqp_channel:call(Chan,<br>
&nbsp;&nbsp;&nbsp;&nbsp;#'queue.declare{&nbsp;queue&nbsp;=&nbsp;Queue,&nbsp;exclusive&nbsp;=&nbsp;true&nbsp;}),&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;{noreply,&nbsp;State#state{&nbsp;status&nbsp;=&nbsp;running&nbsp;}}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;catch&nbsp;_:_&nbsp;-&amp;gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;start_timer(State),&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;{noreply,&nbsp;State}&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;end.&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;start_timer(#state{&nbsp;timeout&nbsp;=&nbsp;T&nbsp;})&nbsp;-&amp;gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;erlang:send_after(T,&nbsp;self(),&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Hopefully&nbsp;that'll&nbsp;get&nbsp;you&nbsp;going.&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Cheers,&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Tim&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;On&nbsp;08/16/2013&nbsp;04:03&nbsp;PM,&nbsp;Geib,&nbsp;Mark&nbsp;wrote:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;blockquote<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cite=&quot;mid:065F453F-5803-4FDD-95D5-F76B8D7A360D@echostar.com&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type=&quot;cite&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;Maybe&nbsp;more&nbsp;explanation&nbsp;will&nbsp;help.<br>
<br>
I&nbsp;am&nbsp;trying&nbsp;to&nbsp;re-broadcast&nbsp;udp&nbsp;datagrams&nbsp;between&nbsp;different&nbsp;networks&nbsp;with&nbsp;a&nbsp;simple&nbsp;erlang&nbsp;application&nbsp;that&nbsp;listens&nbsp;to&nbsp;the&nbsp;specified&nbsp;UDP&nbsp;port,&nbsp;then&nbsp;publishes&nbsp;to&nbsp;a&nbsp;rabbitmq&nbsp;exchange.&nbsp;Then&nbsp;another&nbsp;erlang&nbsp;application&nbsp;is&nbsp;consuming&nbsp;the&nbsp;messages&nbsp;and&nbsp;broadcasting&nbsp;the&nbsp;datagram&nbsp;on&nbsp;whatever&nbsp;network&nbsp;is&nbsp;required,&nbsp;etc.&nbsp;These&nbsp;datagrams&nbsp;are&nbsp;near&nbsp;mission&nbsp;critical&nbsp;and&nbsp;so&nbsp;we&nbsp;are&nbsp;building&nbsp;completely,&nbsp;nearly,&nbsp;redundant&nbsp;paths.&nbsp;That&nbsp;is&nbsp;there&nbsp;will&nbsp;be&nbsp;two&nbsp;applications&nbsp;listening&nbsp;to&nbsp;the&nbsp;datagram&nbsp;source,&nbsp;both&nbsp;will&nbsp;publish&nbsp;to&nbsp;separate&nbsp;brokers,&nbsp;on&nbsp;different&nbsp;network&nbsp;paths.&nbsp;Then&nbsp;there&nbsp;will&nbsp;be&nbsp;two&nbsp;consumer&nbsp;applications&nbsp;each&nbsp;able&nbsp;to&nbsp;consume&nbsp;messages&nbsp;from&nbsp;both&nbsp;of&nbsp;the&nbsp;brokers&nbsp;being&nbsp;published&nbsp;to.&nbsp;What&nbsp;I&nbsp;need&nbsp;to&nbsp;do&nbsp;is&nbsp;prevent&nbsp;both&nbsp;consuming&nbsp;applications&nbsp;from&nbsp;broadcasting&nbsp;the&nbsp;datagram&nbsp;on&nbsp;the&nbsp;target&nbsp;network.&nbsp;We&nbsp;can&nbsp;not&nbsp;handle&nbsp;duplicates.<br>
<br>
Here&nbsp;was&nbsp;my&nbsp;idea.<br>
<br>
On&nbsp;the&nbsp;consuming&nbsp;client&nbsp;side&nbsp;we&nbsp;configure&nbsp;both&nbsp;clients&nbsp;the&nbsp;same,&nbsp;both&nbsp;brokers&nbsp;are&nbsp;listed&nbsp;in&nbsp;each&nbsp;config.&nbsp;When&nbsp;a&nbsp;client&nbsp;comes&nbsp;up&nbsp;it&nbsp;will&nbsp;try&nbsp;to&nbsp;connect&nbsp;to&nbsp;each&nbsp;broker,&nbsp;if&nbsp;those&nbsp;connections&nbsp;succeed&nbsp;then&nbsp;an&nbsp;attempt&nbsp;is&nbsp;made&nbsp;to&nbsp;create&nbsp;an&nbsp;exclusive&nbsp;queue&nbsp;on&nbsp;each&nbsp;broker,&nbsp;no&nbsp;bindings&nbsp;yet.&nbsp;If&nbsp;a&nbsp;client&nbsp;can&nbsp;create&nbsp;both&nbsp;exclusive&nbsp;queues&nbsp;then&nbsp;it&nbsp;will&nbsp;be&nbsp;the&nbsp;UDP&nbsp;broadcaster.&nbsp;At&nbsp;this&nbsp;point&nbsp;the&nbsp;client&nbsp;will&nbsp;bind&nbsp;one&nbsp;of&nbsp;the&nbsp;two&nbsp;queues&nbsp;to&nbsp;start&nbsp;receiving&nbsp;messages&nbsp;from&nbsp;one&nbsp;of&nbsp;the&nbsp;servers.&nbsp;The&nbsp;other&nbsp;exclusive&nbsp;queue&nbsp;is&nbsp;left&nbsp;unbound,&nbsp;so&nbsp;no&nbsp;messages&nbsp;are&nbsp;routed&nbsp;to&nbsp;it.&nbsp;The&nbsp;other&nbsp;client&nbsp;attempts&nbsp;the&nbsp;same,&nbsp;but&nbsp;will&nbsp;fail&nbsp;to&nbsp;create&nbsp;the&nbsp;exclusive&nbsp;queues.&nbsp;The&nbsp;connections&nbsp;to&nbsp;the&nbsp;two&nbsp;brokers&nbsp;will&nbsp;be&nbsp;maintained,&nbsp;but&nbsp;at&nbsp;some&nbsp;interval&nbsp;will&nbsp;continue&nbsp;to&nbsp;attempt&nbsp;to&nbsp;create&nbsp;the&nbsp;exclusive&nbsp;queues,&nbsp;if&nbsp;it&nbsp;should&nbsp;ever&nbsp;succeed&nbsp;then&nbsp;it&nbsp;will&nbsp;start&nbsp;broadcasting&nbsp;as&nbsp;the&nbsp;first&nbsp;client&nbsp;did.&nbsp;So&nbsp;in&nbsp;order&nbsp;to&nbsp;broadcast&nbsp;one&nbsp;of&nbsp;these&nbsp;applications&nbsp;must&nbsp;create&nbsp;both&nbsp;exclusive&nbsp;queues.&nbsp;What&nbsp;I&nbsp;was&nbsp;depending&nbsp;on&nbsp;was&nbsp;being&nbsp;able&nbsp;to&nbsp;use&nbsp;the&nbsp;exclus<br>
&nbsp;ive&nbsp;queue<br>
&nbsp;as&nbsp;a&nbsp;sort&nbsp;of&nbsp;resource&nbsp;lock,&nbsp;but&nbsp;not&nbsp;do&nbsp;any&nbsp;bindings&nbsp;or&nbsp;consuming&nbsp;until&nbsp;I&nbsp;am&nbsp;sure&nbsp;I&nbsp;have&nbsp;&quot;locked&quot;&nbsp;all&nbsp;the&nbsp;brokers.<br>
<br>
The&nbsp;case&nbsp;where&nbsp;one&nbsp;of&nbsp;the&nbsp;brokers&nbsp;is&nbsp;down,&nbsp;or&nbsp;un-reachable&nbsp;is&nbsp;handled&nbsp;by&nbsp;the&nbsp;clients&nbsp;where&nbsp;the&nbsp;connection&nbsp;attempt&nbsp;to&nbsp;that&nbsp;broker&nbsp;will&nbsp;fail,&nbsp;so&nbsp;the&nbsp;client&nbsp;assumes&nbsp;it&nbsp;is&nbsp;not&nbsp;useable,&nbsp;but&nbsp;is&nbsp;able&nbsp;to&nbsp;connect&nbsp;and&nbsp;create&nbsp;the&nbsp;exclusive&nbsp;queue&nbsp;on&nbsp;the&nbsp;other&nbsp;broker.&nbsp;In&nbsp;this&nbsp;case&nbsp;the&nbsp;client&nbsp;will&nbsp;be&nbsp;the&nbsp;broadcaster,&nbsp;since&nbsp;it&nbsp;is&nbsp;able&nbsp;to&nbsp;create&nbsp;the&nbsp;exclusive&nbsp;queue&nbsp;on&nbsp;all&nbsp;&quot;available&quot;&nbsp;brokers.&nbsp;Even&nbsp;if&nbsp;the&nbsp;other&nbsp;client&nbsp;is&nbsp;able&nbsp;to&nbsp;connect&nbsp;to&nbsp;both&nbsp;brokers&nbsp;it&nbsp;will&nbsp;not&nbsp;be&nbsp;able&nbsp;to&nbsp;create&nbsp;the&nbsp;exclusive&nbsp;queues&nbsp;on&nbsp;both,&nbsp;so&nbsp;will&nbsp;not&nbsp;broadcast.<br>
<br>
Hope&nbsp;that&nbsp;helps.<br>
<br>
Mark&nbsp;Geib<br>
Principal&nbsp;Engineer<br>
Cheyenne&nbsp;Software&nbsp;Engineering<br>
&lt;a&nbsp;class=&quot;moz-txt-link-abbreviated&quot;&nbsp;href=&quot;mailto:mark.geib@echostar.com&quot;&gt;mark.geib@echostar.com&lt;/a&gt;&nbsp;/&nbsp;35-215<br>
<br>
<br>
&amp;#8220;We,&nbsp;the&nbsp;unwilling,&nbsp;led&nbsp;by&nbsp;the&nbsp;unknowing,&nbsp;are&nbsp;doing&nbsp;the&nbsp;impossible&nbsp;for&nbsp;the&nbsp;ungrateful.&nbsp;We&nbsp;have&nbsp;done&nbsp;so&nbsp;much,&nbsp;for&nbsp;so&nbsp;long,&nbsp;with&nbsp;so&nbsp;little,&nbsp;we&nbsp;are&nbsp;now&nbsp;qualified&nbsp;to&nbsp;do&nbsp;anything&nbsp;with&nbsp;nothing.&amp;#8221;&nbsp;<br>
&amp;#8213;&nbsp;Mother&nbsp;Teresa<br>
<br>
&lt;/pre&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;fieldset&nbsp;class=&quot;mimeAttachmentHeader&quot;&gt;&lt;/fieldset&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;pre&nbsp;wrap=&quot;&quot;&gt;_______________________________________________<br>
rabbitmq-discuss&nbsp;mailing&nbsp;list<br>
&lt;a&nbsp;class=&quot;moz-txt-link-abbreviated&quot;&nbsp;href=&quot;mailto:rabbitmq-discuss@lists.rabbitmq.com&quot;&gt;rabbitmq-discuss@lists.rabbitmq.com&lt;/a&gt;<br>
&lt;a&nbsp;class=&quot;moz-txt-link-freetext&quot;&nbsp;href=&quot;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&quot;&gt;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&lt;/a&gt;<br>
&lt;/pre&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/blockquote&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;br&gt;<br>
&nbsp;&nbsp;&lt;/body&gt;<br>
&lt;/html&gt;<br>

</tt>
