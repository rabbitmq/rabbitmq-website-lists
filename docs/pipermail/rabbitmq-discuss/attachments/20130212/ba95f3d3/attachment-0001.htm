<tt>
&lt;div&nbsp;dir=&quot;ltr&quot;&gt;Steve,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks&nbsp;very&nbsp;much&nbsp;for&nbsp;your&nbsp;response.&nbsp; I&nbsp;was&nbsp;able&nbsp;to&nbsp;re-implement&nbsp;the&nbsp;while&nbsp;loop&nbsp;without&nbsp;having&nbsp;Tomcat&nbsp;bug-out&nbsp;upon&nbsp;server&nbsp;stop.&nbsp; I&nbsp;achieved&nbsp;this&nbsp;by&nbsp;catching&nbsp;the&nbsp;the&nbsp;InterruptedException&nbsp;in&nbsp;a&nbsp;Thread:&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;while&nbsp;(!Thread.currentThread().isInterrupted())&nbsp;{&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;...&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;channel.basicQos(1);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;QueueingConsumer&nbsp;consumer&nbsp;=&nbsp;new&nbsp;QueueingConsumer(channel);&lt;/div&gt;<br>
<br>
&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;channel.basicConsume(ReferenceData.CONSUME_QUEUE_NAME,&nbsp;false,&nbsp;consumer)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;try&nbsp;{&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;QueueingConsumer.Delivery&nbsp;delivery&nbsp;=&nbsp;consumer.nextDelivery();&lt;/div&gt;<br>
<br>
&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;...&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;channel.basicAck(delivery.getEnvelope().getDeliveryTag(),&nbsp;false);&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;ex)&nbsp;{&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Thread.currentThread().interrupt();&lt;/div&gt;<br>
<br>
&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break;&lt;/div&gt;&lt;div&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;find&nbsp;your&nbsp;comments&nbsp;about&nbsp;the&nbsp;polling&nbsp;interesting.&nbsp; For&nbsp;now,&nbsp;though,&nbsp;my&nbsp;requirements&nbsp;would&nbsp;seem&nbsp;to&nbsp;favor&nbsp;as&nbsp;little&nbsp;network&nbsp;latency&nbsp;as&nbsp;possible,&nbsp;so&nbsp;I&amp;#39;m&nbsp;going&nbsp;to&nbsp;go&nbsp;with&nbsp;the&nbsp;original&nbsp;push/round&nbsp;robin&nbsp;model.&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;am&nbsp;more&nbsp;confident&nbsp;in&nbsp;deploying&nbsp;the&nbsp;consumers&nbsp;and&nbsp;producers&nbsp;as&nbsp;web&nbsp;applications,&nbsp;and&nbsp;your&nbsp;answer&nbsp;has&nbsp;helped&nbsp;to&nbsp;confirm&nbsp;that.&nbsp; I&nbsp;am&nbsp;finding&nbsp;benefit&nbsp;in manageability and&nbsp;portability&nbsp;and&nbsp;my&nbsp;ultimate&nbsp;goal,&nbsp;like&nbsp;you&nbsp;said,&nbsp;is&nbsp;a&nbsp;sophisticated&nbsp;web-based&nbsp;control&nbsp;mechanism.&nbsp; I&nbsp;want&nbsp;to&nbsp;have&nbsp;real-time&nbsp;control&nbsp;of&nbsp;my&nbsp;clients,&nbsp;and&nbsp;I&nbsp;want&nbsp;it&nbsp;to&nbsp;be&nbsp;user&nbsp;friendly.&nbsp; I&amp;#39;ve&nbsp;started&nbsp;looking&nbsp;into&nbsp;JMX&nbsp;and&nbsp;MBeans&nbsp;to&nbsp;achieve&nbsp;such&nbsp;a&nbsp;solution.&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;If&nbsp;you&nbsp;impose&nbsp;a&nbsp;prefetch&lt;/span&gt;&lt;br&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;&lt;span&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;limit&nbsp;of&nbsp;1&nbsp;for&nbsp;each&nbsp;client&nbsp;you&nbsp;run,&nbsp;then&nbsp;the&nbsp;rabbit&nbsp;server&nbsp;will&nbsp;dispatch&lt;/span&gt;&lt;br&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;<br>
<br>
&lt;span&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;messages&nbsp;to&nbsp;clients&nbsp;that&nbsp;have&nbsp;no&nbsp;unacknowledged&nbsp;messages&nbsp;(by&nbsp;the&nbsp;way,&lt;/span&gt;&lt;br&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;&lt;span&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;you&nbsp;should&nbsp;explicitly&nbsp;acknowledge&nbsp;messages&nbsp;when&nbsp;using&nbsp;non-zero&lt;/span&gt;&lt;br&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;<br>
<br>
&lt;span&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;basicQos()).&lt;/span&gt;&lt;/i&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span&nbsp;style=&quot;font-family:arial,sans-serif;font-size:13px&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;font&nbsp;face=&quot;arial,&nbsp;sans-serif&quot;&gt;Regarding&nbsp;your&nbsp;statement&nbsp;above,&nbsp;I&nbsp;had&nbsp;not&nbsp;taken&nbsp;that&nbsp;into&nbsp;consideration.&nbsp; I&amp;#39;ve&nbsp;coded&nbsp;my&nbsp;clients&nbsp;to&nbsp; only&nbsp;acknowledge&nbsp;upon&nbsp;successful&nbsp;processing&nbsp;of&nbsp;the&nbsp;delivered&nbsp;message.&nbsp; If&nbsp;one&nbsp;of&nbsp;our&nbsp;many&nbsp;web&nbsp;services&nbsp;or&nbsp;datastore&nbsp;connections&nbsp;goes&nbsp;down,&nbsp;then&nbsp;unacknowledged&nbsp;messages&nbsp;will&nbsp;start&nbsp;piling&nbsp;up&nbsp;quickly,&nbsp;and&nbsp;the&nbsp;messaging&nbsp;and&nbsp;queuing&nbsp;pipeline&nbsp;will&nbsp;essentially&nbsp;come&nbsp;to&nbsp;a&nbsp;halt.&nbsp;I&nbsp;would&nbsp;expect&nbsp;this&nbsp;to&nbsp;be&nbsp;the&nbsp;correct&nbsp;behavior,&nbsp;however,&nbsp;as&nbsp;I&nbsp;don&amp;#39;t&nbsp;want&nbsp;to&nbsp;throw&nbsp;out&nbsp;messages&nbsp;until&nbsp;someone&nbsp;discovers&nbsp;that&nbsp;a&nbsp;service&nbsp;is&nbsp;down.&lt;/font&gt;&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;font&nbsp;face=&quot;arial,&nbsp;sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font&nbsp;face=&quot;arial,&nbsp;sans-serif&quot;&gt;As&nbsp;I&nbsp;will&nbsp;be&nbsp;using&nbsp;QueuingConsumer,&nbsp;I&amp;#39;m&nbsp;now&nbsp;wondering &lt;i&gt;how &lt;/i&gt;I&nbsp;should&nbsp;determine &lt;i&gt;what &lt;/i&gt;to&nbsp;set&nbsp;my&nbsp;prefetch&nbsp;counts&nbsp;to.&nbsp; Do&nbsp;you&nbsp;have&nbsp;any&nbsp;further&nbsp;advice&nbsp;on&nbsp;this?&nbsp; I&amp;#39;m&nbsp;still&nbsp;a&nbsp;little&nbsp;confused&nbsp;there.&lt;/font&gt;&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;font&nbsp;face=&quot;arial,&nbsp;sans-serif&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&nbsp;style&gt;&lt;font&nbsp;face=&quot;arial,&nbsp;sans-serif&quot;&gt;Thanks&nbsp;again,&lt;/font&gt;&lt;/div&gt;&lt;div&nbsp;style&gt;&lt;font&nbsp;face=&quot;arial,&nbsp;sans-serif&quot;&gt;&lt;br&gt;Kevin&nbsp;Behr&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;gmail_extra&quot;&gt;<br>
<br>
&lt;br&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Mon,&nbsp;Feb&nbsp;11,&nbsp;2013&nbsp;at&nbsp;6:33&nbsp;AM,&nbsp;Steve&nbsp;Powell&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:steve@rabbitmq.com&quot;&nbsp;target=&quot;_blank&quot;&gt;steve@rabbitmq.com&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
<br>
Hi&nbsp;Kevin,&lt;br&gt;<br>
&lt;br&gt;<br>
Sorry&nbsp;for&nbsp;the&nbsp;delayed&nbsp;response.&lt;br&gt;<br>
&lt;br&gt;<br>
First,&nbsp;an&nbsp;observation&nbsp;about&nbsp;your&nbsp;original&nbsp;set-up:&lt;br&gt;<br>
&lt;div&nbsp;class=&quot;im&quot;&gt;&lt;br&gt;<br>
&amp;gt;&nbsp;while&nbsp;(true)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp; &nbsp; &nbsp; &nbsp;QueueingConsumer.Delivery&nbsp;delivery&nbsp;=&nbsp;consumer.nextDelivery();&lt;br&gt;<br>
&amp;gt;&nbsp; &nbsp; &nbsp; &nbsp;String&nbsp;message&nbsp;=&nbsp;new&nbsp;String(delivery.getBody());&lt;br&gt;<br>
&amp;gt;&nbsp; &nbsp; &nbsp; &nbsp;System.out.println(&amp;quot;&nbsp;[x]&nbsp;Received&nbsp;&amp;#39;&amp;quot;&nbsp;+&nbsp;message&nbsp;+&nbsp;&amp;quot;&amp;#39;&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;}&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;I&nbsp;assume&nbsp;that&nbsp;there&nbsp;are&nbsp;no&nbsp;Qos&nbsp;(prefetch)&nbsp;limits&nbsp;imposed&nbsp;on&nbsp;the&nbsp;channels&lt;br&gt;<br>
these&nbsp;consumers&nbsp;use,&nbsp;and&nbsp;also&nbsp;I&nbsp;note&nbsp;that&nbsp;you&nbsp;are&nbsp;using&nbsp;the&lt;br&gt;<br>
QueueingConsumer.&nbsp;I&nbsp;think&nbsp;this&nbsp;means&nbsp;that&nbsp;all&nbsp;of&nbsp;the&nbsp;consumers&nbsp;are&nbsp;able&lt;br&gt;<br>
to&nbsp;receive&nbsp;the&nbsp;messages&nbsp;all&nbsp;the&nbsp;time,&nbsp;and&nbsp;so&nbsp;all&nbsp;messages&nbsp;will&nbsp;get&lt;br&gt;<br>
distributed&nbsp;in&nbsp;round-robin&nbsp;fashion,&nbsp;until&nbsp;there&nbsp;are&nbsp;no&nbsp;messages&nbsp;left&nbsp;to&lt;br&gt;<br>
deliver.&lt;br&gt;<br>
&lt;br&gt;<br>
In&nbsp;your&nbsp;&amp;#39;workaround&amp;#39;&nbsp;solution,&nbsp;you&nbsp;are&nbsp;indeed&nbsp;pulling,&nbsp;not&nbsp;being&nbsp;pushed,&lt;br&gt;<br>
and&nbsp;here&nbsp;all&nbsp;of&nbsp;the&nbsp;consumers&nbsp;will&nbsp;get&nbsp;a&nbsp;look-in:&nbsp;there&nbsp;is&nbsp;likely&nbsp;to&nbsp;be&lt;br&gt;<br>
balancing,&nbsp;but&nbsp;not&nbsp;round-robin.&nbsp;This&nbsp;is&nbsp;based&nbsp;instead&nbsp;upon&nbsp;consumer&lt;br&gt;<br>
request,&nbsp;so&nbsp;if&nbsp;one&nbsp;of&nbsp;them&nbsp;gets&nbsp;bogged&nbsp;down&nbsp;in&nbsp;work&nbsp;(initiated&nbsp;by&nbsp;the&lt;br&gt;<br>
previous&nbsp;message,&nbsp;for&nbsp;example)&nbsp;then&nbsp;the&nbsp;other&nbsp;consumers&nbsp;can&nbsp;poll&nbsp;and&lt;br&gt;<br>
take&nbsp;the&nbsp;next&nbsp;message,&nbsp;and,&nbsp;crucially,&nbsp;other&nbsp;messages&nbsp;won&amp;#39;t&nbsp;be&nbsp;taken&nbsp;by&lt;br&gt;<br>
this&nbsp;consumer&nbsp;while&nbsp;it&nbsp;is&nbsp;busy.&nbsp;Although&nbsp;this&nbsp;isn&amp;#39;t&nbsp;&amp;#39;round-robin&amp;#39;&lt;br&gt;<br>
servicing,&nbsp;it&nbsp;is&nbsp;arguably&nbsp;better:&nbsp;the&nbsp;messages&nbsp;are&nbsp;not&nbsp;&amp;#39;blindly&amp;#39;&nbsp;sent&nbsp;to&lt;br&gt;<br>
consumers&nbsp;that&nbsp;are&nbsp;busy.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;drawbacks&nbsp;are,&nbsp;as&nbsp;you&nbsp;note,&nbsp;an&nbsp;overhead&nbsp;of&nbsp;polling&nbsp;in&nbsp;the&nbsp;consumers,&lt;br&gt;<br>
and&nbsp;a&nbsp;larger&nbsp;latency&nbsp;on&nbsp;the&nbsp;network&nbsp;--&nbsp;each&nbsp;get&nbsp;involves&nbsp;a&nbsp;round-trip&nbsp;to&lt;br&gt;<br>
the&nbsp;server,&nbsp;even&nbsp;when&nbsp;there&nbsp;is&nbsp;nothing&nbsp;to&nbsp;get.&lt;br&gt;<br>
&lt;br&gt;<br>
Now&nbsp;to&nbsp;your&nbsp;questions:&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;gt;&nbsp; &nbsp;Is&nbsp;it&nbsp;a&nbsp;bad&nbsp;idea&nbsp;to&nbsp;deploy&nbsp;consumers&nbsp;as&nbsp;Tomcat&nbsp;web&nbsp;applications?&nbsp;Are&lt;br&gt;<br>
&lt;div&nbsp;class=&quot;im&quot;&gt;&amp;gt;&nbsp;there&nbsp;any&nbsp;advantages&nbsp;or&nbsp;disadvantages&nbsp;as&nbsp;compared&nbsp;to&nbsp;the&nbsp;alternative&nbsp;of&lt;br&gt;<br>
&amp;gt;&nbsp;running&nbsp;system&nbsp;level&nbsp;Java&nbsp;clients?&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;I&nbsp;see&nbsp;no&nbsp;reason&nbsp;why,&nbsp;apart&nbsp;from&nbsp;the&nbsp;overhead&nbsp;implied&nbsp;by&nbsp;running&nbsp;a&nbsp;full&lt;br&gt;<br>
web&nbsp;application,&nbsp;there&nbsp;should&nbsp;be&nbsp;any&nbsp;particular&nbsp;disadvantages&nbsp;of&nbsp;running&lt;br&gt;<br>
a&nbsp;Tomcat&nbsp;web&nbsp;application&nbsp;that&nbsp;does&nbsp;messaging&nbsp;as&nbsp;its&nbsp;main&nbsp;work.&nbsp;In&nbsp;fact,&lt;br&gt;<br>
I&nbsp;suspect&nbsp;it&nbsp;is&nbsp;easier&nbsp;to&nbsp;control&nbsp;(start/stop)&nbsp;than&nbsp;using&nbsp;a&lt;br&gt;<br>
free-standing&nbsp;Java&nbsp;client:&nbsp;you&nbsp;can&nbsp;potentially&nbsp;build&nbsp;a&nbsp;sophisticated&lt;br&gt;<br>
web-based&nbsp;control&nbsp;mechanism.&nbsp;However,&nbsp;I&amp;#39;m&nbsp;not&nbsp;best&nbsp;placed&nbsp;to&nbsp;answer&lt;br&gt;<br>
this.&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;gt;&nbsp; &nbsp;In&nbsp;the&nbsp;case&nbsp;of&nbsp;work&nbsp;queues,&nbsp;am&nbsp;I&nbsp;better&nbsp;off&nbsp;retrieving&nbsp;messages&nbsp;that&lt;br&gt;<br>
&lt;div&nbsp;class=&quot;im&quot;&gt;&amp;gt;&nbsp;are&nbsp;pushed&nbsp;down&nbsp;to&nbsp;my&nbsp;clients,&nbsp;and&nbsp;setting&nbsp;a&nbsp;prefetchCount&lt;br&gt;<br>
&amp;gt;&nbsp;(channel.basicQos(1))&nbsp;to&nbsp;ensure&nbsp;that&nbsp;I&nbsp;only&nbsp;receive&nbsp;one&nbsp;message&nbsp;at&nbsp;a&lt;br&gt;<br>
&amp;gt;&nbsp;time?&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;This&nbsp;is&nbsp;the&nbsp;crux&nbsp;of&nbsp;the&nbsp;matter,&nbsp;as&nbsp;I&nbsp;see&nbsp;it.&nbsp;If&nbsp;you&nbsp;impose&nbsp;a&nbsp;prefetch&lt;br&gt;<br>
limit&nbsp;of&nbsp;1&nbsp;for&nbsp;each&nbsp;client&nbsp;you&nbsp;run,&nbsp;then&nbsp;the&nbsp;rabbit&nbsp;server&nbsp;will&nbsp;dispatch&lt;br&gt;<br>
messages&nbsp;to&nbsp;clients&nbsp;that&nbsp;have&nbsp;no&nbsp;unacknowledged&nbsp;messages&nbsp;(by&nbsp;the&nbsp;way,&lt;br&gt;<br>
you&nbsp;should&nbsp;explicitly&nbsp;acknowledge&nbsp;messages&nbsp;when&nbsp;using&nbsp;non-zero&lt;br&gt;<br>
basicQos()).&nbsp;Under&nbsp;these&nbsp;circumstances,&nbsp;you&nbsp;can&nbsp;achieve&nbsp;similar&lt;br&gt;<br>
balancing&nbsp;as&nbsp;in&nbsp;the&nbsp;polling&nbsp;case,&nbsp;but&nbsp;without&nbsp;the&nbsp;polling.&nbsp;It&nbsp;will&nbsp;*not*&lt;br&gt;<br>
be&nbsp;strictly&nbsp;round-robin&nbsp;after&nbsp;the&nbsp;first&nbsp;&amp;#39;round&amp;#39;&nbsp;because&nbsp;the&nbsp;first&lt;br&gt;<br>
consumer&nbsp;need&nbsp;not&nbsp;have&nbsp;acknowledged&nbsp;the&nbsp;previous&nbsp;message&nbsp;yet,&nbsp;and&lt;br&gt;<br>
messages&nbsp;will&nbsp;be&nbsp;delivered&nbsp;to&nbsp;whatever&nbsp;consumers&nbsp;are&nbsp;ready&nbsp;for&nbsp;them&nbsp;--&lt;br&gt;<br>
albeit&nbsp;in&nbsp;round-robin&nbsp;priority.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;tutorial&nbsp;pages&nbsp;describe&nbsp;this&nbsp;pretty&nbsp;well&nbsp;(see&nbsp;[1]).&lt;br&gt;<br>
&lt;br&gt;<br>
There&nbsp;are&nbsp;two&nbsp;points&nbsp;to&nbsp;note:&lt;br&gt;<br>
&lt;br&gt;<br>
If&nbsp;you&nbsp;are&nbsp;using&nbsp;QueueingConsumer,&nbsp;then&nbsp;each&nbsp;message&nbsp;will&nbsp;be&nbsp;placed&nbsp;in&nbsp;a&lt;br&gt;<br>
client&nbsp;Java&nbsp;queue,&nbsp;and&nbsp;nextDelivery()&nbsp;then&nbsp;unblocks&nbsp;with&nbsp;the&nbsp;message&lt;br&gt;<br>
when&nbsp;it&nbsp;arrives.&nbsp;With&nbsp;explicit&nbsp;acknowledgements&nbsp;this&nbsp;means&nbsp;that&nbsp;one&lt;br&gt;<br>
message&nbsp;at&nbsp;a&nbsp;time&nbsp;is&nbsp;transferred&nbsp;to&nbsp;the&nbsp;Java&nbsp;queue.&nbsp;You&nbsp;could&nbsp;increase&lt;br&gt;<br>
the&nbsp;prefetchCount&nbsp;to&nbsp;2,&nbsp;say,&nbsp;and&nbsp;then&nbsp;up&nbsp;to&nbsp;two&nbsp;messages&nbsp;would&nbsp;be&nbsp;placed&lt;br&gt;<br>
in&nbsp;the&nbsp;queue&nbsp;but&nbsp;you&nbsp;would&nbsp;still&nbsp;process&nbsp;them&nbsp;serially&nbsp;through&nbsp;the&lt;br&gt;<br>
nextDelivery()&nbsp;call.&nbsp;When&nbsp;one&nbsp;consumer&nbsp;gets&nbsp;two&nbsp;messages,&nbsp;then&nbsp;no&nbsp;other&lt;br&gt;<br>
consumer&nbsp;will&nbsp;get&nbsp;these&nbsp;--&nbsp;so&nbsp;if&nbsp;a&nbsp;message&nbsp;can&nbsp;take&nbsp;a&nbsp;long&nbsp;time&nbsp;before&lt;br&gt;<br>
it&nbsp;is&nbsp;acknowledged,&nbsp;the&nbsp;message&nbsp;behind&nbsp;it&nbsp;can&nbsp;get&nbsp;delayed,&nbsp;even&nbsp;though&lt;br&gt;<br>
there&nbsp;may&nbsp;be&nbsp;other&nbsp;consumers&nbsp;which&nbsp;are&nbsp;idle.&nbsp;Other&nbsp;messages&nbsp;can&lt;br&gt;<br>
&amp;#39;overtake&amp;#39;&nbsp;and&nbsp;get&nbsp;processed&nbsp;before&nbsp;it.&lt;br&gt;<br>
&lt;br&gt;<br>
If&nbsp;you&nbsp;want&nbsp;to&nbsp;avoid&nbsp;the&nbsp;QueueingConsumer&nbsp;internal&nbsp;Java&nbsp;queue,&nbsp;you&nbsp;could&lt;br&gt;<br>
write&nbsp;your&nbsp;own&nbsp;Consumer&nbsp;implementation&nbsp;(base&nbsp;it&nbsp;on&nbsp;DefaultConsumer)&nbsp;but&lt;br&gt;<br>
you&nbsp;should&nbsp;be&nbsp;aware&nbsp;that&nbsp;the&nbsp;handleDelivery()&nbsp;methods&nbsp;are&nbsp;driven&lt;br&gt;<br>
asynchronously,&nbsp;but&nbsp;serially.&nbsp;You&nbsp;shouldn&amp;#39;t&nbsp;perform&nbsp;long&nbsp;pieces&nbsp;of&nbsp;work&lt;br&gt;<br>
on&nbsp;these&nbsp;threads.&nbsp;It&nbsp;would&nbsp;be&nbsp;wise&nbsp;to&nbsp;pass&nbsp;the&nbsp;message&nbsp;to&nbsp;some&lt;br&gt;<br>
serialised&nbsp;worker&nbsp;thread,&nbsp;especially&nbsp;if&nbsp;you&nbsp;have&nbsp;a&nbsp;prefetchCount&nbsp;larger&lt;br&gt;<br>
than&nbsp;one.&nbsp;This&nbsp;will&nbsp;probably&nbsp;then&nbsp;require&nbsp;a&nbsp;queue&nbsp;of&nbsp;your&nbsp;own&nbsp;anyway,&nbsp;so&lt;br&gt;<br>
the&nbsp;advantages&nbsp;to&nbsp;you&nbsp;are&nbsp;slim.&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;hope&nbsp;this&nbsp;helps.&nbsp;Please&nbsp;let&nbsp;us&nbsp;know&nbsp;how&nbsp;you&nbsp;get&nbsp;on.&lt;br&gt;<br>
&lt;br&gt;<br>
Steve&nbsp;Powell&lt;br&gt;<br>
&lt;br&gt;<br>
[1]&nbsp;&lt;a&nbsp;href=&quot;http://www.rabbitmq.com/tutorials/tutorial-two-java.html&quot;&nbsp;target=&quot;_blank&quot;&gt;http://www.rabbitmq.com/tutorials/tutorial-two-java.html&lt;/a&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
[M:&nbsp;&lt;a&nbsp;href=&quot;tel:%2B44-7815-838-558&quot;&nbsp;value=&quot;+447815838558&quot;&gt;+44-7815-838-558&lt;/a&gt;;&nbsp;H:&lt;a&nbsp;href=&quot;tel:%2B44-1962-775-598&quot;&nbsp;value=&quot;+441962775598&quot;&gt;+44-1962-775-598&lt;/a&gt;]&lt;br&gt;<br>
SpringSource&nbsp;(a&nbsp;division&nbsp;of&nbsp;VMware),&nbsp;Virgo,&nbsp;RabbitMQ.&lt;br&gt;<br>
-----------------------------------------------------------------------&lt;br&gt;<br>
Good&nbsp;design:&lt;br&gt;<br>
 &nbsp; is&nbsp;innovative,&nbsp;useful,&nbsp;aesthetic;&lt;br&gt;<br>
 &nbsp; is&nbsp;understandable,&nbsp;unobtrusive,&nbsp;honest;&lt;br&gt;<br>
 &nbsp; is&nbsp;long-lasting,&nbsp;thorough,&nbsp;environmentally&nbsp;friendly;&lt;br&gt;<br>
 &nbsp; and&nbsp;is&nbsp;as&nbsp;little&nbsp;design&nbsp;as&nbsp;possible.&lt;br&gt;<br>
Copyright&nbsp;Dieter&nbsp;Rams,&nbsp;amended&nbsp;March&nbsp;2003;&nbsp;October&nbsp;2009;&nbsp;and&nbsp;August&nbsp;2012&lt;br&gt;<br>
&lt;div&nbsp;class=&quot;im&quot;&gt;&lt;br&gt;<br>
On&nbsp;31&nbsp;Jan&nbsp;2013,&nbsp;at&nbsp;01:33,&nbsp;Kevin&nbsp;Behr&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:behrk2@gmail.com&quot;&gt;behrk2@gmail.com&lt;/a&gt;&amp;gt;&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&nbsp;Hello&nbsp;everyone,&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;I&nbsp;have&nbsp;five&nbsp;RabbitMQ&nbsp;consumer&nbsp;clients&nbsp;that&nbsp;are&nbsp;written&nbsp;and&nbsp;deployed&nbsp;as&nbsp;Tomcat&nbsp;web&nbsp;applications.&nbsp; My&nbsp;original&nbsp;intention&nbsp;was&nbsp;to&nbsp;consume&nbsp;messages&nbsp;in&nbsp;the&nbsp;typical&nbsp;fashion:&lt;br&gt;<br>
&lt;/div&gt;(elided)&lt;br&gt;<br>
&lt;div&nbsp;class=&quot;im&quot;&gt;&amp;gt;&nbsp;I&nbsp;would&nbsp;appreciate&nbsp;any&nbsp;advice&nbsp;or&nbsp;suggestions.&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;Thanks!&lt;br&gt;<br>
&lt;/div&gt;&amp;gt;&nbsp;_______________________________________________&lt;br&gt;<br>
&amp;gt;&nbsp;rabbitmq-discuss&nbsp;mailing&nbsp;list&lt;br&gt;<br>
&amp;gt;&nbsp;&lt;a&nbsp;href=&quot;mailto:rabbitmq-discuss@lists.rabbitmq.com&quot;&gt;rabbitmq-discuss@lists.rabbitmq.com&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&lt;a&nbsp;href=&quot;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&quot;&nbsp;target=&quot;_blank&quot;&gt;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&lt;/a&gt;&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;<br>

</tt>
