32a33
> import re
68c69,70
<                                  'internal': 'false'}},
---
>                          'internal': 'false'},
>                  'arguments': {'alternate-exchange':None}},
70,71c72,73
<                    'optional':  {'auto_delete': 'false', 'durable': 'true',
<                                  'node': None}},
---
>                    'optional':  {'auto_delete': 'false', 'durable': 'true', 'node': None},
>                  'arguments': {'x-dead-letter-exchange':None, 'x-dead-letter-routing-key':None, 'x-ha-policy':None}},
220a223,225
>       arguments = ""
>       if 'arguments' in args:
>               arguments = " ".join("{0}=...".format(f) for f in args['arguments'].keys())
222a228,229
>         if arguments != "":
>             res += " [{0}]".format(arguments)
558a566
>         arguments = obj['arguments']
565,566c573
<             assert_usage("=" in arg,
<                          'Argument "{0}" not in format name=value'.format(arg))
---
>             assert_usage("=" in arg, 'Argument "{0}" not in format name=value'.format(arg))
568,573c575,590
<             assert_usage(name in mandatory or name in optional.keys(),
<                          'Argument "{0}" not recognised'.format(name))
<             if 'json' in obj and name in obj['json']:
<                 upload[name] = json.loads(value)
<             else:
<                 upload[name] = value
---
>           if not name in arguments.keys():
>                   assert_usage(name in mandatory or name in optional.keys(), 'Argument "{0}" not recognised'.format(name))
>                   if 'json' in obj and name in obj['json']:
>                       upload[name] = json.loads(value)
>                   else:
>                       upload[name] = value
>
>       argumentsToSet = {}
>       for argument in args:
>           assert_usage("=" in argument, 'Argument "{0}" not in format name=value'.format(argument))
>           (name, value) = argument.split("=",1)
>           if name in arguments.keys():
>                   assert_usage(name in arguments.keys(), 'Argument "{0}" not recognised'.format(name))
>                   argumentsToSet[name] = value
>         upload['arguments'] = argumentsToSet
>
575,577c592
<             assert_usage(m in upload.keys(),
<                          'mandatory argument "{0}" required'.format(m))
<         upload['arguments'] = {}
---
>             assert_usage(m in upload.keys(), 'mandatory argument "{0}" required'.format(m))
889a905,906
>
>
