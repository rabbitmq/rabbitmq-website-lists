package com.csc.exceed.messageCenterLogging;


import java.util.Properties;

import org.springframework.amqp.AmqpException;
import org.springframework.amqp.core.AmqpAdmin;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.SimpleMessageConverter;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.csc.exceed.util.Constants;

/**
 * Loads the AMQP and RabbitMQ server configurations,
 *  
 * @author CSC
 *
 */
public class ProducerConfiguration {
	
	
	protected ConfigurableApplicationContext context;
	private Properties rabitConfigProperties;
	/*public ProducerConfiguration(){
		setContext();
		
	}
	
	public void setContext(){
		context = new  ClassPathXmlApplicationContext(Constants.AMQP_RESOURCE);
		
	}*/
	
	
	/**
	 * 	Loads the AMQP and RabbitMQ server configurations
	 *   
	 * @param queueName
	 * @return RabbitTemplate
	 */
	public RabbitTemplate getRabbitTemplate(String queueName) throws AmqpException{
		context = RabbitMqConnector.rabbitMqConnector;
		System.out.println("Context======"+context);
		rabitConfigProperties = (Properties)context.getBean(Constants.RABBIT_CONFIG_PROPERTIES);
		queueName = rabitConfigProperties.getProperty(queueName);
		RabbitTemplate rabbitTemplate = (RabbitTemplate)context.getBean(Constants.RABBIT_TEMPLATE);
		System.out.println("rabbitTemplate=========="+rabbitTemplate);
		AmqpAdmin amqpAdmin = (RabbitAdmin)context.getBean(Constants.AMQP_ADMIN);
		Queue queue = new Queue(queueName);
		DirectExchange exchange = new DirectExchange(queueName);
		Binding binding = BindingBuilder.bind(queue).to(exchange).with(queueName);
		amqpAdmin.declareQueue(queue);
		amqpAdmin.declareExchange(exchange);
		amqpAdmin.declareBinding(binding);
			
		//RabbitTemplate rabbitTemplate = (RabbitTemplate)context.getBean(Constants.RABBIT_TEMPLATE);
		//rabbitTemplate.setMessageConverter(converter());
		rabbitTemplate.setRoutingKey(queueName);
		rabbitTemplate.setQueue(queueName);
		
		return rabbitTemplate;
		
	}
	
	/*public AmqpAdmin amqpAdmin() {
		RabbitAdmin rabbitAdmin = (RabbitAdmin)context.getBean(Constants.AMQP_ADMIN);
		return rabbitAdmin ;
	}
	
	public SimpleMessageConverter converter(){
		SimpleMessageConverter converter = new SimpleMessageConverter();
		converter.setDefaultCharset(Constants.MESSAGE_CHAR_SET);
		return converter;
	}*/
	

}
