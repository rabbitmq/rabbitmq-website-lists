<tt>
Since&nbsp;the&nbsp;introduction&nbsp;of&nbsp;better&nbsp;clustering&nbsp;support&nbsp;and&nbsp;message&nbsp;queue&nbsp;failover&nbsp;in&nbsp;v2.6,&nbsp;my&nbsp;company&nbsp;is&nbsp;starting&nbsp;to&nbsp;consider&nbsp;moving&nbsp;to&nbsp;RabbitMQ.&nbsp;&amp;nbsp;But&nbsp;we&nbsp;had&nbsp;a&nbsp;few&nbsp;questions&nbsp;about&nbsp;the&nbsp;roadmap.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We&nbsp;are&nbsp;looking&nbsp;to&nbsp;ensure&nbsp;that&nbsp;a&nbsp;message&nbsp;is&nbsp;only&nbsp;considered&nbsp;received&nbsp;by&nbsp;an&nbsp;exchange&nbsp;from&nbsp;a&nbsp;producing&nbsp;app&nbsp;when&nbsp;at&nbsp;least&nbsp;two&nbsp;physical&nbsp;instances&nbsp;of&nbsp;Rabbit&nbsp;acknowledge&nbsp;the&nbsp;receipt&nbsp;of&nbsp;the&nbsp;message--similar&nbsp;to&nbsp;Riak's&nbsp;method.&nbsp;&amp;nbsp;Furthermore,&nbsp;we&nbsp;are&nbsp;looking&nbsp;to&nbsp;ensure&nbsp;that&nbsp;a&nbsp;message&nbsp;is&nbsp;considered&nbsp;consumed&nbsp;(ack'd)&nbsp;when&nbsp;when&nbsp;at&nbsp;least&nbsp;one&nbsp;physical&nbsp;instance&nbsp;receives&nbsp;the&nbsp;ack,&nbsp;which&nbsp;may&nbsp;result&nbsp;in&nbsp;a&nbsp;message&nbsp;being&nbsp;delivered&nbsp;more&nbsp;than&nbsp;once.&nbsp;&amp;nbsp;Essentially,&nbsp;we'd&nbsp;like&nbsp;to&nbsp;propose&nbsp;a&nbsp;configuration&nbsp;where&nbsp;Rabbit&nbsp;can&nbsp;fall&nbsp;on&nbsp;the&nbsp;AP&nbsp;side&nbsp;of&nbsp;CAP&nbsp;instead&nbsp;of&nbsp;the&nbsp;CA&nbsp;side.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;should&nbsp;mention&nbsp;that&nbsp;we're&nbsp;fully&nbsp;aware&nbsp;that&nbsp;the&nbsp;above&nbsp;scenario&nbsp;may&nbsp;cause&nbsp;a&nbsp;message&nbsp;to&nbsp;be&nbsp;pushed&nbsp;to&nbsp;consumers&nbsp;more&nbsp;than&nbsp;once&nbsp;and&nbsp;how&nbsp;messages&nbsp;may&nbsp;get&nbsp;out&nbsp;of&nbsp;order.&nbsp;&amp;nbsp;In&nbsp;general,&nbsp;however,&nbsp;these&nbsp;concepts&nbsp;are&nbsp;very&nbsp;much&nbsp;a&nbsp;part&nbsp;of&nbsp;message&nbsp;queuing&nbsp;system&nbsp;guarantees--that&nbsp;of&amp;nbsp;&lt;b&gt;at-least-once&lt;/b&gt;&amp;nbsp;delivery&nbsp;where&nbsp;order&nbsp;is&nbsp;not&nbsp;strictly&nbsp;guaranteed.&nbsp;&amp;nbsp;If&nbsp;we&nbsp;needed&nbsp;&lt;b&gt;at-most-once&lt;/b&gt;&nbsp;delivery&nbsp;and&nbsp;strict&nbsp;ordering,&nbsp;we'd&nbsp;use&nbsp;RPC.&nbsp;&amp;nbsp;In&nbsp;many&nbsp;regards,&nbsp;this&nbsp;is&nbsp;similar&nbsp;to&nbsp;the&nbsp;Amazon&nbsp;SQS&nbsp;architecture&nbsp;with&nbsp;a&nbsp;few&nbsp;key&nbsp;differences--one&nbsp;of&nbsp;the&nbsp;most&nbsp;important&nbsp;being&nbsp;stateful&nbsp;connections&nbsp;and&nbsp;&quot;push&quot;&nbsp;capabilities&nbsp;between&nbsp;the&nbsp;server&nbsp;and&nbsp;connected&nbsp;consumers&nbsp;which&nbsp;is&nbsp;where&nbsp;Amazon's&nbsp;SQS&nbsp;offering&nbsp;falls&nbsp;apart--that&nbsp;and&nbsp;message&nbsp;size&nbsp;restrictions.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;can&nbsp;see&nbsp;that&nbsp;many&nbsp;systems&nbsp;really&nbsp;want&nbsp;to&nbsp;ensure&nbsp;at-most-once&nbsp;delivery&nbsp;(or&nbsp;close&nbsp;to&nbsp;it)&nbsp;and&nbsp;how&nbsp;the&nbsp;requirement&nbsp;to&nbsp;re-order&nbsp;messages&nbsp;makes&nbsp;things&nbsp;difficult,&nbsp;but&nbsp;by&nbsp;relaxing&nbsp;the&nbsp;constraints&nbsp;(at&nbsp;least&nbsp;in&nbsp;some&nbsp;configurations),&nbsp;it&nbsp;enables&nbsp;so&nbsp;much&nbsp;more.&nbsp;&amp;nbsp;For&nbsp;example,&nbsp;if&nbsp;an&nbsp;instance&nbsp;of&nbsp;Rabbit&nbsp;goes&nbsp;offline&nbsp;under&nbsp;the&nbsp;current&nbsp;HA&nbsp;configuration,&nbsp;when&nbsp;it&nbsp;rejoins&nbsp;the&nbsp;cluster&nbsp;the&nbsp;queues&nbsp;are&nbsp;wiped&nbsp;clean.&nbsp;&amp;nbsp;Yuck.&nbsp;&amp;nbsp;So&nbsp;much&nbsp;for&nbsp;guaranteed&nbsp;delivery.&nbsp;&amp;nbsp;While&nbsp;under&nbsp;some&nbsp;kind&nbsp;of&nbsp;partition-tolerant&nbsp;configuration,&nbsp;the&nbsp;queues&nbsp;wouldn't&nbsp;need&nbsp;to&nbsp;be&nbsp;cleaned.&nbsp;&amp;nbsp;Instead,&nbsp;the&nbsp;consuming&nbsp;application&nbsp;would&nbsp;be&nbsp;responsible&nbsp;for&nbsp;message&nbsp;idempotency.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;At&nbsp;the&nbsp;same&nbsp;time,&nbsp;I&nbsp;realize&nbsp;that&nbsp;you&nbsp;guys&nbsp;might&nbsp;be&nbsp;bumping&nbsp;against&nbsp;restrictions&nbsp;in&nbsp;the&nbsp;AMQP&nbsp;standard,&nbsp;for&nbsp;example&nbsp;multiple&nbsp;consumers&nbsp;receiving&nbsp;copies&nbsp;of&nbsp;the&nbsp;message&nbsp;where&nbsp;one&nbsp;consumer&nbsp;ack's&nbsp;the&nbsp;message,&nbsp;while&nbsp;another&nbsp;nack's&nbsp;the&nbsp;message.&nbsp;&amp;nbsp;But&nbsp;that's&nbsp;something&nbsp;where&nbsp;the&nbsp;messaging&nbsp;system&nbsp;can't&nbsp;determine&nbsp;the&nbsp;proper&nbsp;course&nbsp;of&nbsp;action&nbsp;without&nbsp;knowing&nbsp;the&nbsp;business&nbsp;context.&nbsp;&amp;nbsp;In&nbsp;that&nbsp;case,&nbsp;I&nbsp;would&nbsp;imaging&nbsp;it&nbsp;should&nbsp;present&nbsp;that&nbsp;nack&nbsp;back&nbsp;to&nbsp;the&nbsp;producer&nbsp;as&nbsp;it&nbsp;currently&nbsp;does.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;bottom&nbsp;line&nbsp;in&nbsp;my&nbsp;question&nbsp;and&nbsp;proposal&nbsp;really&nbsp;has&nbsp;to&nbsp;do&nbsp;with&nbsp;message&nbsp;loss.&nbsp;&amp;nbsp;If&nbsp;the&nbsp;idea&nbsp;is&nbsp;to&nbsp;&lt;b&gt;not&nbsp;lose&nbsp;messages&lt;/b&gt;,&nbsp;I&nbsp;can&nbsp;see&nbsp;a&nbsp;partition-tolerant&nbsp;configuration&nbsp;bringing&nbsp;a&nbsp;lot&nbsp;to&nbsp;the&nbsp;table&nbsp;and&nbsp;where&nbsp;the&nbsp;consuming&nbsp;application&nbsp;must&nbsp;be&nbsp;resilient&nbsp;to&nbsp;duplicate&nbsp;messages&nbsp;and&nbsp;ordering,&nbsp;thus&nbsp;freeing&nbsp;up&nbsp;RabbitMQ&nbsp;from&nbsp;having&nbsp;to&nbsp;worry&nbsp;so&nbsp;much&nbsp;about&nbsp;that.&lt;/div&gt;
</tt>
