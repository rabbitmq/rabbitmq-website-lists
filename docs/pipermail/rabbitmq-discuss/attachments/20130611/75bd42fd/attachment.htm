<tt>
I&nbsp;am&nbsp;writing&nbsp;a&nbsp;REST&nbsp;server&nbsp;in&nbsp;Java&nbsp;and&nbsp;am&nbsp;trying&nbsp;to&nbsp;come&nbsp;up&nbsp;with&nbsp;the&nbsp;best&nbsp;approach&nbsp;for&nbsp;scalability.&nbsp;The&nbsp;server&nbsp;is&nbsp;deployed&nbsp;on&nbsp;Heroku.&nbsp;I&nbsp;am&nbsp;new&nbsp;to&nbsp;RabbitMQ/AMQ&nbsp;so&nbsp;I&nbsp;need&nbsp;some&nbsp;advice.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;From&nbsp;an&nbsp;architectural&nbsp;point&nbsp;of&nbsp;view&nbsp;I&nbsp;want&nbsp;to&nbsp;have&nbsp;one&nbsp;or&nbsp;more&nbsp;REST&nbsp;dynos&nbsp;running&nbsp;that&nbsp;delegate&nbsp;all&nbsp;of&nbsp;their&nbsp;work&nbsp;to&nbsp;one&nbsp;or&nbsp;more&nbsp;worker&nbsp;dynos.&nbsp;The&nbsp;REST&nbsp;server&nbsp;dynos&nbsp;must&nbsp;be&nbsp;stateless.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&nbsp;have&nbsp;two&nbsp;basic&nbsp;patterns&nbsp;to&nbsp;support.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;span&nbsp;style=&quot;line-height:&nbsp;normal;&quot;&gt;REST&nbsp;RPC.&nbsp;Basically,&nbsp;the&nbsp;client&nbsp;makes&nbsp;a&nbsp;call&nbsp;like&nbsp;GET&nbsp;/user/{id}.&nbsp;I&nbsp;delegate&nbsp;this&nbsp;call&nbsp;to&nbsp;a&nbsp;worker&nbsp;dyno&nbsp;that&nbsp;does&nbsp;a&nbsp;database&nbsp;lookup&nbsp;in&nbsp;the&nbsp;USER&nbsp;table&nbsp;for&nbsp;the&nbsp;specified&nbsp;ID&nbsp;and&nbsp;returns&nbsp;it.&nbsp;The&nbsp;REST&nbsp;interface&nbsp;then&nbsp;returns&nbsp;this.&nbsp;This&nbsp;to&nbsp;me&nbsp;seems&nbsp;like&nbsp;basic&nbsp;RPC.&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&nbsp;style=&quot;line-height:&nbsp;normal;&quot;&gt;REST&nbsp;ASYNC.&nbsp;In&nbsp;this&nbsp;model&nbsp;the&nbsp;client&nbsp;may&nbsp;call&nbsp;my&nbsp;REST&nbsp;server&nbsp;with&nbsp;a&nbsp;POST&nbsp;or&nbsp;a&nbsp;GET.&nbsp;Let's&nbsp;use&nbsp;the&nbsp;classic&nbsp;case&nbsp;of&nbsp;a&nbsp;long&nbsp;running&nbsp;task&nbsp;to&nbsp;format&nbsp;a&nbsp;graphic.&nbsp;I&nbsp;will&nbsp;create&nbsp;a&nbsp;JOB&nbsp;ID,&nbsp;return&nbsp;it&nbsp;to&nbsp;the&nbsp;client&nbsp;in&nbsp;an&nbsp;URI.&nbsp;The&nbsp;client&nbsp;calls&nbsp;the&nbsp;URI&nbsp;to&nbsp;poll&nbsp;the&nbsp;job&nbsp;until&nbsp;it&nbsp;is&nbsp;done&nbsp;and&nbsp;then&nbsp;eventually&nbsp;gets&nbsp;redirected&nbsp;to&nbsp;a&nbsp;URI&nbsp;that&nbsp;has&nbsp;the&nbsp;result.&nbsp;In&nbsp;this&nbsp;case,&nbsp;when&nbsp;I&nbsp;get&nbsp;the&nbsp;initial&nbsp;REST&nbsp;call&nbsp;I&nbsp;will&nbsp;generate&nbsp;a&nbsp;UID&nbsp;for&nbsp;it,&nbsp;submit&nbsp;it&nbsp;to&nbsp;the&nbsp;worker.&nbsp;There&nbsp;are&nbsp;several&nbsp;ways&nbsp;I&nbsp;can&nbsp;do&nbsp;the&nbsp;polling&nbsp;and&nbsp;returning&nbsp;of&nbsp;the&nbsp;result.&nbsp;A&nbsp;lot&nbsp;of&nbsp;that&nbsp;depends&nbsp;on&nbsp;how&nbsp;I&nbsp;decide&nbsp;to&nbsp;interact&nbsp;with&nbsp;the&nbsp;worker.&nbsp;&amp;nbsp;Is&nbsp;it&nbsp;RPC?&nbsp;AKKA?&nbsp;AMQP?&nbsp;&amp;nbsp;Because&nbsp;there&nbsp;may&nbsp;be&nbsp;more&nbsp;than&nbsp;one&nbsp;REST&nbsp;service&nbsp;dyno,&nbsp;the&nbsp;request&nbsp;to&nbsp;post&nbsp;the&nbsp;job&nbsp;may&nbsp;happen&nbsp;on&nbsp;one&nbsp;REST&nbsp;server&nbsp;and&nbsp;the&nbsp;polling&nbsp;request&nbsp;may&nbsp;be&nbsp;routed&nbsp;to&nbsp;another.&nbsp;So&nbsp;it&nbsp;must&nbsp;be&nbsp;stateless.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br&gt;So&nbsp;here's&nbsp;my&nbsp;question.&nbsp;First,&nbsp;should&nbsp;I&nbsp;be&nbsp;using&nbsp;RabbitMQ&nbsp;for&nbsp;this&nbsp;or&nbsp;is&nbsp;there&nbsp;a&nbsp;better&nbsp;solution?&nbsp;If&nbsp;I&nbsp;am&nbsp;using&nbsp;RabbitMQ&nbsp;must&nbsp;I&nbsp;implement&nbsp;the&nbsp;RPC&nbsp;and&nbsp;ASYNC&nbsp;patterns&nbsp;myself&nbsp;directly&nbsp;on&nbsp;top&nbsp;of&nbsp;RabbitMQ&nbsp;or&nbsp;are&nbsp;there&nbsp;libraries&nbsp;out&nbsp;there&nbsp;that&nbsp;create&nbsp;a&nbsp;layer&nbsp;of&nbsp;abstraction&nbsp;on&nbsp;top&nbsp;of&nbsp;RabbitMQ&nbsp;so&nbsp;I&nbsp;can&nbsp;do&nbsp;both&nbsp;of&nbsp;these&nbsp;simply?&nbsp;If&nbsp;I'm&nbsp;going&nbsp;to&nbsp;use&nbsp;RabbitMQ&nbsp;I'm&nbsp;hoping&nbsp;to&nbsp;use&nbsp;CloudAMQP&nbsp;on&nbsp;Heroku.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Robert&lt;/div&gt;
</tt>
