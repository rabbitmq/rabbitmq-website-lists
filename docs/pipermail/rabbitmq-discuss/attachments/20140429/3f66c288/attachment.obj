package com.att.dlife.dlcore.mbus.client.common;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.BindingBuilder.HeadersExchangeMapConfigurer;
import org.springframework.amqp.core.Exchange;
import org.springframework.amqp.core.FanoutExchange;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.scheduling.annotation.Scheduled;

import com.att.dlife.dlcore.mbus.client.consumer.ConsumerUtil;

public class BindingBean {

	private static final String Queue = null;

	@Scheduled(fixedDelay = 60000)
	public void executeBinding() {

		System.out.println("*********IN executeBinding***********");

		Binding binding = (org.springframework.amqp.core.Binding) ConsumerUtil.consumerContext
				.getBean("binding1");

		// RabbitAdmin admin = (RabbitAdmin)

		Map<String, Object> bArgs = binding.getArguments();

		bArgs.put("srcDeviceId", UUID.randomUUID().toString());

		// Binding binding1 = new Binding(binding.getDestination(),
		// binding.getDestinationType(), binding.getExchange(),
		// binding.getRoutingKey(), bArgs);

		Queue q = (Queue) ConsumerUtil.consumerContext.getBean("queue1");
		System.out.println("********Queue : " + q);
		Exchange e = (Exchange) ConsumerUtil.consumerContext
				.getBean("exchange1");
		System.out.println("********Exchange : " + e);

		Binding b = BindingBuilder.bind(q).to(e).with(binding.getRoutingKey()).and(bArgs);

		System.out.println("********RoutingKey : " + binding.getRoutingKey());
		System.out.println("********Arguments : " + bArgs);

		// b.notifyAll();
		System.out.println("********Binding : " + b);

		// BindingBuilder.bind((org.springframework.amqp.core.Exchange)
		// ConsumerUtil.consumerContext.getBean("queue1"));

		// BindingBuilder.HeadersExchangeMapConfigurer
		// headersExchangeMapConfigurer = new
		// BindingBuilder.HeadersExchangeMapConfigurer(null, null);
		// Map<String, Object> bArgs = binding.getArguments();

		// bArgs.put("srcDeviceId", UUID.randomUUID().toString());

		/*
		 * String[] mp =
		 * ConsumerUtil.consumerContext.getBeanNamesForType(RabbitAdmin
		 * .class);//.getBean("admin1"); Map<String, Object> arguments = new
		 * HashMap<String,Object>(); String rnd = UUID.randomUUID().toString();
		 * arguments.put("srcDeviceId", rnd);
		 * 
		 * for (String key : mp) {
		 * 
		 * 
		 * RabbitAdmin admin = (RabbitAdmin)
		 * ConsumerUtil.consumerContext.getBean(key);
		 * 
		 * System.out.println("*********IN executeBinding admin***********" +
		 * admin);
		 * 
		 * 
		 * admin.declareBinding(new Binding(binding.getDestination(),
		 * binding.getDestinationType(), binding.getExchange(),
		 * binding.getRoutingKey(), arguments));
		 * 
		 * }
		 */

		// Map<String, Object> arguments = binding.getArguments();
		// String rnd = UUID.randomUUID().toString();
		// arguments.put("srcGwyGuId", rnd);

		// ConsumerUtil.consumerContext.refresh();

		/*
		 * String rnd = UUID.randomUUID().toString(); DLCoreBindingFactoryBean
		 * bean = new DLCoreBindingFactoryBean();
		 * 
		 * DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory)
		 * ConsumerUtil.consumerContext.getBeanFactory();
		 * 
		 * try{
		 * 
		 * //Register the bean in the IoC BeanDefinition bdb = new
		 * GenericBeanDefinition();
		 * bdb.setBeanClassName(bean.getClass().getName());
		 * bdb.setScope("singleton");
		 * 
		 * beanFactory.registerBeanDefinition( UUID.randomUUID().toString()
		 * ,bdb);
		 * 
		 * 
		 * System.out.println("*********IN executeBinding***********" +
		 * ConsumerUtil.consumerContext.getBean(rnd));
		 * 
		 * }catch (Exception e) { e.printStackTrace();
		 * 
		 * }
		 */

	}

}
