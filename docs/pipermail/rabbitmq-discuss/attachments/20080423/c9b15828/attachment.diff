156,169c156
< 
< route(Exchange = #exchange{name = _Name, type = Type, arguments = Args}, RoutingKey) ->
<     H = route_sub(Exchange, RoutingKey),
<     List = case Type of
<                topic -> {_Set, L} = Args,
<                         L;
<                _ -> Args
<            end,
<     case check_anycast(List) of 
<         0 -> H;
<         1 -> random_queue(H)
<     end.
< 
< route_sub(#exchange{name = Name, type = topic, arguments = _Args}, RoutingKey) ->
---
> route(#exchange{name = Name, type = topic, arguments = _Args}, RoutingKey) ->
183c170
< route_sub(#exchange{name = Name, type = Type, arguments = _Args}, RoutingKey) ->
---
> route(#exchange{name = Name, type = Type, arguments = _Args}, RoutingKey) ->
190,211d176
< check_anycast([]) ->
<     0;
< 
< check_anycast([H|T]) ->
<     {Arg, _Type, Value} = H,
<     if
<         Arg == <<"anycast">> -> Value;
<         true -> check_anycast(T)
<     end.
< 
< random_queue(Handlers) ->
<     [lists:nth(random_uniform(length(Handlers)), Handlers)].
< 
< random_uniform(N) ->
<     Seed = case get(random_seed) of
<                undefined -> erlang:now();
<                Tuple -> Tuple
<            end,
<     {R, NewSeed} = random:uniform_s(N, Seed),
<     put(random_seed, NewSeed),
<     R.
< 