package com.att.dlife.dlcore.mbus.client;

import javax.annotation.PostConstruct;

import java.io.*;
import java.security.*;

import javax.net.ssl.*;

import org.apache.log4j.Logger;

public class DLCoreConnectionFactory extends
		com.rabbitmq.client.ConnectionFactory {

	/** The log. */
	private Logger log = Logger.getLogger(DLCoreConnectionFactory.class);
	
	private boolean ssl = false;
	private String keystorePath;
	private String keystorePasswd;

	private String truststorePath;
	private String truststorePasswd;
	
	
	

	public DLCoreConnectionFactory() {
		super();
		System.out.println("******************************************");
		System.out.println("*********DLCoreConnectionFactory()************");
		System.out.println("******************************************");
	}

	@PostConstruct
	public void afterCF() {
		
		
		System.out.println("******************************************");
		System.out.println("*********afterCF()************SSL : "+ssl);
		System.out.println("******************************************");

		try {
			if (ssl) {
				KeyManagerFactory kmf = null;
				TrustManagerFactory tmf = null;
				SSLContext c = SSLContext.getInstance("SSLv3");
				if (Util.isNotEmpty(keystorePath) && Util.isNotEmpty(keystorePasswd)) {
					kmf = KeyManagerFactory.getInstance("SunX509");
					char[] keyPassphrase = keystorePasswd.toCharArray();
					KeyStore ks = KeyStore.getInstance("PKCS12");
					ks.load(new FileInputStream(keystorePath), keyPassphrase);

					kmf.init(ks, keyPassphrase);
				}
				if (Util.isNotEmpty(truststorePath)  && Util.isNotEmpty(truststorePasswd)) {
					 tmf =  TrustManagerFactory.getInstance("SunX509");
					char[] trustPassphrase = truststorePasswd.toCharArray();
					KeyStore tks = KeyStore.getInstance("JKS");
					tks.load(new FileInputStream(truststorePath), trustPassphrase);

					tmf.init(tks);
				}

				c.init((kmf != null?kmf.getKeyManagers(): null), tmf.getTrustManagers(), null);

				this.useSslProtocol(c);
			}
		} catch (Exception e) {
			String stack = Util.errorStr(e);
			log.error(stack);
		}
	}

	public boolean isSsl() {
		return ssl;
	}

	public void setSsl(boolean ssl) {
		this.ssl = ssl;
	}

	public String getKeystorePath() {
		return keystorePath;
	}

	public void setKeystorePath(String keystorePath) {
		this.keystorePath = keystorePath;
	}

	public String getKeystorePasswd() {
		return keystorePasswd;
	}

	public void setKeystorePasswd(String keystorePasswd) {
		this.keystorePasswd = keystorePasswd;
	}

	public String getTruststorePath() {
		return truststorePath;
	}

	public void setTruststorePath(String truststorePath) {
		this.truststorePath = truststorePath;
	}

	public String getTruststorePasswd() {
		return truststorePasswd;
	}

	public void setTruststorePasswd(String truststorePasswd) {
		this.truststorePasswd = truststorePasswd;
	}

}
