<tt>
I&nbsp;would&nbsp;like&nbsp;to&nbsp;do&nbsp;redundant&nbsp;one-to-many&nbsp;multicasting&nbsp;from&nbsp;the&nbsp;java&nbsp;AMQP&nbsp;client. &nbsp;Well,&nbsp;actually,&nbsp;I&nbsp;am&nbsp;not&nbsp;sure&nbsp;if&nbsp;the&nbsp;word&nbsp;redundant&nbsp;is&nbsp;the&nbsp;proper&nbsp;terminology&nbsp;or&nbsp;if&nbsp;I&nbsp;really&nbsp;need&nbsp;to&nbsp;do&nbsp;multicasting&nbsp;at&nbsp;all. &nbsp;&lt;br&gt;&lt;br&gt;My&nbsp;requirement&nbsp;is&nbsp;to&nbsp;have&nbsp;two&nbsp;parallel&nbsp;(forked,&nbsp;or&nbsp;whatever)&nbsp;queues,&nbsp;one&nbsp;of&nbsp;which&nbsp;the&nbsp;regular&nbsp;production&nbsp;process&nbsp;listens&nbsp;to,&nbsp;and&nbsp;one&nbsp;of&nbsp;which&nbsp;a&nbsp;backup&nbsp;process&nbsp;listens&nbsp;to.&lt;br&gt;<br>
&lt;br&gt;Rabbitmq&nbsp;seems&nbsp;to&nbsp;call&nbsp;this&nbsp;sort&nbsp;of&nbsp;thing&nbsp;one-to-many&nbsp;broadcasting&nbsp;and&nbsp;multicast. <br>
There&nbsp;is&nbsp;not&nbsp;a&nbsp;lot&nbsp;of&nbsp;documentation&nbsp;about&nbsp;it,&nbsp;just&nbsp;a&nbsp;blurb&nbsp;&lt;a&nbsp;title=&quot;here&quot;&nbsp;href=&quot;http://www.rabbitmq.com/faq.html#scenarios&quot;&nbsp;id=&quot;xayb&quot;&gt;here&lt;/a&gt;&nbsp;and&nbsp;then&nbsp;the&nbsp;code&nbsp;here&nbsp;-&amp;gt;&nbsp;rabbitmq-java-client-1.5.4/test/src/com/rabbitmq/examples/MulticastMain.java&lt;br&gt;<br>
&lt;br&gt;Looking&nbsp;at&nbsp;a&nbsp;snippet&nbsp;from&nbsp;the&nbsp;multicast&nbsp;code&nbsp;below,&nbsp;it&nbsp;is&nbsp;clear&nbsp;that&nbsp;each&nbsp;producer&nbsp;and&nbsp;consumer&nbsp;runs&nbsp;on&nbsp;its&nbsp;own&nbsp;thread,&nbsp;on&nbsp;its&nbsp;own&nbsp;connection,&nbsp;on&nbsp;its&nbsp;own&nbsp;channel,&nbsp;and&nbsp;each&nbsp;consumer&nbsp;creates&nbsp;its&nbsp;own&nbsp;queue. &nbsp;But&nbsp;they&nbsp;all&nbsp;use&nbsp;one&nbsp;exchange&nbsp;name,&nbsp;one&nbsp;ID,&nbsp;and&nbsp;one&nbsp;address&nbsp;(host&nbsp;and&nbsp;port.) &nbsp;Is&nbsp;it&nbsp;solely&nbsp;these&nbsp;last&nbsp;elements&nbsp;and&nbsp;what&nbsp;is&nbsp;happening&nbsp;in&nbsp;channel.queueBind&nbsp;that&nbsp;make&nbsp;this&nbsp;multicast? &nbsp;What&nbsp;exactly&nbsp;makes&nbsp;it&nbsp;multicasting?&lt;br&gt;<br>
&lt;br&gt;Lastly,&nbsp;am&nbsp;I&nbsp;even&nbsp;headed&nbsp;in&nbsp;the&nbsp;right&nbsp;direction&nbsp;for&nbsp;what&nbsp;I&nbsp;want&nbsp;to&nbsp;do? &nbsp;It&nbsp;appears&nbsp;that&nbsp;I&nbsp;would&nbsp;ahve&nbsp;to&nbsp;manually&nbsp;write&nbsp;the&nbsp;code&nbsp;the&nbsp;puts&nbsp;a&nbsp;message&nbsp;into&nbsp;two&nbsp;duplicate&nbsp;queues&nbsp;to&nbsp;achieve&nbsp;the&nbsp;queue&nbsp;for&nbsp;the&nbsp;backup.&lt;br&gt;&lt;br&gt;<br>
What&nbsp;else&nbsp;is&nbsp;different&nbsp;about&nbsp;this&nbsp;multicasting&nbsp;and&nbsp;the&nbsp;two&nbsp;independent&nbsp;queues&nbsp;in &nbsp;the&nbsp;clojure&nbsp;example&nbsp;code&nbsp;below:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Clojure,&nbsp;two&nbsp;independent&nbsp;queues:&lt;br&gt;&lt;blockquote&gt;(defn&nbsp;two-independent-queues&nbsp;[]&lt;br&gt; &nbsp;(with-open&nbsp;[connection&nbsp;(let&nbsp;[params&nbsp;(doto&nbsp;(ConnectionParameters.)&lt;br&gt;<br>
                                       &nbsp;(.setVirtualHost&nbsp;&amp;quot;/&amp;quot;)&lt;br&gt;                                       &nbsp;(.setUsername&nbsp;&amp;quot;guest&amp;quot;)&lt;br&gt;                                       &nbsp;(.setPassword&nbsp;&amp;quot;guest&amp;quot;))&lt;br&gt;<br>
                              &nbsp;factory&nbsp;(ConnectionFactory.&nbsp;params)]&lt;br&gt;                          &nbsp;(.newConnection&nbsp;factory&nbsp;&amp;quot;localhost&amp;quot;))&lt;br&gt;             &nbsp;channel&nbsp;(.createChannel&nbsp;connection)&lt;br&gt;             &nbsp;channel2&nbsp;(.createChannel&nbsp;connection)]&lt;br&gt;<br>
   &nbsp;(let&nbsp;[queue-name&nbsp;(random-id)&lt;br&gt;         &nbsp;queue-name2&nbsp;(random-id)&lt;br&gt;         &nbsp;consumer&nbsp;(bootstrap-consumer&nbsp;channel&nbsp;exchangeName&nbsp;&amp;quot;direct&amp;quot;&nbsp;queue-name&nbsp;id)&lt;br&gt;   &nbsp; &nbsp;consumer2&nbsp;(bootstrap-consumer&nbsp;channel2&nbsp;exchangeName&nbsp;&amp;quot;direct&amp;quot;&nbsp;queue-name2&nbsp;id)]&lt;br&gt;<br>
     &nbsp;(publish&nbsp;channel&nbsp;queue-name&nbsp;&amp;quot;hello&amp;quot;)&lt;br&gt;     &nbsp;(publish&nbsp;channel2&nbsp;queue-name2&nbsp;&amp;quot;goodbye&amp;quot;)&lt;br&gt;     &nbsp;(str&nbsp;(consume&nbsp;channel&nbsp;queue-name&nbsp;consumer)&nbsp;&amp;quot; &nbsp;&amp;quot;&nbsp;(consume&nbsp;channel2&nbsp;queue-name2&nbsp;consumer2)))))&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;java,&nbsp;multicast:&lt;br&gt;&lt;br&gt;&lt;blockquote&gt; //setup&lt;br&gt;           &nbsp;String&nbsp;id&nbsp;=&nbsp;UUID.randomUUID().toString();&lt;br&gt;           &nbsp;Stats&nbsp;stats&nbsp;=&nbsp;new&nbsp;Stats(1000L&nbsp;*&nbsp;samplingInterval);&lt;br&gt;           &nbsp;Address[]&nbsp;addresses&nbsp;=&nbsp;new&nbsp;Address[]&nbsp;{&lt;br&gt;<br>
               &nbsp;new&nbsp;Address(hostName,&nbsp;portNumber)&lt;br&gt;           &nbsp;};&lt;br&gt;           &nbsp;ConnectionParameters&nbsp;params&nbsp;=&nbsp;new&nbsp;ConnectionParameters();&lt;br&gt;           &nbsp;Thread[]&nbsp;consumerThreads&nbsp;=&nbsp;new&nbsp;Thread[consumerCount];&lt;br&gt;           &nbsp;Connection[]&nbsp;consumerConnections&nbsp;=&nbsp;new&nbsp;Connection[consumerCount];&lt;br&gt;<br>
           &nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;consumerCount;&nbsp;i++)&nbsp;{&lt;br&gt;               &nbsp;System.out.println(&amp;quot;starting&nbsp;consumer&nbsp;#&amp;quot;&nbsp;+&nbsp;i);&lt;br&gt;               &nbsp;Connection&nbsp;conn&nbsp;=&nbsp;new&nbsp;ConnectionFactory(params).newConnection(addresses,&nbsp;maxRedirects);&lt;br&gt;<br>
               &nbsp;consumerConnections[i]&nbsp;=&nbsp;conn;&lt;br&gt;               &nbsp;Channel&nbsp;channel&nbsp;=&nbsp;conn.createChannel();&lt;br&gt;               &nbsp;if&nbsp;(consumerTxSize&nbsp;&amp;gt;&nbsp;0)&nbsp;channel.txSelect();&lt;br&gt;               &nbsp;channel.exchangeDeclare(exchangeName,&nbsp;exchangeType);&lt;br&gt;<br>
               &nbsp;Queue.DeclareOk&nbsp;res&nbsp;=&nbsp;channel.queueDeclare();&lt;br&gt;               &nbsp;String&nbsp;queueName&nbsp;=&nbsp;res.getQueue();&lt;br&gt;               &nbsp;QueueingConsumer&nbsp;consumer&nbsp;=&nbsp;new&nbsp;QueueingConsumer(channel);&lt;br&gt;               &nbsp;channel.basicConsume(queueName,&nbsp;autoAck,&nbsp;consumer);&lt;br&gt;<br>
               &nbsp;channel.queueBind(queueName,&nbsp;exchangeName,&nbsp;id);&lt;br&gt;               &nbsp;Thread&nbsp;t&nbsp;=&nbsp;&lt;br&gt;                   &nbsp;new&nbsp;Thread(new&nbsp;Consumer(consumer,&nbsp;id,&lt;br&gt;                                           &nbsp;consumerTxSize,&nbsp;autoAck,&lt;br&gt;<br>
                                           &nbsp;stats,&nbsp;timeLimit));&lt;br&gt;               &nbsp;consumerThreads[i]&nbsp;=&nbsp;t;&lt;br&gt;               &nbsp;t.start();&lt;br&gt;           &nbsp;}&lt;br&gt;           &nbsp;Thread[]&nbsp;producerThreads&nbsp;=&nbsp;new&nbsp;Thread[producerCount];&lt;br&gt;<br>
           &nbsp;Connection[]&nbsp;producerConnections&nbsp;=&nbsp;new&nbsp;Connection[producerCount];&lt;br&gt;           &nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;producerCount;&nbsp;i++)&nbsp;{&lt;br&gt;               &nbsp;System.out.println(&amp;quot;starting&nbsp;producer&nbsp;#&amp;quot;&nbsp;+&nbsp;i);&lt;br&gt;               &nbsp;Connection&nbsp;conn&nbsp;=&nbsp;new&nbsp;ConnectionFactory(params).newConnection(addresses,&nbsp;maxRedirects);&lt;br&gt;<br>
               &nbsp;producerConnections[i]&nbsp;=&nbsp;conn;&lt;br&gt;               &nbsp;Channel&nbsp;channel&nbsp;=&nbsp;conn.createChannel();&lt;br&gt;               &nbsp;if&nbsp;(producerTxSize&nbsp;&amp;gt;&nbsp;0)&nbsp;channel.txSelect();&lt;br&gt;               &nbsp;channel.exchangeDeclare(exchangeName,&nbsp;exchangeType);&lt;br&gt;<br>
               &nbsp;Thread&nbsp;t&nbsp;=&nbsp;&lt;br&gt;                   &nbsp;new&nbsp;Thread(new&nbsp;Producer(channel,&nbsp;exchangeName,&nbsp;id,&lt;br&gt;                                           &nbsp;flags,&nbsp;producerTxSize,&lt;br&gt;                                           &nbsp;1000L&nbsp;*&nbsp;samplingInterval,&lt;br&gt;<br>
                                           &nbsp;rateLimit,&nbsp;minMsgSize,&nbsp;timeLimit));&lt;br&gt;               &nbsp;producerThreads[i]&nbsp;=&nbsp;t;&lt;br&gt;               &nbsp;t.start();&lt;br&gt;           &nbsp;}&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;
</tt>
