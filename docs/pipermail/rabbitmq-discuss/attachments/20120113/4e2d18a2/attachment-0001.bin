import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.QueueingConsumer;
import java.sql.Timestamp;
import java.util.Date;
import java.lang.Thread;


public class ReceiveLogs {

        
  public static void main(String[] argv) throws Exception {

  ConnectionFactory factory = new ConnectionFactory();
    		factory.setHost("10.6.68.61");
    		Connection connection = factory.newConnection();
			
	for(int i = 0 ; i < 2000; i ++){
        Go t = new Go (connection);
        new Thread(t). start ( );
	}   
  }

}

class Go implements Runnable 
{

 	private static final String EXCHANGE_NAME = "logs";
	private Connection myCon;

    Go (Connection con) 
    {
		myCon = con;
    }
    
    public void run ( ) 
    {
		try{
             
    		Channel channel = myCon.createChannel();

    		channel.exchangeDeclare(EXCHANGE_NAME, "fanout");
    		String queueName = channel.queueDeclare().getQueue();
    		channel.queueBind(queueName, EXCHANGE_NAME, "");
    
    		System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

    		QueueingConsumer consumer = new QueueingConsumer(channel);
    		channel.basicConsume(queueName, true, consumer);

    		while (true) {
      			QueueingConsumer.Delivery delivery = consumer.nextDelivery();
      			String message = new String(delivery.getBody());

      			java.util.Date date= new java.util.Date();

      			System.out.println(new Timestamp(date.getTime()) + " Received message");
    		}
		}
		catch(Exception ex){
			System.out.println(ex.toString());
		}

    }
}

