using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RabbitMQ.Client;
using System.Threading;
using System.Diagnostics;

namespace RabbitTest {
	class Program {
		static int times = 100;
		static int numThreads = 500;
		static Thread[] threads = new Thread[numThreads];
		static string server = "10.12.0.190";
		static string routingKey = "abc";
		static string exchange = "test-exchange";
		static string queue = "test-queue";
		static byte[] data = null;

		static void Main(string[] args) {
			var garbage = "dslkfjdslkfjdslkjfl232ksdjflksd23jflkdsjflkjsdlkfjs2345234dlfjldskjflksdjflkdsjflksdjflkdsjjlkjkl;kj";
			var builder = new StringBuilder();

			for (int i = 0; i < 10; i++) {
				builder.Append(garbage);
			}

			data = UTF8Encoding.UTF8.GetBytes(builder.ToString());

			using (var conn = new ConnectionFactory().CreateConnection(server)) {
				using (var ch = conn.CreateModel()) {
					ch.ExchangeDeclare(exchange, ExchangeType.Direct);
					ch.QueueDeclare(queue);
					ch.QueueBind(queue, exchange, routingKey, false, null);
				}
			}


			for (int i = 0; i < numThreads; i++) {
				threads[i] = new Thread(new ThreadStart(DoWork));
			}

			var start = DateTime.Now;

			for (int i = 0; i < numThreads; i++) {
				threads[i].Start();
			}

			for (int i = 0; i < numThreads; i++) {
				threads[i].Join();
			}

			var end = DateTime.Now;

			Console.WriteLine((end - start).ToString());
			Console.ReadLine();
		}

		public static void DoWork() {
			var factory = new ConnectionFactory();
			var param = factory.Parameters;

			param.RequestedHeartbeat = 100;
			using (var conn = factory.CreateConnection(server)) {
				using (var ch = conn.CreateModel()) {
					for (int i = 0; i < times; i++) {
						ch.BasicPublish(exchange, routingKey, null, data);
					}
				}
			}
		}
	}
}