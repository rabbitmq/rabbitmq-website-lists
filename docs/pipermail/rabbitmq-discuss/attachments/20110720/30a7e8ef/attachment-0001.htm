<tt>
Hi,&lt;br&gt;&lt;br&gt;I&nbsp;use&nbsp;Subscription&nbsp;from&nbsp;the&nbsp;RabbitMQ.Client.MessagePatterns&nbsp;namespace&nbsp;to&nbsp;subscribe&nbsp;to&nbsp;multiple&nbsp;queues.&nbsp;I&nbsp;then&nbsp;read&nbsp;messages&nbsp;based&nbsp;on&nbsp;the&nbsp;subscription&nbsp;(code&nbsp;below).&nbsp;However,&nbsp;I&nbsp;am&nbsp;not&nbsp;able&nbsp;to&nbsp;read&nbsp;messages&nbsp;other&nbsp;than&nbsp;the&nbsp;first&nbsp;one.&nbsp;i.e.&nbsp;Whether&nbsp;I&nbsp;try&nbsp;to&nbsp;read&nbsp;from&nbsp;multiple&nbsp;queues(subscriptions)&nbsp;or&nbsp;a&nbsp;single&nbsp;queue(subscription).&nbsp;I&nbsp;do&nbsp;Ack()&nbsp;at&nbsp;each&nbsp;iteration&nbsp;of&nbsp;the&nbsp;message&nbsp;reading.&nbsp;Could&nbsp;you&nbsp;see&nbsp;where&nbsp;the&nbsp;run&nbsp;time&nbsp;error&nbsp;originated&nbsp;at&nbsp;for&nbsp;me?&lt;br&gt;<br>
&lt;br&gt;Thanks&lt;br&gt;&lt;br&gt;private&nbsp;List&amp;lt;Subscription&amp;gt;&nbsp;subscriptions&nbsp;=&nbsp;new&nbsp;List&amp;lt;Subscription&amp;gt;();&lt;br&gt;Subscription&nbsp;sub&nbsp;=&nbsp;null;&lt;br&gt;&lt;br&gt;&lt;br&gt;   &nbsp;public&nbsp;Measurement&nbsp;readMessage()&lt;br&gt;  &nbsp; &nbsp;  &nbsp;  &nbsp;{&lt;br&gt;  &nbsp;   &nbsp;   &nbsp; Measurement&nbsp;m&nbsp;=&nbsp;new&nbsp;Measurement();&lt;br&gt;<br>
  &nbsp;   &nbsp;   &nbsp; foreach(Subscription&nbsp;element&nbsp;in&nbsp;subscriptions)&lt;br&gt;  &nbsp;   &nbsp;   &nbsp; {&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp; if(&nbsp;element.QueueName&nbsp;==&nbsp;null)&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp; {&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; m&nbsp;=&nbsp;null;&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp; }&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp; else&nbsp;&lt;br&gt;<br>
  &nbsp;   &nbsp;   &nbsp;   &nbsp; {&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; BasicDeliverEventArgs&nbsp;ev&nbsp;=&nbsp;element.Next();&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; if(&nbsp;ev&nbsp;!=&nbsp;null)&nbsp;{&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; m&nbsp;=&nbsp;Measurement.AltDeSerialize(&nbsp;ev.Body&nbsp;);&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; &lt;a&nbsp;href=&quot;http://m.id&quot;&gt;m.id&lt;/a&gt;&nbsp;=&nbsp;element.QueueName;&lt;br&gt;<br>
  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; element.Ack();&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; return&nbsp;m;&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; }&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; m&nbsp;= &nbsp;null;  &nbsp; &lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; element.Ack();&lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp;   &nbsp; &lt;br&gt;  &nbsp;   &nbsp;   &nbsp;   &nbsp; }&lt;br&gt;<br>
  &nbsp;   &nbsp;   &nbsp; }  &nbsp; &lt;br&gt;  &nbsp;   &nbsp;   &nbsp; System.Console.WriteLine(&amp;quot;No&nbsp;message&nbsp;in&nbsp;the&nbsp;queue(s)&nbsp;at&nbsp;this&nbsp;time.&amp;quot;);&lt;br&gt;  &nbsp;   &nbsp;   &nbsp; return&nbsp;m;&lt;br&gt;  &nbsp;   &nbsp; }&lt;br&gt;  &nbsp;   &nbsp; &lt;br&gt;  &nbsp;   &nbsp; public&nbsp;void&nbsp;subscribeToQueue(string&nbsp;queueName)&nbsp;&lt;br&gt;<br>
  &nbsp;   &nbsp; {  &nbsp; &lt;br&gt;  &nbsp;   &nbsp;   &nbsp; sub&nbsp;=&nbsp;new&nbsp;Subscription(channel,&nbsp;queueName);&lt;br&gt;  &nbsp;   &nbsp;   &nbsp; subscriptions.Add(sub);  &nbsp; &lt;br&gt;  &nbsp;   &nbsp; }
</tt>
