<tt>
Hi&nbsp;all,&lt;br&gt;&lt;br&gt;&lt;font&gt;&lt;font&gt;Has&nbsp;anyone&nbsp;used&nbsp;rabbitmq-c&nbsp;with&nbsp;high&nbsp;availability&nbsp;configuration?&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/font&gt;I<br>
&nbsp;am&nbsp;stuck&nbsp;with&nbsp;a&nbsp;memory&nbsp;corruption&nbsp;when&nbsp;using&nbsp;rabbitmq-c&nbsp;with&nbsp;high&nbsp;<br>
availability&nbsp;configuration&nbsp;in&nbsp;my&nbsp;own&nbsp;code&nbsp;(the&nbsp;crash&nbsp;is&nbsp;not&nbsp;in&nbsp;librabbitmq).&nbsp;For&nbsp;HA,&nbsp;since&nbsp;the&nbsp;nodes&nbsp;names&nbsp;have&nbsp;to&nbsp;be&nbsp;<br>
taken&nbsp;from&nbsp;a&nbsp;config&nbsp;file,&nbsp;I&nbsp;have&nbsp;implemented&nbsp;the&nbsp;following&nbsp;way&nbsp;of&nbsp;<br>
getting&nbsp;the&nbsp;key&nbsp;value&nbsp;params.&lt;br&gt;<br>
&lt;br&gt;&lt;br&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&amp;nbsp;&amp;nbsp;&nbsp;std::map&amp;lt;std::string,&nbsp;std::vector&amp;lt;std::string&amp;gt;&nbsp;&amp;gt;ha_map;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&amp;nbsp;&amp;nbsp;&nbsp;//&nbsp;Load&nbsp;the&nbsp;map&nbsp;here.&nbsp;Typical&nbsp;values:&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&amp;nbsp;&amp;nbsp;&nbsp;//&nbsp;x-ha-policy&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&nbsp;-&nbsp;&lt;/font&gt;nodes&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;;&lt;/font&gt;&nbsp;x-ha-policy-params&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&nbsp;-&nbsp;&lt;/font&gt;rabbit@centos,rabbit@centos&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&amp;nbsp;&amp;nbsp;&nbsp;amqp_table_t&nbsp;table;&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&amp;nbsp;&amp;nbsp;&nbsp;std::vector&amp;lt;amqp_field_value_&lt;wbr&gt;t_&nbsp;*&amp;gt;&nbsp;array_ptrs;&lt;br&gt;<br>
&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;memset(&amp;amp;table,&nbsp;0,&nbsp;sizeof(table));&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;table.num_entries&nbsp;=&nbsp;ha_map.size();&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;if&nbsp;(table.num_entries)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries&nbsp;=&nbsp;(amqp_table_entry_t&nbsp;*)&nbsp;calloc(1,&nbsp;sizeof(amqp_table_entry_t)&nbsp;*&nbsp;table.num_entries);&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;0;&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;std::map&amp;lt;std::string,&nbsp;std::vector&amp;lt;std::string&amp;gt;&nbsp;&amp;gt;::const_iterator&nbsp;it;&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;(it&nbsp;=&nbsp;ha_map.begin();&nbsp;it&nbsp;!=&nbsp;ha_map.end();&nbsp;it++,&nbsp;i++)&nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].key.len&nbsp;=&nbsp;(*it).first.size();&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].key.bytes&nbsp;=&nbsp;(void&nbsp;*)&nbsp;(*it).first.c_str();&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;if&nbsp;((*it).second.size()&nbsp;==&nbsp;1)&nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].value.kind&nbsp;=&nbsp;AMQP_FIELD_KIND_UTF8;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].value.value.&lt;wbr&gt;bytes.len&nbsp;=&nbsp;(*it).second[0].size();&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].value.value.&lt;wbr&gt;bytes.bytes&nbsp;=&nbsp;(void&nbsp;*)&nbsp;(*it).second[0].c_str();&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;((*it).second.size()&nbsp;&amp;gt;&nbsp;1)&nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].value.kind&nbsp;=&nbsp;AMQP_FIELD_KIND_ARRAY;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].value.value.&lt;wbr&gt;array.num_entries&nbsp;=&nbsp;(*it).second.size();&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;amqp_field_value_t&nbsp;*f&nbsp;=&nbsp;(amqp_field_value_t_&nbsp;*)&nbsp;malloc(sizeof(amqp_field_&lt;wbr&gt;value_t_)&nbsp;*&nbsp;(*it).second.size());&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;array_ptrs.push_back(f);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].value.value.&lt;wbr&gt;array.entries&nbsp;=&nbsp;f;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;LogInfo((&quot;Before&nbsp;pointer:&nbsp;%p&quot;,&nbsp;table.entries[i].value.value.&lt;wbr&gt;array.entries));&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;(size_t&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&amp;lt;&nbsp;(*it).second.size();&nbsp;j++)&nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].value.value.&lt;wbr&gt;array.entries[j].kind&nbsp;=&nbsp;AMQP_FIELD_KIND_UTF8;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].value.value.&lt;wbr&gt;array.entries[j].value.bytes.&lt;wbr&gt;len&nbsp;=&nbsp;(*it).second[j].size();&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;table.entries[i].value.value.&lt;wbr&gt;array.entries[j].value.bytes.&lt;wbr&gt;bytes&nbsp;=&nbsp;(void&nbsp;*)&nbsp;(*it).second[j].c_str();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;LogInfo((&quot;Before1&nbsp;pointer:&nbsp;%p&quot;,&nbsp;table.entries[i].value.value.&lt;wbr&gt;array.entries));&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;}&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;amqp_queue_declare_ok_t&nbsp;*r&nbsp;=&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;amqp_queue_declare(m_conn,&nbsp;m_channel,&nbsp;amqp_cstring_bytes(m_queue.c_&lt;wbr&gt;str()),&nbsp;0,&nbsp;1,&nbsp;0,&nbsp;0,&nbsp;table);&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;(size_t&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;array_ptrs.size();&nbsp;i++)&nbsp;{&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;free(array_ptrs[i]);&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;free(table.entries);&lt;br&gt;&lt;br&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;This&nbsp;works&nbsp;perfectly&nbsp;fine.&nbsp;But&nbsp;the&nbsp;&lt;font&gt;crash&nbsp;happens&nbsp;when&nbsp;I&nbsp;&lt;font&gt;replace&lt;br&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;br&gt;<br>
&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;(size_t&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;array_ptrs.size();&nbsp;i++)&nbsp;{&lt;br&gt;<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;free(array_ptrs[i]);&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;}&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;with&lt;br&gt;<br>
&lt;/font&gt;&lt;/font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&amp;nbsp;&amp;nbsp;&nbsp;for&nbsp;(int&nbsp;k&nbsp;=&nbsp;0;&nbsp;&lt;font&gt;k&lt;/font&gt;&nbsp;&amp;lt;&nbsp;table.num_entries;&nbsp;k++)&nbsp;{&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&lt;font&nbsp;face=&quot;tahoma,sans-serif&quot;&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;font&gt;&lt;span&nbsp;style=&quot;font-family:courier&nbsp;new,monospace&quot;&gt;&lt;font&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;LogInfo((&quot;After&nbsp;pointer:&nbsp;%p&quot;,&nbsp;table.entries[i].value.value.&lt;wbr&gt;array.entries));&lt;br&gt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/span&gt;&lt;/font&gt;&lt;b&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;free(table.entries[k].value.&lt;wbr&gt;value.array.entries);&lt;/b&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;}&lt;br&gt;&lt;br&gt;<br>
&lt;font&gt;The&nbsp;&quot;After&nbsp;pointer:&quot;&nbsp;is&nbsp;never&nbsp;the&nbsp;same&nbsp;as&nbsp;&quot;Before&nbsp;pointer:&quot;.&nbsp;What&nbsp;wrong&nbsp;am&nbsp;I&nbsp;&lt;font&gt;doing&nbsp;here?&lt;/font&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;font&gt;Thanks,&lt;br&gt;&lt;font&gt;Arun&lt;br&gt;&lt;br&gt;PS:&nbsp;I'm&nbsp;using&nbsp;the&nbsp;following&nbsp;diagnostic&nbsp;log&nbsp;library:&nbsp;https://github.com/visionofarun/CPPLogger&lt;br&gt;&lt;/font&gt;&lt;/font&gt;
</tt>
