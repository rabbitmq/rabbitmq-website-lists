<tt>
Thanks&nbsp;Arvind. &nbsp;That&nbsp;seems&nbsp;to&nbsp;confirm&nbsp;our&nbsp;belief&nbsp;that&nbsp;rabbitmq&nbsp;doesn&amp;#39;t&nbsp;handle&nbsp;failover&nbsp;of&nbsp;session&nbsp;state&nbsp;at&nbsp;the&nbsp;moment. &nbsp;So&nbsp;in&nbsp;the&nbsp;case&nbsp;of&nbsp;competing&nbsp;consumers&nbsp;taking&nbsp;messages&nbsp;from&nbsp;a&nbsp;rabbitmq&nbsp;broker&nbsp;cluster&nbsp;it&nbsp;sounds&nbsp;like&nbsp;once-and-only-once&nbsp;delivery&nbsp;is&nbsp;somewhat&nbsp;up&nbsp;to&nbsp;the&nbsp;application&nbsp;to&nbsp;implement&nbsp;by&nbsp;arranging&nbsp;for&nbsp;each&nbsp;message&nbsp;to&nbsp;be&nbsp;delivered&nbsp;to&nbsp;redundant&nbsp;queues&nbsp;(ie.&nbsp;2&nbsp;separate&nbsp;queues&nbsp;with&nbsp;similar&nbsp;bindings&nbsp;residing&nbsp;on&nbsp;different&nbsp;hosts),&nbsp;then&nbsp;coordinate&nbsp;among&nbsp;your&nbsp;consumers&nbsp;to&nbsp;ensure&nbsp;once-and-only-once&nbsp;delivery&nbsp;using&nbsp;a&nbsp;database&nbsp;or&nbsp;simply&nbsp;to&nbsp;make&nbsp;your&nbsp;workflow&nbsp;idempotent&nbsp;with&nbsp;respect&nbsp;to&nbsp;the&nbsp;duplicate&nbsp;messages.&nbsp;&lt;br&gt;<br>
&lt;br&gt;Ideally,&nbsp;I&amp;#39;d&nbsp;like&nbsp;my&nbsp;broker&nbsp;cluster&nbsp;to&nbsp;handle&nbsp;this. &nbsp;I&amp;#39;m&nbsp;looking&nbsp;into&nbsp;apache&nbsp;qpid&nbsp;as&nbsp;it&nbsp;seems&nbsp;to&nbsp;be&nbsp;more&nbsp;mature&nbsp;with&nbsp;respect&nbsp;to&nbsp;availability. &nbsp;The&nbsp;main&nbsp;downside&nbsp;with&nbsp;rabbitmq&nbsp;for&nbsp;me&nbsp;right&nbsp;now&nbsp;is&nbsp;the&nbsp;lack&nbsp;of&nbsp;at&nbsp;least&nbsp;an&nbsp;option&nbsp;for&nbsp;session&nbsp;state&nbsp;replication. &nbsp;It&nbsp;sounds&nbsp;like&nbsp;a&nbsp;future&nbsp;release&nbsp;of&nbsp;rabbitmq&nbsp;with&nbsp;pluggable&nbsp;persisters&nbsp;will&nbsp;make&nbsp;distributed&nbsp;session&nbsp;state&nbsp;possible&nbsp;via&nbsp;mnesia.&lt;br&gt;<br>
&lt;br&gt;<br>

</tt>
