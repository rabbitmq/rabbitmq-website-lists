diff --git src/rabbit_auth_backend_ldap.erl src/rabbit_auth_backend_ldap.erl
index e92bca1d215c6f12ee02009162d83f2c97b94737..8453b2589fa6e0780c12cb132e3a4a084e6dc08b 100644
--- src/rabbit_auth_backend_ldap.erl
+++ src/rabbit_auth_backend_ldap.erl
@@ -43,13 +43,15 @@
                  user_dn_pattern,
                  dn_lookup_attribute,
                  dn_lookup_base,
+                 scope,
                  other_bind,
                  vhost_access_query,
                  resource_access_query,
                  tag_queries,
                  use_ssl,
                  log,
-                 port }).
+                 port,
+                 eldap_handle }).
 
 -record(impl, { user_dn, password }).
 
@@ -94,47 +96,48 @@ check_resource_access(User = #user{username = Username,
 
 %%--------------------------------------------------------------------
 
-evaluate(Query, Args, User, LDAP, State) ->
+evaluate(Query, Args, User, State) ->
     ?L1("evaluating query: ~p", [Query]),
-    evaluate0(Query, Args, User, LDAP, State).
+    evaluate0(Query, Args, User, State).
 
-evaluate0({constant, Bool}, _Args, _User, _LDAP, State) ->
+evaluate0({constant, Bool}, _Args, _User, State) ->
     ?L1("evaluated constant: ~p", [Bool]),
     Bool;
 
-evaluate0({for, [{Type, Value, SubQuery}|Rest]}, Args, User, LDAP, State) ->
+evaluate0({for, [{Type, Value, SubQuery}|Rest]}, Args, User, State) ->
     case pget(Type, Args) of
         undefined -> {error, {args_do_not_contain, Type, Args}};
         Value     -> ?L1("selecting subquery ~s = ~s", [Type, Value]),
-                     evaluate(SubQuery, Args, User, LDAP, State);
-        _         -> evaluate0({for, Rest}, Args, User, LDAP, State)
+                     evaluate(SubQuery, Args, User, State);
+        _         -> evaluate0({for, Rest}, Args, User, State)
     end;
 
-evaluate0({for, []}, _Args, _User, _LDAP, _State) ->
+evaluate0({for, []}, _Args, _User, _State) ->
     {error, {for_query_incomplete}};
 
-evaluate0({exists, DNPattern}, Args, _User, LDAP, State) ->
+evaluate0({exists, DNPattern}, Args, _User, State = #state{scope = Scope}) ->
     %% eldap forces us to have a filter. objectClass should always be there.
     Filter = eldap:present("objectClass"),
     DN = fill(DNPattern, Args, State),
-    R = object_exists(DN, Filter, LDAP),
+    R = object_exists(DN, Filter, State),
     ?L1("evaluated exists for \"~s\": ~p", [DN, R]),
     R;
 
-evaluate0({in_group, DNPattern}, Args, User, LDAP, State) ->
-    evaluate({in_group, DNPattern, "member"}, Args, User, LDAP, State);
+evaluate0({in_group, DNPattern}, Args, User,  State) ->
+    evaluate({in_group, DNPattern, "member"}, Args, User, State);
 
 evaluate0({in_group, DNPattern, Desc}, Args,
-          #user{impl = #impl{user_dn = UserDN}}, LDAP, State) ->
+          #user{impl = #impl{user_dn = UserDN}}, 
+          State) ->
     Filter = eldap:equalityMatch(Desc, UserDN),
     DN = fill(DNPattern, Args, State),
-    R = object_exists(DN, Filter, LDAP),
+    R = object_exists(DN, Filter, State),
     ?L1("evaluated in_group for \"~s\": ~p", [DN, R]),
     R;
 
-evaluate0({match, StringQuery, REQuery}, Args, User, LDAP, State) ->
-    String = evaluate(StringQuery, Args, User, LDAP, State),
-    RE = evaluate(REQuery, Args, User, LDAP, State),
+evaluate0({match, StringQuery, REQuery}, Args, User, State) ->
+    String = evaluate(StringQuery, Args, User, State),
+    RE = evaluate(REQuery, Args, User, State),
     R = case re:run(String, RE) of
             {match, _} -> true;
             nomatch    -> false
@@ -142,38 +145,39 @@ evaluate0({match, StringQuery, REQuery}, Args, User, LDAP, State) ->
     ?L1("evaluated match \"~s\" against RE \"~s\": ~s", [String, RE, R]),
     R;
 
-evaluate0({string, StringPattern}, Args, _User, _LDAP, State) ->
+evaluate0({string, StringPattern}, Args, _User, State) ->
     R = fill(StringPattern, Args, State),
     ?L1("evaluated string for \"~s\"", [R]),
     R;
 
-evaluate0({attribute, DNPattern, AttributeName}, Args, _User, LDAP, State) ->
+evaluate0({attribute, DNPattern, AttributeName}, Args, _User, State) ->
     DN = fill(DNPattern, Args, State),
-    R = attribute(DN, AttributeName, LDAP),
+    R = attribute(DN, AttributeName, State),
     ?L1("evaluated attribute \"~s\" for \"~s\": ~p",
         [AttributeName, DN, R]),
     R;
 
-evaluate0(Q, Args, _User, _LDAP, _State) ->
+evaluate0(Q, Args, _User, _State) ->
     {error, {unrecognised_query, Q, Args}}.
 
-object_exists(DN, Filter, LDAP) ->
-    case eldap:search(LDAP,
+object_exists(DN, Filter, #state{eldap_handle = Handle, scope = Scope}) ->
+    case eldap:search(Handle,
                       [{base, DN},
                        {filter, Filter},
                        {attributes, ["objectClass"]}, %% Reduce verbiage
-                       {scope, eldap:baseObject()}]) of
+                       {scope, find_scope(Scope)}]) of
         {ok, #eldap_search_result{entries = Entries}} ->
             length(Entries) > 0;
         {error, _} = E ->
             E
     end.
 
-attribute(DN, AttributeName, LDAP) ->
-    case eldap:search(LDAP,
+attribute(DN, AttributeName, #state{eldap_handle = Handle, scope = Scope}) ->
+    case eldap:search(Handle,
                       [{base, DN},
                        {filter, eldap:present("objectClass")},
-                       {attributes, [AttributeName]}]) of
+                       {attributes, [AttributeName]},
+                       {scope, find_scope(Scope)}]) of
         {ok, #eldap_search_result{entries = [#eldap_entry{attributes = A}]}} ->
             [Attr] = pget(AttributeName, A),
             Attr;
@@ -183,126 +187,165 @@ attribute(DN, AttributeName, LDAP) ->
             E
     end.
 
-evaluate_ldap(Q, Args, User, State) ->
-    with_ldap(creds(User, State),
-              fun(LDAP) -> evaluate(Q, Args, User, LDAP, State) end, State).
+evaluate_ldap(Q, Args, User, State = #state{eldap_handle = EldapHandle,
+                                            servers      = Servers}) ->
+    case ldap_connection(EldapHandle, Servers, ldap_options(State)) of
+        {error, Error} ->
+            {Error, State};
+        Handle ->                    
+            State1 = State#state{eldap_handle = Handle},
+            {evaluate(Q, Args, User, State1), State1}
+        end.
 
 %%--------------------------------------------------------------------
 
-%% TODO - ATM we create and destroy a new LDAP connection on every
-%% call. This could almost certainly be more efficient.
-with_ldap(Creds, Fun, State = #state{servers = Servers,
-                                     use_ssl = SSL,
-                                     log     = Log,
-                                     port    = Port}) ->
-    Opts0 = [{ssl, SSL}, {port, Port}],
-    Opts = case Log of
-               network ->
-                   Pre = "    LDAP network traffic: ",
-                   rabbit_log:info(
-                     "    LDAP connecting to servers: ~p~n", [Servers]),
-                   [{log, fun(1, S, A) -> rabbit_log:warning(Pre ++ S, A);
-                             (2, S, A) -> rabbit_log:info   (Pre ++ S, A)
-                          end} | Opts0];
-               _ ->
-                   Opts0
-           end,
-    case eldap:open(Servers, Opts) of
-        {ok, LDAP} ->
-            try
-                case Creds of
-                    anon ->
-                        ?L1("anonymous bind", []),
-                        Fun(LDAP);
-                    {UserDN, Password} ->
-                        case eldap:simple_bind(LDAP, UserDN, Password) of
-                            ok ->
-                                ?L1("bind succeeded: ~s", [UserDN]),
-                                Fun(LDAP);
-                            {error, invalidCredentials} ->
-                                ?L1("bind returned \"invalid credentials\": ~s",
-                                   [UserDN]),
-                                {refused, UserDN, []};
-                            {error, E} ->
-                                ?L1("bind error: ~s ~p", [UserDN, E]),
-                                {error, E}
-                        end
-                end
-            after
-                eldap:close(LDAP)
-            end;
-        Error ->
-            ?L1("connect error: ~p", [Error]),
-            Error
+do_bind(_, _, State = #state{other_bind = anon}) ->
+  ?L1("anonymous bind", []),
+  ok;
+do_bind(UserDN, Password, State = #state{eldap_handle = Handle}) ->
+    case eldap:simple_bind(Handle, UserDN, Password) of
+        ok ->
+            ?L1("bind succeeded: ~s", [UserDN]),
+            ok;
+        {error, invalidCredentials} ->
+            ?L1("bind returned \"invalid credentials\": ~s", [UserDN]),
+            {refused, UserDN};
+        {error, Error} ->
+            ?L1("bind error: ~s ~p", [UserDN, Error]),
+            {error, Error}
     end.
 
+fill(Fmt, Args, State) ->
+    ?L2("filling template \"~s\" with~n            ~p", [Fmt, Args]),
+    R = rabbit_auth_backend_ldap_util:fill(Fmt, Args),
+    ?L2("template result: \"~s\"", [R]),
+    R.
+
+fill_user_dn_pattern(Username,
+                     State = #state{user_dn_pattern = UserDNPattern}) ->
+    ?L("FILL PATTERN for ~s: ~p", [Username, State]),
+    fill(UserDNPattern, [{username, Username}], State).
+    
+find_scope(Scope) ->
+    case Scope of
+        subtree ->
+            eldap:wholeSubtree();
+        single ->
+            eldap:singleLevel();
+        base ->
+            eldap:baseObject()
+    end.
+        
 get_env(F) ->
     {ok, V} = application:get_env(F),
     V.
-
-do_login(Username, Password, LDAP,
-         State = #state{ tag_queries = TagQueries }) ->
-    UserDN = username_to_dn(Username, LDAP, State),
-    User = #user{username     = Username,
-                 auth_backend = ?MODULE,
-                 impl         = #impl{user_dn  = UserDN,
-                                      password = Password}},
-
-    TagRes = [begin
-                  ?L1("CHECK: does ~s have tag ~s?", [Username, Tag]),
-                  R = evaluate(Q, [{username, Username},
-                                   {user_dn,  UserDN}], User, LDAP, State),
-                  ?L1("DECISION: does ~s have tag ~s? ~p", [Username, Tag, R]),
-                  {Tag, R}
-              end || {Tag, Q} <- TagQueries],
-    case [E || {_, E = {error, _}} <- TagRes] of
-        []      -> {ok, User#user{tags = [Tag || {Tag, true} <- TagRes]}};
-        [E | _] -> E
+               
+ldap_connection(none, Servers, Opts) ->    
+     rabbit_log:info("    LDAP connecting to servers: ~p~n",
+                     [Servers]),
+    case eldap:open(Servers, Opts) of
+         {ok, Handle} ->
+             Handle;
+         {error, Error} ->
+             rabbit_log:error("    LDAP connect error: ~p~n",
+                              [Error]),
+             {error, Error}
+     end;
+ldap_connection(Handle, _, _) ->
+    Handle.
+         
+ldap_login(_, none, #state{other_bind = as_user}) ->
+    exit(as_user_no_password);
+    
+    
+ldap_login(Username, Password, State = #state{eldap_handle = EldapHandle,
+                                              servers      = Servers,
+                                              tag_queries  = TagQueries}) ->  
+                                     
+    case ldap_connection(EldapHandle, Servers, ldap_options(State)) of
+        {error, Error} ->
+            {Error, none, State};
+        Handle ->                    
+            State1 = State#state{eldap_handle = Handle},
+            UserDN  = scoped_dn(Username, State1),
+            case do_bind(UserDN, Password, State1) of
+              ok ->
+                  User = #user{username     = Username,
+                               auth_backend = ?MODULE,
+                               impl         = #impl{user_dn  = UserDN,
+                                                    password = Password}},
+                  TagRes = [begin
+                                ?L1("CHECK: does ~s have tag ~s?", [Username, Tag]),
+                                R = evaluate(Q, [{username, Username}, {user_dn,  UserDN}], 
+                                             User, State1),
+                                ?L1("DECISION: does ~s have tag ~s? ~p", [Username, Tag, R]),
+                                {Tag, R}
+                            end || {Tag, Q} <- TagQueries],
+    
+                  case [E || {_, E = {error, _}} <- TagRes] of
+                      []      -> 
+                          {ok, User#user{tags = [Tag || {Tag, true} <- TagRes]}, State1};
+                      [E | _] -> 
+                          {E, none, State1}
+                  end;
+
+              Error ->
+                  {Error, none, State1}
+            end      
     end.
-
-username_to_dn(Username, _LDAP, State = #state{dn_lookup_attribute = none}) ->
+       
+ldap_options(#state{log = Log, port = Port, use_ssl = SSL}) ->
+    log_options(Log, [{ssl, SSL}, {port, Port}]).
+   
+log_options(network, Options) ->
+    Pre = "    LDAP network traffic: ",
+    [{log, fun(1, S, A) -> rabbit_log:warning(Pre ++ S, A);
+              (2, S, A) -> rabbit_log:info   (Pre ++ S, A)
+           end} | Options];
+log_options(_, Options) ->
+    Options.
+    
+scoped_dn(Username, State = #state{scope = Scope}) ->
+    case Scope of
+        subtree ->
+            username_to_dn(Username, State);
+        single ->
+            username_to_dn(Username, State);
+        _ ->
+            fill_user_dn_pattern(Username, State)
+    end.  
+  
+username_to_dn(Username, State = #state{dn_lookup_attribute = none}) ->
     fill_user_dn_pattern(Username, State);
-
-username_to_dn(Username, LDAP, State = #state{dn_lookup_attribute = Attr,
-                                              dn_lookup_base      = Base}) ->
-    Filled = fill_user_dn_pattern(Username, State),
-    case eldap:search(LDAP,
+username_to_dn(Username, #state{dn_lookup_attribute = Attr,
+                                dn_lookup_base      = Base,
+                                eldap_handle        = Handle,
+                                scope               = Scope}) ->
+    case eldap:search(Handle,
                       [{base, Base},
-                       {filter, eldap:equalityMatch(Attr, Filled)},
-                       {attributes, ["distinguishedName"]}]) of
+                       {filter, eldap:equalityMatch(Attr, Username)},
+                       {attributes, ["distinguishedName"]},
+                       {scope, find_scope(Scope)}]) of
+        {ok, {eldap_search_result,[{eldap_entry,DN,[]}],[]}} ->
+            DN;
         {ok, #eldap_search_result{entries = [#eldap_entry{attributes = A}]}} ->
             [DN] = pget("distinguishedName", A),
             DN;
         {ok, #eldap_search_result{entries = Entries}} ->
             rabbit_log:warning("Searching for DN for ~s, got back ~p~n",
-                               [Filled, Entries]),
-            Filled;
+                               [Username, Entries]),                  
+            Username;
         {error, _} = E ->
             exit(E)
     end.
 
-fill_user_dn_pattern(Username,
-                     State = #state{user_dn_pattern = UserDNPattern}) ->
-    fill(UserDNPattern, [{username, Username}], State).
-
-creds(none, #state{other_bind = as_user}) ->
-    exit(as_user_no_password);
-creds(#user{impl = #impl{user_dn = UserDN, password = Password}},
-      #state{other_bind = as_user}) ->
-    {UserDN, Password};
-creds(_, #state{other_bind = Creds}) ->
-    Creds.
+%%--------------------------------------------------------------------
 
 log(_Fmt, _Args, #state{log = false}) ->
     ok;
 log(Fmt, Args, _State) ->
     rabbit_log:info(Fmt ++ "~n", Args).
 
-fill(Fmt, Args, State) ->
-    ?L2("filling template \"~s\" with~n            ~p", [Fmt, Args]),
-    R = rabbit_auth_backend_ldap_util:fill(Fmt, Args),
-    ?L2("template result: \"~s\"", [R]),
-    R.
 
 log_result({ok, #user{}})   -> ok;
 log_result(true)            -> ok;
@@ -319,45 +362,40 @@ log_resource(Args) ->
     rabbit_misc:format("~s permission for ~s \"~s\" in \"~s\"",
                        [pget(permission, Args), pget(resource, Args),
                         pget(name, Args), pget(vhost, Args)]).
-
+                        
 %%--------------------------------------------------------------------
 
 init([]) ->
-    {ok, list_to_tuple(
-           [state | [get_env(F) || F <- record_info(fields, state)]])}.
+    {ok, list_to_tuple([state | [get_env(F) || F <- record_info(fields, state)]])}.
 
 handle_call({login, Username}, _From, State) ->
     %% Without password, e.g. EXTERNAL
     ?L("CHECK: passwordless login for ~s", [Username]),
-    R = with_ldap(creds(none, State),
-                  fun(LDAP) -> do_login(Username, none, LDAP, State) end,
-                  State),
-    ?L("DECISION: passwordless login for ~s: ~p", [Username, log_result(R)]),
-    {reply, R, State};
-
+    {Reply, User, State1} = ldap_login(Username, none, State),
+    ?L("DECISION: passwordless login for ~s: ~p", [Username, log_result({Reply, User})]),
+    {reply, {Reply, User}, State1};
+    
 handle_call({login, Username, Password}, _From, State) ->
     ?L("CHECK: login for ~s", [Username]),
-    R = with_ldap({fill_user_dn_pattern(Username, State), Password},
-                  fun(LDAP) -> do_login(Username, Password, LDAP, State) end,
-                  State),
-    ?L("DECISION: login for ~s: ~p", [Username, log_result(R)]),
-    {reply, R, State};
+    {Reply, User, State1} = ldap_login(Username, Password, State),
+    ?L("DECISION: login for ~s: ~p", [Username, log_result({Reply, User})]),
+    {reply, {Reply, User}, State1};
 
 handle_call({check_vhost, Args, User},
             _From, State = #state{vhost_access_query = Q}) ->
     ?L("CHECK: ~s for ~s", [log_vhost(Args), log_user(User)]),
-    R = evaluate_ldap(Q, Args, User, State),
+    {R, State1} = evaluate_ldap(Q, Args, User, State),
     ?L("DECISION: ~s for ~s: ~p", [log_vhost(Args), log_user(User),
                                    log_result(R)]),
-    {reply, R, State};
+    {reply, R, State1};
 
 handle_call({check_resource, Args, User},
             _From, State = #state{resource_access_query = Q}) ->
     ?L("CHECK: ~s for ~s", [log_resource(Args), log_user(User)]),
-    R = evaluate_ldap(Q, Args, User, State),
+    {R, State1} = evaluate_ldap(Q, Args, User, State),
     ?L("DECISION: ~s for ~s: ~p", [log_resource(Args), log_user(User),
                                    log_result(R)]),
-    {reply, R, State};
+    {reply, R, State1};
 
 handle_call(_Req, _From, State) ->
     {reply, unknown_request, State}.
@@ -368,7 +406,13 @@ handle_cast(_C, State) ->
 handle_info(_I, State) ->
     {noreply, State}.
 
-terminate(_, _) -> ok.
+terminate(_, #state{eldap_handle = EldapHandle}) ->
+    case EldapHandle of
+        none ->
+            ok;
+        Handle ->
+            eldap:close(Handle)
+    end.
 
 code_change(_, State, _) -> {ok, State}.
 
diff --git src/rabbitmq_auth_backend_ldap.app.src src/rabbitmq_auth_backend_ldap.app.src
index c35849fa2583eeba3af0b9192f66abf772335cff..839efeaaa8ebd5dad46c88caed9c2e926117d896 100644
--- src/rabbitmq_auth_backend_ldap.app.src
+++ src/rabbitmq_auth_backend_ldap.app.src
@@ -9,11 +9,13 @@
           {user_dn_pattern,       "${username}"},
           {dn_lookup_attribute,   none},
           {dn_lookup_base,        none},
+          {scope,                 base},
           {other_bind,            as_user},
           {vhost_access_query,    {constant, true}},
           {resource_access_query, {constant, true}},
           {tag_queries,           [{administrator, {constant, false}}]},
           {use_ssl,               false},
           {port,                  389},
-          {log,                   false} ] },
+          {log,                   false},
+          {eldap_handle,          none} ] },
   {applications, [kernel, stdlib, eldap, rabbit]}]}.
