<tt>
&lt;html&gt;&lt;head&gt;<br>
&lt;meta&nbsp;http-equiv=&quot;content-type&quot;&nbsp;content=&quot;text/html;&nbsp;charset=us-ascii&quot;&gt;<br>
&lt;title&gt;Re:&nbsp;Fault-tolerant&nbsp;subscriptions&nbsp;using&nbsp;the&nbsp;.NET&nbsp;client&lt;/title&gt;<br>
&lt;/head&gt;&lt;body&gt;Hi&nbsp;again,&lt;br&gt;<br>
&lt;br&gt;<br>
After<br>
&nbsp;a&nbsp;bit&nbsp;of&nbsp;investigation&nbsp;and&nbsp;information&nbsp;from&nbsp;a&nbsp;friend,&nbsp;I&nbsp;went&nbsp;down&nbsp;the&nbsp;path&nbsp;<br>
of&nbsp;periodically&nbsp;checking&nbsp;the&nbsp;IsOpen&nbsp;property&nbsp;on&nbsp;the&nbsp;Connection&nbsp;object.&nbsp;If&nbsp;<br>
false,&nbsp;then&nbsp;I&nbsp;go&nbsp;through&nbsp;the&nbsp;process&nbsp;of&nbsp;attempting&nbsp;to&nbsp;re-establish&nbsp;the&nbsp;<br>
connection.&lt;br&gt;<br>
&lt;br&gt;<br>
Is&nbsp;this&nbsp;a&nbsp;valid&nbsp;approach?&nbsp;Is&nbsp;it&nbsp;the&nbsp;recommended&nbsp;approach?&lt;br&gt;<br>
&lt;br&gt;<br>
Many&nbsp;thanks&lt;br&gt;<br>
OJ&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;25&nbsp;March&nbsp;2011&nbsp;20:36,&nbsp;OJ&nbsp;Reeves&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;<br>
&gt;&amp;lt;oj@buffered.io&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px<br>
#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
<br>
<br>
&lt;div&gt;Greetings&nbsp;Rabbiters,&lt;br&gt;<br>
&lt;br&gt;<br>
I'm<br>
&nbsp;currently&nbsp;working&nbsp;on&nbsp;a&nbsp;system&nbsp;which&nbsp;is&nbsp;using&nbsp;RabbitMQ&nbsp;as&nbsp;the&nbsp;hub&nbsp;of&nbsp;message<br>
&nbsp;transfers.&nbsp;One&nbsp;of&nbsp;the&nbsp;scenarios&nbsp;we&nbsp;are&nbsp;using&nbsp;it&nbsp;for&nbsp;is&nbsp;to&nbsp;funnel&nbsp;masses&nbsp;of&nbsp;<br>
data&nbsp;from&nbsp;the&nbsp;web&nbsp;into&nbsp;an&nbsp;SQL&nbsp;database.&nbsp;The&nbsp;messages&nbsp;are&nbsp;passed&nbsp;to&nbsp;the&nbsp;<br>
queues&nbsp;via&nbsp;an&nbsp;Erlang&nbsp;web&nbsp;application.&nbsp;We&nbsp;have&nbsp;a&nbsp;series&nbsp;of&nbsp;.NET&nbsp;services&nbsp;<br>
running&nbsp;which&nbsp;are&nbsp;subscribed&nbsp;to&nbsp;the&nbsp;queues&nbsp;and&nbsp;they&nbsp;take&nbsp;the&nbsp;messages&nbsp;as&nbsp;<br>
they&nbsp;come&nbsp;in&nbsp;and&nbsp;write&nbsp;them&nbsp;to&nbsp;an&nbsp;MS&nbsp;SQL&nbsp;back-end.&lt;br&gt;<br>
&lt;br&gt;<br>
What&nbsp;I&nbsp;would&nbsp;like&nbsp;<br>
to&nbsp;do&nbsp;is&nbsp;handle&nbsp;the&nbsp;case&nbsp;where&nbsp;the&nbsp;connection&nbsp;between&nbsp;RabbitMQ&nbsp;and&nbsp;the&nbsp;<br>
subscriber&nbsp;is&nbsp;broken&nbsp;for&nbsp;some&nbsp;reason&nbsp;but&nbsp;something&nbsp;other&nbsp;than&nbsp;the&nbsp;.NET&nbsp;<br>
client&nbsp;terminating&nbsp;the&nbsp;connection.&nbsp;For&nbsp;example,&nbsp;if&nbsp;RabbitMQ&nbsp;is&nbsp;stopped&nbsp;<br>
manually,&nbsp;a&nbsp;netsplit&nbsp;happens,&nbsp;etc.&nbsp;I&nbsp;want&nbsp;the&nbsp;.NET&nbsp;client&nbsp;to&nbsp;know&nbsp;that&nbsp;there<br>
&nbsp;has&nbsp;been&nbsp;a&nbsp;connection&nbsp;failure&nbsp;so&nbsp;that&nbsp;the&nbsp;connection&nbsp;and&nbsp;subscription&nbsp;can&nbsp;<br>
be&nbsp;reestablished.&lt;br&gt;<br>
&lt;br&gt;<br>
In&nbsp;my&nbsp;.NET&nbsp;code,&nbsp;I&nbsp;do&nbsp;something&nbsp;like&nbsp;the&nbsp;following&nbsp;to&nbsp;get&nbsp;the&nbsp;connection<br>
set&nbsp;up:&lt;br&gt;<br>
&lt;br&gt;<br>
ConnectionFactory&nbsp;cf&nbsp;=&nbsp;...;&lt;br&gt;<br>
var&nbsp;conn&nbsp;=&nbsp;cf.CreateConnection();&lt;br&gt;<br>
var&nbsp;model&nbsp;=&nbsp;conn.CreateModel();&lt;br&gt;<br>
model.ExchangeDeclare(&lt;wbr&gt;exchange,&nbsp;exchangeType);&lt;br&gt;<br>
model.QueueDeclare(queueName);&lt;br&gt;<br>
model.QueueBind(queueName,&nbsp;exchange,&nbsp;routeKey,&nbsp;false,&nbsp;null);&lt;br&gt;<br>
var&nbsp;subscription&nbsp;=&nbsp;new&nbsp;Subscription(model,&nbsp;queueName);&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;then&nbsp;have&nbsp;a&nbsp;worker&nbsp;thread&nbsp;which&nbsp;essentially&nbsp;does&nbsp;the&nbsp;following&nbsp;(over&nbsp;and<br>
over):&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;private&nbsp;BasicDeliverEventArgs<br>
GetNextMessage()&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;{&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;var<br>
eventArgs&nbsp;=&nbsp;default(BasicDeliverEventArgs)&lt;wbr&gt;;&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;if<br>
(!subscripion.Next(500,&nbsp;out&nbsp;eventArgs))&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;{&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&lt;span&nbsp;title=&quot;s<br>
t&quot;&gt;&lt;/span&gt;&amp;#160;&lt;span&nbsp;title=&quot;s<br>
t&quot;&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&nbsp;eventArgs&nbsp;=&nbsp;null;&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;}&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;return<br>
eventArgs;&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;}&lt;br&gt;<br>
&lt;br&gt;<br>
When<br>
&nbsp;a&nbsp;valid&nbsp;eventArgs&nbsp;instance&nbsp;is&nbsp;returned,&nbsp;the&nbsp;message&nbsp;is&nbsp;processed.&nbsp;Otherwise<br>
&nbsp;it&nbsp;a&nbsp;few&nbsp;other&nbsp;things.&nbsp;The&nbsp;reason&nbsp;it's&nbsp;doing&nbsp;this&nbsp;is&nbsp;so&nbsp;that&nbsp;if&nbsp;the&nbsp;service<br>
&nbsp;is&nbsp;paused&nbsp;using&nbsp;the&nbsp;service&nbsp;manager,&nbsp;then&nbsp;the&nbsp;code&nbsp;has&nbsp;the&nbsp;chance&nbsp;to&nbsp;stop&nbsp;<br>
looking&nbsp;for&nbsp;messages.&nbsp;When&nbsp;restarted,&nbsp;this&nbsp;GetNextMessage()&nbsp;is&nbsp;then&nbsp;called&nbsp;<br>
again&nbsp;a&nbsp;loop.&nbsp;There&nbsp;are&nbsp;other&nbsp;things&nbsp;that&nbsp;the&nbsp;thread&nbsp;might&nbsp;need&nbsp;to&nbsp;do&nbsp;as&nbsp;<br>
well,&nbsp;but&nbsp;that's&nbsp;basically&nbsp;the&nbsp;gist&nbsp;of&nbsp;it.&lt;br&gt;<br>
&lt;br&gt;<br>
So&nbsp;at&nbsp;this&nbsp;point,&nbsp;all&nbsp;is&nbsp;well.&nbsp;Everything&nbsp;works&nbsp;just&nbsp;fine&nbsp;and&nbsp;the&nbsp;messages<br>
come&nbsp;through&nbsp;nicely&nbsp;(and&nbsp;insanely&nbsp;quick&nbsp;to&nbsp;boot).&lt;br&gt;<br>
&lt;br&gt;<br>
If<br>
&nbsp;I&nbsp;simulate&nbsp;a&nbsp;network&nbsp;issue&nbsp;by&nbsp;stopping&nbsp;the&nbsp;RabbitMQ&nbsp;server,&nbsp;the&nbsp;subscriber&nbsp;<br>
is&nbsp;not&nbsp;informed&nbsp;about&nbsp;the&nbsp;connection&nbsp;loss.&nbsp;Even&nbsp;if&nbsp;the&nbsp;worker&nbsp;thread&nbsp;<br>
continues&nbsp;polling&nbsp;the&nbsp;subscription,&nbsp;no&nbsp;errors&nbsp;are&nbsp;reported&nbsp;at&nbsp;all.&nbsp;The&nbsp;only&nbsp;<br>
time&nbsp;an&nbsp;error&nbsp;is&nbsp;indicated&nbsp;is&nbsp;when&nbsp;the&nbsp;connection&nbsp;is&nbsp;closed&nbsp;(an&nbsp;IOException&nbsp;<br>
is&nbsp;thrown).&nbsp;Obviously&nbsp;this&nbsp;isn't&nbsp;helpful&nbsp;because&nbsp;until&nbsp;we&nbsp;attempt&nbsp;to&nbsp;close&nbsp;<br>
the&nbsp;service&nbsp;down&nbsp;we&nbsp;assume&nbsp;that&nbsp;the&nbsp;connection&nbsp;is&nbsp;up&nbsp;and&nbsp;hence&nbsp;wouldn't&nbsp;have<br>
&nbsp;any&nbsp;indication&nbsp;that&nbsp;there&nbsp;are&nbsp;connectivity&nbsp;issues.&lt;br&gt;<br>
&lt;br&gt;<br>
What&nbsp;I&nbsp;would&nbsp;like<br>
&nbsp;to&nbsp;do&nbsp;is&nbsp;put&nbsp;something&nbsp;in&nbsp;place&nbsp;which&nbsp;is&nbsp;able&nbsp;to&nbsp;detect&nbsp;a&nbsp;connection&nbsp;<br>
failure&nbsp;and&nbsp;get&nbsp;things&nbsp;working&nbsp;again.&nbsp;I&nbsp;was&nbsp;wondering&nbsp;if&nbsp;anyone&nbsp;had&nbsp;any&nbsp;<br>
insights&nbsp;into&nbsp;the&nbsp;best&nbsp;way&nbsp;to&nbsp;approach&nbsp;this&nbsp;problem.&nbsp;Is&nbsp;there&nbsp;something&nbsp;in&nbsp;<br>
the&nbsp;.NET&nbsp;client&nbsp;that&nbsp;I&nbsp;am&nbsp;not&nbsp;configuring&nbsp;properly&nbsp;to&nbsp;enable&nbsp;certain&nbsp;<br>
behaviours?&nbsp;Should&nbsp;I&nbsp;have&nbsp;something&nbsp;else&nbsp;running&nbsp;which&nbsp;is&nbsp;checking&nbsp;to&nbsp;see&nbsp;if<br>
&nbsp;it&nbsp;can&nbsp;establish&nbsp;connections&nbsp;and&nbsp;hence&nbsp;detect&nbsp;issues&nbsp;that&nbsp;way?&lt;br&gt;<br>
&lt;br&gt;<br>
What's&nbsp;the&nbsp;best&nbsp;approach?&lt;br&gt;<br>
&lt;br&gt;<br>
Many&nbsp;thanks&nbsp;for&nbsp;your&nbsp;time.&lt;br&gt;<br>
Best&nbsp;regards&lt;br&gt;<br>
OJ&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;<br>
&lt;br&nbsp;clear=&quot;all&quot;&gt;<br>
&lt;br&gt;<br>
--&nbsp;&lt;br&gt;<br>
&lt;br&gt;<br>
OJ&nbsp;Reeves&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;http://buffered.io/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://buffered.io/&lt;/a&gt;&lt;br&gt;<br>
&lt;/font&gt;&lt;/div&gt;<br>
<br>
<br>
Greetings&nbsp;Rabbiters,&lt;br&gt;<br>
&lt;br&gt;<br>
I'm<br>
&nbsp;currently&nbsp;working&nbsp;on&nbsp;a&nbsp;system&nbsp;which&nbsp;is&nbsp;using&nbsp;RabbitMQ&nbsp;as&nbsp;the&nbsp;hub&nbsp;of&nbsp;message<br>
&nbsp;transfers.&nbsp;One&nbsp;of&nbsp;the&nbsp;scenarios&nbsp;we&nbsp;are&nbsp;using&nbsp;it&nbsp;for&nbsp;is&nbsp;to&nbsp;funnel&nbsp;masses&nbsp;of&nbsp;<br>
data&nbsp;from&nbsp;the&nbsp;web&nbsp;into&nbsp;an&nbsp;SQL&nbsp;database.&nbsp;The&nbsp;messages&nbsp;are&nbsp;passed&nbsp;to&nbsp;the&nbsp;<br>
queues&nbsp;via&nbsp;an&nbsp;Erlang&nbsp;web&nbsp;application.&nbsp;We&nbsp;have&nbsp;a&nbsp;series&nbsp;of&nbsp;.NET&nbsp;services&nbsp;<br>
running&nbsp;which&nbsp;are&nbsp;subscribed&nbsp;to&nbsp;the&nbsp;queues&nbsp;and&nbsp;they&nbsp;take&nbsp;the&nbsp;messages&nbsp;as&nbsp;<br>
they&nbsp;come&nbsp;in&nbsp;and&nbsp;write&nbsp;them&nbsp;to&nbsp;an&nbsp;MS&nbsp;SQL&nbsp;back-end.&lt;br&gt;<br>
&lt;br&gt;<br>
What&nbsp;I&nbsp;would&nbsp;like&nbsp;<br>
to&nbsp;do&nbsp;is&nbsp;handle&nbsp;the&nbsp;case&nbsp;where&nbsp;the&nbsp;connection&nbsp;between&nbsp;RabbitMQ&nbsp;and&nbsp;the&nbsp;<br>
subscriber&nbsp;is&nbsp;broken&nbsp;for&nbsp;some&nbsp;reason&nbsp;but&nbsp;something&nbsp;other&nbsp;than&nbsp;the&nbsp;.NET&nbsp;<br>
client&nbsp;terminating&nbsp;the&nbsp;connection.&nbsp;For&nbsp;example,&nbsp;if&nbsp;RabbitMQ&nbsp;is&nbsp;stopped&nbsp;<br>
manually,&nbsp;a&nbsp;netsplit&nbsp;happens,&nbsp;etc.&nbsp;I&nbsp;want&nbsp;the&nbsp;.NET&nbsp;client&nbsp;to&nbsp;know&nbsp;that&nbsp;there<br>
&nbsp;has&nbsp;been&nbsp;a&nbsp;connection&nbsp;failure&nbsp;so&nbsp;that&nbsp;the&nbsp;connection&nbsp;and&nbsp;subscription&nbsp;can&nbsp;<br>
be&nbsp;reestablished.&lt;br&gt;<br>
&lt;br&gt;<br>
In&nbsp;my&nbsp;.NET&nbsp;code,&nbsp;I&nbsp;do&nbsp;something&nbsp;like&nbsp;the&nbsp;following&nbsp;to&nbsp;get&nbsp;the&nbsp;connection<br>
set&nbsp;up:&lt;br&gt;<br>
&lt;br&gt;<br>
ConnectionFactory&nbsp;cf&nbsp;=&nbsp;...;&lt;br&gt;<br>
var&nbsp;conn&nbsp;=&nbsp;cf.CreateConnection();&lt;br&gt;<br>
var&nbsp;model&nbsp;=&nbsp;conn.CreateModel();&lt;br&gt;<br>
model.ExchangeDeclare(exchange,&nbsp;exchangeType);&lt;br&gt;<br>
model.QueueDeclare(queueName);&lt;br&gt;<br>
model.QueueBind(queueName,&nbsp;exchange,&nbsp;routeKey,&nbsp;false,&nbsp;null);&lt;br&gt;<br>
var&nbsp;subscription&nbsp;=&nbsp;new&nbsp;Subscription(model,&nbsp;queueName);&lt;br&gt;<br>
&lt;br&gt;<br>
I&nbsp;then&nbsp;have&nbsp;a&nbsp;worker&nbsp;thread&nbsp;which&nbsp;essentially&nbsp;does&nbsp;the&nbsp;following&nbsp;(over&nbsp;and<br>
over):&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;private&nbsp;BasicDeliverEventArgs<br>
GetNextMessage()&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;{&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;var<br>
eventArgs&nbsp;=&nbsp;default(BasicDeliverEventArgs);&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;if<br>
(!subscripion.Next(500,&nbsp;out&nbsp;eventArgs))&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;{&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&lt;span&nbsp;title=&quot;s<br>
t&quot;&gt;&lt;/span&gt;&amp;#160;&lt;span&nbsp;title=&quot;s<br>
<br>
t&quot;&gt;&lt;/span&gt;&amp;#160;&amp;#160;&amp;#160;&nbsp;eventArgs&nbsp;=&nbsp;null;&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;}&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;return<br>
eventArgs;&lt;br&gt;<br>
&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&nbsp;}&lt;br&gt;<br>
&lt;br&gt;<br>
When<br>
&nbsp;a&nbsp;valid&nbsp;eventArgs&nbsp;instance&nbsp;is&nbsp;returned,&nbsp;the&nbsp;message&nbsp;is&nbsp;processed.&nbsp;Otherwise<br>
&nbsp;it&nbsp;a&nbsp;few&nbsp;other&nbsp;things.&nbsp;The&nbsp;reason&nbsp;it's&nbsp;doing&nbsp;this&nbsp;is&nbsp;so&nbsp;that&nbsp;if&nbsp;the&nbsp;service<br>
&nbsp;is&nbsp;paused&nbsp;using&nbsp;the&nbsp;service&nbsp;manager,&nbsp;then&nbsp;the&nbsp;code&nbsp;has&nbsp;the&nbsp;chance&nbsp;to&nbsp;stop&nbsp;<br>
looking&nbsp;for&nbsp;messages.&nbsp;When&nbsp;restarted,&nbsp;this&nbsp;GetNextMessage()&nbsp;is&nbsp;then&nbsp;called&nbsp;<br>
again&nbsp;a&nbsp;loop.&nbsp;There&nbsp;are&nbsp;other&nbsp;things&nbsp;that&nbsp;the&nbsp;thread&nbsp;might&nbsp;need&nbsp;to&nbsp;do&nbsp;as&nbsp;<br>
well,&nbsp;but&nbsp;that's&nbsp;basically&nbsp;the&nbsp;gist&nbsp;of&nbsp;it.&lt;br&gt;<br>
&lt;br&gt;<br>
So&nbsp;at&nbsp;this&nbsp;point,&nbsp;all&nbsp;is&nbsp;well.&nbsp;Everything&nbsp;works&nbsp;just&nbsp;fine&nbsp;and&nbsp;the&nbsp;messages<br>
come&nbsp;through&nbsp;nicely&nbsp;(and&nbsp;insanely&nbsp;quick&nbsp;to&nbsp;boot).&lt;br&gt;<br>
&lt;br&gt;<br>
If<br>
&nbsp;I&nbsp;simulate&nbsp;a&nbsp;network&nbsp;issue&nbsp;by&nbsp;stopping&nbsp;the&nbsp;RabbitMQ&nbsp;server,&nbsp;the&nbsp;subscriber&nbsp;<br>
is&nbsp;not&nbsp;informed&nbsp;about&nbsp;the&nbsp;connection&nbsp;loss.&nbsp;Even&nbsp;if&nbsp;the&nbsp;worker&nbsp;thread&nbsp;<br>
continues&nbsp;polling&nbsp;the&nbsp;subscription,&nbsp;no&nbsp;errors&nbsp;are&nbsp;reported&nbsp;at&nbsp;all.&nbsp;The&nbsp;only&nbsp;<br>
time&nbsp;an&nbsp;error&nbsp;is&nbsp;indicated&nbsp;is&nbsp;when&nbsp;the&nbsp;connection&nbsp;is&nbsp;closed&nbsp;(an&nbsp;IOException&nbsp;<br>
is&nbsp;thrown).&nbsp;Obviously&nbsp;this&nbsp;isn't&nbsp;helpful&nbsp;because&nbsp;until&nbsp;we&nbsp;attempt&nbsp;to&nbsp;close&nbsp;<br>
the&nbsp;service&nbsp;down&nbsp;we&nbsp;assume&nbsp;that&nbsp;the&nbsp;connection&nbsp;is&nbsp;up&nbsp;and&nbsp;hence&nbsp;wouldn't&nbsp;have<br>
&nbsp;any&nbsp;indication&nbsp;that&nbsp;there&nbsp;are&nbsp;connectivity&nbsp;issues.&lt;br&gt;<br>
&lt;br&gt;<br>
What&nbsp;I&nbsp;would&nbsp;like<br>
&nbsp;to&nbsp;do&nbsp;is&nbsp;put&nbsp;something&nbsp;in&nbsp;place&nbsp;which&nbsp;is&nbsp;able&nbsp;to&nbsp;detect&nbsp;a&nbsp;connection&nbsp;<br>
failure&nbsp;and&nbsp;get&nbsp;things&nbsp;working&nbsp;again.&nbsp;I&nbsp;was&nbsp;wondering&nbsp;if&nbsp;anyone&nbsp;had&nbsp;any&nbsp;<br>
insights&nbsp;into&nbsp;the&nbsp;best&nbsp;way&nbsp;to&nbsp;approach&nbsp;this&nbsp;problem.&nbsp;Is&nbsp;there&nbsp;something&nbsp;in&nbsp;<br>
the&nbsp;.NET&nbsp;client&nbsp;that&nbsp;I&nbsp;am&nbsp;not&nbsp;configuring&nbsp;properly&nbsp;to&nbsp;enable&nbsp;certain&nbsp;<br>
behaviours?&nbsp;Should&nbsp;I&nbsp;have&nbsp;something&nbsp;else&nbsp;running&nbsp;which&nbsp;is&nbsp;checking&nbsp;to&nbsp;see&nbsp;if<br>
&nbsp;it&nbsp;can&nbsp;establish&nbsp;connections&nbsp;and&nbsp;hence&nbsp;detect&nbsp;issues&nbsp;that&nbsp;way?&lt;br&gt;<br>
&lt;br&gt;<br>
What's&nbsp;the&nbsp;best&nbsp;approach?&lt;br&gt;<br>
&lt;br&gt;<br>
Many&nbsp;thanks&nbsp;for&nbsp;your&nbsp;time.&lt;br&gt;<br>
Best&nbsp;regards&lt;br&gt;<br>
OJ&lt;br&gt;<br>
&lt;br&nbsp;clear=&quot;all&quot;&gt;<br>
&lt;br&gt;<br>
--&nbsp;&lt;br&gt;<br>
&lt;br&gt;<br>
OJ&nbsp;Reeves&lt;br&gt;<br>
http://buffered.io/&lt;br&gt;<br>
&lt;/blockquote&gt;<br>
&lt;/div&gt;<br>
&lt;br&gt;<br>
&lt;br&nbsp;clear=&quot;all&quot;&gt;<br>
&lt;br&gt;<br>
--&nbsp;&lt;br&gt;<br>
&lt;br&gt;<br>
OJ&nbsp;Reeves&lt;br&gt;<br>
http://buffered.io/&lt;br&gt;<br>
&lt;/body&gt;&lt;/html&gt;
</tt>
