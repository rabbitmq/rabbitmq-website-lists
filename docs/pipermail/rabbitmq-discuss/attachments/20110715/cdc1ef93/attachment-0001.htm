<tt>
&lt;br&gt;Thanks&nbsp;for&nbsp;reply&nbsp;Eugene&nbsp;Kirpichov ,&nbsp;&lt;br&gt;One&nbsp;more&nbsp;help,&nbsp;Can&nbsp;you&nbsp;suggest&nbsp;me&nbsp;any&nbsp;reference&nbsp;site&nbsp;from&nbsp;where&nbsp;i&nbsp;can&nbsp;follow&nbsp;and&nbsp;code&nbsp;for&nbsp;my&nbsp;goal?&lt;div&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Fri,&nbsp;Jul&nbsp;15,&nbsp;2011&nbsp;at&nbsp;7:57&nbsp;PM,&nbsp;Eugene&nbsp;Kirpichov&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:ekirpichov@gmail.com&quot;&gt;ekirpichov@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;Is&nbsp;this&nbsp;the&nbsp;minimal&nbsp;piece&nbsp;of&nbsp;code&nbsp;that&nbsp;demonstrates&nbsp;poor&nbsp;performance?&lt;br&gt;<br>
It&amp;#39;s&nbsp;hard&nbsp;to&nbsp;decipher&nbsp;that&nbsp;much&nbsp;code&nbsp;and&nbsp;it&nbsp;can&nbsp;have&nbsp;many&nbsp;kinds&nbsp;of&lt;br&gt;<br>
problems&nbsp;inside;&nbsp;I&nbsp;think&nbsp;you&nbsp;should&nbsp;be&nbsp;able&nbsp;to&nbsp;trim&nbsp;it&nbsp;down&nbsp;to&nbsp;a&lt;br&gt;<br>
couple&nbsp;dozen&nbsp;lines&nbsp;demonstrating&nbsp;the&nbsp;same&nbsp;speed;&nbsp;then&nbsp;diagnosing&nbsp;will&lt;br&gt;<br>
become&nbsp;a&nbsp;lot&nbsp;easier.&lt;br&gt;<br>
&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;&lt;br&gt;<br>
2011/7/15&nbsp;News&nbsp;Aanad&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:news.anand11@gmail.com&quot;&gt;news.anand11@gmail.com&lt;/a&gt;&amp;gt;:&lt;br&gt;<br>
&amp;gt;&nbsp;This&nbsp;is&nbsp;my&nbsp;code.&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;The&nbsp;contents&nbsp;of&nbsp;this&nbsp;file&nbsp;are&nbsp;subject&nbsp;to&nbsp;the&nbsp;Mozilla&nbsp;Public&nbsp;License&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;Version&nbsp;1.1&nbsp;(the&nbsp;&amp;quot;License&amp;quot;);&nbsp;you&nbsp;may&nbsp;not&nbsp;use&nbsp;this&nbsp;file&nbsp;except&nbsp;in&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;compliance&nbsp;with&nbsp;the&nbsp;License.&nbsp;You&nbsp;may&nbsp;obtain&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;License&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;at&nbsp;&lt;a&nbsp;href=&quot;http://www.mozilla.org/MPL/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://www.mozilla.org/MPL/&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&nbsp;//&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;Software&nbsp;distributed&nbsp;under&nbsp;the&nbsp;License&nbsp;is&nbsp;distributed&nbsp;on&nbsp;an&nbsp;&amp;quot;AS&nbsp;IS&amp;quot;&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;basis,&nbsp;WITHOUT&nbsp;WARRANTY&nbsp;OF&nbsp;ANY&nbsp;KIND,&nbsp;either&nbsp;express&nbsp;or&nbsp;implied.&nbsp;See&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;the&nbsp;License&nbsp;for&nbsp;the&nbsp;specific&nbsp;language&nbsp;governing&nbsp;rights&nbsp;and&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;limitations&nbsp;under&nbsp;the&nbsp;License.&lt;br&gt;<br>
&amp;gt;&nbsp;//&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;The&nbsp;Original&nbsp;Code&nbsp;is&nbsp;RabbitMQ.&lt;br&gt;<br>
&amp;gt;&nbsp;//&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;The&nbsp;Initial&nbsp;Developer&nbsp;of&nbsp;the&nbsp;Original&nbsp;Code&nbsp;is&nbsp;VMware,&nbsp;Inc.&lt;br&gt;<br>
&amp;gt;&nbsp;// &nbsp;Copyright&nbsp;(c)&nbsp;2007-2011&nbsp;VMware,&nbsp;Inc. &nbsp;All&nbsp;rights&nbsp;reserved.&lt;br&gt;<br>
&amp;gt;&nbsp;//&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;package&nbsp;com.rabbitmq.examples;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.io.ByteArrayInputStream;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.io.ByteArrayOutputStream;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.io.DataInputStream;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.io.DataOutputStream;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.io.IOException;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.util.Arrays;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.util.Collections;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.util.List;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.util.SortedSet;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.util.TreeSet;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.util.UUID;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;java.util.concurrent.Semaphore;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;org.apache.commons.cli.CommandLine;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;org.apache.commons.cli.CommandLineParser;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;org.apache.commons.cli.GnuParser;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;org.apache.commons.cli.HelpFormatter;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;org.apache.commons.cli.Option;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;org.apache.commons.cli.Options;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;org.apache.commons.cli.ParseException;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.AMQP;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.Channel;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.ConfirmListener;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.Connection;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.ConnectionFactory;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.Envelope;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.MessageProperties;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.QueueingConsumer;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.QueueingConsumer.Delivery;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.ReturnListener;&lt;br&gt;<br>
&amp;gt;&nbsp;import&nbsp;com.rabbitmq.client.ShutdownSignalException;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;public&nbsp;class&nbsp;MulticastMain&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;Options&nbsp;options&nbsp;=&nbsp;getOptions();&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;CommandLineParser&nbsp;parser&nbsp;=&nbsp;new&nbsp;GnuParser();&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;try&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;CommandLine&nbsp;cmd&nbsp;=&nbsp;parser.parse(options,&nbsp;args);&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(cmd.hasOption(&amp;#39;?&amp;#39;))&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;usage(options);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;System.exit(0);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;String&nbsp;hostName     &nbsp;=&nbsp;strArg(cmd,&nbsp;&amp;#39;h&amp;#39;,&nbsp;&amp;quot;localhost&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;portNumber      &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;p&amp;#39;,&nbsp;AMQP.PROTOCOL.PORT);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;String&nbsp;exchangeType &nbsp;=&nbsp;strArg(cmd,&nbsp;&amp;#39;t&amp;#39;,&nbsp;&amp;quot;direct&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;String&nbsp;exchangeName &nbsp;=&nbsp;strArg(cmd,&nbsp;&amp;#39;e&amp;#39;,&nbsp;exchangeType);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;samplingInterval&nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;i&amp;#39;,&nbsp;1);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;rateLimit       &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;r&amp;#39;,&nbsp;0);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;producerCount   &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;x&amp;#39;,&nbsp;1);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;consumerCount   &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;y&amp;#39;,&nbsp;1);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;producerTxSize  &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;m&amp;#39;,&nbsp;0);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;consumerTxSize  &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;n&amp;#39;,&nbsp;0);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;long&nbsp;confirm        &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;c&amp;#39;,&nbsp;-1);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;boolean&nbsp;autoAck     &nbsp;=&nbsp;cmd.hasOption(&amp;#39;a&amp;#39;);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;prefetchCount   &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;q&amp;#39;,&nbsp;0);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;minMsgSize      &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;s&amp;#39;,&nbsp;0);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;timeLimit       &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;z&amp;#39;,&nbsp;0);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;List&amp;lt;?&amp;gt;&nbsp;flags       &nbsp;=&nbsp;lstArg(cmd,&nbsp;&amp;#39;f&amp;#39;);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;frameMax        &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;M&amp;#39;,&nbsp;0);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;heartbeat       &nbsp;=&nbsp;intArg(cmd,&nbsp;&amp;#39;b&amp;#39;,&nbsp;0);&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;((producerTxSize&nbsp;&amp;gt;&nbsp;0)&nbsp;&amp;amp;&amp;amp;&nbsp;confirm&nbsp;&amp;gt;=&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;throw&nbsp;new&nbsp;ParseException(&amp;quot;Cannot&nbsp;select&nbsp;both&lt;br&gt;<br>
&amp;gt;&nbsp;producerTxSize&amp;quot;+&lt;br&gt;<br>
&amp;gt;&nbsp;                                        &nbsp;&amp;quot;&nbsp;and&nbsp;confirm&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;//setup&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;String&nbsp;id&nbsp;=&nbsp;UUID.randomUUID().toString();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;Stats&nbsp;stats&nbsp;=&nbsp;new&nbsp;Stats(1000L&nbsp;*&nbsp;samplingInterval);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;ConnectionFactory&nbsp;factory&nbsp;=&nbsp;new&nbsp;ConnectionFactory();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;factory.setHost(hostName);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;factory.setPort(portNumber);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;factory.setRequestedFrameMax(frameMax);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;factory.setRequestedHeartbeat(heartbeat);&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;Thread[]&nbsp;consumerThreads&nbsp;=&nbsp;new&nbsp;Thread[consumerCount];&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;Connection[]&nbsp;consumerConnections&nbsp;=&nbsp;new&lt;br&gt;<br>
&amp;gt;&nbsp;Connection[consumerCount];&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;consumerCount;&nbsp;i++)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;System.out.println(&amp;quot;starting&nbsp;consumer&nbsp;#&amp;quot;&nbsp;+&nbsp;i);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;Connection&nbsp;conn&nbsp;=&nbsp;factory.newConnection();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;consumerConnections[i]&nbsp;=&nbsp;conn;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;Channel&nbsp;channel&nbsp;=&nbsp;conn.createChannel();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;if&nbsp;(consumerTxSize&nbsp;&amp;gt;&nbsp;0)&nbsp;channel.txSelect();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;channel.exchangeDeclare(exchangeName,&nbsp;exchangeType);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;String&nbsp;queueName&nbsp;=&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;channel.queueDeclare(&amp;quot;&amp;quot;,&lt;br&gt;<br>
&amp;gt;&nbsp;flags.contains(&amp;quot;persistent&amp;quot;),&lt;br&gt;<br>
&amp;gt;&nbsp;                                            &nbsp;true,&nbsp;false,&nbsp;null).getQueue();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;QueueingConsumer&nbsp;consumer&nbsp;=&nbsp;new&nbsp;QueueingConsumer(channel);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;if&nbsp;(prefetchCount&nbsp;&amp;gt;&nbsp;0)&nbsp;channel.basicQos(prefetchCount);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;channel.basicConsume(queueName,&nbsp;autoAck,&nbsp;consumer);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;channel.queueBind(queueName,&nbsp;exchangeName,&nbsp;id);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;Thread&nbsp;t&nbsp;=&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;new&nbsp;Thread(new&nbsp;Consumer(consumer,&nbsp;id,&lt;br&gt;<br>
&amp;gt;&nbsp;                                           &nbsp;consumerTxSize,&nbsp;autoAck,&lt;br&gt;<br>
&amp;gt;&nbsp;                                           &nbsp;stats,&nbsp;timeLimit));&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;consumerThreads[i]&nbsp;=&nbsp;t;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;t.start();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;Thread[]&nbsp;producerThreads&nbsp;=&nbsp;new&nbsp;Thread[producerCount];&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;Connection[]&nbsp;producerConnections&nbsp;=&nbsp;new&lt;br&gt;<br>
&amp;gt;&nbsp;Connection[producerCount];&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;producerCount;&nbsp;i++)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;System.out.println(&amp;quot;starting&nbsp;producer&nbsp;#&amp;quot;&nbsp;+&nbsp;i);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;Connection&nbsp;conn&nbsp;=&nbsp;factory.newConnection();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;producerConnections[i]&nbsp;=&nbsp;conn;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;Channel&nbsp;channel&nbsp;=&nbsp;conn.createChannel();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;if&nbsp;(producerTxSize&nbsp;&amp;gt;&nbsp;0)&nbsp;channel.txSelect();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;if&nbsp;(confirm&nbsp;&amp;gt;=&nbsp;0)&nbsp;channel.confirmSelect();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;channel.exchangeDeclare(exchangeName,&nbsp;exchangeType);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;final&nbsp;Producer&nbsp;p&nbsp;=&nbsp;new&nbsp;Producer(channel,&nbsp;exchangeName,&nbsp;id,&lt;br&gt;<br>
&amp;gt;&nbsp;                                               &nbsp;flags,&nbsp;producerTxSize,&lt;br&gt;<br>
&amp;gt;&nbsp;                                               &nbsp;1000L&nbsp;*&nbsp;samplingInterval,&lt;br&gt;<br>
&amp;gt;&nbsp;                                               &nbsp;rateLimit,&nbsp;minMsgSize,&lt;br&gt;<br>
&amp;gt;&nbsp;timeLimit,&lt;br&gt;<br>
&amp;gt;&nbsp;                                               &nbsp;confirm);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;channel.setReturnListener(p);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;channel.setConfirmListener(p);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;Thread&nbsp;t&nbsp;=&nbsp;new&nbsp;Thread(p);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;producerThreads[i]&nbsp;=&nbsp;t;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;t.start();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;producerCount;&nbsp;i++)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;producerThreads[i].join();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;producerConnections[i].close();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;consumerCount;&nbsp;i++)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;consumerThreads[i].join();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;consumerConnections[i].close();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;catch(&nbsp;ParseException&nbsp;exp&nbsp;)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;System.err.println(&amp;quot;Parsing&nbsp;failed.&nbsp;Reason:&nbsp;&amp;quot;&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;exp.getMessage());&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;usage(options);&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;System.err.println(&amp;quot;Main&nbsp;thread&nbsp;caught&nbsp;exception:&nbsp;&amp;quot;&nbsp;+&nbsp;e);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;e.printStackTrace();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;System.exit(1);&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;private&nbsp;static&nbsp;void&nbsp;usage(Options&nbsp;options)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;HelpFormatter&nbsp;formatter&nbsp;=&nbsp;new&nbsp;HelpFormatter();&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;formatter.printHelp(&amp;quot;&amp;lt;program&amp;gt;&amp;quot;,&nbsp;options);&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;private&nbsp;static&nbsp;Options&nbsp;getOptions()&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;Options&nbsp;options&nbsp;=&nbsp;new&nbsp;Options();&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;?&amp;quot;,&nbsp;&amp;quot;help&amp;quot;,     &nbsp;false,&amp;quot;show&nbsp;usage&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;h&amp;quot;,&nbsp;&amp;quot;host&amp;quot;,     &nbsp;true,&nbsp;&amp;quot;broker&lt;br&gt;<br>
&amp;gt;&nbsp;host&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;p&amp;quot;,&nbsp;&amp;quot;port&amp;quot;,     &nbsp;true,&nbsp;&amp;quot;broker&lt;br&gt;<br>
&amp;gt;&nbsp;port&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;t&amp;quot;,&nbsp;&amp;quot;type&amp;quot;,     &nbsp;true,&nbsp;&amp;quot;exchange&lt;br&gt;<br>
&amp;gt;&nbsp;type&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;e&amp;quot;,&nbsp;&amp;quot;exchange&amp;quot;, &nbsp;true,&nbsp;&amp;quot;exchange&lt;br&gt;<br>
&amp;gt;&nbsp;name&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;i&amp;quot;,&nbsp;&amp;quot;interval&amp;quot;, &nbsp;true,&nbsp;&amp;quot;sampling&lt;br&gt;<br>
&amp;gt;&nbsp;interval&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;r&amp;quot;,&nbsp;&amp;quot;rate&amp;quot;,     &nbsp;true,&nbsp;&amp;quot;rate&nbsp;limit&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;x&amp;quot;,&nbsp;&amp;quot;producers&amp;quot;,&nbsp;true,&nbsp;&amp;quot;producer&lt;br&gt;<br>
&amp;gt;&nbsp;count&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;y&amp;quot;,&nbsp;&amp;quot;consumers&amp;quot;,&nbsp;true,&nbsp;&amp;quot;consumer&lt;br&gt;<br>
&amp;gt;&nbsp;count&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;m&amp;quot;,&nbsp;&amp;quot;ptxsize&amp;quot;,  &nbsp;true,&nbsp;&amp;quot;producer&nbsp;tx&lt;br&gt;<br>
&amp;gt;&nbsp;size&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;n&amp;quot;,&nbsp;&amp;quot;ctxsize&amp;quot;,  &nbsp;true,&nbsp;&amp;quot;consumer&nbsp;tx&lt;br&gt;<br>
&amp;gt;&nbsp;size&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;c&amp;quot;,&nbsp;&amp;quot;confirm&amp;quot;,  &nbsp;true,&nbsp;&amp;quot;max&lt;br&gt;<br>
&amp;gt;&nbsp;unconfirmed&nbsp;publishes&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;a&amp;quot;,&nbsp;&amp;quot;autoack&amp;quot;,  &nbsp;false,&amp;quot;auto&nbsp;ack&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;q&amp;quot;,&nbsp;&amp;quot;qos&amp;quot;,      &nbsp;true,&nbsp;&amp;quot;qos&nbsp;prefetch&lt;br&gt;<br>
&amp;gt;&nbsp;count&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;s&amp;quot;,&nbsp;&amp;quot;size&amp;quot;,     &nbsp;true,&nbsp;&amp;quot;message&lt;br&gt;<br>
&amp;gt;&nbsp;size&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;z&amp;quot;,&nbsp;&amp;quot;time&amp;quot;,     &nbsp;true,&nbsp;&amp;quot;time&nbsp;limit&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;Option&nbsp;flag&nbsp;=    &nbsp;new&nbsp;Option(&amp;quot;f&amp;quot;,&nbsp;&amp;quot;flag&amp;quot;,     &nbsp;true,&nbsp;&amp;quot;message&lt;br&gt;<br>
&amp;gt;&nbsp;flag&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;flag.setArgs(Option.UNLIMITED_VALUES);&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(flag);&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;M&amp;quot;,&nbsp;&amp;quot;framemax&amp;quot;, &nbsp;true,&nbsp;&amp;quot;frame&nbsp;max&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;options.addOption(new&nbsp;Option(&amp;quot;b&amp;quot;,&nbsp;&amp;quot;heartbeat&amp;quot;,&nbsp;true,&nbsp;&amp;quot;heartbeat&lt;br&gt;<br>
&amp;gt;&nbsp;interval&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;return&nbsp;options;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;private&nbsp;static&nbsp;String&nbsp;strArg(CommandLine&nbsp;cmd,&nbsp;char&nbsp;opt,&nbsp;String&nbsp;def)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;return&nbsp;cmd.getOptionValue(opt,&nbsp;def);&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;private&nbsp;static&nbsp;int&nbsp;intArg(CommandLine&nbsp;cmd,&nbsp;char&nbsp;opt,&nbsp;int&nbsp;def)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;return&nbsp;Integer.parseInt(cmd.getOptionValue(opt,&lt;br&gt;<br>
&amp;gt;&nbsp;Integer.toString(def)));&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;private&nbsp;static&nbsp;List&amp;lt;?&amp;gt;&nbsp;lstArg(CommandLine&nbsp;cmd,&nbsp;char&nbsp;opt)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;String[]&nbsp;vals&nbsp;=&nbsp;cmd.getOptionValues(&amp;#39;f&amp;#39;);&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;if&nbsp;(vals&nbsp;==&nbsp;null)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;vals&nbsp;=&nbsp;new&nbsp;String[]&nbsp;{};&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;return&nbsp;Arrays.asList(vals);&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;public&nbsp;static&nbsp;class&nbsp;Producer&nbsp;implements&nbsp;Runnable,&nbsp;ReturnListener,&lt;br&gt;<br>
&amp;gt;&nbsp;                                           &nbsp;ConfirmListener&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;Channel&nbsp;channel;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;String &nbsp;exchangeName;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;String &nbsp;id;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;boolean&nbsp;mandatory;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;boolean&nbsp;immediate;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;boolean&nbsp;persistent;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;int    &nbsp;txSize;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long   &nbsp;interval;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;int    &nbsp;rateLimit;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long   &nbsp;timeLimit;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;byte[] &nbsp;message;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long   &nbsp;startTime;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long   &nbsp;lastStatsTime;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;int    &nbsp;msgCount;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;int    &nbsp;returnCount;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long     &nbsp;confirm;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;Semaphore&nbsp;confirmPool;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long     &nbsp;confirmCount;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long     &nbsp;nackCount;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;volatile&nbsp;SortedSet&amp;lt;Long&amp;gt;&nbsp;unconfirmedSet&nbsp;=&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;Collections.synchronizedSortedSet(new&nbsp;TreeSet&amp;lt;Long&amp;gt;());&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;public&nbsp;Producer(Channel&nbsp;channel,&nbsp;String&nbsp;exchangeName,&nbsp;String&nbsp;id,&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;List&amp;lt;?&amp;gt;&nbsp;flags,&nbsp;int&nbsp;txSize,&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;long&nbsp;interval,&nbsp;int&nbsp;rateLimit,&nbsp;int&nbsp;minMsgSize,&nbsp;int&lt;br&gt;<br>
&amp;gt;&nbsp;timeLimit,&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;long&nbsp;confirm)&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;throws&nbsp;IOException&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.channel     &nbsp;=&nbsp;channel;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.exchangeName&nbsp;=&nbsp;exchangeName;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;&lt;a&nbsp;href=&quot;http://this.id&quot;&nbsp;target=&quot;_blank&quot;&gt;this.id&lt;/a&gt;          &nbsp;=&nbsp;id;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.mandatory   &nbsp;=&nbsp;flags.contains(&amp;quot;mandatory&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.immediate   &nbsp;=&nbsp;flags.contains(&amp;quot;immediate&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.persistent  &nbsp;=&nbsp;flags.contains(&amp;quot;persistent&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.txSize      &nbsp;=&nbsp;txSize;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.interval    &nbsp;=&nbsp;interval;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.rateLimit   &nbsp;=&nbsp;rateLimit;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.timeLimit   &nbsp;=&nbsp;1000L&nbsp;*&nbsp;timeLimit;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.message     &nbsp;=&nbsp;new&nbsp;byte[minMsgSize];&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.confirm     &nbsp;=&nbsp;confirm;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(confirm&nbsp;&amp;gt;&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;this.confirmPool &nbsp;=&nbsp;new&nbsp;Semaphore((int)confirm);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;public&nbsp;synchronized&nbsp;void&nbsp;handleReturn(int&nbsp;replyCode,&lt;br&gt;<br>
&amp;gt;&nbsp;                                             &nbsp;String&nbsp;replyText,&lt;br&gt;<br>
&amp;gt;&nbsp;                                             &nbsp;String&nbsp;exchange,&lt;br&gt;<br>
&amp;gt;&nbsp;                                             &nbsp;String&nbsp;routingKey,&lt;br&gt;<br>
&amp;gt;&nbsp;                                             &nbsp;AMQP.BasicProperties&lt;br&gt;<br>
&amp;gt;&nbsp;properties,&lt;br&gt;<br>
&amp;gt;&nbsp;                                             &nbsp;byte[]&nbsp;body)&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;throws&nbsp;IOException&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;returnCount++;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;public&nbsp;void&nbsp;handleAck(long&nbsp;seqNo,&nbsp;boolean&nbsp;multiple)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;handleAckNack(seqNo,&nbsp;multiple,&nbsp;false);&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;public&nbsp;void&nbsp;handleNack(long&nbsp;seqNo,&nbsp;boolean&nbsp;multiple)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;handleAckNack(seqNo,&nbsp;multiple,&nbsp;true);&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;void&nbsp;handleAckNack(long&nbsp;seqNo,&nbsp;boolean&nbsp;multiple,&lt;br&gt;<br>
&amp;gt;&nbsp;                                  &nbsp;boolean&nbsp;nack)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;numConfirms&nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(multiple)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;SortedSet&amp;lt;Long&amp;gt;&nbsp;confirmed&nbsp;=&nbsp;unconfirmedSet.headSet(seqNo&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;1);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;numConfirms&nbsp;+=&nbsp;confirmed.size();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;confirmed.clear();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&nbsp;else&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;unconfirmedSet.remove(seqNo);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;numConfirms&nbsp;=&nbsp;1;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;synchronized&nbsp;(this)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;if&nbsp;(nack)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;nackCount&nbsp;+=&nbsp;numConfirms;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;}&nbsp;else&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;confirmCount&nbsp;+=&nbsp;numConfirms;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(confirmPool&nbsp;!=&nbsp;null)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;numConfirms;&nbsp;++i)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;confirmPool.release();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;public&nbsp;void&nbsp;run()&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;long&nbsp;now;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;now&nbsp;=&nbsp;startTime&nbsp;=&nbsp;lastStatsTime&nbsp;=&nbsp;System.currentTimeMillis();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;msgCount&nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;totalMsgCount&nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;try&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;while&nbsp;(timeLimit&nbsp;==&nbsp;0&nbsp;||&nbsp;now&nbsp;&amp;lt;&nbsp;startTime&nbsp;+&nbsp;timeLimit)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;if&nbsp;(confirmPool&nbsp;!=&nbsp;null)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;confirmPool.acquire();&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;delay(now);&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;publish(createMessage(totalMsgCount));&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;totalMsgCount++;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;msgCount++;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;if&nbsp;(txSize&nbsp;!=&nbsp;0&nbsp;&amp;amp;&amp;amp;&nbsp;totalMsgCount&nbsp;%&nbsp;txSize&nbsp;==&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;channel.txCommit();&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;now&nbsp;=&nbsp;System.currentTimeMillis();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;throw&nbsp;new&nbsp;RuntimeException(e);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;throw&nbsp;new&nbsp;RuntimeException&nbsp;(e);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;System.out.println(&amp;quot;sending&nbsp;rate&nbsp;avg:&nbsp;&amp;quot;&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                              &nbsp;(totalMsgCount&nbsp;*&nbsp;1000L&nbsp;/&nbsp;(now&nbsp;-&nbsp;startTime))&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                              &nbsp;&amp;quot;&nbsp;msg/s&amp;quot;);&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;void&nbsp;publish(byte[]&nbsp;msg)&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;throws&nbsp;IOException&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;unconfirmedSet.add(channel.getNextPublishSeqNo());&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;channel.basicPublish(exchangeName,&nbsp;id,&lt;br&gt;<br>
&amp;gt;&nbsp;                                &nbsp;mandatory,&nbsp;immediate,&lt;br&gt;<br>
&amp;gt;&nbsp;                                &nbsp;persistent&nbsp;?&lt;br&gt;<br>
&amp;gt;&nbsp;MessageProperties.MINIMAL_PERSISTENT_BASIC&nbsp;:&lt;br&gt;<br>
&amp;gt;&nbsp;MessageProperties.MINIMAL_BASIC,&lt;br&gt;<br>
&amp;gt;&nbsp;                                &nbsp;msg);&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;void&nbsp;delay(long&nbsp;now)&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;throws&nbsp;InterruptedException&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;long&nbsp;elapsed&nbsp;=&nbsp;now&nbsp;-&nbsp;lastStatsTime;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;//example:&nbsp;rateLimit&nbsp;is&nbsp;5000&nbsp;msg/s,&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;//10&nbsp;ms&nbsp;have&nbsp;elapsed,&nbsp;we&nbsp;have&nbsp;sent&nbsp;200&nbsp;messages&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;//the&nbsp;200&nbsp;msgs&nbsp;we&nbsp;have&nbsp;actually&nbsp;sent&nbsp;should&nbsp;have&nbsp;taken&nbsp;us&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;//200&nbsp;*&nbsp;1000&nbsp;/&nbsp;5000&nbsp;=&nbsp;40&nbsp;ms.&nbsp;So&nbsp;we&nbsp;pause&nbsp;for&nbsp;40ms&nbsp;-&nbsp;10ms&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;long&nbsp;pause&nbsp;=&nbsp;rateLimit&nbsp;==&nbsp;0&nbsp;?&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;0&nbsp;:&nbsp;(msgCount&nbsp;*&nbsp;1000L&nbsp;/&nbsp;rateLimit&nbsp;-&nbsp;elapsed);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(pause&nbsp;&amp;gt;&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;Thread.sleep(pause);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(elapsed&nbsp;&amp;gt;&nbsp;interval)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;long&nbsp;sendRate,&nbsp;returnRate,&nbsp;confirmRate,&nbsp;nackRate;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;synchronized(this)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;sendRate    &nbsp;=&nbsp;msgCount    &nbsp;*&nbsp;1000L&nbsp;/&nbsp;elapsed;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;returnRate  &nbsp;=&nbsp;returnCount &nbsp;*&nbsp;1000L&nbsp;/&nbsp;elapsed;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;confirmRate &nbsp;=&nbsp;confirmCount&nbsp;*&nbsp;1000L&nbsp;/&nbsp;elapsed;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;nackRate    &nbsp;=&nbsp;nackCount   &nbsp;*&nbsp;1000L&nbsp;/&nbsp;elapsed;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;msgCount    &nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;returnCount &nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;confirmCount&nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;nackCount   &nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;System.out.print(&amp;quot;sending&nbsp;rate:&nbsp;&amp;quot;&nbsp;+&nbsp;sendRate&nbsp;+&nbsp;&amp;quot;&nbsp;msg/s&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;if&nbsp;(mandatory&nbsp;||&nbsp;immediate)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;System.out.print(&amp;quot;,&nbsp;returns:&nbsp;&amp;quot;&nbsp;+&nbsp;returnRate&nbsp;+&nbsp;&amp;quot;&nbsp;ret/s&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;if&nbsp;(confirm&nbsp;&amp;gt;=&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;System.out.print(&amp;quot;,&nbsp;confirms:&nbsp;&amp;quot;&nbsp;+&nbsp;confirmRate&nbsp;+&nbsp;&amp;quot;&nbsp;c/s&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;if&nbsp;(nackRate&nbsp;&amp;gt;&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;System.out.print(&amp;quot;,&nbsp;nacks:&nbsp;&amp;quot;&nbsp;+&nbsp;nackRate&nbsp;+&nbsp;&amp;quot;&nbsp;n/s&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;System.out.println();&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;lastStatsTime&nbsp;=&nbsp;now;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;byte[]&nbsp;createMessage(int&nbsp;sequenceNumber)&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;throws&nbsp;IOException&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;ByteArrayOutputStream&nbsp;acc&nbsp;=&nbsp;new&nbsp;ByteArrayOutputStream();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;DataOutputStream&nbsp;d&nbsp;=&nbsp;new&nbsp;DataOutputStream(acc);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;long&nbsp;nano&nbsp;=&nbsp;System.nanoTime();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;d.writeInt(sequenceNumber);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;d.writeLong(nano);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;d.flush();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;acc.flush();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;byte[]&nbsp;m&nbsp;=&nbsp;acc.toByteArray();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(m.length&nbsp;&amp;lt;=&nbsp;message.length)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;System.arraycopy(m,&nbsp;0,&nbsp;message,&nbsp;0,&nbsp;m.length);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;return&nbsp;message;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&nbsp;else&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;return&nbsp;m;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;public&nbsp;static&nbsp;class&nbsp;Consumer&nbsp;implements&nbsp;Runnable&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;QueueingConsumer&nbsp;q;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;String          &nbsp;id;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;int             &nbsp;txSize;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;boolean         &nbsp;autoAck;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;Stats           &nbsp;stats;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long            &nbsp;timeLimit;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;public&nbsp;Consumer(QueueingConsumer&nbsp;q,&nbsp;String&nbsp;id,&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;int&nbsp;txSize,&nbsp;boolean&nbsp;autoAck,&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;Stats&nbsp;stats,&nbsp;int&nbsp;timeLimit)&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.q        &nbsp;=&nbsp;q;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;&lt;a&nbsp;href=&quot;http://this.id&quot;&nbsp;target=&quot;_blank&quot;&gt;this.id&lt;/a&gt;       &nbsp;=&nbsp;id;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.txSize   &nbsp;=&nbsp;txSize;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.autoAck  &nbsp;=&nbsp;autoAck;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.stats    &nbsp;=&nbsp;stats;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.timeLimit&nbsp;=&nbsp;1000L&nbsp;*&nbsp;timeLimit;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;public&nbsp;void&nbsp;run()&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;long&nbsp;now;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;long&nbsp;startTime;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;startTime&nbsp;=&nbsp;now&nbsp;=&nbsp;System.currentTimeMillis();&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;int&nbsp;totalMsgCount&nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;Channel&nbsp;channel&nbsp;=&nbsp;q.getChannel();&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;try&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;while&nbsp;(timeLimit&nbsp;==&nbsp;0&nbsp;||&nbsp;now&nbsp;&amp;lt;&nbsp;startTime&nbsp;+&nbsp;timeLimit)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;Delivery&nbsp;delivery;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;if&nbsp;(timeLimit&nbsp;==&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;delivery&nbsp;=&nbsp;q.nextDelivery();&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;}&nbsp;else&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;delivery&nbsp;=&nbsp;q.nextDelivery(startTime&nbsp;+&nbsp;timeLimit&nbsp;-&lt;br&gt;<br>
&amp;gt;&nbsp;now);&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;if&nbsp;(delivery&nbsp;==&nbsp;null)&nbsp;break;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;   &nbsp;   &nbsp;totalMsgCount++;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;DataInputStream&nbsp;d&nbsp;=&nbsp;new&nbsp;DataInputStream(new&lt;br&gt;<br>
&amp;gt;&nbsp;ByteArrayInputStream(delivery.getBody()));&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;d.readInt();&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;long&nbsp;msgNano&nbsp;=&nbsp;d.readLong();&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;long&nbsp;nano&nbsp;=&nbsp;System.nanoTime();&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;Envelope&nbsp;envelope&nbsp;=&nbsp;delivery.getEnvelope();&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;if&nbsp;(!autoAck)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;channel.basicAck(envelope.getDeliveryTag(),&nbsp;false);&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;if&nbsp;(txSize&nbsp;!=&nbsp;0&nbsp;&amp;amp;&amp;amp;&nbsp;totalMsgCount&nbsp;%&nbsp;txSize&nbsp;==&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;                       &nbsp;channel.txCommit();&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;now&nbsp;=&nbsp;System.currentTimeMillis();&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;                   &nbsp;stats.collectStats(now,&lt;br&gt;<br>
&amp;gt;&nbsp;id.equals(envelope.getRoutingKey())&nbsp;?&nbsp;(nano&nbsp;-&nbsp;msgNano)&nbsp;:&nbsp;0L);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;throw&nbsp;new&nbsp;RuntimeException(e);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;throw&nbsp;new&nbsp;RuntimeException&nbsp;(e);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&nbsp;catch&nbsp;(ShutdownSignalException&nbsp;e)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;throw&nbsp;new&nbsp;RuntimeException(e);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;long&nbsp;elapsed&nbsp;=&nbsp;now&nbsp;-&nbsp;startTime;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(elapsed&nbsp;&amp;gt;&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;System.out.println(&amp;quot;recving&nbsp;rate&nbsp;avg:&nbsp;&amp;quot;&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                                  &nbsp;(totalMsgCount&nbsp;*&nbsp;1000L&nbsp;/&nbsp;elapsed)&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                                  &nbsp;&amp;quot;&nbsp;msg/s&amp;quot;);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;public&nbsp;static&nbsp;class&nbsp;Stats&nbsp;{&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long   &nbsp;interval;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long   &nbsp;lastStatsTime;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;int    &nbsp;msgCount;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;int    &nbsp;latencyCount;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long   &nbsp;minLatency;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long   &nbsp;maxLatency;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;long   &nbsp;cumulativeLatency;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;public&nbsp;Stats(long&nbsp;interval)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;this.interval&nbsp;=&nbsp;interval;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;reset(System.currentTimeMillis());&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;private&nbsp;void&nbsp;reset(long&nbsp;t)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;lastStatsTime    &nbsp;=&nbsp;t;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;msgCount         &nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;latencyCount     &nbsp;=&nbsp;0;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;minLatency       &nbsp;=&nbsp;Long.MAX_VALUE;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;maxLatency       &nbsp;=&nbsp;Long.MIN_VALUE;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;cumulativeLatency&nbsp;=&nbsp;0L;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;public&nbsp;synchronized&nbsp;void&nbsp;collectStats(long&nbsp;now,&nbsp;long&nbsp;latency)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;msgCount++;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(latency&nbsp;&amp;gt;&nbsp;0)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;minLatency&nbsp;=&nbsp;Math.min(minLatency,&nbsp;latency);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;maxLatency&nbsp;=&nbsp;Math.max(maxLatency,&nbsp;latency);&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;cumulativeLatency&nbsp;+=&nbsp;latency;&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;latencyCount++;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;long&nbsp;elapsed&nbsp;=&nbsp;now&nbsp;-&nbsp;lastStatsTime;&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;if&nbsp;(elapsed&nbsp;&amp;gt;&nbsp;interval)&nbsp;{&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;System.out.println(&amp;quot;recving&nbsp;rate:&nbsp;&amp;quot;&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                                  &nbsp;(1000L&nbsp;*&nbsp;msgCount&nbsp;/&nbsp;elapsed)&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                                  &nbsp;&amp;quot;&nbsp;msg/s&amp;quot;&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                                  &nbsp;(latencyCount&nbsp;&amp;gt;&nbsp;0&nbsp;?&lt;br&gt;<br>
&amp;gt;&nbsp;                                   &nbsp;&amp;quot;,&nbsp;min/avg/max&nbsp;latency:&nbsp;&amp;quot;&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                                   &nbsp;minLatency/1000L&nbsp;+&nbsp;&amp;quot;/&amp;quot;&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                                   &nbsp;cumulativeLatency&nbsp;/&nbsp;(1000L&nbsp;*&lt;br&gt;<br>
&amp;gt;&nbsp;latencyCount)&nbsp;+&nbsp;&amp;quot;/&amp;quot;&nbsp;+&lt;br&gt;<br>
&amp;gt;&nbsp;                                   &nbsp;maxLatency/1000L&nbsp;+&nbsp;&amp;quot;&nbsp;microseconds&amp;quot;&nbsp;:&lt;br&gt;<br>
&amp;gt;&nbsp;                                   &nbsp;&amp;quot;&amp;quot;));&lt;br&gt;<br>
&amp;gt;&nbsp;               &nbsp;reset(now);&lt;br&gt;<br>
&amp;gt;&nbsp;           &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;       &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;   &nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;}&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;On&nbsp;Fri,&nbsp;Jul&nbsp;15,&nbsp;2011&nbsp;at&nbsp;7:06&nbsp;PM,&nbsp;Eugene&nbsp;Kirpichov&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:ekirpichov@gmail.com&quot;&gt;ekirpichov@gmail.com&lt;/a&gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;I&nbsp;am&nbsp;sorry&nbsp;but&nbsp;this&nbsp;link&nbsp;doesn&amp;#39;t&nbsp;have&nbsp;any&nbsp;source&nbsp;code&nbsp;-&nbsp;this&nbsp;is&nbsp;the&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;library.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;I&nbsp;meant&nbsp;*your*&nbsp;source&nbsp;code,&nbsp;the&nbsp;code&nbsp;of&nbsp;your&nbsp;program;&nbsp;the&nbsp;code&nbsp;which&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;exercises&nbsp;the&nbsp;library&nbsp;and&nbsp;gets&nbsp;5000&nbsp;msg/s.&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;P.S.&nbsp;Please&nbsp;use&nbsp;&amp;quot;Reply&nbsp;all&amp;quot;,&nbsp;this&nbsp;discussion&nbsp;is&nbsp;most&nbsp;probably&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;interesting&nbsp;for&nbsp;many&nbsp;people&nbsp;in&nbsp;the&nbsp;community.&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;2011/7/15&nbsp;News&nbsp;Aanad&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:news.anand11@gmail.com&quot;&gt;news.anand11@gmail.com&lt;/a&gt;&amp;gt;:&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;I&nbsp;am&nbsp;following&nbsp;this&nbsp;link&nbsp;for&nbsp;my&nbsp;java&nbsp;code:&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;&lt;a&nbsp;href=&quot;http://www.rabbitmq.com/releases/rabbitmq-java-client/v2.5.1/rabbitmq-java-client-bin-2.5.1.tar.gz&quot;&nbsp;target=&quot;_blank&quot;&gt;http://www.rabbitmq.com/releases/rabbitmq-java-client/v2.5.1/rabbitmq-java-client-bin-2.5.1.tar.gz&lt;/a&gt;&lt;br&gt;<br>
<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;On&nbsp;Fri,&nbsp;Jul&nbsp;15,&nbsp;2011&nbsp;at&nbsp;6:56&nbsp;PM,&nbsp;Eugene&nbsp;Kirpichov&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:ekirpichov@gmail.com&quot;&gt;ekirpichov@gmail.com&lt;/a&gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Please&nbsp;show&nbsp;the&nbsp;source&nbsp;code&nbsp;of&nbsp;all&nbsp;participating&nbsp;components.&nbsp;It&amp;#39;s&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;impossible&nbsp;to&nbsp;say&nbsp;anything&nbsp;definite&nbsp;without&nbsp;it.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;2011/7/15&nbsp;News&nbsp;Aanad&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:news.anand11@gmail.com&quot;&gt;news.anand11@gmail.com&lt;/a&gt;&amp;gt;:&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;Till&nbsp;now&nbsp;i&nbsp;am&nbsp;getting&nbsp;the&nbsp;result&nbsp;of&nbsp;5000&nbsp;msg/sec&nbsp;in&nbsp;java.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;On&nbsp;Fri,&nbsp;Jul&nbsp;15,&nbsp;2011&nbsp;at&nbsp;6:53&nbsp;PM,&nbsp;Eugene&nbsp;Kirpichov&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:ekirpichov@gmail.com&quot;&gt;ekirpichov@gmail.com&lt;/a&gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;I&nbsp;guess&nbsp;you&nbsp;should&nbsp;get&nbsp;the&nbsp;speed&nbsp;you&nbsp;want,&nbsp;and&nbsp;much&nbsp;more,&nbsp;if&nbsp;you&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;just&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;set&nbsp;up&nbsp;a&nbsp;high&nbsp;enough&nbsp;value&nbsp;for&nbsp;prefetch&nbsp;(see&nbsp;basic.qos)&nbsp;and&nbsp;set&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;autoack.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;I&nbsp;got&nbsp;~8k&nbsp;msg/s&nbsp;with&nbsp;much&nbsp;larger&nbsp;messages&nbsp;and&nbsp;persistence&nbsp;turned&nbsp;on&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;too.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;2011/7/15&nbsp;News&nbsp;Aanad&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:news.anand11@gmail.com&quot;&gt;news.anand11@gmail.com&lt;/a&gt;&amp;gt;:&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;Message&nbsp;size&nbsp;is&nbsp;199&nbsp;bytes&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;Messaging&nbsp;scenario&nbsp;is&nbsp;Persistence&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;On&nbsp;Fri,&nbsp;Jul&nbsp;15,&nbsp;2011&nbsp;at&nbsp;6:47&nbsp;PM,&nbsp;Eugene&nbsp;Kirpichov&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:ekirpichov@gmail.com&quot;&gt;ekirpichov@gmail.com&lt;/a&gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Hi.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;What&amp;#39;s&nbsp;the&nbsp;size&nbsp;of&nbsp;messages?&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;What&amp;#39;s&nbsp;your&nbsp;messaging&nbsp;scenario&nbsp;in&nbsp;general?&nbsp;Persistence,&nbsp;prefetch,&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;transactions?&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;2011/7/15&nbsp;News&nbsp;Aanad&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:news.anand11@gmail.com&quot;&gt;news.anand11@gmail.com&lt;/a&gt;&amp;gt;:&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;Hi,&nbsp;I&nbsp;wanted&nbsp;to&nbsp;achieve&nbsp;the&nbsp;goal&nbsp;of&nbsp;15000&nbsp;msg/sec&nbsp;in&nbsp;RabbitMQ.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;I&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;have&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;tried&nbsp;a&nbsp;lot&nbsp;in&nbsp;java&nbsp;as&nbsp;well&nbsp;as&nbsp;in&nbsp;ruby.&nbsp;And&nbsp;right&nbsp;now&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;implementing&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;node.js&nbsp;.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;I&nbsp;want&nbsp;to&nbsp;prefer&nbsp;java&nbsp;because&nbsp;after&nbsp;lots&nbsp;of&nbsp;experimentation&nbsp;the&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;only&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;java&nbsp;has&nbsp;given&nbsp;me&nbsp;good&nbsp;result&nbsp;but&nbsp;still&nbsp;goal&nbsp;is&nbsp;not&nbsp;achieved.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;So&nbsp;i&nbsp;want&nbsp;help&nbsp;to&nbsp;know&nbsp;how&nbsp;to&nbsp;reach&nbsp;upto&nbsp;15000&nbsp;msg/sec&nbsp;in&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;RabbitMQ&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;using&nbsp;java.&nbsp;If&nbsp;any&nbsp;good&nbsp;suggestion&nbsp; is&nbsp;there&nbsp;please&nbsp;tell&nbsp;me&nbsp;or&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;if&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;any&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;site&nbsp;to&nbsp;prefer&nbsp;then&nbsp;please&nbsp;tell&nbsp;me.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;Thanks.&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;_______________________________________________&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;rabbitmq-discuss&nbsp;mailing&nbsp;list&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;&lt;a&nbsp;href=&quot;mailto:rabbitmq-discuss@lists.rabbitmq.com&quot;&gt;rabbitmq-discuss@lists.rabbitmq.com&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&nbsp;&lt;a&nbsp;href=&quot;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&quot;&nbsp;target=&quot;_blank&quot;&gt;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;--&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Eugene&nbsp;Kirpichov&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Principal&nbsp;Engineer,&nbsp;Mirantis&nbsp;Inc.&nbsp;&lt;a&nbsp;href=&quot;http://www.mirantis.com/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://www.mirantis.com/&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Editor,&nbsp;&lt;a&nbsp;href=&quot;http://fprog.ru/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://fprog.ru/&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;--&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Eugene&nbsp;Kirpichov&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Principal&nbsp;Engineer,&nbsp;Mirantis&nbsp;Inc.&nbsp;&lt;a&nbsp;href=&quot;http://www.mirantis.com/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://www.mirantis.com/&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Editor,&nbsp;&lt;a&nbsp;href=&quot;http://fprog.ru/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://fprog.ru/&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;--&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Eugene&nbsp;Kirpichov&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Principal&nbsp;Engineer,&nbsp;Mirantis&nbsp;Inc.&nbsp;&lt;a&nbsp;href=&quot;http://www.mirantis.com/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://www.mirantis.com/&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&amp;gt;&nbsp;Editor,&nbsp;&lt;a&nbsp;href=&quot;http://fprog.ru/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://fprog.ru/&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;--&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;Eugene&nbsp;Kirpichov&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;Principal&nbsp;Engineer,&nbsp;Mirantis&nbsp;Inc.&nbsp;&lt;a&nbsp;href=&quot;http://www.mirantis.com/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://www.mirantis.com/&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&amp;gt;&nbsp;Editor,&nbsp;&lt;a&nbsp;href=&quot;http://fprog.ru/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://fprog.ru/&lt;/a&gt;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;&lt;/div&gt;--&lt;br&gt;<br>
&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&nbsp;class=&quot;h5&quot;&gt;Eugene&nbsp;Kirpichov&lt;br&gt;<br>
Principal&nbsp;Engineer,&nbsp;Mirantis&nbsp;Inc.&nbsp;&lt;a&nbsp;href=&quot;http://www.mirantis.com/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://www.mirantis.com/&lt;/a&gt;&lt;br&gt;<br>
Editor,&nbsp;&lt;a&nbsp;href=&quot;http://fprog.ru/&quot;&nbsp;target=&quot;_blank&quot;&gt;http://fprog.ru/&lt;/a&gt;&lt;br&gt;<br>
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;<br>

</tt>
