<tt>
&lt;p&gt;Hi&nbsp;Mike,&nbsp;I&amp;#39;m&nbsp;quite&nbsp;new&nbsp;to&nbsp;RabbitMQ&nbsp;but&nbsp;I&nbsp;think&nbsp;there&nbsp;are&nbsp;at&nbsp;least&nbsp;a&nbsp;couple&nbsp;of&nbsp;things&nbsp;you&nbsp;can&nbsp;look&nbsp;into.&nbsp;One&nbsp;is&nbsp;QoS,&nbsp;which&nbsp;regulates&nbsp;how&nbsp;many&nbsp;messages&nbsp;a&nbsp;consumer&nbsp;is&nbsp;being&nbsp;pushed&nbsp;in&nbsp;advance,&nbsp;setting&nbsp;it&nbsp;to&nbsp;1&nbsp;should&nbsp;mean&nbsp;that&nbsp;no&nbsp;messages&nbsp;are&nbsp;sent&nbsp;to&nbsp;it&nbsp;before&nbsp;it&nbsp;can&nbsp;consume&nbsp;the&nbsp;one&nbsp;it&nbsp;has&nbsp;on&nbsp;its&nbsp;queue.&nbsp;Second,&nbsp;you&nbsp;can&nbsp;look&nbsp;at&nbsp;ACKs,&nbsp;which&nbsp;let&nbsp;you&nbsp;cope&nbsp;with&nbsp;the&nbsp;scenario&nbsp;you&nbsp;are&nbsp;describing,&nbsp;since&nbsp;failing&nbsp;to&nbsp;ack&nbsp;messages&nbsp;implies&nbsp;that&nbsp;they&nbsp;stay&nbsp;on&nbsp;the&nbsp;queue&nbsp;and&nbsp;can&nbsp;be&nbsp;recovered&nbsp;later.&lt;/p&gt;<br>
<br>
&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Jul&nbsp;7,&nbsp;2011&nbsp;9:58&nbsp;AM,&nbsp;&amp;quot;Mike&nbsp;Hadlow&amp;quot;&nbsp;&amp;lt;&lt;a&nbsp;href=&quot;mailto:mike.hadlow@15below.com&quot;&gt;mike.hadlow@15below.com&lt;/a&gt;&amp;gt;&nbsp;wrote:&lt;br&nbsp;type=&quot;attribution&quot;&gt;&amp;gt;&nbsp;Hi&nbsp;All,&lt;br&gt;&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;I&amp;#39;m&nbsp;writing&nbsp;a&nbsp;high-level&nbsp;&amp;quot;opinionated&amp;quot;&nbsp;.NET&nbsp;API&nbsp;on&nbsp;top&nbsp;of&nbsp;the&nbsp;supplied&nbsp;RabbitMQ&nbsp;.NET&nbsp;client&nbsp;that&nbsp;I&amp;#39;ve&nbsp;named&nbsp;EasyNetQ.&nbsp;It&amp;#39;s&nbsp;on&nbsp;GitHub&nbsp;here:&lt;br&gt;<br>
&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;&lt;a&nbsp;href=&quot;https://github.com/mikehadlow/EasyNetQ&quot;&gt;https://github.com/mikehadlow/EasyNetQ&lt;/a&gt;&lt;br&gt;&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;Currently&nbsp;I&amp;#39;m&nbsp;using&nbsp;the&nbsp;QueueingBasicConsumer&nbsp;and&nbsp;spinning&nbsp;up&nbsp;a&nbsp;single&nbsp;thread&nbsp;that&nbsp;sits&nbsp;in&nbsp;a&nbsp;loop&nbsp;doing&nbsp;SharedQueue.Dequeue(),&nbsp;see&nbsp;the&nbsp;code&nbsp;here:&lt;br&gt;<br>
&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;&lt;a&nbsp;href=&quot;https://github.com/mikehadlow/EasyNetQ/blob/master/EasyNetQ/QueueingConsumerFactory.cs&quot;&gt;https://github.com/mikehadlow/EasyNetQ/blob/master/EasyNetQ/QueueingConsumerFactory.cs&lt;/a&gt;&lt;br&gt;&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;My&nbsp;question&nbsp;is&nbsp;about&nbsp;the&nbsp;scenario&nbsp;where&nbsp;messages&nbsp;are&nbsp;being&nbsp;pushed&nbsp;onto&nbsp;the&nbsp;queue&nbsp;by&nbsp;QueueingBasicConsumer&nbsp;faster&nbsp;than&nbsp;my&nbsp;client&nbsp;callbacks&nbsp;can&nbsp;handle&nbsp;them.&nbsp;Surely&nbsp;messages&nbsp;will&nbsp;build&nbsp;up&nbsp;in&nbsp;the&nbsp;SharedQueue&nbsp;until&nbsp;we&nbsp;run&nbsp;out&nbsp;of&nbsp;memory,&nbsp;crash,&nbsp;and&nbsp;lose&nbsp;all&nbsp;the&nbsp;queued&nbsp;messages?&nbsp;It&nbsp;would&nbsp;be&nbsp;much&nbsp;better&nbsp;if&nbsp;messages&nbsp;were&nbsp;pulled&nbsp;from&nbsp;RabbitMQ&nbsp;only&nbsp;as&nbsp;fast&nbsp;as&nbsp;the&nbsp;consumers&nbsp;can&nbsp;process&nbsp;them.&lt;br&gt;<br>
&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;Does&nbsp;anyone&nbsp;have&nbsp;any&nbsp;experience&nbsp;with&nbsp;this&nbsp;scenario?&nbsp;What&nbsp;is&nbsp;the&nbsp;recommended&nbsp;subscription&nbsp;pattern?&nbsp;Should&nbsp;I&nbsp;be&nbsp;using&nbsp;BasicGet&nbsp;instead?&lt;br&gt;&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;Many&nbsp;thanks&lt;br&gt;&amp;gt;&nbsp;Mike&lt;br&gt;&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;15below&nbsp;Limited:&nbsp;Company&nbsp;registered&nbsp;in&nbsp;England&nbsp;and&nbsp;Wales&nbsp;No&nbsp;3945289&lt;br&gt;<br>
&amp;gt;&nbsp;Registered&nbsp;Office:&nbsp;Lyndean&nbsp;House,&nbsp;43-46&nbsp;Queens&nbsp;Road,&nbsp;Brighton&nbsp;BN1&nbsp;3XB,&nbsp;United&nbsp;Kingdom&lt;br&gt;&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;15below&nbsp;Australia&nbsp;Pty&nbsp;Limited:&nbsp;ABN&nbsp;25&nbsp;132&nbsp;716&nbsp;379&lt;br&gt;&amp;gt;&nbsp;Level&nbsp;50,&nbsp;120&nbsp;Collins&nbsp;Street,&nbsp;Melbourne,&nbsp;Victoria&nbsp;3000,&nbsp;Australia&lt;br&gt;<br>
&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;Please&nbsp;think&nbsp;about&nbsp;the&nbsp;environment&nbsp;before&nbsp;printing&nbsp;this&nbsp;email.&lt;br&gt;&amp;gt;&nbsp;&lt;br&gt;&amp;gt;&nbsp;************************************************************************&lt;br&gt;&amp;gt;&nbsp;This&nbsp;email&nbsp;and&nbsp;any&nbsp;attachments&nbsp;may&nbsp;be&nbsp;confidential&nbsp;and/or&nbsp;legally&nbsp;privileged&nbsp;and&nbsp;are&nbsp;solely&nbsp;for&nbsp;the&nbsp;use&nbsp;of&nbsp;the&nbsp;intended&nbsp;recipient.&nbsp;If&nbsp;you&nbsp;have&nbsp;received&nbsp;this&nbsp;email&nbsp;in&nbsp;error&nbsp;please&nbsp;contact&nbsp;the&nbsp;sender.&nbsp;Any&nbsp;views&nbsp;or&nbsp;opinions&nbsp;expressed&nbsp;within&nbsp;this&nbsp;e-mail&nbsp;are&nbsp;solely&nbsp;those&nbsp;of&nbsp;the&nbsp;sender,&nbsp;and&nbsp;do&nbsp;not&nbsp;necessarily&nbsp;represent&nbsp;those&nbsp;of&nbsp;15below&nbsp;unless&nbsp;otherwise&nbsp;specifically&nbsp;stated.&nbsp;Although&nbsp;15below&nbsp;has&nbsp;taken&nbsp;every&nbsp;reasonable&nbsp;precaution&nbsp;to&nbsp;ensure&nbsp;that&nbsp;any&nbsp;attachment&nbsp;to&nbsp;this&nbsp;e-mail&nbsp;has&nbsp;been&nbsp;checked&nbsp;for&nbsp;viruses,&nbsp;it&nbsp;is&nbsp;strongly&nbsp;recommended&nbsp;that&nbsp;you&nbsp;carry&nbsp;out&nbsp;your&nbsp;own&nbsp;virus&nbsp;check&nbsp;before&nbsp;opening&nbsp;any&nbsp;attachment,&nbsp;as&nbsp;we&nbsp;cannot&nbsp;accept&nbsp;liability&nbsp;for&nbsp;any&nbsp;damage&nbsp;sustained&nbsp;as&nbsp;a&nbsp;result&nbsp;of&nbsp;software&nbsp;virus&nbsp;infection.&lt;br&gt;<br>
&lt;/div&gt;<br>

</tt>
