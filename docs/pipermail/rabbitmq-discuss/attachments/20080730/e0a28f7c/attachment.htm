<tt>
&lt;div&nbsp;dir=&quot;ltr&quot;&gt;Hello&nbsp;all,&lt;br&gt;&lt;br&gt;I&amp;#39;ve&nbsp;searched&nbsp;and&nbsp;not&nbsp;seen&nbsp;this&nbsp;issue&nbsp;talked&nbsp;about&nbsp;on&nbsp;the&nbsp;mailing&nbsp;list&nbsp;so&nbsp;I&nbsp;wanted&nbsp;to&nbsp;generate&nbsp;some&nbsp;discussion&nbsp;regarding&nbsp;the&nbsp;round-robin&nbsp;nature&nbsp;of&nbsp;having&nbsp;multiple&nbsp;consumers&nbsp;on&nbsp;a&nbsp;single&nbsp;queue.&lt;br&gt;<br>
&lt;br&gt;The&nbsp;scenario&nbsp;I&amp;#39;m&nbsp;using&nbsp;Rabbit-MQ&nbsp;for&nbsp;is&nbsp;as&nbsp;follows:&lt;br&gt;&amp;nbsp;-&nbsp;Many&nbsp;producers&nbsp;send&nbsp;messages&nbsp;to&nbsp;a&nbsp;direct&nbsp;exchange&nbsp;that&nbsp;end&nbsp;up&nbsp;in&nbsp;a&nbsp;&amp;quot;job&amp;quot;&nbsp;queue&lt;br&gt;&amp;nbsp;-&nbsp;Many&nbsp;single-threaded&nbsp;consumers&nbsp;are&nbsp;listening&nbsp;on&nbsp;a&nbsp;single&nbsp;job&nbsp;queue&nbsp;using&nbsp;basic_consume&lt;br&gt;<br>
&amp;nbsp;-&nbsp;When&nbsp;a&nbsp;consumer&nbsp;receives&nbsp;a&nbsp;job&nbsp;from&nbsp;the&nbsp;queue,&nbsp;they&nbsp;process&nbsp;it,&nbsp;put&nbsp;the&nbsp;result&nbsp;on&nbsp;a&nbsp;reply&nbsp;queue&nbsp;then&nbsp;ack&nbsp;the&nbsp;message&lt;br&gt;&lt;br&gt;The&nbsp;round-robin&nbsp;nature&nbsp;of&nbsp;message&nbsp;deliveries&nbsp;is&nbsp;great&nbsp;for&nbsp;load&nbsp;balancing&nbsp;if&nbsp;all&nbsp;our&nbsp;jobs&nbsp;require&nbsp;equal&nbsp;processing&nbsp;time&nbsp;but&nbsp;this&nbsp;is&nbsp;not&nbsp;the&nbsp;case..&nbsp;jobs&nbsp;can&nbsp;range&nbsp;anywhere&nbsp;from&nbsp;a&nbsp;few&nbsp;seconds&nbsp;to&nbsp;a&nbsp;minute&nbsp;worth&nbsp;of&nbsp;processing.&nbsp;&lt;br&gt;<br>
&lt;br&gt;I&nbsp;did&nbsp;up&nbsp;an&nbsp;artificial&nbsp;test&nbsp;where&nbsp;3&nbsp;consumers&nbsp;were&nbsp;using&nbsp;basic.consume&nbsp;on&nbsp;a&nbsp;single&nbsp;queue.&nbsp;Two&nbsp;consumers&nbsp;processed&nbsp;their&nbsp;jobs&nbsp;immediately,&nbsp;however&nbsp;the&nbsp;final&nbsp;consumer&nbsp;slept&nbsp;for&nbsp;30&nbsp;seconds&nbsp;to&nbsp;simulate&nbsp;getting&nbsp;a&nbsp;&amp;quot;big&nbsp;job&amp;quot;&nbsp;before&nbsp;ack&amp;#39;ing&nbsp;the&nbsp;message&nbsp;and&nbsp;consuming&nbsp;the&nbsp;next&nbsp;one.&nbsp;The&nbsp;result&nbsp;(which&nbsp;I&nbsp;believe&nbsp;is&nbsp;due&nbsp;to&nbsp;the&nbsp;round-robin&nbsp;nature&nbsp;specified&nbsp;by&nbsp;AMQP)&nbsp;was&nbsp;two&nbsp;consumers&nbsp;pumping&nbsp;through&nbsp;their&nbsp;jobs&nbsp;and&nbsp;sitting&nbsp;idle,&nbsp;even&nbsp;though&nbsp;there&nbsp;were&nbsp;plenty&nbsp;of&nbsp;jobs&nbsp;remaining&nbsp;on&nbsp;the&nbsp;queue&nbsp;and&nbsp;the&nbsp;third&nbsp;consumer&nbsp;left&nbsp;busy&nbsp;&amp;quot;processing&amp;quot;&nbsp;all&nbsp;the&nbsp;&amp;quot;big&nbsp;jobs&amp;quot;.&lt;br&gt;<br>
This&nbsp;was&nbsp;done&nbsp;using&nbsp;Barry&nbsp;Pederson&amp;#39;s&nbsp;amqplib-0.3&nbsp;library&nbsp;in&nbsp;Python.&lt;br&gt;&lt;br&gt;I&nbsp;don&amp;#39;t&nbsp;know&nbsp;erlang&nbsp;well&nbsp;enough&nbsp;to&nbsp;check&nbsp;the&nbsp;source&nbsp;but&nbsp;I&nbsp;assume&nbsp;RabbitMQ&nbsp;does&nbsp;something&nbsp;like&nbsp;assigning&nbsp;jobs&nbsp;as&nbsp;they&nbsp;come&nbsp;in&nbsp;to&nbsp;each&nbsp;consumer&nbsp;on&nbsp;an&nbsp;amqp&nbsp;queue?&nbsp;If&nbsp;this&nbsp;is&nbsp;the&nbsp;case,&nbsp;I&nbsp;think&nbsp;the&nbsp;desired&nbsp;behaviour&nbsp;would&nbsp;be&nbsp;rather&nbsp;than&nbsp;assigning&nbsp;the&nbsp;jobs&nbsp;to&nbsp;a&nbsp;particular&nbsp;consumer&nbsp;immediately,&nbsp;assign&nbsp;the&nbsp;job&nbsp;to&nbsp;the&nbsp;consumer&nbsp;when&nbsp;it&nbsp;sends&nbsp;an&nbsp;ack&nbsp;for&nbsp;the&nbsp;last&nbsp;message&nbsp;it&nbsp;received&nbsp;to&nbsp;signify&nbsp;that&nbsp;it&nbsp;is&nbsp;ready&nbsp;to&nbsp;process&nbsp;a&nbsp;new&nbsp;job.&nbsp;This&nbsp;would&nbsp;work&nbsp;too&nbsp;in&nbsp;the&nbsp;multi-threaded&nbsp;scenario&nbsp;where&nbsp;people&nbsp;wanted&nbsp;to&nbsp;ack&nbsp;the&nbsp;message&nbsp;immediately&nbsp;before&nbsp;processing&nbsp;it&nbsp;so&nbsp;one&nbsp;thread&nbsp;can&nbsp;process&nbsp;the&nbsp;message&nbsp;contents&nbsp;whilst&nbsp;the&nbsp;other&nbsp;downloads&nbsp;the&nbsp;next&nbsp;message.&lt;br&gt;<br>
&lt;br&gt;As&nbsp;a&nbsp;work-around&nbsp;at&nbsp;the&nbsp;moment&nbsp;I&nbsp;am&nbsp;ack&amp;#39;ing&nbsp;a&nbsp;message&nbsp;after&nbsp;I&nbsp;receive&nbsp;it&nbsp;and&nbsp;cancelling&nbsp;the&nbsp;consume&nbsp;before&nbsp;processing&nbsp;the&nbsp;job&nbsp;so&nbsp;other&nbsp;jobs&nbsp;will&nbsp;be&nbsp;delivered&nbsp;to&nbsp;other&nbsp;consumers&nbsp;however,&nbsp;this&nbsp;means&nbsp;if&nbsp;the&nbsp;job&nbsp;fails&nbsp;for&nbsp;whatever&nbsp;reason&nbsp;it&nbsp;will&nbsp;not&nbsp;be&nbsp;delivered&nbsp;to&nbsp;another&nbsp;consumer&nbsp;for&nbsp;processing.&lt;br&gt;<br>
&lt;br&gt;I&amp;#39;m&nbsp;happy&nbsp;to&nbsp;put&nbsp;the&nbsp;test&nbsp;code&nbsp;up&nbsp;if&nbsp;anyone&nbsp;is&nbsp;interested&nbsp;in&nbsp;trying&nbsp;this&nbsp;for&nbsp;themselves.&lt;br&gt;&lt;br&gt;Nathan.&lt;br&gt;&lt;/div&gt;<br>

</tt>
