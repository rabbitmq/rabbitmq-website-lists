<tt>
Matthew,&lt;div&gt;  an&nbsp;excellent&nbsp;response&nbsp;and&nbsp;thank&nbsp;you&nbsp;for&nbsp;it!&nbsp;Yes,&nbsp;difficult&nbsp;it&nbsp;is!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It&nbsp;raises&nbsp;a&nbsp;somewhat&nbsp;philosophical&nbsp;discussion&nbsp;around&nbsp;where&nbsp;the&nbsp;onus&nbsp;is&nbsp;placed&nbsp;in&nbsp;terms&nbsp;of&nbsp;guaranteeing&nbsp;such&nbsp;things&nbsp;as&nbsp;&amp;#39;guaranteed&nbsp;once&amp;#39;,&nbsp;i.e.,&nbsp;on&nbsp;the&nbsp;client&nbsp;side&nbsp;or&nbsp;on&nbsp;the&nbsp;server&nbsp;side?&nbsp;The&nbsp;JMS&nbsp;standard&nbsp;offers&nbsp;guaranteed&nbsp;once,&nbsp;whereby&nbsp;the&nbsp;onus&nbsp;is&nbsp;on&nbsp;the&nbsp;server&nbsp;(JMS&nbsp;implementation)&nbsp;and&nbsp;not&nbsp;on&nbsp;the&nbsp;client. &lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What&nbsp;I&nbsp;am&nbsp;trying&nbsp;to&nbsp;say&nbsp;is&nbsp;that,&nbsp;in&nbsp;my&nbsp;opinion,&nbsp;client&nbsp;programs&nbsp;should&nbsp;be&nbsp;as&nbsp;&amp;#39;simple&amp;#39;&nbsp;as&nbsp;possible&nbsp;with&nbsp;the&nbsp;servers&nbsp;doing&nbsp;all&nbsp;the&nbsp;hard&nbsp;work.&nbsp;This&nbsp;is&nbsp;what&nbsp;the&nbsp;JMS&nbsp;standard&nbsp;forces&nbsp;on&nbsp;implementors&nbsp;and,&nbsp;perhaps&nbsp;to&nbsp;a&nbsp;lesser&nbsp;extent&nbsp;today,&nbsp;do&nbsp;does&nbsp;AMQP.&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Note:&nbsp;the&nbsp;word&nbsp;&amp;#39;server&amp;#39;&nbsp;is&nbsp;horribly&nbsp;overloaded&nbsp;these&nbsp;days.&nbsp;It&nbsp;is&nbsp;used&nbsp;here&nbsp;to&nbsp;indicate&nbsp;the&nbsp;software&nbsp;with&nbsp;which&nbsp;clients,&nbsp;producers&nbsp;and&nbsp;consumers,&nbsp;communicate.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Oh&nbsp;well,&nbsp;off&nbsp;to&nbsp;librabbitMQ&nbsp;and&nbsp;some&nbsp;example&nbsp;programs&nbsp;written&nbsp;in&nbsp;COBOL...&lt;/div&gt;<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Cheers,&nbsp;John&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Thu,&nbsp;Aug&nbsp;5,&nbsp;2010&nbsp;at&nbsp;13:22,&nbsp;Matthew&nbsp;Sackman&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:matthew@rabbitmq.com&quot;&gt;matthew@rabbitmq.com&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex;&quot;&gt;<br>
Hi&nbsp;Mike,&lt;br&gt;<br>
&lt;br&gt;<br>
On&nbsp;Tue,&nbsp;Aug&nbsp;03,&nbsp;2010&nbsp;at&nbsp;04:43:56AM&nbsp;-0400,&nbsp;Mike&nbsp;Petrusis&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&nbsp;In&nbsp;reviewing&nbsp;the&nbsp;mailing&nbsp;list&nbsp;archives,&nbsp;I&nbsp;see&nbsp;various&nbsp;threads&nbsp;which&nbsp;state&nbsp;that&nbsp;ensuring&nbsp;&amp;quot;exactly&nbsp;once&amp;quot;&nbsp;delivery&nbsp;requires&nbsp;deduplication&nbsp;by&nbsp;the&nbsp;consumer.&nbsp; For&nbsp;example&nbsp;the&nbsp;following:&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;&amp;quot;Exactly-once&nbsp;requires&nbsp;coordination&nbsp;between&nbsp;consumers,&nbsp;or&nbsp;idempotency,&lt;br&gt;<br>
&amp;gt;&nbsp;even&nbsp;when&nbsp;there&nbsp;is&nbsp;just&nbsp;a&nbsp;single&nbsp;queue.&nbsp;The&nbsp;consumer,&nbsp;broker&nbsp;or&nbsp;network&lt;br&gt;<br>
&amp;gt;&nbsp;may&nbsp;die&nbsp;during&nbsp;the&nbsp;transmission&nbsp;of&nbsp;the&nbsp;ack&nbsp;for&nbsp;a&nbsp;message,&nbsp;thus&nbsp;causing&lt;br&gt;<br>
&amp;gt;&nbsp;retransmission&nbsp;of&nbsp;the&nbsp;message&nbsp;(which&nbsp;the&nbsp;consumer&nbsp;has&nbsp;already&nbsp;seen&nbsp;and&lt;br&gt;<br>
&amp;gt;&nbsp;processed)&nbsp;at&nbsp;a&nbsp;later&nbsp;point.&amp;quot;&nbsp; &lt;a&nbsp;href=&quot;http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-July/004237.html&quot;&nbsp;target=&quot;_blank&quot;&gt;http://lists.rabbitmq.com/pipermail/rabbitmq-discuss/2009-July/004237.html&lt;/a&gt;&lt;br&gt;<br>
<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;In&nbsp;the&nbsp;case&nbsp;of&nbsp;competing&nbsp;consumers&nbsp;which&nbsp;pull&nbsp;messages&nbsp;from&nbsp;the&nbsp;same&nbsp;queue,&nbsp;this&nbsp;will&nbsp;require&nbsp;some&nbsp;sort&nbsp;of&nbsp;shared&nbsp;state&nbsp;between&nbsp;consumers&nbsp;to&nbsp;de-duplicate&nbsp;messages&nbsp;(assuming&nbsp;the&nbsp;consumers&nbsp;are&nbsp;not&nbsp;idempotent).&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;Our&nbsp;application&nbsp;is&nbsp;using&nbsp;RabbitMQ&nbsp;to&nbsp;distribute&nbsp;tasks&nbsp;across&nbsp;multiple&nbsp;workers&nbsp;residing&nbsp;on&nbsp;different&nbsp;servers,&nbsp;this&nbsp;adds&nbsp;to&nbsp;the&nbsp;cost&nbsp;of&nbsp;sharing&nbsp;state&nbsp;between&nbsp;the&nbsp;workers.&lt;br&gt;<br>
&amp;gt;&lt;br&gt;<br>
&amp;gt;&nbsp;Another&nbsp;message&nbsp;in&nbsp;the&nbsp;email&nbsp;archive&nbsp;mentions&nbsp;that&nbsp;&amp;quot;You&nbsp;can&nbsp;guarantee&nbsp;exactly-once&nbsp;delivery&nbsp;if&nbsp;you&nbsp;use&nbsp;transactions,&nbsp;durable&nbsp;queues&nbsp;and&nbsp;exchanges,&nbsp;and&nbsp;persistent&nbsp;messages,&nbsp;but&nbsp;only&nbsp;as&nbsp;long&nbsp;as&nbsp;any&nbsp;failing&nbsp;node&nbsp;eventually&nbsp;recovers.&amp;quot;&lt;br&gt;<br>
<br>
&lt;br&gt;<br>
All&nbsp;the&nbsp;above&nbsp;is&nbsp;sort&nbsp;of&nbsp;wrong.&nbsp;You&nbsp;can&nbsp;never&nbsp;*guarantee*&nbsp;exactly&nbsp;once&lt;br&gt;<br>
(there&amp;#39;s&nbsp;always&nbsp;some&nbsp;argument&nbsp;about&nbsp;whether&nbsp;receiving&nbsp;message&nbsp;duplicates&lt;br&gt;<br>
but&nbsp;relying&nbsp;on&nbsp;idempotency&nbsp;is&nbsp;achieving&nbsp;exactly&nbsp;once.&nbsp;I&nbsp;don&amp;#39;t&nbsp;feel&nbsp;it&lt;br&gt;<br>
does,&nbsp;and&nbsp;this&nbsp;should&nbsp;become&nbsp;clearer&nbsp;as&nbsp;to&nbsp;why&nbsp;further&nbsp;on...)&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;problem&nbsp;is&nbsp;publishers.&nbsp;If&nbsp;the&nbsp;server&nbsp;on&nbsp;which&nbsp;RabbitMQ&nbsp;is&nbsp;running&lt;br&gt;<br>
crashes,&nbsp;after&nbsp;commiting&nbsp;a&nbsp;transaction&nbsp;containing&nbsp;publishes,&nbsp;it&amp;#39;s&lt;br&gt;<br>
possible&nbsp;the&nbsp;commit-ok&nbsp;message&nbsp;may&nbsp;get&nbsp;lost.&nbsp;Thus&nbsp;the&nbsp;publishers&nbsp;still&lt;br&gt;<br>
think&nbsp;they&nbsp;need&nbsp;to&nbsp;republish,&nbsp;so&nbsp;wait&nbsp;until&nbsp;the&nbsp;broker&nbsp;comes&nbsp;back&nbsp;up&nbsp;and&lt;br&gt;<br>
then&nbsp;republishes.&nbsp;This&nbsp;can&nbsp;happen&nbsp;an&nbsp;infinite&nbsp;number&nbsp;of&nbsp;times:&nbsp;the&lt;br&gt;<br>
publishers&nbsp;connect,&nbsp;start&nbsp;a&nbsp;transaction,&nbsp;publish&nbsp;messages,&nbsp;commit&nbsp;the&lt;br&gt;<br>
transaction&nbsp;and&nbsp;then&nbsp;the&nbsp;commit-ok&nbsp;gets&nbsp;lost&nbsp;and&nbsp;so&nbsp;the&nbsp;publishers&lt;br&gt;<br>
repeat&nbsp;the&nbsp;process.&lt;br&gt;<br>
&lt;br&gt;<br>
As&nbsp;a&nbsp;result,&nbsp;on&nbsp;the&nbsp;clients,&nbsp;you&nbsp;need&nbsp;to&nbsp;detect&nbsp;duplicates.&nbsp;Now&nbsp;this&nbsp;is&lt;br&gt;<br>
really&nbsp;a&nbsp;barrier&nbsp;to&nbsp;making&nbsp;all&nbsp;operations&nbsp;idempotent.&nbsp;The&nbsp;problem&nbsp;is&lt;br&gt;<br>
that&nbsp;you&nbsp;never&nbsp;know&nbsp;how&nbsp;many&nbsp;copies&nbsp;of&nbsp;a&nbsp;message&nbsp;there&nbsp;will&nbsp;be.&nbsp;Thus&nbsp;you&lt;br&gt;<br>
never&nbsp;know&nbsp;when&nbsp;it&amp;#39;s&nbsp;safe&nbsp;to&nbsp;remove&nbsp;messages&nbsp;from&nbsp;your&nbsp;dedup&nbsp;cache.&nbsp;Now&lt;br&gt;<br>
things&nbsp;like&nbsp;redis&nbsp;apparently&nbsp;have&nbsp;the&nbsp;means&nbsp;to&nbsp;delete&nbsp;entries&nbsp;after&nbsp;an&lt;br&gt;<br>
amount&nbsp;of&nbsp;time,&nbsp;which&nbsp;would&nbsp;at&nbsp;least&nbsp;allow&nbsp;you&nbsp;to&nbsp;avoid&nbsp;the&nbsp;database&lt;br&gt;<br>
eating&nbsp;up&nbsp;all&nbsp;the&nbsp;RAM&nbsp;in&nbsp;the&nbsp;universe,&nbsp;but&nbsp;there&amp;#39;s&nbsp;still&nbsp;the&nbsp;possibility&lt;br&gt;<br>
that&nbsp;after&nbsp;the&nbsp;entry&amp;#39;s&nbsp;been&nbsp;deleted,&nbsp;another&nbsp;duplicate&nbsp;will&nbsp;come&nbsp;along&lt;br&gt;<br>
which&nbsp;you&nbsp;now&nbsp;won&amp;#39;t&nbsp;detect&nbsp;as&nbsp;a&nbsp;duplicate.&lt;br&gt;<br>
&lt;br&gt;<br>
This&nbsp;isn&amp;#39;t&nbsp;just&nbsp;a&nbsp;problem&nbsp;with&nbsp;RabbitMQ&nbsp;-&nbsp;in&nbsp;any&nbsp;messaging&nbsp;system,&nbsp;if&lt;br&gt;<br>
any&nbsp;message&nbsp;can&nbsp;be&nbsp;lost,&nbsp;you&nbsp;can&nbsp;not&nbsp;achieve&nbsp;exactly&nbsp;once&nbsp;semantics.&nbsp;The&lt;br&gt;<br>
best&nbsp;you&nbsp;can&nbsp;hope&nbsp;for&nbsp;is&nbsp;a&nbsp;probability&nbsp;of&nbsp;a&nbsp;large&nbsp;number&nbsp;of&nbsp;9s&nbsp;that&nbsp;you&lt;br&gt;<br>
will&nbsp;be&nbsp;able&nbsp;to&nbsp;detect&nbsp;all&nbsp;the&nbsp;duplicates.&nbsp;But&nbsp;that&amp;#39;s&nbsp;the&nbsp;best&nbsp;you&nbsp;can&lt;br&gt;<br>
achieve.&lt;br&gt;<br>
&lt;br&gt;<br>
Scaling&nbsp;horizontally&nbsp;is&nbsp;thus&nbsp;more&nbsp;tricky&nbsp;because,&nbsp;as&nbsp;you&nbsp;say,&nbsp;you&nbsp;may&lt;br&gt;<br>
now&nbsp;have&nbsp;multiple&nbsp;consumers&nbsp;which&nbsp;each&nbsp;receive&nbsp;one&nbsp;copy&nbsp;of&nbsp;a&nbsp;message.&lt;br&gt;<br>
Thus&nbsp;the&nbsp;dedup&nbsp;database&nbsp;would&nbsp;have&nbsp;to&nbsp;be&nbsp;distributed.&nbsp;With&nbsp;high&nbsp;message&lt;br&gt;<br>
rates,&nbsp;this&nbsp;might&nbsp;well&nbsp;become&nbsp;prohibitive&nbsp;because&nbsp;of&nbsp;the&nbsp;amount&nbsp;of&lt;br&gt;<br>
network&nbsp;traffic&nbsp;due&nbsp;to&nbsp;transactions&nbsp;between&nbsp;the&nbsp;consumers.&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;gt;&nbsp;What&amp;#39;s&nbsp;the&nbsp;recommended&nbsp;way&nbsp;to&nbsp;deal&nbsp;with&nbsp;the&nbsp;potential&nbsp;of&nbsp;duplicate&nbsp;messages?&lt;br&gt;<br>
&lt;br&gt;<br>
Currently,&nbsp;there&nbsp;is&nbsp;no&nbsp;&amp;quot;recommended&amp;quot;&nbsp;way.&nbsp;If&nbsp;you&nbsp;have&nbsp;a&nbsp;single&nbsp;consumer,&lt;br&gt;<br>
it&amp;#39;s&nbsp;quite&nbsp;easy&nbsp;-&nbsp;something&nbsp;like&nbsp;tokyocabinet&nbsp;should&nbsp;be&nbsp;more&nbsp;than&lt;br&gt;<br>
sufficiently&nbsp;performant.&nbsp;For&nbsp;multiple&nbsp;consumers,&nbsp;you&amp;#39;re&nbsp;currently&nbsp;going&lt;br&gt;<br>
to&nbsp;have&nbsp;to&nbsp;look&nbsp;at&nbsp;some&nbsp;sort&nbsp;of&nbsp;distributed&nbsp;database.&lt;br&gt;<br>
&lt;br&gt;<br>
&amp;gt;&nbsp;Is&nbsp;this&nbsp;a&nbsp;rare&nbsp;enough&nbsp;edge&nbsp;case&nbsp;that&nbsp;most&nbsp;people&nbsp;just&nbsp;ignore&nbsp;it?&lt;br&gt;<br>
&lt;br&gt;<br>
No&nbsp;idea.&nbsp;But&nbsp;one&nbsp;way&nbsp;of&nbsp;making&nbsp;your&nbsp;life&nbsp;easier&nbsp;is&nbsp;for&nbsp;the&nbsp;producer&nbsp;to&lt;br&gt;<br>
send&nbsp;slightly&nbsp;different&nbsp;messages&nbsp;on&nbsp;every&nbsp;republish&nbsp;(they&nbsp;would&nbsp;still&lt;br&gt;<br>
obviously&nbsp;need&nbsp;to&nbsp;have&nbsp;the&nbsp;same&nbsp;msg&nbsp;id).&nbsp;That&nbsp;way,&nbsp;if&nbsp;you&nbsp;detect&nbsp;a&nbsp;msg&lt;br&gt;<br>
with&nbsp;&amp;quot;republish&nbsp;count&amp;quot;&nbsp;==&nbsp;0,&nbsp;then&nbsp;you&nbsp;know&nbsp;it&amp;#39;s&nbsp;the&nbsp;first&nbsp;copy,&nbsp;so&nbsp;you&lt;br&gt;<br>
can&nbsp;insert&nbsp;async&nbsp;into&nbsp;your&nbsp;shared&nbsp;database&nbsp;and&nbsp;then&nbsp;act&nbsp;on&nbsp;the&nbsp;message.&lt;br&gt;<br>
You&nbsp;only&nbsp;need&nbsp;to&nbsp;do&nbsp;a&nbsp;query&nbsp;on&nbsp;the&nbsp;database&nbsp;whenever&nbsp;you&nbsp;receive&nbsp;a&nbsp;msg&lt;br&gt;<br>
with&nbsp;&amp;quot;republish&nbsp;count&amp;quot;&nbsp;&amp;gt;&nbsp;0&nbsp;-&nbsp;thus&nbsp;you&nbsp;can&nbsp;tune&nbsp;your&nbsp;database&nbsp;for&lt;br&gt;<br>
inserts&nbsp;and&nbsp;hopefully&nbsp;save&nbsp;some&nbsp;work&nbsp;-&nbsp;the&nbsp;common&nbsp;case&nbsp;will&nbsp;then&nbsp;be&nbsp;the&lt;br&gt;<br>
first&nbsp;case,&nbsp;and&nbsp;lookups&nbsp;will&nbsp;be&nbsp;exceedingly&nbsp;rare.&lt;br&gt;<br>
&lt;br&gt;<br>
The&nbsp;question&nbsp;then&nbsp;is:&nbsp;if&nbsp;you&amp;#39;ve&nbsp;received&nbsp;a&nbsp;msg,&nbsp;republish&nbsp;count&nbsp;&amp;gt;&nbsp;0&nbsp;but&lt;br&gt;<br>
there&nbsp;are&nbsp;no&nbsp;entries&nbsp;in&nbsp;the&nbsp;database,&nbsp;what&nbsp;do&nbsp;you&nbsp;do?&nbsp;It&nbsp;shouldn&amp;#39;t&nbsp;have&lt;br&gt;<br>
overtaken&nbsp;the&nbsp;first&nbsp;publish&nbsp;(though&nbsp;if&nbsp;consumers&nbsp;disconnected&nbsp;without&lt;br&gt;<br>
acking,&nbsp;or&nbsp;requeued&nbsp;messages,&nbsp;it&nbsp;could&nbsp;have),&nbsp;but&nbsp;you&nbsp;need&nbsp;to&nbsp;cause&nbsp;some&lt;br&gt;<br>
sort&nbsp;of&nbsp;synchronise&nbsp;operation&nbsp;between&nbsp;all&nbsp;the&nbsp;consumers&nbsp;to&nbsp;ensure&nbsp;none&lt;br&gt;<br>
are&nbsp;in&nbsp;the&nbsp;process&nbsp;of&nbsp;adding&nbsp;to&nbsp;the&nbsp;database&nbsp;-&nbsp;it&nbsp;all&nbsp;gets&nbsp;a&nbsp;bit&nbsp;hairy&lt;br&gt;<br>
at&nbsp;this&nbsp;point.&lt;br&gt;<br>
&lt;br&gt;<br>
Thus&nbsp;if&nbsp;your&nbsp;message&nbsp;rate&nbsp;is&nbsp;low,&nbsp;you&amp;#39;re&nbsp;much&nbsp;safer&nbsp;doing&nbsp;the&nbsp;insert&nbsp;and&lt;br&gt;<br>
select&nbsp;on&nbsp;every&nbsp;message.&nbsp;If&nbsp;that&amp;#39;s&nbsp;too&nbsp;expensive,&nbsp;you&amp;#39;re&nbsp;going&nbsp;to&nbsp;have&lt;br&gt;<br>
to&nbsp;think&nbsp;very&nbsp;hard&nbsp;indeed&nbsp;about&nbsp;how&nbsp;to&nbsp;avoid&nbsp;races&nbsp;between&nbsp;different&lt;br&gt;<br>
consumers&nbsp;thinking&nbsp;they&amp;#39;re&nbsp;both/all&nbsp;responsible&nbsp;for&nbsp;acting&nbsp;on&nbsp;the&nbsp;same&lt;br&gt;<br>
message.&lt;br&gt;<br>
&lt;br&gt;<br>
This&nbsp;stuff&nbsp;isn&amp;#39;t&nbsp;easy.&lt;br&gt;<br>
&lt;br&gt;<br>
Matthew&lt;br&gt;<br>
_______________________________________________&lt;br&gt;<br>
rabbitmq-discuss&nbsp;mailing&nbsp;list&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;mailto:rabbitmq-discuss@lists.rabbitmq.com&quot;&gt;rabbitmq-discuss@lists.rabbitmq.com&lt;/a&gt;&lt;br&gt;<br>
&lt;a&nbsp;href=&quot;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&quot;&nbsp;target=&quot;_blank&quot;&gt;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&lt;/a&gt;&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br&nbsp;clear=&quot;all&quot;&gt;&lt;br&gt;--&nbsp;&lt;br&gt;---&lt;br&gt;John&nbsp;Apps&lt;br&gt;(49)&nbsp;171&nbsp;869&nbsp;1813&lt;br&gt;<br>
&lt;/div&gt;<br>

</tt>
