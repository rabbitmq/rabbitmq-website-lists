<tt>
anybody&nbsp;see&nbsp;anything&nbsp;possible&nbsp;in&nbsp;the&nbsp;code&nbsp;snip&nbsp;below&nbsp;that&nbsp;could&nbsp;cause&nbsp;the&nbsp;message&nbsp;to&nbsp;long&nbsp;error&nbsp;displayed&nbsp;at&nbsp;the&nbsp;bottom?&nbsp;note,&nbsp;this&nbsp;error&nbsp;is&nbsp;occurring&nbsp;on&nbsp;subscribe,&nbsp;not&nbsp;publish...&lt;br&gt;&lt;br&gt;I&nbsp;can&nbsp;reproduce&nbsp;it&nbsp;on&nbsp;a&nbsp;xp&nbsp;pro&nbsp;workstation&nbsp;and&nbsp;a&nbsp;windows&nbsp;server&nbsp;2003&nbsp;box...&lt;br&gt;<br>
&lt;br&gt;&amp;lt;snip&amp;gt;&lt;br&gt;//winform&nbsp;app&lt;br&gt;using&nbsp;System;&lt;br&gt;using&nbsp;System.Collections.Generic;&lt;br&gt;using&nbsp;System.ComponentModel;&lt;br&gt;using&nbsp;System.Collections;&lt;br&gt;using&nbsp;System.Data;&lt;br&gt;using&nbsp;System.Drawing;&lt;br&gt;using&nbsp;System.Linq;&lt;br&gt;<br>
using&nbsp;System.Text;&lt;br&gt;using&nbsp;System.Windows.Forms;&lt;br&gt;using&nbsp;System.ServiceModel.Web;&lt;br&gt;using&nbsp;System.ServiceModel;&lt;br&gt;using&nbsp;System.ServiceModel.Channels;&lt;br&gt;using&nbsp;System.ServiceModel.Description;&lt;br&gt;&lt;br&gt;using&nbsp;Test.Base;&lt;br&gt;<br>
using&nbsp;Test.Entity;&lt;br&gt;&lt;br&gt;using&nbsp;RabbitMQ.ServiceModel;&lt;br&gt;using&nbsp;RabbitMQ.Client;&lt;br&gt;&lt;br&gt;namespace&nbsp;RabbitMqPubSub1&lt;br&gt;{&lt;br&gt;   &nbsp;public&nbsp;partial&nbsp;class&nbsp;frmMain&nbsp;:&nbsp;Form&lt;br&gt;   &nbsp;{&lt;br&gt;       &nbsp;ServiceHost&nbsp;dispatcherHost&nbsp;=&nbsp;null;&lt;br&gt;       &nbsp;ServiceHost&nbsp;subscriberHost&nbsp;=&nbsp;null;&lt;br&gt;<br>
&lt;br&gt;       &nbsp;string&nbsp;m_strSubscriber&nbsp;=&nbsp;string.Empty;&lt;br&gt;       &nbsp;string&nbsp;m_strDispatcher&nbsp;=&nbsp;string.Empty;&lt;br&gt;       &nbsp;string&nbsp;m_strSubscriberHost&nbsp;=&nbsp;string.Empty;&lt;br&gt;&lt;br&gt;       &nbsp;public&nbsp;frmMain()&lt;br&gt;       &nbsp;{&lt;br&gt;           &nbsp;InitializeComponent();&lt;br&gt;<br>
       &nbsp;}&lt;br&gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;summary&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;Publish&nbsp;Test&nbsp;Message&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;/summary&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;sender&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;e&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;<br>
       &nbsp;private&nbsp;void&nbsp;btnPub_Click(object&nbsp;sender,&nbsp;EventArgs&nbsp;e)&lt;br&gt;       &nbsp;{&lt;br&gt;           &nbsp;try&lt;br&gt;           &nbsp;{&lt;br&gt;               &nbsp;using&nbsp;(ChannelFactory&amp;lt;IDispatcherService&amp;gt;&nbsp;scf&nbsp;=&nbsp;GetDispatcherCF())&lt;br&gt;               &nbsp;{&lt;br&gt;<br>
                   &nbsp;IDispatcherService&nbsp;client&nbsp;=&nbsp;scf.CreateChannel();&lt;br&gt;                   &nbsp;Test.Entity.Message&nbsp;msg&nbsp;=&nbsp;new&nbsp;Test.Entity.Message();&lt;br&gt;                   &nbsp;msg.Source&nbsp;=&nbsp;txtPubContent.Text;&lt;br&gt;                   &nbsp;msg.Contexts.Add(&amp;quot;c1&amp;quot;);&lt;br&gt;<br>
&lt;br&gt;                   &nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&amp;lt;&nbsp;1000;&nbsp;i++)&nbsp;//change&nbsp;seed&nbsp;for&nbsp;generic&nbsp;testing...&lt;br&gt;                   &nbsp;{&lt;br&gt;                       &nbsp;client.Publish(msg);&lt;br&gt;                   &nbsp;}&lt;br&gt;               &nbsp;}&lt;br&gt;           &nbsp;}&lt;br&gt;<br>
           &nbsp;catch&nbsp;(Exception&nbsp;ex)&lt;br&gt;           &nbsp;{&lt;br&gt;               &nbsp;throw&nbsp;ex;&lt;br&gt;           &nbsp;}&lt;br&gt;       &nbsp;}&lt;br&gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;summary&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;Host&nbsp;The&nbsp;Dispatcher&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;/summary&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;sender&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;<br>
       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;e&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;       &nbsp;private&nbsp;void&nbsp;btnHostDispatcher_Click(object&nbsp;sender,&nbsp;EventArgs&nbsp;e)&lt;br&gt;       &nbsp;{&lt;br&gt;           &nbsp;if&nbsp;(txtHostDispatcher.Text&nbsp;==&nbsp;string.Empty)&lt;br&gt;           &nbsp;{&lt;br&gt;<br>
               &nbsp;m_strDispatcher&nbsp;=&nbsp;&amp;quot;amqp:///dispatcher&amp;quot;;&lt;br&gt;           &nbsp;}&lt;br&gt;           &nbsp;else&lt;br&gt;           &nbsp;{&lt;br&gt;               &nbsp;m_strDispatcher&nbsp;=&nbsp;txtHostDispatcher.Text;&lt;br&gt;           &nbsp;}&lt;br&gt;           &nbsp;&lt;br&gt;           &nbsp;dispatcherHost&nbsp;=&nbsp;new&nbsp;ServiceHost(typeof(Dispatcher.DispatcherService),&nbsp;new&nbsp;Uri(&amp;quot;soap.amqp:///&amp;quot;));&lt;br&gt;<br>
           &nbsp;dispatcherHost.AddServiceEndpoint(typeof(IDispatcherService),&nbsp;new&nbsp;RabbitMQBinding(new&nbsp;Uri(&amp;quot;amqp://localhost:5672/&amp;quot;),&nbsp;Protocols.AMQP_0_8),&nbsp;m_strDispatcher);&lt;br&gt;           &nbsp;dispatcherHost.CloseTimeout&nbsp;=&nbsp;TimeSpan.FromMinutes(10);&nbsp;&lt;br&gt;<br>
&lt;br&gt;           &nbsp;dispatcherHost.Open();&lt;br&gt;       &nbsp;}&lt;br&gt;&lt;br&gt;       &nbsp;private&nbsp;ChannelFactory&amp;lt;IDispatcherService&amp;gt;&nbsp;GetDispatcherCF()&lt;br&gt;       &nbsp;{&lt;br&gt;           &nbsp;if&nbsp;(txtHostDispatcher.Text&nbsp;==&nbsp;string.Empty)&lt;br&gt;           &nbsp;{&lt;br&gt;<br>
               &nbsp;m_strDispatcher&nbsp;=&nbsp;&amp;quot;amqp:///dispatcher&amp;quot;;&lt;br&gt;           &nbsp;}&lt;br&gt;           &nbsp;else&lt;br&gt;           &nbsp;{&lt;br&gt;               &nbsp;m_strDispatcher&nbsp;=&nbsp;txtHostDispatcher.Text;&lt;br&gt;           &nbsp;}&lt;br&gt;&lt;br&gt;           &nbsp;ChannelFactory&amp;lt;IDispatcherService&amp;gt;&nbsp;scf;&lt;br&gt;<br>
&lt;br&gt;           &nbsp;//The&nbsp;RabbitMQBinding&nbsp;instantiation&nbsp;is&nbsp;where&nbsp;the&nbsp;error&nbsp;is&nbsp;being&nbsp;raised...&lt;br&gt;           &nbsp;scf&nbsp;=&nbsp;new&nbsp;ChannelFactory&amp;lt;IDispatcherService&amp;gt;(&lt;br&gt;               &nbsp;new&nbsp;RabbitMQBinding(&lt;br&gt;                   &nbsp;new&nbsp;Uri(&amp;quot;amqp://localhost:5672/&amp;quot;),&lt;br&gt;<br>
                       &nbsp;Protocols.AMQP_0_8),&lt;br&gt;                           &nbsp;new&nbsp;EndpointAddress(m_strDispatcher));&lt;br&gt;&lt;br&gt;           &nbsp;return&nbsp;scf;&lt;br&gt;       &nbsp;}&lt;br&gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;summary&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;Subscribe&nbsp;to&nbsp;queue&lt;br&gt;<br>
       &nbsp;///&nbsp;&amp;lt;/summary&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;sender&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;e&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;       &nbsp;private&nbsp;void&nbsp;btnSubscribe_Click(object&nbsp;sender,&nbsp;EventArgs&nbsp;e)&lt;br&gt;<br>
       &nbsp;{  &nbsp;&lt;br&gt;           &nbsp;if&nbsp;(txtHostSubscriberAddress.Text&nbsp;==&nbsp;string.Empty)&lt;br&gt;           &nbsp;{&lt;br&gt;               &nbsp;m_strSubscriber&nbsp;=&nbsp;&amp;quot;amqp:///subscriber&amp;quot;;&lt;br&gt;           &nbsp;}&lt;br&gt;           &nbsp;else&lt;br&gt;           &nbsp;{&lt;br&gt;<br>
               &nbsp;m_strSubscriber&nbsp;=&nbsp;txtHostSubscriberAddress.Text;&lt;br&gt;           &nbsp;}&lt;br&gt;&lt;br&gt;           &nbsp;try&lt;br&gt;           &nbsp;{&lt;br&gt;               &nbsp;using&nbsp;(ChannelFactory&amp;lt;IDispatcherService&amp;gt;&nbsp;scf&nbsp;=&nbsp;GetDispatcherCF())&lt;br&gt;               &nbsp;{&lt;br&gt;<br>
                   &nbsp;IDispatcherService&nbsp;client&nbsp;=&nbsp;scf.CreateChannel();&lt;br&gt;                   &nbsp;client.Subscribe(new&nbsp;Test.Base.SubscriberInfo(m_strSubscriber,&nbsp;&amp;quot;c1&amp;quot;,&nbsp;&amp;quot;c2&amp;quot;));&lt;br&gt;               &nbsp;}&lt;br&gt;           &nbsp;}&lt;br&gt;<br>
&lt;br&gt;           &nbsp;catch&nbsp;(Exception&nbsp;ex)&lt;br&gt;           &nbsp;{&lt;br&gt;               &nbsp;throw&nbsp;ex;&lt;br&gt;           &nbsp;}&lt;br&gt;       &nbsp;}&lt;br&gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;summary&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;Host&nbsp;Subscriber&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;/summary&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;sender&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;<br>
       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;e&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;       &nbsp;private&nbsp;void&nbsp;btnHostSubscriber_Click(object&nbsp;sender,&nbsp;EventArgs&nbsp;e)&lt;br&gt;       &nbsp;{&lt;br&gt;           &nbsp;if&nbsp;(txtHostSubscriberAddress.Text&nbsp;==&nbsp;string.Empty)&lt;br&gt;           &nbsp;{&lt;br&gt;<br>
               &nbsp;m_strSubscriberHost&nbsp;=&nbsp;&amp;quot;amqp:///subscriber&amp;quot;;&lt;br&gt;           &nbsp;}&lt;br&gt;           &nbsp;else&lt;br&gt;           &nbsp;{&lt;br&gt;               &nbsp;m_strSubscriberHost&nbsp;=&nbsp;txtHostSubscriberAddress.Text;&lt;br&gt;           &nbsp;}&lt;br&gt;&lt;br&gt;           &nbsp;//The&nbsp;ServiceHost&nbsp;must&nbsp;specify&nbsp;a&nbsp;base&nbsp;or&nbsp;absolute&nbsp;endpoint&nbsp;address&nbsp;under&nbsp;the&nbsp;soap.amqp&nbsp;scheme.&nbsp;&lt;br&gt;<br>
           &nbsp;//An&nbsp;endpoint&nbsp;should&nbsp;then&nbsp;be&nbsp;added&nbsp;to&nbsp;the&nbsp;service&nbsp;using&nbsp;the&nbsp;RabbitMQBinding.&lt;br&gt;           &nbsp;subscriberHost&nbsp;=&nbsp;new&nbsp;ServiceHost(typeof(Subscriber.SubscriberService),&nbsp;new&nbsp;Uri(&amp;quot;soap.amqp:///&amp;quot;));&lt;br&gt;           &nbsp;subscriberHost.AddServiceEndpoint(typeof(ISubscriberService),&nbsp;new&nbsp;RabbitMQBinding(new&nbsp;Uri(&amp;quot;amqp://localhost:5672/&amp;quot;),&nbsp;Protocols.AMQP_0_8),&nbsp;m_strSubscriberHost);&lt;br&gt;<br>
           &nbsp;subscriberHost.CloseTimeout&nbsp;=&nbsp;TimeSpan.FromMinutes(10);&lt;br&gt;&lt;br&gt;           &nbsp;subscriberHost.Open();&lt;br&gt;       &nbsp;}&lt;br&gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;summary&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;Create&nbsp;Queue&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;/summary&amp;gt;&lt;br&gt;<br>
       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;sender&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;       &nbsp;///&nbsp;&amp;lt;param&nbsp;name=&amp;quot;e&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;br&gt;       &nbsp;private&nbsp;void&nbsp;btnCreateQueue_Click(object&nbsp;sender,&nbsp;EventArgs&nbsp;e)&lt;br&gt;       &nbsp;{&lt;br&gt;           &nbsp;string&nbsp;address&nbsp;=&nbsp;&amp;quot;localhost:5672&amp;quot;;//&amp;quot;amqp:///&amp;quot;;&lt;br&gt;<br>
           &nbsp;string&nbsp;strQueue&nbsp;=&nbsp;txtQueueName.Text;&lt;br&gt;           &nbsp;bool&nbsp;durable&nbsp;=&nbsp;true;&lt;br&gt;           &nbsp;string&nbsp;exchange&nbsp;=&nbsp;string.Empty;&lt;br&gt;           &nbsp;string&nbsp;routingKey&nbsp;=&nbsp;string.Empty;&lt;br&gt;&lt;br&gt;           &nbsp;using&nbsp;(IConnection&nbsp;connection&nbsp;=&nbsp;new&nbsp;ConnectionFactory().CreateConnection(address))&lt;br&gt;<br>
           &nbsp;{&lt;br&gt;               &nbsp;using&nbsp;(IModel&nbsp;model&nbsp;=&nbsp;connection.CreateModel())&lt;br&gt;               &nbsp;{&lt;br&gt;                   &nbsp;strQueue&nbsp;=&nbsp;model.QueueDeclare(strQueue,&nbsp;durable);&lt;br&gt;&lt;br&gt;                   &nbsp;model.QueueBind(strQueue,&nbsp;exchange,&nbsp;routingKey,&nbsp;false,&nbsp;null);&lt;br&gt;<br>
               &nbsp;}&lt;br&gt;           &nbsp;}&lt;br&gt;       &nbsp;}&lt;br&gt;   &nbsp;}&lt;br&gt;}&lt;br&gt;&lt;br&gt;&amp;lt;/snip&amp;gt;&lt;br&gt;&lt;br&gt;RE:&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Thu,&nbsp;Jul&nbsp;23,&nbsp;2009&nbsp;at&nbsp;9:13&nbsp;AM,&nbsp;....&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;padding-left:&nbsp;1ex;&quot;&gt;<br>
although&nbsp;there&nbsp;are&nbsp;no&nbsp;messages&nbsp;any&nbsp;longer&nbsp;then&nbsp;&amp;quot;test&nbsp;message&amp;quot;&nbsp;in&nbsp;the&nbsp;applicable&nbsp;queue...&lt;br&gt;&lt;br&gt;the&nbsp;following&nbsp;is&nbsp;returned...&lt;br&gt;&lt;br&gt;The&nbsp;AMQP&nbsp;operation&nbsp;was&nbsp;interrupted:&nbsp;AMQP&nbsp;close-reason,&nbsp;initiated&nbsp;by&nbsp;Library,&nbsp;code=311,&nbsp;text=&amp;quot;The&nbsp;body&nbsp;of&nbsp;a&nbsp;message&nbsp;(18446744073709551575&nbsp;bytes)&nbsp;was&nbsp;too&nbsp;long.&amp;quot;,&nbsp;classId=0,&nbsp;methodId=0,&nbsp;cause=RabbitMQ.Client.Impl.BodyTooLongException:&nbsp;The&nbsp;body&nbsp;of&nbsp;a&nbsp;message&nbsp;(18446744073709551575&nbsp;bytes)&nbsp;was&nbsp;too&nbsp;long.&lt;br&gt;<br>
<br>
  &nbsp;at&nbsp;RabbitMQ.Client.Impl.ContentHeaderBase.ReadFrom(Int32&nbsp;channelNumber,&nbsp;NetworkBinaryReader&nbsp;reader)&nbsp;in&nbsp;C:\RabbitMQ.Client\RabbitMQ\Client\Impl\ContentHeaderBase.cs:line&nbsp;23&lt;br&gt;  &nbsp;at&nbsp;RabbitMQ.Client.Impl.CommandAssembler.HandleFrame(Frame&nbsp;f)&nbsp;in&nbsp;C:\RabbitMQ.Client\RabbitMQ\Client\Impl\CommandAssembler.cs:line&nbsp;53&lt;br&gt;<br>
<br>
  &nbsp;at&nbsp;RabbitMQ.Client.Impl.Session.HandleFrame(Frame&nbsp;frame)&nbsp;in&nbsp;C:\RabbitMQ.Client\RabbitMQ\Client\Impl\Session.cs:line&nbsp;16&lt;br&gt;  &nbsp;at&nbsp;RabbitMQ.Client.Impl.ConnectionBase.MainLoopIteration()&nbsp;in&nbsp;C:\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line&nbsp;434&lt;br&gt;<br>
<br>
  &nbsp;at&nbsp;RabbitMQ.Client.Impl.ConnectionBase.MainLoop()&nbsp;in&nbsp;C:\RabbitMQ.Client\RabbitMQ\Client\Impl\ConnectionBase.cs:line&nbsp;388&lt;br&gt;&lt;br&gt;suggestions,&nbsp;comments,&nbsp;assistance?&lt;br&gt;&lt;br&gt;thanks&nbsp;in&nbsp;advance.&lt;br&gt;&lt;br&gt;&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;
</tt>
