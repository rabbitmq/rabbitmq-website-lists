from marshal import dumps
import threading

import pika

class Sender(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.connection = None
        self.channel = None
    def stop(self):
        if self.connection:
            self.connection.close()
    def on_connected(self, connection):
        connection.channel(self.on_chanel_open)
    def on_chanel_open(self, channel):
        self.channel = channel
        self.channel.exchange_declare(exchange='rabbit',
                                      type='topic',
                                      callback=self.on_exchange_declared)
    def on_exchange_declared(self, frame):
        self.connection.add_on_close_callback(self.on_closed)
    def on_closed(self, frame):
        self.connection.ioloop.stop()
    def run(self):
        p = pika.ConnectionParameters(host='localhost')
        self.connection = pika.SelectConnection(p, self.on_connected)
        self.connection.ioloop.start()
    def send(self, task, user=None):
        body = dumps(task, 2)
        routing_key = 'server.task'
        self.channel.basic_publish(exchange='rabbit',
                                   routing_key=routing_key,
                                   body=body)