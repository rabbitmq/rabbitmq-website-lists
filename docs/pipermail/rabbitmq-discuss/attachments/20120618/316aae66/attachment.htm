<tt>
&lt;br&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Mon,&nbsp;Jun&nbsp;18,&nbsp;2012&nbsp;at&nbsp;12:29&nbsp;PM,&nbsp;Tim&nbsp;Watson&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:tim@rabbitmq.com&quot;&nbsp;target=&quot;_blank&quot;&gt;tim@rabbitmq.com&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
<br>
&lt;div&nbsp;class=&quot;im&quot;&gt;&lt;br&gt;&lt;/div&gt;<br>
I&amp;#39;m&nbsp;a&nbsp;bit&nbsp;confused&nbsp;now.&nbsp;Where&nbsp;do&nbsp;you&nbsp;set&nbsp;this&nbsp;&amp;#39;in&nbsp;process&amp;#39;&nbsp;status&nbsp;-&nbsp;on&nbsp;the&nbsp;newly&nbsp;submitted&nbsp;message,&nbsp;or&nbsp;in&nbsp;the&nbsp;database&nbsp;record&nbsp;or&nbsp;in&nbsp;some&nbsp;field&nbsp;in&nbsp;the&nbsp;originally&nbsp;submitted&nbsp;message(s)?&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;<br>
<br>
&lt;div&gt;The&nbsp;application&nbsp;database.&nbsp; When&nbsp;the&nbsp;user&nbsp;say&nbsp;&amp;quot;I&nbsp;want&nbsp;a&nbsp;report&amp;quot;&nbsp;then&nbsp;flag&nbsp;the&nbsp;start&nbsp;time,&nbsp;and&nbsp;the&nbsp;state&nbsp;(initially&nbsp;&amp;quot;pending&amp;quot;)&nbsp;and&nbsp;send&nbsp;of&nbsp;the&nbsp;message. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;idea&nbsp;is&nbsp;the&nbsp;worker&nbsp;picks&nbsp;up&nbsp;the&nbsp;job&nbsp;and&nbsp;atomically&nbsp;sets&nbsp;it&nbsp;from&nbsp;&amp;quot;pending&amp;quot;&nbsp;to&nbsp;&amp;quot;in&nbsp;process&amp;quot;&nbsp;--&nbsp;which&nbsp;means&nbsp;even&nbsp;if&nbsp;the&nbsp;job&nbsp;was&nbsp;queued&nbsp;multiple&nbsp;times&nbsp;only&nbsp;one&nbsp;process&nbsp;would&nbsp;pick&nbsp;up&nbsp;the&nbsp;actual&nbsp;work.&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Then&nbsp;when&nbsp;the&nbsp;job&nbsp;is&nbsp;completed&nbsp;again&nbsp;the&nbsp;state&nbsp;is&nbsp;changed&nbsp;from&nbsp;&amp;quot;in&nbsp;process&amp;quot;&nbsp;to&nbsp;&amp;quot;completed&amp;quot;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
<br>
&lt;div&nbsp;class=&quot;im&quot;&gt;&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
Maybe&nbsp;you&nbsp;are&nbsp;right&nbsp;that&nbsp;durable&nbsp;queues&nbsp;are&nbsp;the&nbsp;correct&nbsp;solution&nbsp;for&lt;br&gt;<br>
this&nbsp;--&nbsp;I&nbsp;still&nbsp;need&nbsp;to&nbsp;track&nbsp;state&nbsp;on&nbsp;the&nbsp;web&nbsp;app&nbsp;side&nbsp;to&nbsp;show&lt;br&gt;<br>
&amp;quot;pending&amp;quot;&nbsp;or&nbsp;&amp;quot;in&nbsp;process&amp;quot;.&nbsp; &nbsp;And&nbsp;maybe&nbsp;just&nbsp;use&nbsp;cron&nbsp;to&nbsp;report/clean&nbsp;up&lt;br&gt;<br>
any&nbsp;stale&nbsp;pending&nbsp;job&nbsp;on&nbsp;the&nbsp;web&nbsp;app&nbsp;side.&lt;br&gt;<br>
&lt;br&gt;<br>
I&amp;#39;m&nbsp;just&nbsp;curious&nbsp;if&nbsp;the&nbsp;above&nbsp;is&nbsp;a&nbsp;common&nbsp;design&nbsp;pattern&nbsp;when&nbsp;using&lt;br&gt;<br>
RabbitMQ&nbsp;in&nbsp;this&nbsp;way.&nbsp; Obviously,&nbsp;depends&nbsp;on&nbsp;the&nbsp;specifics&nbsp;of&nbsp;the&nbsp;task,&lt;br&gt;<br>
but&nbsp;we&nbsp;seem&nbsp;to&nbsp;have&nbsp;quite&nbsp;a&nbsp;few&nbsp;situations&nbsp;like&nbsp;this.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;&lt;/div&gt;<br>
I&nbsp;still&nbsp;don&amp;#39;t&nbsp;understand&nbsp;the&nbsp;difference&nbsp;between&nbsp;&amp;#39;stale&amp;#39;&nbsp;and&nbsp;&amp;#39;pending&amp;#39;.&nbsp;Whether&nbsp;you&nbsp;do&nbsp;this&nbsp;based&nbsp;on&nbsp;timestamp&nbsp;or&nbsp;uuid&nbsp;or&nbsp;whatever,&nbsp;you&nbsp;need&nbsp;*some*&nbsp;mechanism&nbsp;to&nbsp;avoid&nbsp;duplicating&nbsp;work.&nbsp;Because&nbsp;AMQP&nbsp;cannot&nbsp;reliably&nbsp;do&nbsp;&amp;#39;only&nbsp;once&amp;#39;&nbsp;delivery&nbsp;without&nbsp;consumer&nbsp;intervention,&nbsp;I&nbsp;would&nbsp;expect&nbsp;that&nbsp;you&nbsp;need&nbsp;to&nbsp;track&nbsp;which&nbsp;jobs&nbsp;have&nbsp;been&nbsp;handled&nbsp;and&nbsp;which&nbsp;have&nbsp;not.&nbsp;What&nbsp;I&nbsp;don&amp;#39;t&nbsp;understand&nbsp;is&nbsp;how&nbsp;this&nbsp;pending/stale&nbsp;flag&nbsp;helps&nbsp;you,&nbsp;nor&nbsp;why&nbsp;cron&nbsp;jobs&nbsp;are&nbsp;an&nbsp;attractive&nbsp;choice&nbsp;to&nbsp;deal&nbsp;with&nbsp;expiring&nbsp;messages.&lt;br&gt;<br>
<br>
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Well,&nbsp;that&amp;#39;s&nbsp;essentially&nbsp;my&nbsp;question.&nbsp; Obviously,&nbsp;if&nbsp;I&nbsp;want&nbsp;the&nbsp;web&nbsp;app&nbsp;to&nbsp;know&nbsp;that&nbsp;a&nbsp;report&nbsp;request&nbsp;was&nbsp;made&nbsp;so&nbsp;it&nbsp;can&nbsp;display&nbsp;to&nbsp;the&nbsp;user&nbsp;that&nbsp;the&nbsp;report&nbsp;is&nbsp;in&nbsp;the&nbsp;process&nbsp;of&nbsp;being&nbsp;generated.&nbsp; And&nbsp;I&nbsp;also&nbsp;want&nbsp;to&nbsp;prevent&nbsp;multiple&nbsp;submissions&nbsp;by&nbsp;a&nbsp;user&nbsp;for&nbsp;the&nbsp;same&nbsp;thing.&nbsp; So,&nbsp;the&nbsp;database&nbsp;serves&nbsp;this&nbsp;function.&lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The&nbsp;difficulty&nbsp;is&nbsp;when&nbsp;it&nbsp;gets&nbsp;stuck&nbsp;in&nbsp;pending.&nbsp; &nbsp;At&nbsp;what&nbsp;point&nbsp;do&nbsp;we&nbsp;give&nbsp;up&nbsp;or&nbsp;try&nbsp;again?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thans&nbsp;for&nbsp;your&nbsp;comments&nbsp;below.&nbsp; I&nbsp;think&nbsp;the&nbsp;solution&nbsp;with&nbsp;the&nbsp;dead&nbsp;letter&nbsp;is&nbsp;the&nbsp;way&nbsp;to&nbsp;go&nbsp;as&nbsp;it&nbsp;avoids&nbsp;using&nbsp;something&nbsp;like&nbsp;cron&nbsp;to&nbsp;handle&nbsp;extra&nbsp;processing.&nbsp; &nbsp;This&nbsp;way&nbsp;the&nbsp;task&nbsp;is&nbsp;always&nbsp;&amp;quot;in&nbsp;the&nbsp;system&amp;quot;&nbsp;in&nbsp;a&nbsp;controlled&nbsp;way.&nbsp; &lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Then&nbsp;not&nbsp;over&nbsp;engineer&nbsp;for&nbsp;the&nbsp;very&nbsp;rare&nbsp;chance&nbsp;of&nbsp;a&nbsp;failure.&nbsp; &nbsp;May&nbsp;don&amp;#39;t&nbsp;even&nbsp;really&nbsp;need&nbsp;the&nbsp;durable&nbsp;queues&nbsp;if&nbsp;I&nbsp;can&nbsp;run&nbsp;a&nbsp;utility&nbsp;to&nbsp;resubmit&nbsp;stuck&nbsp;&amp;quot;pending&amp;quot;&nbsp;jobs&nbsp;in&nbsp;those&nbsp;rare&nbsp;cases. &lt;/div&gt;<br>
<br>
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks&nbsp;very&nbsp;much&nbsp;for&nbsp;your&nbsp;input.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;It&nbsp;seems&nbsp;to&nbsp;me&nbsp;there&nbsp;are&nbsp;a&nbsp;few&nbsp;separate&nbsp;problem&nbsp;domains&nbsp;here,&nbsp;which&nbsp;are&nbsp;getting&nbsp;tangled&nbsp;up&nbsp;in&nbsp;our&nbsp;discussion.&nbsp;I&nbsp;would&nbsp;posit&nbsp;that&nbsp;you&nbsp;need&nbsp;to&nbsp;deal&nbsp;with&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
1.&nbsp;Making&nbsp;sure&nbsp;a&nbsp;job/task&nbsp;has&nbsp;definitely&nbsp;been&nbsp;&amp;#39;registered&amp;#39;&nbsp;with&nbsp;the&nbsp;system.&lt;br&gt;<br>
&lt;br&gt;<br>
2.&nbsp;Indicating&nbsp;the&nbsp;outcome&nbsp;of&nbsp;(1)&nbsp;to&nbsp;your&nbsp;users&lt;br&gt;<br>
&lt;br&gt;<br>
3.&nbsp;Avoiding&nbsp;&amp;#39;re-submitting&amp;#39;&nbsp;the&nbsp;same&nbsp;job/task&nbsp;many&nbsp;times&lt;br&gt;<br>
&lt;br&gt;<br>
4.&nbsp;Dealing&nbsp;with&nbsp;failures&nbsp;in&nbsp;external&nbsp;services&lt;br&gt;<br>
&lt;br&gt;<br>
Please&nbsp;feel&nbsp;free&nbsp;to&nbsp;correct&nbsp;that&nbsp;list&nbsp;or&nbsp;add&nbsp;to&nbsp;it&nbsp;or&nbsp;whatever.&lt;br&gt;<br>
&lt;br&gt;<br>
When&nbsp;it&nbsp;comes&nbsp;to&nbsp;(1),&nbsp;as&nbsp;I&nbsp;mentioned&nbsp;durable&nbsp;queues&nbsp;with&nbsp;persistent&nbsp;messages&nbsp;are&nbsp;the&nbsp;way&nbsp;to&nbsp;go.&nbsp;Once&nbsp;a&nbsp;message&nbsp;is&nbsp;&amp;#39;on&nbsp;disk&amp;#39;&nbsp;then&nbsp;it&nbsp;is&nbsp;reasonable&nbsp;for&nbsp;you&nbsp;to&nbsp;assume&nbsp;that&nbsp;the&nbsp;job&nbsp;is&nbsp;safely&nbsp;&amp;#39;in&nbsp;the&nbsp;system&amp;#39;&nbsp;now.&nbsp;I&nbsp;won&amp;#39;t&nbsp;pretend&nbsp;that&nbsp;this&nbsp;represents&nbsp;a&nbsp;complete&nbsp;disaster&nbsp;recovery&nbsp;solution,&nbsp;because&nbsp;we&nbsp;both&nbsp;know&nbsp;it&nbsp;does&nbsp;not.&nbsp;I&nbsp;do&nbsp;feel,&nbsp;however,&nbsp;that&nbsp;such&nbsp;a&nbsp;solution&nbsp;involves&nbsp;*far*&nbsp;more&nbsp;technology&nbsp;that&nbsp;just&nbsp;your&nbsp;message&nbsp;broker,&nbsp;so&nbsp;I&amp;#39;m&nbsp;going&nbsp;to&nbsp;gently&nbsp;push&nbsp;it&nbsp;out&nbsp;of&nbsp;scope&nbsp;for&nbsp;the&nbsp;purposes&nbsp;of&nbsp;this&nbsp;discussion.&nbsp;:)&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
As&nbsp;for&nbsp;(2),&nbsp;in&nbsp;the&nbsp;absence&nbsp;of&nbsp;queue&nbsp;browsing,&nbsp;you&nbsp;are&nbsp;probably&nbsp;doing&nbsp;the&nbsp;right&nbsp;thing&nbsp;already&nbsp;in&nbsp;terms&nbsp;of&nbsp;storing&nbsp;a&nbsp;record&nbsp;in&nbsp;your&nbsp;web&nbsp;application&amp;#39;s&nbsp;database&nbsp;to&nbsp;indicate&nbsp;that&nbsp;the&nbsp;job&nbsp;has&nbsp;indeed&nbsp;been&nbsp;submitted&nbsp;(and&nbsp;is&nbsp;now&nbsp;in&nbsp;a&nbsp;pending&nbsp;state).&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Your&nbsp;problem&nbsp;with&nbsp;&amp;#39;duplicate&nbsp;tasks&amp;#39;&nbsp;appears&nbsp;to&nbsp;happen&nbsp;mainly&nbsp;because&nbsp;your&nbsp;cron&nbsp;job&nbsp;&amp;#39;re-submits&amp;#39;&nbsp;the&nbsp;message.&nbsp;With&nbsp;a&nbsp;persistent&nbsp;queue,&nbsp;there&nbsp;would&nbsp;be&nbsp;no&nbsp;need&nbsp;to&nbsp;do&nbsp;this&nbsp;at&nbsp;all,&nbsp;as&nbsp;the&nbsp;message&nbsp;is&nbsp;on&nbsp;disk&nbsp;and&nbsp;will&nbsp;survive&nbsp;a&nbsp;broker&nbsp;crash&nbsp;(though&nbsp;it&nbsp;won&amp;#39;t&nbsp;survive&nbsp;if&nbsp;your&nbsp;data&nbsp;centre&nbsp;slips&nbsp;off&nbsp;a&nbsp;cliff&nbsp;into&nbsp;the&nbsp;ocean).&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
What&nbsp;I&amp;#39;d&nbsp;suggest&nbsp;is&nbsp;a&nbsp;slightly&nbsp;different&nbsp;approach.&nbsp;Set&nbsp;up&nbsp;your&nbsp;durable&nbsp;task&nbsp;queue&nbsp;with&nbsp;a&nbsp;&amp;#39;dead&nbsp;letter&nbsp;exchange&amp;#39;&nbsp;so&nbsp;that&nbsp;expiring&nbsp;messages&nbsp;(or&nbsp;those&nbsp;rejected&nbsp;with&nbsp;`requeue=false`)&nbsp;will&nbsp;be&nbsp;shoved&nbsp;into&nbsp;that&nbsp;exchange.&nbsp;Now&nbsp;set&nbsp;up&nbsp;the&nbsp;target&nbsp;(dead&nbsp;letter)&nbsp;exchange&nbsp;to&nbsp;publish&nbsp;to&nbsp;another&nbsp;(durable)&nbsp;queue,&nbsp;let&amp;#39;s&nbsp;call&nbsp;it&nbsp;&amp;#39;redelivery&amp;#39;,&nbsp;and&nbsp;make&nbsp;sure&nbsp;this&nbsp;is&nbsp;configured&nbsp;to&nbsp;stay&nbsp;around&nbsp;even&nbsp;when&nbsp;there&nbsp;are&nbsp;no&nbsp;consumers.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Set&nbsp;up&nbsp;a&nbsp;&amp;#39;permanent&nbsp;subscriber&amp;#39;&nbsp;to&nbsp;the&nbsp;&amp;#39;redelivery&amp;#39;&nbsp;queue&nbsp;-&nbsp;i.e.,&nbsp;have&nbsp;an&nbsp;always&nbsp;running&nbsp;thread&nbsp;consuming&nbsp;these&nbsp;messages&nbsp;and&nbsp;make&nbsp;sure&nbsp;it&nbsp;is&nbsp;restarted&nbsp;if&nbsp;it&nbsp;fails&nbsp;for&nbsp;any&nbsp;reason&nbsp;-&nbsp;and&nbsp;have&nbsp;this&nbsp;subscriber&nbsp;take&nbsp;each&nbsp;arriving&nbsp;message&nbsp;and&nbsp;re-submit&nbsp;it&nbsp;to&nbsp;the&nbsp;original&nbsp;task&nbsp;queue.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Finally,&nbsp;when&nbsp;submitting&nbsp;jobs&nbsp;to&nbsp;the&nbsp;task&nbsp;queue,&nbsp;set&nbsp;the&nbsp;TTL&nbsp;to&nbsp;a&nbsp;reasonable&nbsp;value&nbsp;(for&nbsp;your&nbsp;application&amp;#39;s&nbsp;needs)&nbsp;and&nbsp;this&nbsp;is&nbsp;what&nbsp;will&nbsp;happen:&lt;br&gt;<br>
&lt;br&gt;<br>
1.&nbsp;you&nbsp;submit&nbsp;the&nbsp;task&lt;br&gt;<br>
2.&nbsp;the&nbsp;task&nbsp;TTL&nbsp;expires&nbsp;after&nbsp;the&nbsp;correct&nbsp;time&nbsp;lapse&lt;br&gt;<br>
3.&nbsp;the&nbsp;broker&nbsp;sends&nbsp;the&nbsp;&amp;#39;expired&amp;#39;&nbsp;message&nbsp;to&nbsp;the&nbsp;&amp;#39;dead&nbsp;letter&nbsp;exchange&amp;#39;&lt;br&gt;<br>
4.&nbsp;the&nbsp;exchange&nbsp;routes&nbsp;the&nbsp;message&nbsp;to&nbsp;the&nbsp;&amp;#39;redelivery&amp;#39;&nbsp;queue&lt;br&gt;<br>
5.&nbsp;the&nbsp;redelivery&nbsp;queue&nbsp;re-submits&nbsp;the&nbsp;message&nbsp;(as&nbsp;a&nbsp;new&nbsp;message!)&nbsp;to&nbsp;the&nbsp;task&nbsp;queue&lt;br&gt;<br>
6.&nbsp;a&nbsp;consumer&nbsp;(job)&nbsp;grabs&nbsp;the&nbsp;message&nbsp;before&nbsp;it&nbsp;expires&nbsp;this&nbsp;time&lt;br&gt;<br>
7.&nbsp;the&nbsp;job&nbsp;(process/thread/application)&nbsp;fails&nbsp;(due&nbsp;to&nbsp;an&nbsp;external&nbsp;service&nbsp;error&nbsp;or&nbsp;whatever)&lt;br&gt;<br>
8.&nbsp;the&nbsp;job&nbsp;(process/thread/application)&nbsp;rejects&nbsp;the&nbsp;job&nbsp;with&nbsp;`requeue=false`&lt;br&gt;<br>
9.&nbsp;steps&nbsp;3,&nbsp;4&nbsp;and&nbsp;5&nbsp;run&nbsp;again&lt;br&gt;<br>
10.&nbsp;eventually&nbsp;something&nbsp;good&nbsp;happens!?&lt;br&gt;<br>
&lt;br&gt;<br>
Actually&nbsp;to&nbsp;deal&nbsp;properly&nbsp;with&nbsp;10,&nbsp;you&nbsp;probably&nbsp;want&nbsp;to&nbsp;keep&nbsp;some&nbsp;kind&nbsp;of&nbsp;timestamp&nbsp;with&nbsp;the&nbsp;message&nbsp;and&nbsp;in&nbsp;the&nbsp;consumer&nbsp;that&nbsp;is&nbsp;reading&nbsp;the&nbsp;&amp;#39;redelivery&amp;#39;&nbsp;queue&nbsp;and&nbsp;re-submitting&nbsp;jobs,&nbsp;allow&nbsp;the&nbsp;message&nbsp;to&nbsp;time&nbsp;out&nbsp;and&nbsp;set&nbsp;an&nbsp;error&nbsp;flag&nbsp;in&nbsp;the&nbsp;database&nbsp;(or&nbsp;something).&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
If&nbsp;you&nbsp;*do*&nbsp;have&nbsp;some&nbsp;kind&nbsp;of&nbsp;external&nbsp;identity&nbsp;that&nbsp;holds&nbsp;for&nbsp;the&nbsp;(conceptual)&nbsp;lifetime&nbsp;of&nbsp;the&nbsp;task,&nbsp;then&nbsp;you&nbsp;could&nbsp;store&nbsp;this&nbsp;original&nbsp;timestamp&nbsp;in&nbsp;the&nbsp;database&nbsp;and&nbsp;query&nbsp;that&nbsp;against&nbsp;the&nbsp;task&nbsp;id,&nbsp;but&nbsp;obviously&nbsp;you&amp;#39;ll&nbsp;need&nbsp;to&nbsp;consider&nbsp;the&nbsp;potential&nbsp;performance&nbsp;(and&nbsp;architectural)&nbsp;implications&nbsp;of&nbsp;doing&nbsp;that&nbsp;for&nbsp;yourself.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
Step&nbsp;(8)&nbsp;might&nbsp;also&nbsp;be&nbsp;problematic&nbsp;if&nbsp;your&nbsp;tasks&nbsp;take&nbsp;a&nbsp;long&nbsp;time&nbsp;to&nbsp;complete,&nbsp;so&nbsp;you&nbsp;may&nbsp;wish&nbsp;to&nbsp;rework&nbsp;that&nbsp;state&nbsp;in&nbsp;terms&nbsp;of&nbsp;re-submitting&nbsp;instead&nbsp;of&nbsp;rejecting&nbsp;the&nbsp;message.&nbsp;As&nbsp;long&nbsp;as&nbsp;you&nbsp;have&nbsp;heartbeats&nbsp;enabled,&nbsp;your&nbsp;consumer&nbsp;channel&nbsp;shouldn&amp;#39;t&nbsp;be&nbsp;closed,&nbsp;but&nbsp;until&nbsp;you&amp;#39;ve&nbsp;ack&amp;#39;ed&nbsp;the&nbsp;message&nbsp;one&nbsp;way&nbsp;or&nbsp;another,&nbsp;other&nbsp;consumers&nbsp;could&nbsp;&amp;#39;get&amp;#39;&nbsp;it&nbsp;and&nbsp;therefore&nbsp;you&amp;#39;ll&nbsp;need&nbsp;to&nbsp;make&nbsp;them&nbsp;idempotent&nbsp;to&nbsp;deal&nbsp;with&nbsp;this.&lt;br&gt;<br>
<br>
<br>
&lt;br&gt;<br>
What&nbsp;ever&nbsp;you&nbsp;choose&nbsp;to&nbsp;do,&nbsp;the&nbsp;database&nbsp;needs&nbsp;to&nbsp;be&nbsp;properly&nbsp;updated&nbsp;when&nbsp;a&nbsp;task&nbsp;does&nbsp;finally&nbsp;succeed.&nbsp;The&nbsp;fact&nbsp;that&nbsp;you&nbsp;*must*&nbsp;do&nbsp;this&nbsp;at&nbsp;some&nbsp;point&nbsp;already&nbsp;(in&nbsp;order&nbsp;for&nbsp;the&nbsp;UI&nbsp;to&nbsp;be&nbsp;consistent)&nbsp;means&nbsp;you&nbsp;already&nbsp;have&nbsp;a&nbsp;thread&nbsp;of&nbsp;identity,&nbsp;and&nbsp;therefore&nbsp;you&nbsp;should&nbsp;be&nbsp;able&nbsp;to&nbsp;use&nbsp;this&nbsp;to&nbsp;create&nbsp;idempotent&nbsp;consumers&nbsp;where&nbsp;duplicate&nbsp;tasks&nbsp;are&nbsp;potentially&nbsp;an&nbsp;issue.&lt;div&nbsp;class=&quot;im&quot;&gt;<br>
<br>
&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;margin:0&nbsp;0&nbsp;0&nbsp;.8ex;border-left:1px&nbsp;#ccc&nbsp;solid;padding-left:1ex&quot;&gt;<br>
Oh,&nbsp;and&nbsp;with&nbsp;this&nbsp;example&nbsp;of&nbsp;the&nbsp;third-party&nbsp;web&nbsp;service&nbsp;another&nbsp;problem&lt;br&gt;<br>
is&nbsp;knowing&nbsp;if&nbsp;a&nbsp;failure&nbsp;of&nbsp;this&nbsp;service&nbsp;is&nbsp;permanent&nbsp;or&nbsp;temporary.&nbsp; I&lt;br&gt;<br>
have&nbsp;not&nbsp;done&nbsp;this,&nbsp;but&nbsp;I&amp;#39;m&nbsp;tempted&nbsp;to&nbsp;have&nbsp;my&nbsp;workers&nbsp;pull&nbsp;the&nbsp;jobs&nbsp;off&lt;br&gt;<br>
the&nbsp;queue&nbsp;and&nbsp;if&nbsp;the&nbsp;job&nbsp;fails&nbsp;for&nbsp;an&nbsp;unclear&nbsp;reason&nbsp;then&nbsp;ack&nbsp;the&lt;br&gt;<br>
original&nbsp;job&nbsp;and&nbsp;then&nbsp;send&nbsp;it&nbsp;to&nbsp;a&nbsp;&amp;quot;try&nbsp;again&nbsp;later&amp;quot;&nbsp;queue&nbsp;and&nbsp;have&lt;br&gt;<br>
separate&nbsp;workers&nbsp;handle&nbsp;those.&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/blockquote&gt;<br>
&lt;br&gt;&lt;/div&gt;<br>
That&nbsp;sounds&nbsp;like&nbsp;a&nbsp;reasonable&nbsp;approach.&nbsp;It&nbsp;is&nbsp;somewhat&nbsp;similar&nbsp;to&nbsp;the&nbsp;approach&nbsp;I&nbsp;describe&nbsp;above.&lt;br&gt;<br>
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br&nbsp;clear=&quot;all&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;--&nbsp;&lt;br&gt;Bill&nbsp;Moseley&lt;br&gt;&lt;a&nbsp;href=&quot;mailto:moseley@hank.org&quot;&nbsp;target=&quot;_blank&quot;&gt;moseley@hank.org&lt;/a&gt;&lt;br&gt;<br>

</tt>
