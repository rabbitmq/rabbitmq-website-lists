/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.emc.poc;

import java.io.IOException;

import org.springframework.amqp.rabbit.listener.QueueAwareConsumer;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.ConnectionParameters;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;
import com.rabbitmq.client.MessageProperties;

/**
 * @author Oleg Zhurakousky
 *
 */
public class PerfTest {
	private static Connection connection;
	private static Channel channel;

	public static void main(String[] arg) throws Exception{
		prepare();
		
		String value = createLargeString();
		
		for (int i = 0; i < 1000; i++) {
			channel.basicPublish("my-exchange", "", null, value.getBytes());
		}
		
		channel.basicConsume("my-queue", new SampleConsumer(channel));
	}
	
	public static void prepare() throws Exception {
		ConnectionParameters params = new ConnectionParameters();
		params.setUsername("guest");
		params.setPassword("guest");
		params.setVirtualHost("/");
		ConnectionFactory factory = new ConnectionFactory(params);
		connection = factory.newConnection("192.168.28.150");
		channel = connection.createChannel();
		channel.exchangeDeclare("my-exchange", "direct");
		channel.queueDeclare("my-queue");
		channel.queueBind("my-queue", "my-exchange", "");	
	}
	
	private static String createLargeString(){
		String str = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
		for (int i = 0; i < 10; i++) {
			str += str;
		}
		System.out.println("Created string length: " + str.getBytes().length);
		return str;
	}
	
	private static class SampleConsumer extends DefaultConsumer {
		
		public SampleConsumer(Channel channel) {
			super(channel);
		}

		public void handleDelivery(String consumerTag, Envelope envelope,
				AMQP.BasicProperties properties, byte[] body) throws IOException {
			System.out.println("Recieveing message: " + System.currentTimeMillis());
		}
	}
}
