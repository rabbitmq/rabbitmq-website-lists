<tt>
Ben,&lt;br&gt;&lt;br&gt;Truly,&nbsp;I&nbsp;always&nbsp;felt&nbsp;uncomfortable&nbsp;with&nbsp;using&nbsp;a&nbsp;cast&nbsp;on&nbsp;publish&nbsp;because&nbsp;you&nbsp;can&amp;#39;t&nbsp;tell&nbsp;directly&nbsp;if&nbsp;there&nbsp;was&nbsp;a&nbsp;problem.&nbsp;I&amp;#39;d&nbsp;prefer&nbsp;a&nbsp;call.&lt;br&gt;&lt;br&gt;Maybe&nbsp;this&nbsp;is&nbsp;a&nbsp;hare-brained&nbsp;idea,&nbsp;but&nbsp;can&amp;#39;t&nbsp;the&nbsp;broker&nbsp;just&nbsp;send&nbsp;a&nbsp;channel.flow&nbsp;to&nbsp;the&nbsp;producer;&nbsp;the&nbsp;Erlang&nbsp;client&nbsp;just&nbsp;forwards&nbsp;it&nbsp;on&nbsp;to&nbsp;the&nbsp;producer&nbsp;in&nbsp;precisely&nbsp;the&nbsp;same&nbsp;way&nbsp;as&nbsp;it&nbsp;sends&nbsp;a&nbsp;basic.receive&nbsp;to&nbsp;a&nbsp;consumer?&nbsp;The&nbsp;publishing&nbsp;application&nbsp;would&nbsp;just&nbsp;need&nbsp;to&nbsp;write&nbsp;a&nbsp;handle_info&nbsp;for&nbsp;channel.flow&nbsp;just&nbsp;like&nbsp;a&nbsp;consumer&nbsp;does&nbsp;for&nbsp;basic.receive,&nbsp;or&nbsp;have&nbsp;I&nbsp;missed&nbsp;the&nbsp;point?&lt;br&gt;<br>
&lt;br&gt;I&nbsp;realize&nbsp;that&nbsp;this&nbsp;means&nbsp;that&nbsp;publishing&nbsp;applications&nbsp;can&nbsp;choose&nbsp;to&nbsp;ignore&nbsp;channel.flow&nbsp;commands,&nbsp;but&nbsp;that&nbsp;would&nbsp;be&nbsp;shooting&nbsp;themselves&nbsp;in&nbsp;the&nbsp;foot.&nbsp;In&nbsp;the&nbsp;0.8&nbsp;spec&nbsp;it&nbsp;says&nbsp;&amp;quot;The&nbsp;peer&nbsp;that&nbsp;requests&nbsp;a&nbsp;Channel.Flow&nbsp;method&nbsp;MAY&nbsp;disconnect&nbsp;and/or&nbsp;ban&nbsp;a&nbsp;peer&nbsp;that&nbsp;does&nbsp;not&nbsp;respect&nbsp;the&nbsp;request.&amp;quot;,&nbsp;so&nbsp;the&nbsp;server&nbsp;could&nbsp;just&nbsp;drop&nbsp;the&nbsp;channel&nbsp;if&nbsp;the&nbsp;publisher&nbsp;ignores&nbsp;it.&lt;br&gt;<br>
&lt;br&gt;Now&nbsp;I&nbsp;am&nbsp;not&nbsp;sure&nbsp;what&nbsp;is&nbsp;meant&nbsp;by&nbsp;a&nbsp;&amp;quot;peer&amp;quot;,&nbsp;if&nbsp;that&amp;#39;s&nbsp;the&nbsp;client&nbsp;itself&nbsp;or&nbsp;the&nbsp;application&nbsp;that&nbsp;is&nbsp;using&nbsp;the&nbsp;client.&nbsp;Either&nbsp;way,&nbsp;I&nbsp;believe&nbsp;that&nbsp;the&nbsp;Erlang&nbsp;client&nbsp;simply&nbsp;forwarding&nbsp;the&nbsp;channel.flow&nbsp;command&nbsp;to&nbsp;the&nbsp;application&nbsp;and&nbsp;requiring&nbsp;it&nbsp;to&nbsp;respond&nbsp;with&nbsp;the&nbsp;ok&nbsp;(and&nbsp;stop&nbsp;sending)&nbsp;is&nbsp;within&nbsp;the&nbsp;spirit&nbsp;of&nbsp;the&nbsp;spec,&nbsp;and&nbsp;should&nbsp;(?)&nbsp;be&nbsp;simple&nbsp;to&nbsp;do&nbsp;in&nbsp;the&nbsp;client.&lt;br&gt;<br>
&lt;br&gt;Can&nbsp;you&nbsp;see&nbsp;any&nbsp;issues&nbsp;with&nbsp;doing&nbsp;it&nbsp;like&nbsp;this?&lt;br&gt;&lt;br&gt;Regards,&lt;br&gt;Ed&lt;br&gt;&lt;br&gt;&lt;div&nbsp;class=&quot;gmail_quote&quot;&gt;On&nbsp;Sun,&nbsp;Nov&nbsp;9,&nbsp;2008&nbsp;at&nbsp;5:28&nbsp;PM,&nbsp;Ben&nbsp;Hood&nbsp;&lt;span&nbsp;dir=&quot;ltr&quot;&gt;&amp;lt;&lt;a&nbsp;href=&quot;mailto:0x6e6562@gmail.com&quot;&gt;0x6e6562@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt;&nbsp;wrote:&lt;br&gt;<br>
&lt;blockquote&nbsp;class=&quot;gmail_quote&quot;&nbsp;style=&quot;border-left:&nbsp;1px&nbsp;solid&nbsp;rgb(204,&nbsp;204,&nbsp;204);&nbsp;margin:&nbsp;0pt&nbsp;0pt&nbsp;0pt&nbsp;0.8ex;&nbsp;padding-left:&nbsp;1ex;&quot;&gt;Edwin,&lt;br&gt;<br>
&lt;div&nbsp;class=&quot;Ih2E3d&quot;&gt;&lt;br&gt;<br>
On&nbsp;Sun,&nbsp;Nov&nbsp;9,&nbsp;2008&nbsp;at&nbsp;6:58&nbsp;PM,&nbsp;Edwin&nbsp;Fine&lt;br&gt;<br>
&amp;lt;&lt;a&nbsp;href=&quot;mailto:rabbitmq-discuss_efine@usa.net&quot;&gt;rabbitmq-discuss_efine@usa.net&lt;/a&gt;&amp;gt;&nbsp;wrote:&lt;br&gt;<br>
&amp;gt;&nbsp;This&nbsp;is&nbsp;greatly&nbsp;welcome&nbsp;news!&nbsp;I&nbsp;look&nbsp;forward&nbsp;to&nbsp;the&nbsp;implementation&nbsp;of&nbsp;this&lt;br&gt;<br>
&amp;gt;&nbsp;in&nbsp;the&nbsp;Erlang&nbsp;client,&nbsp;so&nbsp;that&nbsp;I&nbsp;can&nbsp;pause&nbsp;my&nbsp;producers&nbsp;when&nbsp;I&nbsp;get&nbsp;the&lt;br&gt;<br>
&amp;gt;&nbsp;channel.flow&nbsp;command&nbsp;from&nbsp;the&nbsp;broker&nbsp;and&nbsp;avoid&nbsp;any&nbsp;possibility&nbsp;of&nbsp;exhausting&lt;br&gt;<br>
&amp;gt;&nbsp;Rabbit&amp;#39;s&nbsp;memory.&nbsp;Any&nbsp;ETA?&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/div&gt;Not&nbsp;really.&nbsp;But&nbsp;I&nbsp;have&nbsp;knocked&nbsp;up&nbsp;a&nbsp;first&nbsp;version&nbsp;that&nbsp;works&nbsp;-&nbsp;19560&lt;br&gt;<br>
refers.&nbsp;The&nbsp;only&nbsp;I&nbsp;am&nbsp;not&nbsp;sure&nbsp;about&nbsp;yet&nbsp;is&nbsp;the&nbsp;fact&nbsp;that&nbsp;publish&lt;br&gt;<br>
function&nbsp;uses&nbsp;gen_server:cast/2&nbsp;under&nbsp;the&nbsp;covers,&nbsp;making&nbsp;it&nbsp;difficult&lt;br&gt;<br>
to&nbsp;on&nbsp;this&nbsp;invocation.&nbsp;My&nbsp;first&nbsp;thought&nbsp;was&nbsp;to&nbsp;keep&nbsp;the&nbsp;cast/2&lt;br&gt;<br>
invocation&nbsp;as&nbsp;it&nbsp;is&nbsp;and&nbsp;just&nbsp;send&nbsp;out&nbsp;{pause,resume}&nbsp;atoms&nbsp;to&nbsp;a&lt;br&gt;<br>
registered&nbsp;flow&nbsp;control&nbsp;handler,&nbsp;but&nbsp;this&nbsp;means&nbsp;more&nbsp;code&nbsp;on&nbsp;the&lt;br&gt;<br>
client&nbsp;side.&nbsp;I&nbsp;suppose&nbsp;you&nbsp;could&nbsp;add&nbsp;a&nbsp;convenience&nbsp;function&nbsp;to&lt;br&gt;<br>
encapsulate&nbsp;the&nbsp;blocking&nbsp;receive&nbsp;when&nbsp;you&amp;#39;re&nbsp;in&nbsp;the&nbsp;pause&nbsp;state,&nbsp;but&lt;br&gt;<br>
there&nbsp;may&nbsp;be&nbsp;a&nbsp;simpler&nbsp;way&nbsp;to&nbsp;do&nbsp;this.&nbsp;Have&nbsp;a&nbsp;look&nbsp;at&nbsp;the&nbsp;code&lt;br&gt;<br>
yourself&nbsp;and&nbsp;maybe&nbsp;you&nbsp;have&nbsp;an&nbsp;idea.&lt;br&gt;<br>
&lt;br&gt;<br>
HTH,&lt;br&gt;<br>
&lt;font&nbsp;color=&quot;#888888&quot;&gt;&lt;br&gt;<br>
Ben&lt;br&gt;<br>
&lt;br&gt;<br>
&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;<br>

</tt>
