<tt>
We&nbsp;do&nbsp;a&nbsp;lot&nbsp;of&nbsp;db&nbsp;work&nbsp;involving&nbsp;postgresql&nbsp;and&nbsp;some&nbsp;of&nbsp;our&nbsp;new&nbsp;processes&nbsp;use&nbsp;rabbitmq.&nbsp;We&nbsp;currently&nbsp;use&nbsp;an&nbsp;Erlang-based&nbsp;monitoring&nbsp;system&nbsp;for&nbsp;queues,&nbsp;consumers&nbsp;and&nbsp;some&lt;br&gt;non-rabbit&nbsp;things.&nbsp;Since&nbsp;there&nbsp;is&nbsp;a&nbsp;C&nbsp;rabbitmq&nbsp;library&nbsp;these&nbsp;days&nbsp;(thanks&nbsp;Tony),&nbsp;I&nbsp;have&nbsp;tried&nbsp;to&nbsp;achieve&nbsp;the&nbsp;same&nbsp;thing&nbsp;through&nbsp;C&nbsp;functions&nbsp;interfacing&nbsp;directly&nbsp;with&nbsp;the&nbsp;AMQP&nbsp;broker,&lt;br&gt;<br>
removing&nbsp;the&nbsp;need&nbsp;for&nbsp;an&nbsp;intermediate&nbsp;layer&nbsp;when&nbsp;pushing/pulling&nbsp;from&nbsp;the&nbsp;database.&nbsp;When&nbsp;I&nbsp;find&nbsp;a&nbsp;little&nbsp;more&nbsp;time,&nbsp;I&nbsp;am&nbsp;hoping&nbsp;to&nbsp;organize&nbsp;the&nbsp;most&nbsp;useful&nbsp;rabbitmq-related&nbsp;functions&lt;br&gt;I&nbsp;have&nbsp;written&nbsp;into&nbsp;a&nbsp;postgresql&nbsp;module&nbsp;(probably&nbsp;github).&nbsp;Until&nbsp;then,&nbsp;here&nbsp;is&nbsp;some&nbsp;toy&nbsp;code&nbsp;in&nbsp;the&nbsp;public&nbsp;domain:&lt;br&gt;<br>
&lt;br&gt;regards,&nbsp;Michael&lt;br&gt;&lt;br&gt;&lt;div&nbsp;style=&quot;margin-left:&nbsp;40px;&quot;&gt;/*&lt;br&gt;**&nbsp;Filename:&nbsp;rabbit.c&lt;br&gt;*/&lt;br&gt;&lt;br&gt;#include&nbsp;&amp;quot;postgres.h&amp;quot;&lt;br&gt;#include&nbsp;&amp;quot;fmgr.h&amp;quot;&lt;br&gt;#include&nbsp;&amp;quot;funcapi.h&amp;quot;&lt;br&gt;#include&nbsp;&amp;quot;executor/spi.h&amp;quot;&lt;br&gt;<br>
#include&nbsp;&amp;quot;nodes/execnodes.h&amp;quot;&lt;br&gt;#include&nbsp;&amp;quot;commands/trigger.h&amp;quot;&lt;br&gt;#include&nbsp;&amp;quot;utils/builtins.h&amp;quot;&lt;br&gt;#include&nbsp;&amp;lt;ctype.h&amp;gt;&lt;br&gt;#include&nbsp;&amp;quot;amqp.h&amp;quot;&lt;br&gt;#include&nbsp;&amp;quot;amqp_framing.h&amp;quot;&lt;br&gt;<br>
&lt;br&gt;#ifdef&nbsp;PG_MODULE_MAGIC&lt;br&gt;PG_MODULE_MAGIC;&lt;br&gt;#endif&lt;br&gt;&lt;br&gt;/*&lt;br&gt;   &nbsp;HOW&nbsp;TO&nbsp;run&nbsp;this&nbsp;toy&nbsp;code&nbsp;(you&nbsp;need&nbsp;postgresql&nbsp;sources&nbsp;and&nbsp;librabbitmq.so&nbsp;installed)&lt;br&gt;   &nbsp;--------------------------------------------------------------------------------------&lt;br&gt;<br>
   &nbsp;[assuming&nbsp;postgresql&nbsp;is&nbsp;installed&nbsp;in&nbsp;/usr/local/pgsql8.4.1]&lt;br&gt;&lt;br&gt;   &nbsp;make&nbsp;rabbit.so;&nbsp;mv&nbsp;rabbit.so&nbsp;/usr/local/pgsql8.4.1/lib&lt;br&gt;   &nbsp;cat&nbsp;rabbit.sql&nbsp;|&nbsp;/usr/local/pgsql8.4.1/bin/psql&nbsp;-U&nbsp;postgres&nbsp;db_of_choice&lt;br&gt;   &nbsp;echo&nbsp;&amp;quot;SELECT&nbsp;rabbit_count(&amp;#39;localhost&amp;#39;);&amp;quot;&nbsp;|&nbsp;/usr/local/pgsql8.4.1/bin/psql&nbsp;-U&nbsp;postgres&nbsp;...&lt;br&gt;<br>
&lt;br&gt;   &nbsp;#&nbsp;Makefile&nbsp;sample&nbsp;--------------------------------------------------------------------&lt;br&gt;&lt;br&gt;   &nbsp;SERVER_INCLUDES&nbsp;+=&nbsp;-I&nbsp;$(shell&nbsp;/usr/local/pgsql8.4.1/bin/pg_config&nbsp;--includedir)&lt;br&gt;   &nbsp;SERVER_INCLUDES&nbsp;+=&nbsp;-I&nbsp;$(shell&nbsp;/usr/local/pgsql8.4.1/bin/pg_config&nbsp;--includedir-server)&lt;br&gt;<br>
   &nbsp;CFLAGS&nbsp;+=&nbsp;-O3&nbsp;$(SERVER_INCLUDES)&lt;br&gt;   &nbsp;.SUFFIXES:     &nbsp;.so&lt;br&gt;   &nbsp;.c.so:&lt;br&gt;   &nbsp;   &nbsp;$(CC)&nbsp;$(CFLAGS)&nbsp;-fpic&nbsp;-c&nbsp;$&amp;lt;&lt;br&gt;   &nbsp;   &nbsp;$(CC)&nbsp;$(CFLAGS)&nbsp;-shared&nbsp;-lrabbitmq&nbsp;-o&nbsp;$@&nbsp;$(basename&nbsp;$&amp;lt;).o&lt;br&gt;&lt;br&gt;   &nbsp;#&nbsp;rabbit.sql&nbsp;sample&nbsp;------------------------------------------------------------------&lt;br&gt;<br>
&lt;br&gt;   &nbsp;   &nbsp;CREATE&nbsp;OR&nbsp;REPLACE&nbsp;FUNCTION&nbsp;rabbit_count(hostname&nbsp;VARCHAR)&lt;br&gt;   &nbsp;   &nbsp;   &nbsp;RETURNS&nbsp;INT&nbsp;AS&nbsp;&amp;#39;rabbit.so&amp;#39;,&nbsp;&amp;#39;rabbit_count&amp;#39;&nbsp;LANGUAGE&nbsp;&amp;#39;C&amp;#39;;&lt;br&gt;&lt;br&gt;   &nbsp;#&nbsp;------------------------------------------------------------------------------------&lt;br&gt;<br>
*/&lt;br&gt;&lt;br&gt;/*&nbsp;toy&nbsp;postgresql&nbsp;C&nbsp;function&nbsp;rabbit_count()&lt;br&gt;     &nbsp;accepts&nbsp;a&nbsp;single&nbsp;VARCHAR&nbsp;argument&nbsp;(hostname)&lt;br&gt;     &nbsp;returns&nbsp;NULL&nbsp;if&nbsp;there&nbsp;is&nbsp;a&nbsp;connection&nbsp;error&lt;br&gt;     &nbsp;or&nbsp;the&nbsp;number&nbsp;of&nbsp;consumers&nbsp;currently&nbsp;attached&nbsp;to&nbsp;a&nbsp;queue&nbsp;called&nbsp;&amp;#39;PREDEFINED&amp;#39;     &nbsp;*/&lt;br&gt;<br>
&lt;br&gt;PG_FUNCTION_INFO_V1(rabbit_count);&lt;br&gt;Datum&nbsp;rabbit_count(PG_FUNCTION_ARGS)&lt;br&gt;{&lt;br&gt;   &nbsp;int&nbsp;ret&nbsp;=&nbsp;-1;&lt;br&gt;   &nbsp;int&nbsp;port;&lt;br&gt;   &nbsp;char&nbsp;const&nbsp;*queue;&lt;br&gt;   &nbsp;char&nbsp;const&nbsp;*user;&nbsp;char&nbsp;const&nbsp;*pass;&lt;br&gt; &nbsp;   &nbsp;int&nbsp;sockfd;&lt;br&gt; &nbsp;   &nbsp;amqp_connection_state_t&nbsp;conn;&lt;br&gt;<br>
&lt;br&gt;   &nbsp;if&nbsp;(PG_ARGISNULL(0))&nbsp;{&nbsp;PG_RETURN_NULL();&nbsp;}&nbsp;&lt;br&gt;   &nbsp;VarChar&nbsp;*sql&nbsp;=&nbsp;PG_GETARG_VARCHAR_P(0);&nbsp;unsigned&nbsp;int&nbsp;size&nbsp;=&nbsp;VARSIZE(sql)&nbsp;-&nbsp;VARHDRSZ;&lt;br&gt;   &nbsp;char&nbsp;*hostname&nbsp;=&nbsp;(char&nbsp;*)&nbsp;palloc(size+1);&lt;br&gt;   &nbsp;strncpy(hostname,VARDATA(sql),size);&nbsp;hostname[size]&nbsp;=&nbsp;&amp;#39;\0&amp;#39;;&nbsp;//&nbsp;converting&nbsp;varchar&nbsp;into&nbsp;native&nbsp;string&lt;br&gt;<br>
   &nbsp;&lt;br&gt;   &nbsp;port&nbsp;=&nbsp;5672;&lt;br&gt; &nbsp; &nbsp;queue&nbsp;=&nbsp;&amp;quot;PREDEFINED&amp;quot;;&lt;br&gt;   &nbsp;user&nbsp;=&nbsp;&amp;quot;guest&amp;quot;;&nbsp;pass&nbsp;=&nbsp;&amp;quot;guest&amp;quot;;&lt;br&gt;&lt;br&gt; &nbsp;   &nbsp;conn&nbsp;=&nbsp;amqp_new_connection();&lt;br&gt;   &nbsp;if&nbsp;(conn&nbsp;&amp;lt;&nbsp;0)&nbsp;{&lt;br&gt;   &nbsp;   &nbsp;elog(ERROR,&nbsp;&amp;quot;rabbit.so&nbsp;(rabbit_count)&nbsp;--&nbsp;amqp_new_connection()&nbsp;error&amp;quot;);&lt;br&gt;<br>
   &nbsp;   &nbsp;return&nbsp;PointerGetDatum(NULL);&lt;br&gt;   &nbsp;}&lt;br&gt;   &nbsp;&lt;br&gt; &nbsp;   &nbsp;sockfd&nbsp;=&nbsp;amqp_open_socket(hostname,&nbsp;port);&lt;br&gt; &nbsp;   &nbsp;if&nbsp;(sockfd&nbsp;&amp;lt;&nbsp;0)&nbsp;{&lt;br&gt;   &nbsp;   &nbsp;elog(ERROR,&nbsp;&amp;quot;rabbit.so&nbsp;(rabbit_count)&nbsp;--&nbsp;amqp_open_socket()&nbsp;error&amp;quot;);&lt;br&gt;<br>
   &nbsp;   &nbsp;return&nbsp;PointerGetDatum(NULL);&lt;br&gt;   &nbsp;}&lt;br&gt;   &nbsp;amqp_set_sockfd(conn,&nbsp;sockfd);&lt;br&gt;&lt;br&gt;   &nbsp;//&nbsp;probably&nbsp;needs&nbsp;something&nbsp;like&nbsp;die_on_amqp_error&nbsp;--&nbsp;see&nbsp;below&lt;br&gt; &nbsp;   &nbsp;amqp_login(conn,&nbsp;&amp;quot;/&amp;quot;,&nbsp;0,&nbsp;131072,&nbsp;0,&nbsp;AMQP_SASL_METHOD_PLAIN,&nbsp;user,&nbsp;pass);&lt;br&gt;<br>
   &nbsp;//&nbsp;probably&nbsp;needs&nbsp;something&nbsp;like&nbsp;die_on_amqp_error&nbsp;--&nbsp;see&nbsp;below&lt;br&gt;   &nbsp;amqp_channel_open(conn,&nbsp;1);&lt;br&gt; &nbsp; &nbsp;//&nbsp;die_on_amqp_error(amqp_rpc_reply,&nbsp;&amp;quot;Opening&nbsp;channel&amp;quot;);&lt;br&gt;&lt;br&gt;   &nbsp;//&nbsp;after&nbsp;the&nbsp;queue&nbsp;argument,&nbsp;numbers&nbsp;correspond&nbsp;to&nbsp;bool&nbsp;vals&nbsp;for&nbsp;passive,&nbsp;durable,&nbsp;exclusive,&nbsp;auto_delete&lt;br&gt;<br>
   &nbsp;amqp_queue_declare_ok_t&nbsp;*r&nbsp;=&nbsp;amqp_queue_declare(conn,&nbsp;1,&nbsp;amqp_cstring_bytes(queue),&nbsp;0,&nbsp;1,&nbsp;0,&nbsp;0,&nbsp;AMQP_EMPTY_TABLE);&lt;br&gt;   &nbsp;//&nbsp;die_on_amqp_error(amqp_rpc_reply,&nbsp;&amp;quot;Declaring&nbsp;queue&amp;quot;);&lt;br&gt;&lt;br&gt;   &nbsp;//  &nbsp;uint32_t&nbsp;message_count;&lt;br&gt;<br>
   &nbsp;//  &nbsp;uint32_t&nbsp;consumer_count;&lt;br&gt;   &nbsp;ret&nbsp;=&nbsp;r-&amp;gt;consumer_count;&lt;br&gt;&lt;br&gt; &nbsp; &nbsp;amqp_channel_close(conn,&nbsp;1,&nbsp;AMQP_REPLY_SUCCESS);&lt;br&gt; &nbsp; &nbsp;amqp_connection_close(conn,&nbsp;AMQP_REPLY_SUCCESS);&lt;br&gt; &nbsp; &nbsp;amqp_destroy_connection(conn);&lt;br&gt;<br>
 &nbsp; &nbsp;close(sockfd);&lt;br&gt;&lt;br&gt;   &nbsp;pfree(hostname);&lt;br&gt;&lt;br&gt;   &nbsp;if&nbsp;(&nbsp;ret&nbsp;==&nbsp;-1&nbsp;)&nbsp;{&lt;br&gt;   &nbsp;   &nbsp;elog(ERROR,&nbsp;&amp;quot;rabbit.so&nbsp;(rabbit_count)&nbsp;--&nbsp;ret&nbsp;error&amp;quot;);&lt;br&gt;   &nbsp;   &nbsp;return&nbsp;PointerGetDatum(NULL);&lt;br&gt;   &nbsp;}&lt;br&gt;&lt;br&gt;   &nbsp;return&nbsp;(ret);&lt;br&gt;<br>
}&lt;br&gt;&lt;/div&gt;&lt;br&gt;<br>

</tt>
