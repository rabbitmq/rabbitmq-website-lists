<tt>
&lt;div&gt;In&nbsp;a&nbsp;consumer&nbsp;scenario&nbsp;where&nbsp;messages&nbsp;are&nbsp;ack'd,&nbsp;we&nbsp;are&nbsp;using&nbsp;a&nbsp;BasicQueuingConsumer&nbsp;and&nbsp;a&nbsp;Qos(0,&nbsp;x,&nbsp;false)&nbsp;operation&nbsp;to&nbsp;ensure&nbsp;that&nbsp;only&nbsp;a&nbsp;specific&nbsp;no.&nbsp;(x)&nbsp;of&nbsp;unack'd&nbsp;messages&nbsp;are&nbsp;dequeued&nbsp;at&nbsp;any&nbsp;time.&nbsp;This&nbsp;seems&nbsp;to&nbsp;work&nbsp;well.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If&nbsp;however,&nbsp;I&nbsp;try&nbsp;setting&nbsp;noack&nbsp;=&nbsp;true&nbsp;and&nbsp;switch&nbsp;off&nbsp;the&nbsp;Qos&nbsp;call&nbsp;(lets&nbsp;say&nbsp;we&nbsp;favour&nbsp;throughput&nbsp;over&nbsp;guaranteed&nbsp;delivery),&nbsp;I&nbsp;get&nbsp;an&nbsp;exception&nbsp;from&nbsp;RabbitMQ:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;RabbitMQ.Client.Exceptions.OperationInterruptedException:&nbsp;The&nbsp;AMQP&nbsp;operation&nbsp;was&lt;/div&gt;&lt;div&gt;&amp;nbsp;interrupted:&nbsp;AMQP&nbsp;close-reason,&nbsp;initiated&nbsp;by&nbsp;Peer,&nbsp;code=406,&nbsp;text=&quot;PRECONDITION&lt;/div&gt;&lt;div&gt;_FAILED&nbsp;-&nbsp;unknown&nbsp;delivery&nbsp;tag&nbsp;1&quot;,&nbsp;classId=60,&nbsp;methodId=80,&nbsp;cause=&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;at&nbsp;RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply()&lt;/div&gt;&lt;div&gt;&amp;nbsp;&nbsp;&amp;nbsp;at&nbsp;RabbitMQ.Client.Impl.ModelBase.BasicConsume(String&nbsp;queue,&nbsp;Boolean&nbsp;noAck,&nbsp;S&lt;/div&gt;&lt;div&gt;tring&nbsp;consumerTag,&nbsp;Boolean&nbsp;noLocal,&nbsp;Boolean&nbsp;exclusive,&nbsp;IDictionary&nbsp;arguments,&nbsp;IB&lt;/div&gt;&lt;div&gt;asicConsumer&nbsp;consumer)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Am&nbsp;I&nbsp;right&nbsp;in&nbsp;thinking&nbsp;then&nbsp;that&nbsp;BasicQueuingConsumer&nbsp;only&nbsp;plays&nbsp;well&nbsp;with&nbsp;noack=false&nbsp;scenarios&nbsp;-&nbsp;e.g.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;var&nbsp;queueingConsumer&nbsp;=&nbsp;new&nbsp;QueueingBasicConsumer(_channel);&lt;/div&gt;&lt;div&gt;_channel.BasicConsume(queueName,&nbsp;false,&nbsp;queueingConsumer);&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;if&nbsp;so,&nbsp;then&nbsp;for&nbsp;noack=true,&nbsp;is&nbsp;the&nbsp;correct/recommended&nbsp;approach&nbsp;to&nbsp;use&nbsp;a&nbsp;DefaultBasicConsumer&nbsp;instead.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;
</tt>
