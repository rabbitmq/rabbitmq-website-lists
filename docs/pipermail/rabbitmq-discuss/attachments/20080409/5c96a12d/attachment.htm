<tt>
I&nbsp;have&nbsp;published&nbsp;the&nbsp;message&nbsp;asynchronously&nbsp;to&nbsp;the&nbsp;exchange.&amp;nbsp;&nbsp;Now&nbsp;to&nbsp;consume&nbsp;the&nbsp;messages&nbsp;from&nbsp;the&nbsp;exchange,&nbsp;I&nbsp;can&nbsp;use&nbsp;either&nbsp;BasicGet&nbsp;or&nbsp;BasicConsume.&amp;nbsp;&nbsp;When&nbsp;you&nbsp;are&nbsp;consuming&nbsp;messages&nbsp;in&nbsp;pub/sub&nbsp;model,&nbsp;do&nbsp;you&nbsp;have&nbsp;to&nbsp;specify&nbsp;what&nbsp;exchange&nbsp;to&nbsp;look&nbsp;for?&amp;nbsp;&nbsp;In&nbsp;addition,&nbsp;when&nbsp;you&nbsp;consume&nbsp;message&nbsp;from&nbsp;an&nbsp;exchange&nbsp;regardless&nbsp;of&nbsp;messaging&nbsp;model(pub/sub),&nbsp;you&nbsp;still&nbsp;have&nbsp;to&nbsp;declare&nbsp;a&nbsp;queue,&nbsp;bind&nbsp;it&nbsp;and&nbsp;consume&nbsp;the&nbsp;message&nbsp;from&nbsp;the&nbsp;queue?&lt;br&gt;<br>
<br>
&lt;br&gt;BasicConsume&nbsp;and&nbsp;BasicGet&nbsp;there&nbsp;is&nbsp;a&nbsp;variable&nbsp;named&nbsp;queue&nbsp;=&nbsp;Q.&nbsp;In&nbsp;pub-sub&nbsp;case,&nbsp;how&nbsp;do&nbsp;you&nbsp;define&nbsp;null&nbsp;queue&nbsp;in&nbsp;Erlang-client?&nbsp;In&nbsp;basic.consume&nbsp;I&nbsp;set&nbsp;the&nbsp;queue&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;&amp;quot;&amp;gt;&amp;gt;&nbsp;like&nbsp;below:&lt;br&gt;&lt;br&gt;BasicConsume&nbsp;=&nbsp;#&amp;#39;basic.consume&amp;#39;{ticket&nbsp;=&nbsp;Ticket,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;queue&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;&amp;quot;&amp;gt;&amp;gt;,&lt;br&gt;&lt;br&gt;In&nbsp;basic.publish,&nbsp;I&nbsp;set&nbsp;immediate&nbsp;=&nbsp;false&nbsp;so&nbsp;that&nbsp;when&nbsp;the&nbsp;consumer&nbsp;started&nbsp;later,&nbsp;message&nbsp;will&nbsp;be&nbsp;in&nbsp;the&nbsp;queue&nbsp;for&nbsp;it&nbsp;to&nbsp;consume.&lt;br&gt;<br>
&lt;br&gt;Rabbitmq&nbsp;server&nbsp;throwing&nbsp;errors&nbsp;when&nbsp;I&nbsp;run&nbsp;the&nbsp;consumer&nbsp;code&nbsp;after&nbsp;the&nbsp;message&nbsp;have&nbsp;been&nbsp;published&nbsp;to&nbsp;the&nbsp;exchange.&lt;br&gt;&lt;br&gt;(rabbit@home)5&amp;gt;&nbsp;amqp_async_consume:amqp_lifecycle_consume().&nbsp;&lt;br&gt;Connection:&nbsp;{&amp;lt;0.178.0&amp;gt;,direct}&lt;br&gt;<br>
<br>
**&nbsp;exception&nbsp;exit:&nbsp;{{amqp_async_consume,amqp_lifecycle_consume,0},&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;{line,40},&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;match,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;[{&amp;#39;queue.declare_ok&amp;#39;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&amp;lt;&amp;lt;&amp;quot;amq.q.gen1_rabbit@home_20080409224223_&amp;quot;&amp;gt;&amp;gt;,0,0}]}&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;in&nbsp;function&amp;nbsp;&nbsp;amqp_async_consume:amqp_lifecycle_consume/0&lt;br&gt;&lt;br&gt;&lt;br&gt;This&nbsp;is&nbsp;the&nbsp;line&nbsp;causing&nbsp;the&nbsp;problem:&nbsp;amqp_channel:call(Channel,QueueDeclare)&nbsp;in&lt;br&gt;#&amp;#39;queue.declare_ok&amp;#39;{queue&nbsp;=&nbsp;Q,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;message_count&nbsp;=&nbsp;MessageCount,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;consumer_count&nbsp;=&nbsp;ConsumerCount}&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;=&nbsp;amqp_channel:call(Channel,QueueDeclare),&lt;br&gt;&lt;br&gt;&lt;br&gt;-module(amqp_async_consume).&lt;br&gt;&lt;br&gt;-include_lib(&amp;quot;rabbitmq_server/include/rabbit_framing.hrl&amp;quot;).&lt;br&gt;<br>
<br>
-include_lib(&amp;quot;rabbitmq_server/include/rabbit.hrl&amp;quot;).&lt;br&gt;-include_lib(&amp;quot;rabbitmq_client/include/amqp_client.hrl&amp;quot;).&lt;br&gt;&lt;br&gt;-export([amqp_lifecycle_consume/0]).&lt;br&gt;&lt;br&gt;amqp_lifecycle_consume()&nbsp;-&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;User&nbsp;=&nbsp;Password&nbsp;=&nbsp;&amp;quot;guest&amp;quot;,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;Realm&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;/data&amp;quot;&amp;gt;&amp;gt;,&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%%&nbsp;Start&nbsp;a&nbsp;connection&nbsp;to&nbsp;the&nbsp;server&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;Connection&nbsp;=&nbsp;amqp_connection:start(User,&nbsp;Password),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;io:format(&amp;quot;Connection:&nbsp;~p~n&amp;quot;,[Connection]),&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%%&nbsp;Once&nbsp;you&nbsp;have&nbsp;a&nbsp;connection&nbsp;to&nbsp;the&nbsp;server,&nbsp;you&nbsp;can&nbsp;start&nbsp;an&nbsp;AMQP&nbsp;channel&nbsp;gain&nbsp;access&nbsp;to&nbsp;a&nbsp;realm&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;Channel&nbsp;=&nbsp;amqp_connection:open_channel(Connection),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;Access&nbsp;=&nbsp;#&amp;#39;access.request&amp;#39;{realm&nbsp;=&nbsp;Realm,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;exclusive&nbsp;=&nbsp;false,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;passive&nbsp;=&nbsp;true,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;active&nbsp;=&nbsp;true,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;write&nbsp;=&nbsp;true,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;read&nbsp;=&nbsp;true},&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&amp;#39;access.request_ok&amp;#39;{ticket&nbsp;=&nbsp;Ticket}&nbsp;=&nbsp;amqp_channel:call(Channel,&nbsp;Access),&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%%&nbsp;Register&nbsp;a&nbsp;consumer&nbsp;to&nbsp;listen&nbsp;to&nbsp;a&nbsp;queue&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;Q&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;&amp;quot;&amp;gt;&amp;gt;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;X&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;x&amp;quot;&amp;gt;&amp;gt;,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;BindKey&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;a.b.c.*&amp;quot;&amp;gt;&amp;gt;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;QueueDeclare&nbsp;=&nbsp;#&amp;#39;queue.declare&amp;#39;{ticket&nbsp;=&nbsp;Ticket,&nbsp;queue&nbsp;=&nbsp;Q,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;passive&nbsp;=&nbsp;false,&nbsp;durable&nbsp;=&nbsp;false,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;exclusive&nbsp;=&nbsp;false,&nbsp;auto_delete&nbsp;=&nbsp;false,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;nowait&nbsp;=&nbsp;false,&nbsp;arguments&nbsp;=&nbsp;[]},&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&amp;#39;queue.declare_ok&amp;#39;{queue&nbsp;=&nbsp;Q,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;message_count&nbsp;=&nbsp;MessageCount,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;consumer_count&nbsp;=&nbsp;ConsumerCount}&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;=&nbsp;amqp_channel:call(Channel,QueueDeclare),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%ExchangeDeclare&nbsp;=&nbsp;#&amp;#39;exchange.declare&amp;#39;{ticket&nbsp;=&nbsp;Ticket,&nbsp;exchange&nbsp;=&nbsp;X,&nbsp;type&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;topic&amp;quot;&amp;gt;&amp;gt;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;passive&nbsp;=&nbsp;false,&nbsp;durable&nbsp;=&nbsp;false,&nbsp;auto_delete&nbsp;=&nbsp;false,&nbsp;internal&nbsp;=&nbsp;false,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;nowait&nbsp;=&nbsp;false,&nbsp;arguments&nbsp;=&nbsp;[]},&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%#&amp;#39;exchange.declare_ok&amp;#39;{}&nbsp;=&nbsp;amqp_channel:call(Channel,&nbsp;ExchangeDeclare),&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;QueueBind&nbsp;=&nbsp;#&amp;#39;queue.bind&amp;#39;{ticket&nbsp;=&nbsp;Ticket,&nbsp;queue&nbsp;=&nbsp;Q,&nbsp;exchange&nbsp;=&nbsp;X,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;routing_key&nbsp;=&nbsp;BindKey,&nbsp;nowait&nbsp;=&nbsp;false,&nbsp;arguments&nbsp;=&nbsp;[]},&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&amp;#39;queue.bind_ok&amp;#39;{}&nbsp;=&nbsp;amqp_channel:call(Channel,&nbsp;QueueBind),&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%ConsumerTag&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;&amp;quot;&amp;gt;&amp;gt;,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%DeliveryTag&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;&amp;quot;&amp;gt;&amp;gt;,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;BasicConsume&nbsp;=&nbsp;#&amp;#39;basic.consume&amp;#39;{ticket&nbsp;=&nbsp;Ticket,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;queue&nbsp;=&nbsp;Q,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;consumer_tag&nbsp;=&nbsp;&amp;lt;&amp;lt;&amp;quot;&amp;quot;&amp;gt;&amp;gt;,&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;no_local&nbsp;=&nbsp;false,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;no_ack&nbsp;=&nbsp;true,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;exclusive&nbsp;=&nbsp;false,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;nowait&nbsp;=&nbsp;false},&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&amp;#39;basic.consume_ok&amp;#39;{consumer_tag&nbsp;=&nbsp;ConsumerTag}&nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;=&nbsp;amqp_channel:call(Channel,&nbsp;BasicConsume,&nbsp;self()),&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%%&nbsp;If&nbsp;the&nbsp;registration&nbsp;was&nbsp;sucessful,&nbsp;then&nbsp;consumer&nbsp;will&nbsp;be&nbsp;notified&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;receive&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&amp;#39;basic.consume_ok&amp;#39;{consumer_tag&nbsp;=&nbsp;ConsumerTag}&nbsp;-&amp;gt;&nbsp;ok&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;end,&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%%&nbsp;When&nbsp;a&nbsp;message&nbsp;is&nbsp;routed&nbsp;to&nbsp;the&nbsp;queue,&nbsp;it&nbsp;will&nbsp;then&nbsp;be&nbsp;delivered&nbsp;to&nbsp;this&nbsp;consumer&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;receive&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;{#&amp;#39;basic.deliver&amp;#39;{delivery_tag&nbsp;=&nbsp;DeliveryTag},&nbsp;Content}&nbsp;-&amp;gt;&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#content{payload_fragments_rev&nbsp;=&nbsp;[Payload]}&nbsp;=&nbsp;Content,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;io:format(&amp;quot;Message&nbsp;received:&nbsp;~p~n&amp;quot;,&nbsp;[Payload])&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;after&nbsp;2000&nbsp;-&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;exit(did_not_receive_message)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;end,&lt;br&gt;&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;%%&nbsp;After&nbsp;the&nbsp;consumer&nbsp;is&nbsp;finished&nbsp;interacting&nbsp;with&nbsp;the&nbsp;queue,&nbsp;it&nbsp;can&nbsp;deregister&nbsp;itself&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;BasicCancel&nbsp;=&nbsp;#&amp;#39;basic.cancel&amp;#39;{consumer_tag&nbsp;=&nbsp;ConsumerTag,&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;nowait&nbsp;=&nbsp;false},&lt;br&gt;<br>
<br>
&amp;nbsp;&amp;nbsp;&amp;nbsp;&nbsp;#&amp;#39;basic.cancel_ok&amp;#39;{consumer_tag&nbsp;=&nbsp;ConsumerTag}&nbsp;=&nbsp;amqp_channel:call(Channel,BasicCancel).&lt;br&gt;&lt;br&gt;Thank&nbsp;you,&lt;br&gt;Joe&lt;br&gt;<br>

</tt>
