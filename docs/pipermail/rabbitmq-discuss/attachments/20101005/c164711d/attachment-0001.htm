<tt>
&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&nbsp;style=&quot;word-wrap:&nbsp;break-word;&nbsp;-webkit-nbsp-mode:&nbsp;space;&nbsp;-webkit-line-break:&nbsp;after-white-space;&nbsp;&quot;&gt;Darren,&lt;br&gt;&lt;br&gt;That&nbsp;repo&nbsp;is&nbsp;out&nbsp;of&nbsp;date.&nbsp;All&nbsp;work&nbsp;on&nbsp;this&nbsp;bug&nbsp;moved&nbsp;to&amp;nbsp;&lt;a&nbsp;href=&quot;http://hg.rabbitmq.com/&quot;&gt;hg.rabbitmq.com&lt;/a&gt;.&lt;br&gt;&lt;br&gt;In&nbsp;the&nbsp;latest&nbsp;patch&nbsp;all&nbsp;consumers&nbsp;get&nbsp;the&nbsp;new&nbsp;threading&nbsp;behaviour&nbsp;and&nbsp;the&nbsp;JavaDoc&nbsp;is&nbsp;updated&nbsp;to&nbsp;reflect&nbsp;that.&lt;br&gt;&lt;br&gt;I'm&nbsp;pretty&nbsp;concerned&nbsp;about&nbsp;sending&nbsp;callback&nbsp;methods&nbsp;to&nbsp;consumers&nbsp;on&nbsp;different&nbsp;threads.&nbsp;As&nbsp;a&nbsp;bare&nbsp;minimum&nbsp;we&nbsp;have&nbsp;to&nbsp;ensure&nbsp;that&nbsp;handleDelivery&nbsp;is&nbsp;never&nbsp;called&nbsp;out&nbsp;of&nbsp;order.&amp;nbsp;&lt;br&gt;&lt;br&gt;Not&nbsp;just&nbsp;that&nbsp;but&nbsp;I&nbsp;think&nbsp;we&nbsp;need&nbsp;to&nbsp;ensure&nbsp;that&nbsp;exit&nbsp;from&nbsp;handleDelivery&nbsp;happens-before&nbsp;each&nbsp;subsequent&nbsp;entry&nbsp;into&nbsp;handleDelivery&nbsp;on&nbsp;a&nbsp;given&nbsp;consumer.&amp;nbsp;&lt;br&gt;&lt;br&gt;This&nbsp;prevents&nbsp;us&nbsp;from&nbsp;using&nbsp;a&nbsp;rudimentary&nbsp;producer/consumer&nbsp;model.&nbsp;Such&nbsp;a&nbsp;model&nbsp;would&nbsp;allow&nbsp;for&nbsp;multiple&nbsp;hD&nbsp;calls&nbsp;for&nbsp;a&nbsp;given&nbsp;consumer&nbsp;to&nbsp;run&nbsp;concurrently.&lt;br&gt;&lt;br&gt;Beyond&nbsp;just&nbsp;a&nbsp;single&nbsp;dispatch,&nbsp;I'm&nbsp;happy&nbsp;with&nbsp;a&nbsp;model&nbsp;that&nbsp;maintains&nbsp;a&nbsp;pool&nbsp;of&nbsp;threads&nbsp;but&nbsp;assigns&nbsp;consumers&nbsp;to&nbsp;one&nbsp;thread&nbsp;or&nbsp;another.&lt;br&gt;&lt;br&gt;I'm&nbsp;concerned&nbsp;about&nbsp;the&nbsp;impact&nbsp;on&nbsp;user&nbsp;code&nbsp;of&nbsp;allowing&nbsp;dispatches&nbsp;to&nbsp;a&nbsp;consumer&nbsp;in&nbsp;multiple&nbsp;threads.&lt;br&gt;&lt;br&gt;Rob&lt;br&gt;&lt;div&gt;&lt;div&gt;On&nbsp;2&nbsp;Oct&nbsp;2010,&nbsp;at&nbsp;21:55,&nbsp;darr&nbsp;wrote:&lt;/div&gt;&lt;br&nbsp;class=&quot;Apple-interchange-newline&quot;&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;a&nbsp;href=&quot;http://bitbucket.org/robharrop/rabbitmq-java-client/changeset/ea463bbd4871&quot;&gt;http://bitbucket.org/robharrop/rabbitmq-java-client/changeset/ea463bbd4871&lt;/a&gt;&lt;br&gt;That's&nbsp;the&nbsp;commit&nbsp;I'm&nbsp;referencing.&nbsp;&amp;nbsp;I&nbsp;hope&nbsp;it's&nbsp;the&nbsp;right&nbsp;one.&lt;br&gt;&lt;br&gt;It&nbsp;looks&nbsp;like&nbsp;you're&nbsp;breaking&nbsp;the&nbsp;contract&nbsp;of&nbsp;Consumer&nbsp;a&nbsp;little&nbsp;bit&nbsp;when&nbsp;you&lt;br&gt;move&nbsp;this&nbsp;off&nbsp;of&nbsp;the&nbsp;Connection's&nbsp;thread&nbsp;(since&nbsp;that's&nbsp;what's&nbsp;documented).&nbsp;&lt;br&gt;This&nbsp;is&nbsp;a&nbsp;Good&nbsp;Thing,&nbsp;because,&nbsp;as&nbsp;you&nbsp;note,&nbsp;implementations&nbsp;of&nbsp;consumer&nbsp;can&lt;br&gt;now&nbsp;call&nbsp;blocking&nbsp;methods&nbsp;on&nbsp;Connection&nbsp;and&nbsp;Channel.&nbsp;&amp;nbsp;However,&nbsp;this&nbsp;has&nbsp;a&lt;br&gt;down&nbsp;side&nbsp;in&nbsp;that&nbsp;only&nbsp;some&nbsp;consumers&nbsp;are&nbsp;permitted&nbsp;to&nbsp;call&nbsp;blocking&nbsp;methods&lt;br&gt;--&nbsp;those&nbsp;that&nbsp;use&nbsp;DispatchingConsumer.&nbsp;&amp;nbsp;Other&nbsp;consumers&nbsp;are&nbsp;guaranteed&nbsp;to&lt;br&gt;have&nbsp;their&nbsp;methods&nbsp;called&nbsp;from&nbsp;the&nbsp;Connection&nbsp;thread.&lt;br&gt;&lt;br&gt;So&nbsp;this&nbsp;is&nbsp;a&nbsp;bit&nbsp;of&nbsp;extra&nbsp;complexity&nbsp;for&nbsp;implementations&nbsp;of&nbsp;Consumer&nbsp;to&lt;br&gt;consider.&nbsp;&amp;nbsp;Given&nbsp;that&nbsp;implementors&nbsp;of&nbsp;Consumer&nbsp;already&nbsp;need&nbsp;to&nbsp;think&nbsp;of&lt;br&gt;these&nbsp;things,&nbsp;you&nbsp;might&nbsp;re-evaluate&nbsp;the&nbsp;idea&nbsp;that&nbsp;consumers&nbsp;require&nbsp;all&nbsp;of&lt;br&gt;their&nbsp;methods&nbsp;to&nbsp;be&nbsp;called&nbsp;from&nbsp;a&nbsp;single&nbsp;thread.&nbsp;&amp;nbsp;The&nbsp;mechanics&nbsp;of&nbsp;making&nbsp;a&lt;br&gt;consumer&nbsp;thread-safe&nbsp;seem&nbsp;very&nbsp;manageable.&nbsp;&amp;nbsp;There's&nbsp;not&nbsp;a&nbsp;lot&nbsp;of&nbsp;interaction&lt;br&gt;between&nbsp;the&nbsp;methods&nbsp;and&nbsp;very&nbsp;little&nbsp;state.&lt;br&gt;&lt;br&gt;However,&nbsp;if&nbsp;you&nbsp;share&nbsp;my&nbsp;concern&nbsp;about&nbsp;breaking&nbsp;the&nbsp;contract&nbsp;of&nbsp;Consumer,&lt;br&gt;you&nbsp;could&nbsp;introduce&nbsp;another&nbsp;interface&nbsp;(ConcurrentConsumer)&nbsp;which&nbsp;specifies&lt;br&gt;exactly&nbsp;the&nbsp;requirements&nbsp;of&nbsp;its&nbsp;implementations&nbsp;and&nbsp;modify&lt;br&gt;DispachingConsumer&nbsp;to&nbsp;accept&nbsp;only&nbsp;ConcurrentConsumer.&lt;br&gt;&lt;br&gt;As&nbsp;for&nbsp;the&nbsp;possibility&nbsp;of&nbsp;ConnectionFactory.setDispatchThreadCount(int),&nbsp;I&lt;br&gt;think&nbsp;if&nbsp;I&nbsp;set&nbsp;that&nbsp;to&nbsp;some&nbsp;value&nbsp;greater&nbsp;than&nbsp;one,&nbsp;and&nbsp;had&nbsp;only&nbsp;a&nbsp;single&lt;br&gt;consumer,&nbsp;I&nbsp;would&nbsp;expect&nbsp;handleDelivery&nbsp;to&nbsp;be&nbsp;called&nbsp;from&nbsp;multiple&nbsp;threads.&nbsp;&lt;br&gt;I&nbsp;think&nbsp;we&nbsp;might&nbsp;be&nbsp;safer&nbsp;making&nbsp;DispatchingConsumer&nbsp;the&nbsp;sole&nbsp;party&lt;br&gt;responsible&nbsp;for&nbsp;these&nbsp;things&nbsp;and&nbsp;it&nbsp;can&nbsp;accept&nbsp;an&nbsp;Executor&nbsp;on&nbsp;construction.&lt;br&gt;Then&nbsp;the&nbsp;user&nbsp;can&nbsp;decide&nbsp;if&nbsp;all&nbsp;consumers&nbsp;can&nbsp;safely&nbsp;share&nbsp;the&nbsp;same&nbsp;set&nbsp;of&lt;br&gt;threads,&nbsp;or&nbsp;if&nbsp;they&nbsp;need&nbsp;some&nbsp;other&nbsp;behavior.&lt;br&gt;&lt;br&gt;What&nbsp;do&nbsp;you&nbsp;think?&lt;br&gt;&lt;br&gt;Thanks,&lt;br&gt;Darren.&lt;br&gt;&lt;br&gt;&lt;br&gt;Rob&nbsp;Harrop-5&nbsp;wrote:&lt;br&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;Recently&nbsp;I&nbsp;pushed&nbsp;branch&nbsp;bug18384&nbsp;that&nbsp;changes&nbsp;the&nbsp;way&nbsp;callbacks&nbsp;are&nbsp;sent&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;to&nbsp;Consumer&nbsp;implementations.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;Following&nbsp;this&nbsp;change,&nbsp;the&nbsp;Connection&nbsp;maintains&nbsp;a&nbsp;dispatch&nbsp;thread&nbsp;that&nbsp;is&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;used&nbsp;to&nbsp;send&nbsp;callbacks&nbsp;to&nbsp;the&nbsp;Consumers.&nbsp;This&nbsp;frees&nbsp;Consumers&nbsp;call&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;blocking&nbsp;methods&nbsp;on&nbsp;the&nbsp;Connection&nbsp;and&nbsp;Channel.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;A&nbsp;question&nbsp;came&nbsp;up&nbsp;on&nbsp;Twitter&nbsp;about&nbsp;making&nbsp;this&nbsp;configurable,&nbsp;allowing&nbsp;for&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;a&nbsp;custom&nbsp;Executor&nbsp;to&nbsp;be&nbsp;plugged&nbsp;into&nbsp;the&nbsp;ConnectionFactory.&nbsp;I&nbsp;wanted&nbsp;to&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;outline&nbsp;why&nbsp;this&nbsp;is&nbsp;complicated,&nbsp;discuss&nbsp;a&nbsp;possible&nbsp;implementation&nbsp;and&nbsp;see&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;if&nbsp;there&nbsp;is&nbsp;much&nbsp;interest.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;First&nbsp;off,&nbsp;we&nbsp;should&nbsp;establish&nbsp;that&nbsp;each&nbsp;Consumer&nbsp;should&nbsp;only&nbsp;receive&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;callbacks&nbsp;in&nbsp;a&nbsp;single&nbsp;thread.&nbsp;If&nbsp;this&nbsp;is&nbsp;not&nbsp;the&nbsp;case,&nbsp;then&nbsp;chaos&nbsp;will&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;ensue&nbsp;and&nbsp;Consumers&nbsp;will&nbsp;need&nbsp;to&nbsp;worry&nbsp;about&nbsp;their&nbsp;own&nbsp;thread&nbsp;safety&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;beyond&nbsp;that&nbsp;of&nbsp;initialisation&nbsp;safety.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;With&nbsp;only&nbsp;a&nbsp;single&nbsp;dispatch&nbsp;thread&nbsp;for&nbsp;all&nbsp;Consumers,&nbsp;this&nbsp;Consumer-Thread&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;pairing&nbsp;is&nbsp;easy&nbsp;honoured.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;When&nbsp;we&nbsp;introduce&nbsp;multiple&nbsp;threads,&nbsp;we&nbsp;have&nbsp;to&nbsp;ensure&nbsp;that&nbsp;each&nbsp;Consumer&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;is&nbsp;paired&nbsp;with&nbsp;only&nbsp;one&nbsp;thread.&nbsp;When&nbsp;using&nbsp;the&nbsp;Executor&nbsp;abstraction,&nbsp;this&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;prevents&nbsp;each&nbsp;callback&nbsp;dispatch&nbsp;from&nbsp;being&nbsp;wrapped&nbsp;up&nbsp;in&nbsp;a&nbsp;Runnable&nbsp;and&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;sent&nbsp;to&nbsp;Executor,&nbsp;because&nbsp;you&nbsp;cannot&nbsp;guarantee&nbsp;which&nbsp;thread&nbsp;will&nbsp;be&nbsp;used.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;To&nbsp;get&nbsp;around&nbsp;this,&nbsp;the&nbsp;Executor&nbsp;can&nbsp;be&nbsp;set&nbsp;to&nbsp;run&nbsp;'n'&nbsp;long-running&nbsp;tasks&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;(n&nbsp;being&nbsp;the&nbsp;number&nbsp;of&nbsp;threads&nbsp;in&nbsp;the&nbsp;Executor).&nbsp;Each&nbsp;of&nbsp;these&nbsp;tasks&nbsp;pulls&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;dispatch&nbsp;instructions&nbsp;off&nbsp;a&nbsp;queue&nbsp;and&nbsp;executes&nbsp;them.&nbsp;Each&nbsp;Consumer&nbsp;is&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;paired&nbsp;with&nbsp;one&nbsp;dispatch&nbsp;instruction&nbsp;queue,&nbsp;probably&nbsp;assigned&nbsp;on&nbsp;a&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;round-robin&nbsp;basis.&nbsp;This&nbsp;is&nbsp;not&nbsp;too&nbsp;complicated&nbsp;and&nbsp;will&nbsp;provide&nbsp;simple&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;balancing&nbsp;of&nbsp;dispatch&nbsp;load&nbsp;across&nbsp;the&nbsp;threads&nbsp;in&nbsp;the&nbsp;Executor.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;Now,&nbsp;there&nbsp;are&nbsp;still&nbsp;some&nbsp;problems:&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;1.&nbsp;The&nbsp;number&nbsp;of&nbsp;threads&nbsp;in&nbsp;an&nbsp;Executor&nbsp;is&nbsp;not&nbsp;necessarily&nbsp;fixed&nbsp;(as&nbsp;with&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;ThreadPoolExecutor).&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;2.&nbsp;There&nbsp;is&nbsp;no&nbsp;way,&nbsp;via&nbsp;Executor&nbsp;or&nbsp;ExecutorService&nbsp;to&nbsp;find&nbsp;out&nbsp;how&nbsp;many&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;threads&nbsp;there&nbsp;are.&nbsp;Thus,&nbsp;we&nbsp;cannot&nbsp;know&nbsp;how&nbsp;many&nbsp;dispatch&nbsp;instruction&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;queues&nbsp;to&nbsp;create.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;However,&nbsp;we&nbsp;can&nbsp;certainly&nbsp;introduce&nbsp;a&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;ConnectionFactory.setDispatchThreadCount(int).&nbsp;Behind&nbsp;the&nbsp;scenes&nbsp;this&nbsp;will&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;create&nbsp;an&nbsp;Executors.newFixedThreadPool()&nbsp;and&nbsp;the&nbsp;correct&nbsp;number&nbsp;of&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;dispatch&nbsp;queues&nbsp;and&nbsp;dispatch&nbsp;tasks.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;I'm&nbsp;interested&nbsp;in&nbsp;hearing&nbsp;if&nbsp;anyone&nbsp;thinks&nbsp;I'm&nbsp;overlooking&nbsp;some&nbsp;simpler&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;way&nbsp;of&nbsp;solving&nbsp;this,&nbsp;and&nbsp;indeed&nbsp;if&nbsp;this&nbsp;is&nbsp;even&nbsp;worth&nbsp;solving.&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;Regards,&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;Rob&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;_______________________________________________&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;rabbitmq-discuss&nbsp;mailing&nbsp;list&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;rabbitmq-discuss@lists.rabbitmq.com&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote&nbsp;type=&quot;cite&quot;&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;--&nbsp;&lt;br&gt;View&nbsp;this&nbsp;message&nbsp;in&nbsp;context:&nbsp;http://old.nabble.com/Multi-threaded-Dispatch-in-Java-Client-tp29860178p29868134.html&lt;br&gt;Sent&nbsp;from&nbsp;the&nbsp;RabbitMQ&nbsp;mailing&nbsp;list&nbsp;archive&nbsp;at&nbsp;Nabble.com.&lt;br&gt;&lt;br&gt;_______________________________________________&lt;br&gt;rabbitmq-discuss&nbsp;mailing&nbsp;list&lt;br&gt;rabbitmq-discuss@lists.rabbitmq.com&lt;br&gt;https://lists.rabbitmq.com/cgi-bin/mailman/listinfo/rabbitmq-discuss&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/body&gt;&lt;/html&gt;
</tt>
