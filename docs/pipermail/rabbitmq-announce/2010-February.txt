From matthew at lshift.net  Tue Feb  2 15:04:18 2010
From: matthew at lshift.net (Matthew Sackman)
Date: Tue, 2 Feb 2010 15:04:18 +0000
Subject: [rabbitmq-announce] Important: Windows users of RabbitMQ v1.7.1
Message-ID: <20100202150418.GB8318@mrnibble.lshift.net>

We would strongly recommend you upgrade the version of Erlang to the
latest: R13B03. The Windows bundle of RabbitMQ includes Erlang version
R12B-5, which contains a bug resulting in incorrect amounts of memory
being reported to Rabbit. This can in some cases, cause Rabbit to
believe there is negative amounts of RAM installed, and thus refuse to
accept any messages at all.

Erlang R13B03 for Windows can be downloaded from
http://www.erlang.org/download/otp_win32_R13B03.exe

After installing, you need to update the environment variable
ERLANG_HOME. To do this:

Click start; right-click on Computer; click Properties; click "Advanced
System Settings"; click "Environment Variables".

In the bottom half of the window, you should have list containing an
entry for ERLANG_HOME. This should be updated so that the final
component is erl5.7.4 (which corresponds to Erlang R13B03). Verify that
the path here is the path where you installed Erlang R13B03.

However, whilst Erlang R13B03 is able to correctly detect the amount of
RAM installed in Windows (in fact, the fix arrived in Erlang R13B), it
does not take into account the fact that Windows commonly does not allow
32-bit applications (which includes Erlang) to use more than 2GB of RAM.

Thus you may still see Rabbit crashing with "unable to allocate memory"
type errors. Thus for Windows users who have more than 2GB RAM
installed, after upgrading to Erlang R13B03, we would recommend you do
the following:

1) calculate the following: X = 820 / total-RAM-in-MB. Eg if you have
4GB installed then X = 820 / 4096 = 0.2. It doesn't have to be super
accurate, just close enough.

2) open a cmd shell:
> cd %APPDATA%\RabbitMQ
> notepad rabbitmq.config

Note the cd may fail if the directory doesn't exist. In that case,
> cd %APPDATA%
> mkdir RabbitMQ
> cd RabbitMQ
> notepad rabbitmq.config

3) into notepad, type:
[{rabbit, [{vm_memory_high_watermark, X}]}].
where X is replaced by the value you calculated in step 1. This assumes
that you don't already have a configuration file for rabbitmq. If you
do, then you need to add the {vm_memory_high_watermark, X} or adjust an
existing entry for vm_memory_high_watermark, again, where X is replaced
by the value you calculated in step 1.

4) save the file in notepad.

5) Restart RabbitMQ.

6) Check rabbit's logs. The location of these are displayed when
rabbit starts up. They should contain an entry like:

=INFO REPORT====30-Feb-2010::15:43:60 ===
Memory limit set to 820MB.

If the limit is way off 820MB then you've either mis-calculated X in
step 1, or you've edited the wrong file.


Notes
-----

a) This issue only affects Rabbit running under Windows
b) It only affects RabbitMQ v1.7.1
c) A fix for this bug will be included in the next release of RabbitMQ
which we expect to release soon.
d) As ever, please let us know of any issues you come across with
Rabbit.

Matthew


From matthew at lshift.net  Tue Feb 16 12:11:04 2010
From: matthew at lshift.net (Matthew Sackman)
Date: Tue, 16 Feb 2010 12:11:04 +0000
Subject: [rabbitmq-announce] RabbitMQ 1.7.2 release
Message-ID: <20100216121104.GC23769@mrnibble.lshift.net>

The RabbitMQ team is pleased to announce the release of RabbitMQ 1.7.2.

This release fixes yet more bugs specific to Windows in regards to
memory monitoring, and works around various bat inadequacies.
Other fixes include enforcing codec size limits, and handling some
corner cases of basic.qos.

The rabbitmqctl tool has been extended with several new commands.
There have also been enhancements to the plugin system, and network
performance over high-latency links. The exception reporting in the
Java client has been improved and there are several bug fixes and
enhancements to the AMQP Tracer tool.

For details see the attached release notes.

Binary and source distributions of the new release can be found in the
usual place, at http://www.rabbitmq.com/download.html

We recommend that all users of earlier versions of RabbitMQ upgrade to
this latest release.

As always, we welcome any questions, bug reports, and other feedback
on this release, as well as general suggestions for features and
enhancements in future releases. Mail us via the RabbitMQ discussion
list at rabbitmq-discuss at lists.rabbitmq.com, or directly at
info at rabbitmq.com.


Regards,

The RabbitMQ Team



Release: RabbitMQ 1.7.2

Release Highlights
==================

server
------
bug fixes
- fix a number of problems with memory monitoring under Windows,
  including compatibility issues with versions of Erlang/OTP older
  than R13, and 64-bit versions of Windows. See the updated
  documentation at http://www.rabbitmq.com/extensions.html#memsup
- correct various path escaping bugs under Windows that could result
  in RabbitMQ failing to start
- make 'rabbitmq-multi start_all <n>' work again for n>1
- issuing a basic.qos when there are outstanding acks can no longer
  result in a higher limit than requested
- enforce codec size limits, thus preventing the server from sending
  invalid AMQP frames

enhancements
- add rabbitmqctl list_channels and list_consumers commands, and add
  exclusivity information to list_queues. Also introduce a
  close_connection command to allow an administrator to selectively
  terminate client connections. See the updated admin guide at
  http://www.rabbitmq.com/admin-guide.html for details on these new
  features.
- remove the explicit setting of TCP buffer sizes in the server, thus
  allowing auto-(re)sizing to occur. This generally results in
  substantially improved throughput over high-latency links, and makes
  manual fine-tuning easier.
- introduce declarative boot sequencing, which allows plugins to be
  started at arbitrary chosen points during the sequence

Java client
-----------
bug fixes
- ensure that QueuingConsumer throws an ShutdownSignalException in
  *all* consuming threads, not just one
- fix race conditions in 'tracer' tool that could cause it to fail

enhancements
- make exception stack traces more meaningful
- allow overriding of several RpcClient methods, for easier extension
  and re-use
- improve performance of channel creation for high channel counts
- improve performance of 'tracer' tool
- add option to 'tracer' tool to suppress content bodies, which is
  useful for tracing connections carrying a high data volume
- better exception reporting in 'tracer' tool

.net client
-----------
enhancements 
- improve performance of channel creation for high channel counts

building & packaging
--------------------
bug fixes
- under macports, ensure env var settings are passed to the various
  startup and control scripts


Upgrading
=========
The database schema has not changed since the 1.6.0 release, so user
accounts, durable exchanges and queues, and persistent messages will
all be retained during the upgrade.

If, however, you are upgrading from a release prior to 1.6.0, when the
RabbitMQ server detects the presence of an old database, it moves it
to a backup location, creates a fresh, empty database, and logs a
warning. If your RabbitMQ installation contains important data then we
recommend you contact support at rabbitmq.com for assistance with the
upgrade.



